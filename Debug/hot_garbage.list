
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c8  080089c8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d0  080089d0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080089d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  200001f8  08008bd0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e84  08008bd0  00021e84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aaa6  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c19  00000000  00000000  0003acce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0003e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025923  00000000  00000000  00040b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ec0  00000000  00000000  00066493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7413  00000000  00000000  0007c353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153766  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea0  00000000  00000000  001537bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080087e8 	.word	0x080087e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080087e8 	.word	0x080087e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b0aa      	sub	sp, #168	; 0xa8
 800056c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056e:	f000 fead 	bl	80012cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f8d7 	bl	8000724 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f000 fa77 	bl	8000a68 <MX_GPIO_Init>
	MX_ADC2_Init();
 800057a:	f000 f93d 	bl	80007f8 <MX_ADC2_Init>
	MX_ADC3_Init();
 800057e:	f000 f98d 	bl	800089c <MX_ADC3_Init>
	MX_CAN2_Init();
 8000582:	f000 f9dd 	bl	8000940 <MX_CAN2_Init>
	MX_SPI1_Init();
 8000586:	f000 fa0f 	bl	80009a8 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 800058a:	f000 fa43 	bl	8000a14 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 800058e:	f006 ff1f 	bl	80073d0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	const uint8_t spStat[3] =
 8000592:	4a5b      	ldr	r2, [pc, #364]	; (8000700 <main+0x198>)
 8000594:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	4611      	mov	r1, r2
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	3302      	adds	r3, #2
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	701a      	strb	r2, [r3, #0]
	{ 'S', 'P', '\n' };
	const uint8_t onStat[3] =
 80005a4:	4a57      	ldr	r2, [pc, #348]	; (8000704 <main+0x19c>)
 80005a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	3302      	adds	r3, #2
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	701a      	strb	r2, [r3, #0]
	{ 'M', '3', '\n' };
	const uint8_t offStat[3] =
 80005b6:	4a54      	ldr	r2, [pc, #336]	; (8000708 <main+0x1a0>)
 80005b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	8019      	strh	r1, [r3, #0]
 80005c2:	3302      	adds	r3, #2
 80005c4:	0c12      	lsrs	r2, r2, #16
 80005c6:	701a      	strb	r2, [r3, #0]
	{ 'M', '5', '\n' };

	char initTx[] = "11111111111111111111"; //twenty 1s
 80005c8:	4b50      	ldr	r3, [pc, #320]	; (800070c <main+0x1a4>)
 80005ca:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d8:	6020      	str	r0, [r4, #0]
 80005da:	3404      	adds	r4, #4
 80005dc:	7021      	strb	r1, [r4, #0]
	uint8_t *initTxPtr = &initTx;
 80005de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	uint8_t CDCtx[8] =
 80005e6:	4a4a      	ldr	r2, [pc, #296]	; (8000710 <main+0x1a8>)
 80005e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t CDCrx[100];

	CDCrx[0] == 'a';

	char *CDCrxPtr1 = &CDCrx[2];
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	3302      	adds	r3, #2
 80005fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	uint32_t x = -99;
 80005fe:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000602:	607b      	str	r3, [r7, #4]
	int rpm = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <main+0x1ac>)
 8000610:	f001 fcfe 	bl	8002010 <HAL_GPIO_WritePin>
	while (CDCrx[0] != 'i')
 8000614:	e009      	b.n	800062a <main+0xc2>
	{
		CDC_Receive_FS(CDCrx, &x);
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f006 ff80 	bl	8007524 <CDC_Receive_FS>
		HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fec3 	bl	80013b0 <HAL_Delay>
	while (CDCrx[0] != 'i')
 800062a:	7a3b      	ldrb	r3, [r7, #8]
 800062c:	2b69      	cmp	r3, #105	; 0x69
 800062e:	d1f2      	bne.n	8000616 <main+0xae>
	}
	CDC_Transmit_FS(initTxPtr, 18);
 8000630:	2112      	movs	r1, #18
 8000632:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000636:	f006 ff89 	bl	800754c <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Receive_FS(CDCrx, &x);
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f006 ff6e 	bl	8007524 <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	4831      	ldr	r0, [pc, #196]	; (8000714 <main+0x1ac>)
 800064e:	f001 fcdf 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000652:	20c8      	movs	r0, #200	; 0xc8
 8000654:	f000 feac 	bl	80013b0 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	482d      	ldr	r0, [pc, #180]	; (8000714 <main+0x1ac>)
 800065e:	f001 fcd7 	bl	8002010 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000662:	20c8      	movs	r0, #200	; 0xc8
 8000664:	f000 fea4 	bl	80013b0 <HAL_Delay>

		if (CDCrx[0] == 'M')
 8000668:	7a3b      	ldrb	r3, [r7, #8]
 800066a:	2b4d      	cmp	r3, #77	; 0x4d
 800066c:	d110      	bne.n	8000690 <main+0x128>
		{
			if (CDCrx[1] == '3')
 800066e:	7a7b      	ldrb	r3, [r7, #9]
 8000670:	2b33      	cmp	r3, #51	; 0x33
 8000672:	d106      	bne.n	8000682 <main+0x11a>
			{

				spindleFWD(&huart3);
 8000674:	4828      	ldr	r0, [pc, #160]	; (8000718 <main+0x1b0>)
 8000676:	f000 fb43 	bl	8000d00 <spindleFWD>
//				while (!spindleFWD(&huart3))
//				{
//					HAL_Delay(10);
//				}

				HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fe98 	bl	80013b0 <HAL_Delay>
 8000680:	e03a      	b.n	80006f8 <main+0x190>

				//send message from VFD?
				//CDC_Transmit_FS(getCheck(), 8);
			}
			else if (CDCrx[1] == '5')
 8000682:	7a7b      	ldrb	r3, [r7, #9]
 8000684:	2b35      	cmp	r3, #53	; 0x35
 8000686:	d137      	bne.n	80006f8 <main+0x190>
			{
				spindleOff(&huart3);
 8000688:	4823      	ldr	r0, [pc, #140]	; (8000718 <main+0x1b0>)
 800068a:	f000 fb65 	bl	8000d58 <spindleOff>
 800068e:	e033      	b.n	80006f8 <main+0x190>
				//send message from VFD?
				//CDC_Transmit_FS(getCheck(), 8);
			}

		}
		else if (CDCrx[0] == 'S')
 8000690:	7a3b      	ldrb	r3, [r7, #8]
 8000692:	2b53      	cmp	r3, #83	; 0x53
 8000694:	d116      	bne.n	80006c4 <main+0x15c>
		{
			HAL_Delay(100);
 8000696:	2064      	movs	r0, #100	; 0x64
 8000698:	f000 fe8a 	bl	80013b0 <HAL_Delay>
			CDCrx[7] = NULL;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
			//rounddown ok
			rpm = atoi(CDCrxPtr1) / 3;
 80006a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80006a4:	f007 fbae 	bl	8007e04 <atoi>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <main+0x1b4>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	17db      	asrs	r3, r3, #31
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			setFreq(rpm, &huart3);
 80006b8:	4917      	ldr	r1, [pc, #92]	; (8000718 <main+0x1b0>)
 80006ba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80006be:	f000 fb77 	bl	8000db0 <setFreq>
 80006c2:	e019      	b.n	80006f8 <main+0x190>
		}
		else if (CDCrx[0] == 'C')
 80006c4:	7a3b      	ldrb	r3, [r7, #8]
 80006c6:	2b43      	cmp	r3, #67	; 0x43
 80006c8:	d016      	beq.n	80006f8 <main+0x190>
		{
			//int spindleCurrent = readCurrent10X(&huart3);

		}
		else if (CDCrx[0] == 'R')
 80006ca:	7a3b      	ldrb	r3, [r7, #8]
 80006cc:	2b52      	cmp	r3, #82	; 0x52
 80006ce:	d113      	bne.n	80006f8 <main+0x190>
		{
			//int16_t spindleRPM = readRPM(&huart3);

			uint16_t spindleRPM = readRPM(&huart3);
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <main+0x1b0>)
 80006d2:	f000 fb05 	bl	8000ce0 <readRPM>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			sprintf(CDCtx,"%05d",spindleRPM);
 80006dc:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80006e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006e4:	490e      	ldr	r1, [pc, #56]	; (8000720 <main+0x1b8>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fbc2 	bl	8007e70 <siprintf>

			CDC_Transmit_FS(CDCtx, 5);
 80006ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 ff2a 	bl	800754c <CDC_Transmit_FS>
		else
		{

		}

		CDCrx[0] = 'a';
 80006f8:	2361      	movs	r3, #97	; 0x61
 80006fa:	723b      	strb	r3, [r7, #8]
		CDC_Receive_FS(CDCrx, &x);
 80006fc:	e79d      	b.n	800063a <main+0xd2>
 80006fe:	bf00      	nop
 8000700:	08008808 	.word	0x08008808
 8000704:	0800880c 	.word	0x0800880c
 8000708:	08008810 	.word	0x08008810
 800070c:	08008814 	.word	0x08008814
 8000710:	0800882c 	.word	0x0800882c
 8000714:	40020800 	.word	0x40020800
 8000718:	20000444 	.word	0x20000444
 800071c:	55555556 	.word	0x55555556
 8000720:	08008800 	.word	0x08008800

08000724 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 fb94 	bl	8007e60 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <SystemClock_Config+0xcc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <SystemClock_Config+0xd0>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000794:	2308      	movs	r3, #8
 8000796:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000798:	23a8      	movs	r3, #168	; 0xa8
 800079a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a0:	2307      	movs	r3, #7
 80007a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0320 	add.w	r3, r7, #32
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fdcd 	bl	8003348 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007b4:	f000 f9ee 	bl	8000b94 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f82e 	bl	8003838 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007e2:	f000 f9d7 	bl	8000b94 <Error_Handler>
	}
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	; 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC2_Init+0x98>)
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <MX_ADC2_Init+0x9c>)
 800080e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_ADC2_Init+0x98>)
 8000812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000816:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_ADC2_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_ADC2_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_ADC2_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC2_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_ADC2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_ADC2_Init+0x98>)
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_ADC2_Init+0xa0>)
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_ADC2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_ADC2_Init+0x98>)
 8000846:	2201      	movs	r2, #1
 8000848:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_ADC2_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_ADC2_Init+0x98>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_ADC2_Init+0x98>)
 800085a:	f000 fdcd 	bl	80013f8 <HAL_ADC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8000864:	f000 f996 	bl	8000b94 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000868:	2301      	movs	r3, #1
 800086a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC2_Init+0x98>)
 800087a:	f000 fe01 	bl	8001480 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 8000884:	f000 f986 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000488 	.word	0x20000488
 8000894:	40012100 	.word	0x40012100
 8000898:	0f000001 	.word	0x0f000001

0800089c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_ADC3_Init+0x98>)
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <MX_ADC3_Init+0x9c>)
 80008b2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ADC3_Init+0x98>)
 80008b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ba:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ADC3_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ADC3_Init+0x98>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ADC3_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_ADC3_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ADC3_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ADC3_Init+0x98>)
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_ADC3_Init+0xa0>)
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_ADC3_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ADC3_Init+0x98>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ADC3_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ADC3_Init+0x98>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_ADC3_Init+0x98>)
 80008fe:	f000 fd7b 	bl	80013f8 <HAL_ADC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8000908:	f000 f944 	bl	8000b94 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800090c:	2303      	movs	r3, #3
 800090e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_ADC3_Init+0x98>)
 800091e:	f000 fdaf 	bl	8001480 <HAL_ADC_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8000928:	f000 f934 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200004f8 	.word	0x200004f8
 8000938:	40012200 	.word	0x40012200
 800093c:	0f000001 	.word	0x0f000001

08000940 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <MX_CAN2_Init+0x64>)
 8000948:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_CAN2_Init+0x60>)
 800094c:	2210      	movs	r2, #16
 800094e:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_CAN2_Init+0x60>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_CAN2_Init+0x60>)
 800096a:	2200      	movs	r2, #0
 800096c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000970:	2200      	movs	r2, #0
 8000972:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000976:	2200      	movs	r2, #0
 8000978:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_CAN2_Init+0x60>)
 800097c:	2200      	movs	r2, #0
 800097e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000982:	2200      	movs	r2, #0
 8000984:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_CAN2_Init+0x60>)
 8000988:	2200      	movs	r2, #0
 800098a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_CAN2_Init+0x60>)
 800098e:	f000 ff95 	bl	80018bc <HAL_CAN_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8000998:	f000 f8fc 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200004d0 	.word	0x200004d0
 80009a4:	40006800 	.word	0x40006800

080009a8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <MX_SPI1_Init+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009d8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_SPI1_Init+0x64>)
 80009fa:	f003 f917 	bl	8003c2c <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000a04:	f000 f8c6 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000540 	.word	0x20000540
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END   USART3_Init 1 */

	huart3.Instance = USART3;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_USART3_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a24:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	f003 f977 	bl	8003d3e <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000a56:	f000 f89d 	bl	8000b94 <Error_Handler>

	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END   USART3_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000444 	.word	0x20000444
 8000a64:	40004800 	.word	0x40004800

08000a68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b40      	ldr	r3, [pc, #256]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a3f      	ldr	r2, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_GPIO_Init+0x11c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	481e      	ldr	r0, [pc, #120]	; (8000b88 <MX_GPIO_Init+0x120>)
 8000b10:	f001 fa7e 	bl	8002010 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2102      	movs	r1, #2
 8000b18:	481c      	ldr	r0, [pc, #112]	; (8000b8c <MX_GPIO_Init+0x124>)
 8000b1a:	f001 fa79 	bl	8002010 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000b1e:	2200      	movs	r2, #0
 8000b20:	211f      	movs	r1, #31
 8000b22:	481b      	ldr	r0, [pc, #108]	; (8000b90 <MX_GPIO_Init+0x128>)
 8000b24:	f001 fa74 	bl	8002010 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <MX_GPIO_Init+0x120>)
 8000b40:	f001 f8ca 	bl	8001cd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_GPIO_Init+0x124>)
 8000b5c:	f001 f8bc 	bl	8001cd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000b60:	231f      	movs	r3, #31
 8000b62:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x128>)
 8000b78:	f001 f8ae 	bl	8001cd8 <HAL_GPIO_Init>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <sendData8>:

uint8_t rx485[] =
{ 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A' }; //12 bytes

void sendData8(UART_HandleTypeDef *huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2102      	movs	r1, #2
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <sendData8+0x3c>)
 8000bae:	f001 fa2f 	bl	8002010 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f000 fbfc 	bl	80013b0 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000bb8:	230a      	movs	r3, #10
 8000bba:	2208      	movs	r2, #8
 8000bbc:	4908      	ldr	r1, [pc, #32]	; (8000be0 <sendData8+0x40>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f003 f90a 	bl	8003dd8 <HAL_UART_Transmit>
	HAL_Delay(5);
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f000 fbf3 	bl	80013b0 <HAL_Delay>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <sendData8+0x3c>)
 8000bd0:	f001 fa1e 	bl	8002010 <HAL_GPIO_WritePin>

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020400 	.word	0x40020400
 8000be0:	20000000 	.word	0x20000000

08000be4 <appendCRC8>:
{
	//TODO
}

void appendCRC8()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000bea:	2106      	movs	r1, #6
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <appendCRC8+0x38>)
 8000bee:	f000 f90d 	bl	8000e0c <crc_chk_value>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000bf8:	1cbb      	adds	r3, r7, #2
 8000bfa:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <appendCRC8+0x38>)
 8000c02:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <appendCRC8+0x38>)
 8000c10:	71da      	strb	r2, [r3, #7]
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000000 	.word	0x20000000

08000c20 <checkEcho8>:
//TODO
//Check to see if we need to receive 10 bytes or not

//returns 1 if success, 0 if fail
int checkEcho8(UART_HandleTypeDef *huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, rx485, 8, 50);
 8000c28:	2332      	movs	r3, #50	; 0x32
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	490e      	ldr	r1, [pc, #56]	; (8000c68 <checkEcho8+0x48>)
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f003 f964 	bl	8003efc <HAL_UART_Receive>
	for (int i = 0; i < 8; i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e00e      	b.n	8000c58 <checkEcho8+0x38>
	{
		if (wrMsg[i] != rx485[i])
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <checkEcho8+0x4c>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	4909      	ldr	r1, [pc, #36]	; (8000c68 <checkEcho8+0x48>)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	440b      	add	r3, r1
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d001      	beq.n	8000c52 <checkEcho8+0x32>
		{
			return 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e006      	b.n	8000c60 <checkEcho8+0x40>
	for (int i = 0; i < 8; i++)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b07      	cmp	r3, #7
 8000c5c:	dded      	ble.n	8000c3a <checkEcho8+0x1a>
		}
	}
	return 1;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000

08000c70 <rdStatusValue>:
//	//return rpmData;
//}


uint16_t rdStatusValue(UART_HandleTypeDef *huart, uint8_t statusID)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	uint16_t *data;

	wrMsg[0] = 0x01;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <rdStatusValue+0x68>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <rdStatusValue+0x68>)
 8000c84:	2203      	movs	r2, #3
 8000c86:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <rdStatusValue+0x68>)
 8000c8a:	22d0      	movs	r2, #208	; 0xd0
 8000c8c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = statusID;
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <rdStatusValue+0x68>)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	70d3      	strb	r3, [r2, #3]
	wrMsg[4] = 0x00;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <rdStatusValue+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <rdStatusValue+0x68>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <rdStatusValue+0x68>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <rdStatusValue+0x68>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000cac:	f7ff ff9a 	bl	8000be4 <appendCRC8>

	sendData8(huart);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff75 	bl	8000ba0 <sendData8>

	HAL_UART_Receive(huart, rx485, 7, 50);
 8000cb6:	2332      	movs	r3, #50	; 0x32
 8000cb8:	2207      	movs	r2, #7
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <rdStatusValue+0x6c>)
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f003 f91d 	bl	8003efc <HAL_UART_Receive>

	*data = (uint16_t *)(rx485[3]);
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <rdStatusValue+0x6c>)
 8000cc4:	78db      	ldrb	r3, [r3, #3]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	801a      	strh	r2, [r3, #0]

	return *data;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	881b      	ldrh	r3, [r3, #0]

}   //end of rdStatusValue()
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <readRPM>:
#define VFD_PARAM_CODE_OUTPUT_FREQ   0x00
#define VFD_PARAM_CODE_RPM   0x03


uint16_t readRPM(UART_HandleTypeDef *huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	uint16_t data;

   data = rdStatusValue(huart, VFD_PARAM_CODE_RPM);
 8000ce8:	2103      	movs	r1, #3
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffc0 	bl	8000c70 <rdStatusValue>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	81fb      	strh	r3, [r7, #14]

   return data;
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <spindleFWD>:
//	return freqData;
//}

//sends message to turn on spindle, returns 1 if success, 0 if failed
int spindleFWD(UART_HandleTypeDef *huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <spindleFWD+0x54>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <spindleFWD+0x54>)
 8000d10:	2206      	movs	r2, #6
 8000d12:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <spindleFWD+0x54>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <spindleFWD+0x54>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <spindleFWD+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <spindleFWD+0x54>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <spindleFWD+0x54>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <spindleFWD+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000d38:	f7ff ff54 	bl	8000be4 <appendCRC8>

	sendData8(huart);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff2f 	bl	8000ba0 <sendData8>

	return checkEcho8(huart);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff6c 	bl	8000c20 <checkEcho8>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000000 	.word	0x20000000

08000d58 <spindleOff>:

int spindleOff(UART_HandleTypeDef *huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <spindleOff+0x54>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <spindleOff+0x54>)
 8000d68:	2206      	movs	r2, #6
 8000d6a:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <spindleOff+0x54>)
 8000d6e:	2210      	movs	r2, #16
 8000d70:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <spindleOff+0x54>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <spindleOff+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <spindleOff+0x54>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <spindleOff+0x54>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <spindleOff+0x54>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000d90:	f7ff ff28 	bl	8000be4 <appendCRC8>

	sendData8(huart);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff03 	bl	8000ba0 <sendData8>

	return checkEcho8(huart);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff40 	bl	8000c20 <checkEcho8>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000

08000db0 <setFreq>:

void setFreq(uint16_t freq, UART_HandleTypeDef *huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <setFreq+0x58>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <setFreq+0x58>)
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <setFreq+0x58>)
 8000dca:	2210      	movs	r2, #16
 8000dcc:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <setFreq+0x58>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000dd4:	88fb      	ldrh	r3, [r7, #6]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <setFreq+0x58>)
 8000dde:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <setFreq+0x58>)
 8000de6:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <setFreq+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <setFreq+0x58>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000df4:	f7ff fef6 	bl	8000be4 <appendCRC8>

	sendData8(huart);
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f7ff fed1 	bl	8000ba0 <sendData8>

	//checkEcho8();
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e1c:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8000e1e:	e01f      	b.n	8000e60 <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	89fb      	ldrh	r3, [r7, #14]
 8000e2c:	4053      	eors	r3, r2
 8000e2e:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	e011      	b.n	8000e5a <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8000e36:	89fb      	ldrh	r3, [r7, #14]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <crc_chk_value+0x6c>)
 8000e48:	4053      	eors	r3, r2
 8000e4a:	81fb      	strh	r3, [r7, #14]
 8000e4c:	e002      	b.n	8000e54 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b07      	cmp	r3, #7
 8000e5e:	ddea      	ble.n	8000e36 <crc_chk_value+0x2a>
	while (length--)
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	70fa      	strb	r2, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1da      	bne.n	8000e20 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	ffffa001 	.word	0xffffa001

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x4c>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a2e      	ldr	r2, [pc, #184]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d128      	bne.n	8000f40 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f06:	61bb      	str	r3, [r7, #24]
 8000f08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000f26:	2306      	movs	r3, #6
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <HAL_ADC_MspInit+0xe0>)
 8000f3a:	f000 fecd 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f3e:	e02c      	b.n	8000f9a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_ADC_MspInit+0xe4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d127      	bne.n	8000f9a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f82:	2308      	movs	r3, #8
 8000f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_ADC_MspInit+0xe0>)
 8000f96:	f000 fe9f 	bl	8001cd8 <HAL_GPIO_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012100 	.word	0x40012100
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40012200 	.word	0x40012200

08000fb4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_CAN_MspInit+0xa0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d13a      	bne.n	800104c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8000fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8000ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_CAN_MspInit+0xa4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800102a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800103c:	2309      	movs	r3, #9
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_CAN_MspInit+0xa8>)
 8001048:	f000 fe46 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40006800 	.word	0x40006800
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400

08001060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_SPI_MspInit+0x84>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12b      	bne.n	80010da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_SPI_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010ba:	23f0      	movs	r3, #240	; 0xf0
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ca:	2305      	movs	r3, #5
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <HAL_SPI_MspInit+0x8c>)
 80010d6:	f000 fdff 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40013000 	.word	0x40013000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a19      	ldr	r2, [pc, #100]	; (8001174 <HAL_UART_MspInit+0x84>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12c      	bne.n	800116c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x88>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_UART_MspInit+0x88>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800115c:	2307      	movs	r3, #7
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x8c>)
 8001168:	f000 fdb6 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40004800 	.word	0x40004800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f8d0 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <OTG_FS_IRQHandler+0x10>)
 80011da:	f001 f882 	bl	80022e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20001a6c 	.word	0x20001a6c

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f006 fdf8 	bl	8007e0c <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20020000 	.word	0x20020000
 8001248:	00000400 	.word	0x00000400
 800124c:	20000214 	.word	0x20000214
 8001250:	20001e88 	.word	0x20001e88

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012a2:	f7ff ffd7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f006 fdb7 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff f95d 	bl	8000568 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80012bc:	080089d8 	.word	0x080089d8
  ldr r2, =_sbss
 80012c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80012c4:	20001e84 	.word	0x20001e84

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 fcad 	bl	8001c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fdbc 	bl	8000e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fcc5 	bl	8001cbe <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 fc8d 	bl	8001c6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000014 	.word	0x20000014
 8001368:	2000001c 	.word	0x2000001c
 800136c:	20000018 	.word	0x20000018

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2000001c 	.word	0x2000001c
 8001394:	20000598 	.word	0x20000598

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000598 	.word	0x20000598

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000001c 	.word	0x2000001c

080013f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e033      	b.n	8001476 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fd58 	bl	8000ecc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800143e:	f023 0302 	bic.w	r3, r3, #2
 8001442:	f043 0202 	orr.w	r2, r3, #2
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f93a 	bl	80016c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f023 0303 	bic.w	r3, r3, #3
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
 8001466:	e001      	b.n	800146c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x1c>
 8001498:	2302      	movs	r3, #2
 800149a:	e105      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x228>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d925      	bls.n	80014f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68d9      	ldr	r1, [r3, #12]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	3b1e      	subs	r3, #30
 80014c2:	2207      	movs	r2, #7
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68d9      	ldr	r1, [r3, #12]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	4603      	mov	r3, r0
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4403      	add	r3, r0
 80014ea:	3b1e      	subs	r3, #30
 80014ec:	409a      	lsls	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	e022      	b.n	800153e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6919      	ldr	r1, [r3, #16]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b29b      	uxth	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	2207      	movs	r2, #7
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6919      	ldr	r1, [r3, #16]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	4603      	mov	r3, r0
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4403      	add	r3, r0
 8001534:	409a      	lsls	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b06      	cmp	r3, #6
 8001544:	d824      	bhi.n	8001590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	3b05      	subs	r3, #5
 8001558:	221f      	movs	r2, #31
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	400a      	ands	r2, r1
 8001566:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3b05      	subs	r3, #5
 8001582:	fa00 f203 	lsl.w	r2, r0, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
 800158e:	e04c      	b.n	800162a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b0c      	cmp	r3, #12
 8001596:	d824      	bhi.n	80015e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b23      	subs	r3, #35	; 0x23
 80015aa:	221f      	movs	r2, #31
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43da      	mvns	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	400a      	ands	r2, r1
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b23      	subs	r3, #35	; 0x23
 80015d4:	fa00 f203 	lsl.w	r2, r0, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	631a      	str	r2, [r3, #48]	; 0x30
 80015e0:	e023      	b.n	800162a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	3b41      	subs	r3, #65	; 0x41
 80015f4:	221f      	movs	r2, #31
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	400a      	ands	r2, r1
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	3b41      	subs	r3, #65	; 0x41
 800161e:	fa00 f203 	lsl.w	r2, r0, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_ADC_ConfigChannel+0x234>)
 800162c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a21      	ldr	r2, [pc, #132]	; (80016b8 <HAL_ADC_ConfigChannel+0x238>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d109      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1cc>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b12      	cmp	r3, #18
 800163e:	d105      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_ADC_ConfigChannel+0x238>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d123      	bne.n	800169e <HAL_ADC_ConfigChannel+0x21e>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d003      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x1e6>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b11      	cmp	r3, #17
 8001664:	d11b      	bne.n	800169e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b10      	cmp	r3, #16
 8001678:	d111      	bne.n	800169e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_ADC_ConfigChannel+0x23c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_ADC_ConfigChannel+0x240>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9a      	lsrs	r2, r3, #18
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001690:	e002      	b.n	8001698 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40012300 	.word	0x40012300
 80016b8:	40012000 	.word	0x40012000
 80016bc:	20000014 	.word	0x20000014
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016cc:	4b79      	ldr	r3, [pc, #484]	; (80018b4 <ADC_Init+0x1f0>)
 80016ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	021a      	lsls	r2, r3, #8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800171c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800173e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6899      	ldr	r1, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <ADC_Init+0x1f4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800176a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800178c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e00f      	b.n	80017c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0202 	bic.w	r2, r2, #2
 80017d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
 80017dc:	005a      	lsls	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01b      	beq.n	8001828 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800180e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	3b01      	subs	r3, #1
 800181c:	035a      	lsls	r2, r3, #13
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e007      	b.n	8001838 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001836:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	3b01      	subs	r3, #1
 8001854:	051a      	lsls	r2, r3, #20
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800186c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6899      	ldr	r1, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800187a:	025a      	lsls	r2, r3, #9
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	029a      	lsls	r2, r3, #10
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40012300 	.word	0x40012300
 80018b8:	0f000001 	.word	0x0f000001

080018bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0ed      	b.n	8001aaa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fb6a 	bl	8000fb4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0202 	bic.w	r2, r2, #2
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f0:	f7ff fd52 	bl	8001398 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018f6:	e012      	b.n	800191e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f8:	f7ff fd4e 	bl	8001398 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d90b      	bls.n	800191e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2205      	movs	r2, #5
 8001916:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e0c5      	b.n	8001aaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e5      	bne.n	80018f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800193c:	f7ff fd2c 	bl	8001398 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001942:	e012      	b.n	800196a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001944:	f7ff fd28 	bl	8001398 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d90b      	bls.n	800196a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e09f      	b.n	8001aaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0e5      	beq.n	8001944 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e1b      	ldrb	r3, [r3, #24]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d108      	bne.n	8001992 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e007      	b.n	80019a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7e5b      	ldrb	r3, [r3, #25]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e007      	b.n	80019cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e9b      	ldrb	r3, [r3, #26]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0220 	bic.w	r2, r2, #32
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7edb      	ldrb	r3, [r3, #27]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0210 	bic.w	r2, r2, #16
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0210 	orr.w	r2, r2, #16
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7f1b      	ldrb	r3, [r3, #28]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0208 	orr.w	r2, r2, #8
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0208 	bic.w	r2, r2, #8
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7f5b      	ldrb	r3, [r3, #29]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0204 	orr.w	r2, r2, #4
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e007      	b.n	8001a74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	ea42 0103 	orr.w	r1, r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c20:	d301      	bcc.n	8001c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00f      	b.n	8001c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <SysTick_Config+0x40>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2e:	210f      	movs	r1, #15
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f7ff ff8e 	bl	8001b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x40>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x40>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff29 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c7c:	f7ff ff3e 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	6978      	ldr	r0, [r7, #20]
 8001c88:	f7ff ff8e 	bl	8001ba8 <NVIC_EncodePriority>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff5d 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff31 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ffa2 	bl	8001c10 <SysTick_Config>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e16b      	b.n	8001fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 815a 	bne.w	8001fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80b4 	beq.w	8001fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b60      	ldr	r3, [pc, #384]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a5f      	ldr	r2, [pc, #380]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_GPIO_Init+0x30c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a5b      	ldr	r2, [pc, #364]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x314>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x318>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d025      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x31c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01f      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x320>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x216>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x212>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	; (8002004 <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	; (8002008 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x20a>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e00e      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	e00c      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	e00a      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001eea:	2305      	movs	r3, #5
 8001eec:	e008      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001eee:	2304      	movs	r3, #4
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x228>
 8001efe:	2300      	movs	r3, #0
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f002 0203 	and.w	r2, r2, #3
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <HAL_GPIO_Init+0x310>)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f42:	4a32      	ldr	r2, [pc, #200]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_GPIO_Init+0x334>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_GPIO_Init+0x334>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f67f ae90 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002044:	b08f      	sub	sp, #60	; 0x3c
 8002046:	af0a      	add	r7, sp, #40	; 0x28
 8002048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e10f      	b.n	8002274 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f005 fbb4 	bl	80077dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2203      	movs	r2, #3
 8002078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f002 fafb 	bl	800468e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	687e      	ldr	r6, [r7, #4]
 80020a0:	466d      	mov	r5, sp
 80020a2:	f106 0410 	add.w	r4, r6, #16
 80020a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b6:	1d33      	adds	r3, r6, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	f002 f9d2 	bl	8004464 <USB_CoreInit>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0d0      	b.n	8002274 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2100      	movs	r1, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fae9 	bl	80046b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e04a      	b.n	800217a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	333d      	adds	r3, #61	; 0x3d
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	333c      	adds	r3, #60	; 0x3c
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	b298      	uxth	r0, r3
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	3342      	adds	r3, #66	; 0x42
 8002120:	4602      	mov	r2, r0
 8002122:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	333f      	adds	r3, #63	; 0x3f
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3344      	adds	r3, #68	; 0x44
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	3348      	adds	r3, #72	; 0x48
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3350      	adds	r3, #80	; 0x50
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3af      	bcc.n	80020e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e044      	b.n	8002214 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	7bfa      	ldrb	r2, [r7, #15]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d3b5      	bcc.n	800218a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	687e      	ldr	r6, [r7, #4]
 8002226:	466d      	mov	r5, sp
 8002228:	f106 0410 	add.w	r4, r6, #16
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002238:	e885 0003 	stmia.w	r5, {r0, r1}
 800223c:	1d33      	adds	r3, r6, #4
 800223e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f002 fa5f 	bl	8004704 <USB_DevInit>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e00d      	b.n	8002274 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 faa7 	bl	80057c0 <USB_DevDisconnect>

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800227c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_PCD_Start+0x1c>
 8002294:	2302      	movs	r3, #2
 8002296:	e020      	b.n	80022da <HAL_PCD_Start+0x5e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d109      	bne.n	80022bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d005      	beq.n	80022bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 f9d3 	bl	800466c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f003 fa57 	bl	800577e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b08d      	sub	sp, #52	; 0x34
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 fb15 	bl	8005928 <USB_GetMode>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 839d 	bne.w	8002a40 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f003 fa79 	bl	8005802 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 8393 	beq.w	8002a3e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fa70 	bl	8005802 <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d107      	bne.n	800233c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f002 0202 	and.w	r2, r2, #2
 800233a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f003 fa5e 	bl	8005802 <USB_ReadInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b10      	cmp	r3, #16
 800234e:	d161      	bne.n	8002414 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0210 	bic.w	r2, r2, #16
 800235e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	0c5b      	lsrs	r3, r3, #17
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	2b02      	cmp	r3, #2
 800238a:	d124      	bne.n	80023d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d035      	beq.n	8002404 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	6a38      	ldr	r0, [r7, #32]
 80023ac:	f003 f8c4 	bl	8005538 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023bc:	441a      	add	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ce:	441a      	add	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	e016      	b.n	8002404 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	0c5b      	lsrs	r3, r3, #17
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d110      	bne.n	8002404 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023e8:	2208      	movs	r2, #8
 80023ea:	4619      	mov	r1, r3
 80023ec:	6a38      	ldr	r0, [r7, #32]
 80023ee:	f003 f8a3 	bl	8005538 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fe:	441a      	add	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0210 	orr.w	r2, r2, #16
 8002412:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f003 f9f2 	bl	8005802 <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002428:	d16e      	bne.n	8002508 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 f9f8 	bl	8005828 <USB_ReadDevAllOutEpInterrupt>
 8002438:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800243a:	e062      	b.n	8002502 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d057      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fa1d 	bl	8005890 <USB_ReadDevOutEPInterrupt>
 8002456:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	2301      	movs	r3, #1
 8002472:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fdb0 	bl	8002fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002492:	461a      	mov	r2, r3
 8002494:	2308      	movs	r3, #8
 8002496:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 feaa 	bl	80031f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b6:	461a      	mov	r2, r3
 80024b8:	2310      	movs	r3, #16
 80024ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d2:	461a      	mov	r2, r3
 80024d4:	2320      	movs	r3, #32
 80024d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d199      	bne.n	800243c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 f978 	bl	8005802 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800251c:	f040 80c0 	bne.w	80026a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f999 	bl	800585c <USB_ReadDevAllInEpInterrupt>
 800252a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002530:	e0b2      	b.n	8002698 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a7 	beq.w	800268c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f9bf 	bl	80058cc <USB_ReadDevInEPInterrupt>
 800254e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d057      	beq.n	800260a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	2201      	movs	r2, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	69f9      	ldr	r1, [r7, #28]
 8002576:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800257a:	4013      	ands	r3, r2
 800257c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258a:	461a      	mov	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d132      	bne.n	80025fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3348      	adds	r3, #72	; 0x48
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4403      	add	r3, r0
 80025b8:	3344      	adds	r3, #68	; 0x44
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4419      	add	r1, r3
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4403      	add	r3, r0
 80025cc:	3348      	adds	r3, #72	; 0x48
 80025ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <HAL_PCD_IRQHandler+0x31c>
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3350      	adds	r3, #80	; 0x50
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d108      	bne.n	80025fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f6:	461a      	mov	r2, r3
 80025f8:	2101      	movs	r1, #1
 80025fa:	f003 f9c7 	bl	800598c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f005 f96a 	bl	80078de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002620:	461a      	mov	r2, r3
 8002622:	2308      	movs	r3, #8
 8002624:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	2310      	movs	r3, #16
 8002640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002658:	461a      	mov	r2, r3
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002674:	461a      	mov	r2, r3
 8002676:	2302      	movs	r3, #2
 8002678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fc1b 	bl	8002ec2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3301      	adds	r3, #1
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269a:	2b00      	cmp	r3, #0
 800269c:	f47f af49 	bne.w	8002532 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 f8ac 	bl	8005802 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026b4:	d122      	bne.n	80026fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d108      	bne.n	80026e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026dc:	2100      	movs	r1, #0
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fe26 	bl	8003330 <HAL_PCDEx_LPM_Callback>
 80026e4:	e002      	b.n	80026ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f005 f970 	bl	80079cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f87e 	bl	8005802 <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002710:	d112      	bne.n	8002738 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d102      	bne.n	8002728 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 f92c 	bl	8007980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002736:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 f860 	bl	8005802 <USB_ReadInterrupts>
 8002742:	4603      	mov	r3, r0
 8002744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	f040 80c7 	bne.w	80028de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2110      	movs	r1, #16
 800276a:	4618      	mov	r0, r3
 800276c:	f002 f92e 	bl	80049cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002774:	e056      	b.n	8002824 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002782:	461a      	mov	r2, r3
 8002784:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002788:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	0151      	lsls	r1, r2, #5
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	440a      	add	r2, r1
 80027c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d6:	461a      	mov	r2, r3
 80027d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ee:	0151      	lsls	r1, r2, #5
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	440a      	add	r2, r1
 80027f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	0151      	lsls	r1, r2, #5
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	440a      	add	r2, r1
 8002814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002818:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800281c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3301      	adds	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800282a:	429a      	cmp	r2, r3
 800282c:	d3a3      	bcc.n	8002776 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002840:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285a:	f043 030b 	orr.w	r3, r3, #11
 800285e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002870:	f043 030b 	orr.w	r3, r3, #11
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	e015      	b.n	80028a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800288a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800288e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289e:	f043 030b 	orr.w	r3, r3, #11
 80028a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c8:	461a      	mov	r2, r3
 80028ca:	f003 f85f 	bl	800598c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f002 ff8d 	bl	8005802 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	d124      	bne.n	800293e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 f823 	bl	8005944 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f002 f8c3 	bl	8004a8e <USB_GetDevSpeed>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681c      	ldr	r4, [r3, #0]
 8002914:	f001 f956 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4620      	mov	r0, r4
 8002924:	f001 fe00 	bl	8004528 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 f800 	bl	800792e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800293c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f002 ff5d 	bl	8005802 <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d10a      	bne.n	8002968 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f004 ffdd 	bl	8007912 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f002 0208 	and.w	r2, r2, #8
 8002966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f002 ff48 	bl	8005802 <USB_ReadInterrupts>
 8002972:	4603      	mov	r3, r0
 8002974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297c:	d10f      	bne.n	800299e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f005 f83f 	bl	8007a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800299c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 ff2d 	bl	8005802 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029b2:	d10f      	bne.n	80029d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f005 f812 	bl	80079e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f002 ff12 	bl	8005802 <USB_ReadInterrupts>
 80029de:	4603      	mov	r3, r0
 80029e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d10a      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f005 f820 	bl	8007a30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695a      	ldr	r2, [r3, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 fefc 	bl	8005802 <USB_ReadInterrupts>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d115      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f005 f810 	bl	8007a4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	e000      	b.n	8002a40 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a3e:	bf00      	nop
    }
  }
}
 8002a40:	3734      	adds	r7, #52	; 0x34
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd90      	pop	{r4, r7, pc}

08002a46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_PCD_SetAddress+0x1a>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e013      	b.n	8002a88 <HAL_PCD_SetAddress+0x42>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fe5a 	bl	8005732 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	70fb      	strb	r3, [r7, #3]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	803b      	strh	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da0f      	bge.n	8002ad6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	3338      	adds	r3, #56	; 0x38
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	705a      	strb	r2, [r3, #1]
 8002ad4:	e00f      	b.n	8002af6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 020f 	and.w	r2, r3, #15
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b02:	883a      	ldrh	r2, [r7, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	78ba      	ldrb	r2, [r7, #2]
 8002b0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d102      	bne.n	8002b2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_PCD_EP_Open+0xaa>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e00e      	b.n	8002b58 <HAL_PCD_EP_Open+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ffc5 	bl	8004ad8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b56:	7afb      	ldrb	r3, [r7, #11]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	da0f      	bge.n	8002b94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3338      	adds	r3, #56	; 0x38
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	3304      	adds	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
 8002b92:	e00f      	b.n	8002bb4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_PCD_EP_Close+0x6e>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e00e      	b.n	8002bec <HAL_PCD_EP_Close+0x8c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 f803 	bl	8004be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2200      	movs	r2, #0
 8002c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	6979      	ldr	r1, [r7, #20]
 8002c68:	f002 fade 	bl	8005228 <USB_EP0StartXfer>
 8002c6c:	e008      	b.n	8002c80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	f002 f890 	bl	8004da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 020f 	and.w	r2, r3, #15
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cac:	681b      	ldr	r3, [r3, #0]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	f003 020f 	and.w	r2, r3, #15
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	3338      	adds	r3, #56	; 0x38
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d102      	bne.n	8002d14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	6979      	ldr	r1, [r7, #20]
 8002d2c:	f002 fa7c 	bl	8005228 <USB_EP0StartXfer>
 8002d30:	e008      	b.n	8002d44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	f002 f82e 	bl	8004da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	f003 020f 	and.w	r2, r3, #15
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d901      	bls.n	8002d6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e050      	b.n	8002e0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da0f      	bge.n	8002d94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	3338      	adds	r3, #56	; 0x38
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	3304      	adds	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	705a      	strb	r2, [r3, #1]
 8002d92:	e00d      	b.n	8002db0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_SetStall+0x82>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e01e      	b.n	8002e0e <HAL_PCD_EP_SetStall+0xc0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fbd3 	bl	800558a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2d9      	uxtb	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f002 fdc4 	bl	800598c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d901      	bls.n	8002e34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e042      	b.n	8002eba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da0f      	bge.n	8002e5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	705a      	strb	r2, [r3, #1]
 8002e5a:	e00f      	b.n	8002e7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_PCD_EP_ClrStall+0x86>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e00e      	b.n	8002eba <HAL_PCD_EP_ClrStall+0xa4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68f9      	ldr	r1, [r7, #12]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fbdb 	bl	8005666 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b08a      	sub	sp, #40	; 0x28
 8002ec6:	af02      	add	r7, sp, #8
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3338      	adds	r3, #56	; 0x38
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d901      	bls.n	8002efa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06c      	b.n	8002fd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d902      	bls.n	8002f16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3303      	adds	r3, #3
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f1e:	e02b      	b.n	8002f78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d902      	bls.n	8002f3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3303      	adds	r3, #3
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68d9      	ldr	r1, [r3, #12]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f002 fab7 	bl	80054ce <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d809      	bhi.n	8002fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d203      	bcs.n	8002fa2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1be      	bne.n	8002f20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d811      	bhi.n	8002fd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fce:	4013      	ands	r3, r2
 8002fd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	f040 80a0 	bne.w	8003154 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a72      	ldr	r2, [pc, #456]	; (80031ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f240 80dd 	bls.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80d7 	beq.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003046:	6093      	str	r3, [r2, #8]
 8003048:	e0cb      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	2320      	movs	r3, #32
 8003064:	6093      	str	r3, [r2, #8]
 8003066:	e0bc      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 80b7 	bne.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d90f      	bls.n	800309c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003098:	6093      	str	r3, [r2, #8]
 800309a:	e0a2      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4403      	add	r3, r0
 80030d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4419      	add	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4403      	add	r3, r0
 8003110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003114:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d114      	bne.n	8003146 <PCD_EP_OutXfrComplete_int+0x16a>
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d108      	bne.n	8003146 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800313e:	461a      	mov	r2, r3
 8003140:	2101      	movs	r1, #1
 8003142:	f002 fc23 	bl	800598c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f004 fbab 	bl	80078a8 <HAL_PCD_DataOutStageCallback>
 8003152:	e046      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d124      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	e032      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2320      	movs	r3, #32
 8003196:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f004 fb82 	bl	80078a8 <HAL_PCD_DataOutStageCallback>
 80031a4:	e01d      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d114      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ce:	461a      	mov	r2, r3
 80031d0:	2100      	movs	r1, #0
 80031d2:	f002 fbdb 	bl	800598c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f004 fb63 	bl	80078a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	4f54300a 	.word	0x4f54300a
 80031f0:	4f54310a 	.word	0x4f54310a

080031f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	333c      	adds	r3, #60	; 0x3c
 800320c:	3304      	adds	r3, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <PCD_EP_OutSetupPacket_int+0x88>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d90e      	bls.n	8003248 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	461a      	mov	r2, r3
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f004 fb1b 	bl	8007884 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <PCD_EP_OutSetupPacket_int+0x88>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d90c      	bls.n	8003270 <PCD_EP_OutSetupPacket_int+0x7c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003268:	461a      	mov	r2, r3
 800326a:	2101      	movs	r1, #1
 800326c:	f002 fb8e 	bl	800598c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	4f54300a 	.word	0x4f54300a

08003280 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
 800328c:	4613      	mov	r3, r2
 800328e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800329e:	883b      	ldrh	r3, [r7, #0]
 80032a0:	0419      	lsls	r1, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e028      	b.n	8003300 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e00d      	b.n	80032de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4413      	add	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	3301      	adds	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3ec      	bcc.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032e8:	883b      	ldrh	r3, [r7, #0]
 80032ea:	0418      	lsls	r0, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4302      	orrs	r2, r0
 80032f8:	3340      	adds	r3, #64	; 0x40
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e264      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	4ba3      	ldr	r3, [pc, #652]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4ba0      	ldr	r3, [pc, #640]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b9d      	ldr	r3, [pc, #628]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e23f      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8a      	ldr	r2, [pc, #552]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a87      	ldr	r2, [pc, #540]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a83      	ldr	r2, [pc, #524]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd ffca 	bl	8001398 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd ffc6 	bl	8001398 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e204      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd ffb6 	bl	8001398 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd ffb2 	bl	8001398 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f0      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b62      	ldr	r3, [pc, #392]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c4      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4952      	ldr	r1, [pc, #328]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x2b0>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd ff6b 	bl	8001398 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fd ff67 	bl	8001398 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a5      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4940      	ldr	r1, [pc, #256]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_OscConfig+0x2b0>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd ff4a 	bl	8001398 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7fd ff46 	bl	8001398 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e184      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x2b4>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd ff2a 	bl	8001398 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd ff26 	bl	8001398 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e164      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e015      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x2b4>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd ff13 	bl	8001398 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003576:	f7fd ff0f 	bl	8001398 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e14d      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a0 	beq.w	80036e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d121      	bne.n	8003622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fed5 	bl	8001398 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e011      	b.n	8003616 <HAL_RCC_OscConfig+0x2ce>
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	42470000 	.word	0x42470000
 80035fc:	42470e80 	.word	0x42470e80
 8003600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fd fec8 	bl	8001398 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e106      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCC_OscConfig+0x4e4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x2f0>
 800362a:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e01c      	b.n	8003672 <HAL_RCC_OscConfig+0x32a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x312>
 8003640:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a7a      	ldr	r2, [pc, #488]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	4b78      	ldr	r3, [pc, #480]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a77      	ldr	r2, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x32a>
 800365a:	4b75      	ldr	r3, [pc, #468]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a74      	ldr	r2, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a71      	ldr	r2, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fe8d 	bl	8001398 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fe89 	bl	8001398 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0c5      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCC_OscConfig+0x33a>
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fd fe77 	bl	8001398 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fe73 	bl	8001398 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0af      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 809b 	beq.w	8003822 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d05c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d141      	bne.n	8003784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fd fe47 	bl	8001398 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd fe43 	bl	8001398 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e081      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	019b      	lsls	r3, r3, #6
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	4937      	ldr	r1, [pc, #220]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fe1c 	bl	8001398 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd fe18 	bl	8001398 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e056      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x41c>
 8003782:	e04e      	b.n	8003822 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fd fe05 	bl	8001398 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd fe01 	bl	8001398 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e03f      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x44a>
 80037b0:	e037      	b.n	8003822 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e032      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d028      	beq.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d121      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d11a      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d111      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d107      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40007000 	.word	0x40007000
 8003830:	40023800 	.word	0x40023800
 8003834:	42470060 	.word	0x42470060

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd fd36 	bl	8001398 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd fd32 	bl	8001398 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fc96 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	0800887c 	.word	0x0800887c
 80039fc:	20000014 	.word	0x20000014
 8003a00:	20000018 	.word	0x20000018

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80bd 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0b7      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a3a:	60bb      	str	r3, [r7, #8]
       break;
 8003a3c:	e0b7      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b60      	ldr	r3, [pc, #384]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a40:	60bb      	str	r3, [r7, #8]
      break;
 8003a42:	e0b4      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04d      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	ea02 0800 	and.w	r8, r2, r0
 8003a72:	ea03 0901 	and.w	r9, r3, r1
 8003a76:	4640      	mov	r0, r8
 8003a78:	4649      	mov	r1, r9
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	014b      	lsls	r3, r1, #5
 8003a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a88:	0142      	lsls	r2, r0, #5
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a92:	eb61 0109 	sbc.w	r1, r1, r9
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	018b      	lsls	r3, r1, #6
 8003aa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aa4:	0182      	lsls	r2, r0, #6
 8003aa6:	1a12      	subs	r2, r2, r0
 8003aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	00d9      	lsls	r1, r3, #3
 8003ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aba:	00d0      	lsls	r0, r2, #3
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	eb12 0208 	adds.w	r2, r2, r8
 8003ac4:	eb43 0309 	adc.w	r3, r3, r9
 8003ac8:	f04f 0000 	mov.w	r0, #0
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	0299      	lsls	r1, r3, #10
 8003ad2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ad6:	0290      	lsls	r0, r2, #10
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f7fc fbc2 	bl	8000270 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e04a      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	ea02 0400 	and.w	r4, r2, r0
 8003b0e:	ea03 0501 	and.w	r5, r3, r1
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	014b      	lsls	r3, r1, #5
 8003b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b24:	0142      	lsls	r2, r0, #5
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	1b00      	subs	r0, r0, r4
 8003b2c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	018b      	lsls	r3, r1, #6
 8003b3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b3e:	0182      	lsls	r2, r0, #6
 8003b40:	1a12      	subs	r2, r2, r0
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	f04f 0000 	mov.w	r0, #0
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	00d9      	lsls	r1, r3, #3
 8003b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b54:	00d0      	lsls	r0, r2, #3
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	1912      	adds	r2, r2, r4
 8003b5c:	eb45 0303 	adc.w	r3, r5, r3
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	0299      	lsls	r1, r3, #10
 8003b6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b6e:	0290      	lsls	r0, r2, #10
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f7fc fb76 	bl	8000270 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	60bb      	str	r3, [r7, #8]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003baa:	60bb      	str	r3, [r7, #8]
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	68bb      	ldr	r3, [r7, #8]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000014 	.word	0x20000014

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800888c 	.word	0x0800888c

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800888c 	.word	0x0800888c

08003c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07b      	b.n	8003d36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4e:	d009      	beq.n	8003c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd f9ee 	bl	8001060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0104 	and.w	r1, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0210 	and.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e03f      	b.n	8003dd0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7fd f9c3 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2224      	movs	r2, #36	; 0x24
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9a6 	bl	80040d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d17c      	bne.n	8003ef2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Transmit+0x2c>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e075      	b.n	8003ef4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Transmit+0x3e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e06e      	b.n	8003ef4 <HAL_UART_Transmit+0x11c>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2221      	movs	r2, #33	; 0x21
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2c:	f7fd fab4 	bl	8001398 <HAL_GetTick>
 8003e30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d108      	bne.n	8003e5a <HAL_UART_Transmit+0x82>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	e003      	b.n	8003e62 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e6a:	e02a      	b.n	8003ec2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f8e2 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e036      	b.n	8003ef4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e007      	b.n	8003eb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1cf      	bne.n	8003e6c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8b2 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e006      	b.n	8003ef4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f040 808c 	bne.w	8004036 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_UART_Receive+0x2e>
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e084      	b.n	8004038 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_UART_Receive+0x40>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e07d      	b.n	8004038 <HAL_UART_Receive+0x13c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2222      	movs	r2, #34	; 0x22
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f58:	f7fd fa1e 	bl	8001398 <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d108      	bne.n	8003f86 <HAL_UART_Receive+0x8a>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e003      	b.n	8003f8e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f96:	e043      	b.n	8004020 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f84c 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e042      	b.n	8004038 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	3302      	adds	r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	e01f      	b.n	8004012 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d007      	beq.n	8003fec <HAL_UART_Receive+0xf0>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_UART_Receive+0xfe>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e008      	b.n	800400c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004006:	b2da      	uxtb	r2, r3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	3301      	adds	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1b6      	bne.n	8003f98 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e02c      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d028      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 8004060:	f7fd f99a 	bl	8001398 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	d21d      	bcs.n	80040ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e00f      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d0c3      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	b09f      	sub	sp, #124	; 0x7c
 80040da:	af00      	add	r7, sp, #0
 80040dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	ea40 0301 	orr.w	r3, r0, r1
 80040f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	431a      	orrs	r2, r3
 8004106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4313      	orrs	r3, r2
 800410c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004118:	f021 010c 	bic.w	r1, r1, #12
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004122:	430b      	orrs	r3, r1
 8004124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	ea40 0301 	orr.w	r3, r0, r1
 800413c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4bc5      	ldr	r3, [pc, #788]	; (8004458 <UART_SetConfig+0x384>)
 8004144:	429a      	cmp	r2, r3
 8004146:	d004      	beq.n	8004152 <UART_SetConfig+0x7e>
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4bc3      	ldr	r3, [pc, #780]	; (800445c <UART_SetConfig+0x388>)
 800414e:	429a      	cmp	r2, r3
 8004150:	d103      	bne.n	800415a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004152:	f7ff fd57 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8004156:	6778      	str	r0, [r7, #116]	; 0x74
 8004158:	e002      	b.n	8004160 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800415a:	f7ff fd3f 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800415e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	f040 80b6 	bne.w	80042d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	461c      	mov	r4, r3
 8004170:	f04f 0500 	mov.w	r5, #0
 8004174:	4622      	mov	r2, r4
 8004176:	462b      	mov	r3, r5
 8004178:	1891      	adds	r1, r2, r2
 800417a:	6439      	str	r1, [r7, #64]	; 0x40
 800417c:	415b      	adcs	r3, r3
 800417e:	647b      	str	r3, [r7, #68]	; 0x44
 8004180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004184:	1912      	adds	r2, r2, r4
 8004186:	eb45 0303 	adc.w	r3, r5, r3
 800418a:	f04f 0000 	mov.w	r0, #0
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	00d9      	lsls	r1, r3, #3
 8004194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004198:	00d0      	lsls	r0, r2, #3
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	1911      	adds	r1, r2, r4
 80041a0:	6639      	str	r1, [r7, #96]	; 0x60
 80041a2:	416b      	adcs	r3, r5
 80041a4:	667b      	str	r3, [r7, #100]	; 0x64
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80041b4:	415b      	adcs	r3, r3
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041c0:	f7fc f856 	bl	8000270 <__aeabi_uldivmod>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4ba5      	ldr	r3, [pc, #660]	; (8004460 <UART_SetConfig+0x38c>)
 80041ca:	fba3 2302 	umull	r2, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	011e      	lsls	r6, r3, #4
 80041d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d4:	461c      	mov	r4, r3
 80041d6:	f04f 0500 	mov.w	r5, #0
 80041da:	4622      	mov	r2, r4
 80041dc:	462b      	mov	r3, r5
 80041de:	1891      	adds	r1, r2, r2
 80041e0:	6339      	str	r1, [r7, #48]	; 0x30
 80041e2:	415b      	adcs	r3, r3
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041ea:	1912      	adds	r2, r2, r4
 80041ec:	eb45 0303 	adc.w	r3, r5, r3
 80041f0:	f04f 0000 	mov.w	r0, #0
 80041f4:	f04f 0100 	mov.w	r1, #0
 80041f8:	00d9      	lsls	r1, r3, #3
 80041fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fe:	00d0      	lsls	r0, r2, #3
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	1911      	adds	r1, r2, r4
 8004206:	65b9      	str	r1, [r7, #88]	; 0x58
 8004208:	416b      	adcs	r3, r5
 800420a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	1891      	adds	r1, r2, r2
 8004218:	62b9      	str	r1, [r7, #40]	; 0x28
 800421a:	415b      	adcs	r3, r3
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004222:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004226:	f7fc f823 	bl	8000270 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <UART_SetConfig+0x38c>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2164      	movs	r1, #100	; 0x64
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	3332      	adds	r3, #50	; 0x32
 8004242:	4a87      	ldr	r2, [pc, #540]	; (8004460 <UART_SetConfig+0x38c>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004250:	441e      	add	r6, r3
 8004252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004254:	4618      	mov	r0, r3
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	1894      	adds	r4, r2, r2
 8004260:	623c      	str	r4, [r7, #32]
 8004262:	415b      	adcs	r3, r3
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800426a:	1812      	adds	r2, r2, r0
 800426c:	eb41 0303 	adc.w	r3, r1, r3
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	f04f 0500 	mov.w	r5, #0
 8004278:	00dd      	lsls	r5, r3, #3
 800427a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800427e:	00d4      	lsls	r4, r2, #3
 8004280:	4622      	mov	r2, r4
 8004282:	462b      	mov	r3, r5
 8004284:	1814      	adds	r4, r2, r0
 8004286:	653c      	str	r4, [r7, #80]	; 0x50
 8004288:	414b      	adcs	r3, r1
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	1891      	adds	r1, r2, r2
 8004298:	61b9      	str	r1, [r7, #24]
 800429a:	415b      	adcs	r3, r3
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042a6:	f7fb ffe3 	bl	8000270 <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <UART_SetConfig+0x38c>)
 80042b0:	fba3 1302 	umull	r1, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	2164      	movs	r1, #100	; 0x64
 80042b8:	fb01 f303 	mul.w	r3, r1, r3
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	3332      	adds	r3, #50	; 0x32
 80042c2:	4a67      	ldr	r2, [pc, #412]	; (8004460 <UART_SetConfig+0x38c>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4432      	add	r2, r6
 80042d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d6:	e0b9      	b.n	800444c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042da:	461c      	mov	r4, r3
 80042dc:	f04f 0500 	mov.w	r5, #0
 80042e0:	4622      	mov	r2, r4
 80042e2:	462b      	mov	r3, r5
 80042e4:	1891      	adds	r1, r2, r2
 80042e6:	6139      	str	r1, [r7, #16]
 80042e8:	415b      	adcs	r3, r3
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042f0:	1912      	adds	r2, r2, r4
 80042f2:	eb45 0303 	adc.w	r3, r5, r3
 80042f6:	f04f 0000 	mov.w	r0, #0
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	00d9      	lsls	r1, r3, #3
 8004300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004304:	00d0      	lsls	r0, r2, #3
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	eb12 0804 	adds.w	r8, r2, r4
 800430e:	eb43 0905 	adc.w	r9, r3, r5
 8004312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4618      	mov	r0, r3
 8004318:	f04f 0100 	mov.w	r1, #0
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800432a:	0082      	lsls	r2, r0, #2
 800432c:	4640      	mov	r0, r8
 800432e:	4649      	mov	r1, r9
 8004330:	f7fb ff9e 	bl	8000270 <__aeabi_uldivmod>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4b49      	ldr	r3, [pc, #292]	; (8004460 <UART_SetConfig+0x38c>)
 800433a:	fba3 2302 	umull	r2, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	011e      	lsls	r6, r3, #4
 8004342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004344:	4618      	mov	r0, r3
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	1894      	adds	r4, r2, r2
 8004350:	60bc      	str	r4, [r7, #8]
 8004352:	415b      	adcs	r3, r3
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800435a:	1812      	adds	r2, r2, r0
 800435c:	eb41 0303 	adc.w	r3, r1, r3
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	f04f 0500 	mov.w	r5, #0
 8004368:	00dd      	lsls	r5, r3, #3
 800436a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800436e:	00d4      	lsls	r4, r2, #3
 8004370:	4622      	mov	r2, r4
 8004372:	462b      	mov	r3, r5
 8004374:	1814      	adds	r4, r2, r0
 8004376:	64bc      	str	r4, [r7, #72]	; 0x48
 8004378:	414b      	adcs	r3, r1
 800437a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4618      	mov	r0, r3
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	008b      	lsls	r3, r1, #2
 8004390:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004394:	0082      	lsls	r2, r0, #2
 8004396:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800439a:	f7fb ff69 	bl	8000270 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b2f      	ldr	r3, [pc, #188]	; (8004460 <UART_SetConfig+0x38c>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	; 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	3332      	adds	r3, #50	; 0x32
 80043b6:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <UART_SetConfig+0x38c>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c2:	441e      	add	r6, r3
 80043c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c6:	4618      	mov	r0, r3
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	1894      	adds	r4, r2, r2
 80043d2:	603c      	str	r4, [r7, #0]
 80043d4:	415b      	adcs	r3, r3
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043dc:	1812      	adds	r2, r2, r0
 80043de:	eb41 0303 	adc.w	r3, r1, r3
 80043e2:	f04f 0400 	mov.w	r4, #0
 80043e6:	f04f 0500 	mov.w	r5, #0
 80043ea:	00dd      	lsls	r5, r3, #3
 80043ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043f0:	00d4      	lsls	r4, r2, #3
 80043f2:	4622      	mov	r2, r4
 80043f4:	462b      	mov	r3, r5
 80043f6:	eb12 0a00 	adds.w	sl, r2, r0
 80043fa:	eb43 0b01 	adc.w	fp, r3, r1
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4618      	mov	r0, r3
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	008b      	lsls	r3, r1, #2
 8004412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004416:	0082      	lsls	r2, r0, #2
 8004418:	4650      	mov	r0, sl
 800441a:	4659      	mov	r1, fp
 800441c:	f7fb ff28 	bl	8000270 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <UART_SetConfig+0x38c>)
 8004426:	fba3 1302 	umull	r1, r3, r3, r2
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2164      	movs	r1, #100	; 0x64
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	3332      	adds	r3, #50	; 0x32
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <UART_SetConfig+0x38c>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4432      	add	r2, r6
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	377c      	adds	r7, #124	; 0x7c
 8004450:	46bd      	mov	sp, r7
 8004452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004456:	bf00      	nop
 8004458:	40011000 	.word	0x40011000
 800445c:	40011400 	.word	0x40011400
 8004460:	51eb851f 	.word	0x51eb851f

08004464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004464:	b084      	sub	sp, #16
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	f107 001c 	add.w	r0, r7, #28
 8004472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004478:	2b01      	cmp	r3, #1
 800447a:	d122      	bne.n	80044c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f001 fac6 	bl	8005a48 <USB_CoreReset>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e01a      	b.n	80044f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f001 faba 	bl	8005a48 <USB_CoreReset>
 80044d4:	4603      	mov	r3, r0
 80044d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
 80044ea:	e005      	b.n	80044f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10b      	bne.n	8004516 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0206 	orr.w	r2, r3, #6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004522:	b004      	add	sp, #16
 8004524:	4770      	bx	lr
	...

08004528 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d165      	bne.n	8004608 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a41      	ldr	r2, [pc, #260]	; (8004644 <USB_SetTurnaroundTime+0x11c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d906      	bls.n	8004552 <USB_SetTurnaroundTime+0x2a>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <USB_SetTurnaroundTime+0x120>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d202      	bcs.n	8004552 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800454c:	230f      	movs	r3, #15
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	e062      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a3c      	ldr	r2, [pc, #240]	; (8004648 <USB_SetTurnaroundTime+0x120>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d306      	bcc.n	8004568 <USB_SetTurnaroundTime+0x40>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a3b      	ldr	r2, [pc, #236]	; (800464c <USB_SetTurnaroundTime+0x124>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d202      	bcs.n	8004568 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004562:	230e      	movs	r3, #14
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e057      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a38      	ldr	r2, [pc, #224]	; (800464c <USB_SetTurnaroundTime+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d306      	bcc.n	800457e <USB_SetTurnaroundTime+0x56>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a37      	ldr	r2, [pc, #220]	; (8004650 <USB_SetTurnaroundTime+0x128>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d202      	bcs.n	800457e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004578:	230d      	movs	r3, #13
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e04c      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a33      	ldr	r2, [pc, #204]	; (8004650 <USB_SetTurnaroundTime+0x128>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d306      	bcc.n	8004594 <USB_SetTurnaroundTime+0x6c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a32      	ldr	r2, [pc, #200]	; (8004654 <USB_SetTurnaroundTime+0x12c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d802      	bhi.n	8004594 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800458e:	230c      	movs	r3, #12
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e041      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <USB_SetTurnaroundTime+0x12c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d906      	bls.n	80045aa <USB_SetTurnaroundTime+0x82>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <USB_SetTurnaroundTime+0x130>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d802      	bhi.n	80045aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045a4:	230b      	movs	r3, #11
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e036      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <USB_SetTurnaroundTime+0x130>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d906      	bls.n	80045c0 <USB_SetTurnaroundTime+0x98>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a29      	ldr	r2, [pc, #164]	; (800465c <USB_SetTurnaroundTime+0x134>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d802      	bhi.n	80045c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045ba:	230a      	movs	r3, #10
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e02b      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a26      	ldr	r2, [pc, #152]	; (800465c <USB_SetTurnaroundTime+0x134>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d906      	bls.n	80045d6 <USB_SetTurnaroundTime+0xae>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a25      	ldr	r2, [pc, #148]	; (8004660 <USB_SetTurnaroundTime+0x138>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d202      	bcs.n	80045d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045d0:	2309      	movs	r3, #9
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e020      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a21      	ldr	r2, [pc, #132]	; (8004660 <USB_SetTurnaroundTime+0x138>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d306      	bcc.n	80045ec <USB_SetTurnaroundTime+0xc4>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a20      	ldr	r2, [pc, #128]	; (8004664 <USB_SetTurnaroundTime+0x13c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d802      	bhi.n	80045ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045e6:	2308      	movs	r3, #8
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e015      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <USB_SetTurnaroundTime+0x13c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d906      	bls.n	8004602 <USB_SetTurnaroundTime+0xda>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <USB_SetTurnaroundTime+0x140>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d202      	bcs.n	8004602 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045fc:	2307      	movs	r3, #7
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e00a      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004602:	2306      	movs	r3, #6
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e007      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800460e:	2309      	movs	r3, #9
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e001      	b.n	8004618 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004614:	2309      	movs	r3, #9
 8004616:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	029b      	lsls	r3, r3, #10
 800462c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004630:	431a      	orrs	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	00d8acbf 	.word	0x00d8acbf
 8004648:	00e4e1c0 	.word	0x00e4e1c0
 800464c:	00f42400 	.word	0x00f42400
 8004650:	01067380 	.word	0x01067380
 8004654:	011a499f 	.word	0x011a499f
 8004658:	01312cff 	.word	0x01312cff
 800465c:	014ca43f 	.word	0x014ca43f
 8004660:	016e3600 	.word	0x016e3600
 8004664:	01a6ab1f 	.word	0x01a6ab1f
 8004668:	01e84800 	.word	0x01e84800

0800466c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f043 0201 	orr.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d106      	bne.n	80046dc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e00b      	b.n	80046f4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	e001      	b.n	80046f4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e003      	b.n	80046fc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046f4:	2032      	movs	r0, #50	; 0x32
 80046f6:	f7fc fe5b 	bl	80013b0 <HAL_Delay>

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b580      	push	{r7, lr}
 8004708:	b086      	sub	sp, #24
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e009      	b.n	8004738 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3340      	adds	r3, #64	; 0x40
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	2200      	movs	r2, #0
 8004730:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3301      	adds	r3, #1
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0e      	cmp	r3, #14
 800473c:	d9f2      	bls.n	8004724 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11c      	bne.n	800477e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004752:	f043 0302 	orr.w	r3, r3, #2
 8004756:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
 800477c:	e00b      	b.n	8004796 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800479c:	461a      	mov	r2, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a8:	4619      	mov	r1, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b0:	461a      	mov	r2, r3
 80047b2:	680b      	ldr	r3, [r1, #0]
 80047b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10c      	bne.n	80047d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047c2:	2100      	movs	r1, #0
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f949 	bl	8004a5c <USB_SetDevSpeed>
 80047ca:	e008      	b.n	80047de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047cc:	2101      	movs	r1, #1
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f944 	bl	8004a5c <USB_SetDevSpeed>
 80047d4:	e003      	b.n	80047de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047d6:	2103      	movs	r1, #3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f93f 	bl	8004a5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047de:	2110      	movs	r1, #16
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f8f3 	bl	80049cc <USB_FlushTxFifo>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f911 	bl	8004a18 <USB_FlushRxFifo>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e043      	b.n	80048b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800483c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004840:	d118      	bne.n	8004874 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	461a      	mov	r2, r3
 8004856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e013      	b.n	8004886 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e008      	b.n	8004886 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	461a      	mov	r2, r3
 8004882:	2300      	movs	r3, #0
 8004884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	461a      	mov	r2, r3
 80048a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3301      	adds	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3b7      	bcc.n	800482a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e043      	b.n	8004948 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d6:	d118      	bne.n	800490a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ea:	461a      	mov	r2, r3
 80048ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e013      	b.n	800491c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	e008      	b.n	800491c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004928:	461a      	mov	r2, r3
 800492a:	2300      	movs	r3, #0
 800492c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3301      	adds	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3b7      	bcc.n	80048c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f043 0210 	orr.w	r2, r3, #16
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <USB_DevInit+0x2c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d107      	bne.n	80049b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049c4:	b004      	add	sp, #16
 80049c6:	4770      	bx	lr
 80049c8:	803c3800 	.word	0x803c3800

080049cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3301      	adds	r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <USB_FlushTxFifo+0x48>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e006      	b.n	8004a06 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d0f0      	beq.n	80049e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	00030d40 	.word	0x00030d40

08004a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2210      	movs	r2, #16
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <USB_FlushRxFifo+0x40>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d0f0      	beq.n	8004a2a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
 8004ab2:	e00a      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d002      	beq.n	8004ac0 <USB_GetDevSpeed+0x32>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b06      	cmp	r3, #6
 8004abe:	d102      	bne.n	8004ac6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	75fb      	strb	r3, [r7, #23]
 8004ac4:	e001      	b.n	8004aca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13a      	bne.n	8004b6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	2101      	movs	r1, #1
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d155      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	78db      	ldrb	r3, [r3, #3]
 8004b46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	059b      	lsls	r3, r3, #22
 8004b4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b50:	4313      	orrs	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e036      	b.n	8004bd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	68f9      	ldr	r1, [r7, #12]
 8004b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d11a      	bne.n	8004bd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d161      	bne.n	8004cc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1a:	d11f      	bne.n	8004c5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0159      	lsls	r1, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <USB_DeactivateEndpoint+0x1b0>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
 8004cc6:	e060      	b.n	8004d8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cde:	d11f      	bne.n	8004d20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	0151      	lsls	r1, r2, #5
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	440a      	add	r2, r1
 8004d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d40:	4013      	ands	r3, r2
 8004d42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5a:	041b      	lsls	r3, r3, #16
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d64:	4013      	ands	r3, r2
 8004d66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	0159      	lsls	r1, r3, #5
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	440b      	add	r3, r1
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	4619      	mov	r1, r3
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <USB_DeactivateEndpoint+0x1b4>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	ec337800 	.word	0xec337800
 8004d9c:	eff37800 	.word	0xeff37800

08004da0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	; 0x28
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	4613      	mov	r3, r2
 8004dac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	f040 815c 	bne.w	800507a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d132      	bne.n	8004e30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	0cdb      	lsrs	r3, r3, #19
 8004e2a:	04db      	lsls	r3, r3, #19
 8004e2c:	6113      	str	r3, [r2, #16]
 8004e2e:	e074      	b.n	8004f1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	0cdb      	lsrs	r3, r3, #19
 8004e4c:	04db      	lsls	r3, r3, #19
 8004e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6959      	ldr	r1, [r3, #20]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	1e59      	subs	r1, r3, #1
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e96:	04d9      	lsls	r1, r3, #19
 8004e98:	4b9d      	ldr	r3, [pc, #628]	; (8005110 <USB_EPStartXfer+0x370>)
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	0148      	lsls	r0, r1, #5
 8004ea0:	69f9      	ldr	r1, [r7, #28]
 8004ea2:	4401      	add	r1, r0
 8004ea4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	0148      	lsls	r0, r1, #5
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	4401      	add	r1, r0
 8004eca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d11f      	bne.n	8004f1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ef8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d14b      	bne.n	8004fb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d128      	bne.n	8004f96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d110      	bne.n	8004f76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e00f      	b.n	8004f96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e12f      	b.n	8005218 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	78db      	ldrb	r3, [r3, #3]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d015      	beq.n	800500c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8117 	beq.w	8005218 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	634b      	str	r3, [r1, #52]	; 0x34
 800500a:	e105      	b.n	8005218 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	e00f      	b.n	800505e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68d9      	ldr	r1, [r3, #12]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	b298      	uxth	r0, r3
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	4603      	mov	r3, r0
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fa2b 	bl	80054ce <USB_WritePacket>
 8005078:	e0ce      	b.n	8005218 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	0cdb      	lsrs	r3, r3, #19
 8005096:	04db      	lsls	r3, r3, #19
 8005098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	0151      	lsls	r1, r2, #5
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	440a      	add	r2, r1
 80050b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d126      	bne.n	8005114 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	0148      	lsls	r0, r1, #5
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	4401      	add	r1, r0
 80050e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e8:	4313      	orrs	r3, r2
 80050ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	69fa      	ldr	r2, [r7, #28]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510a:	6113      	str	r3, [r2, #16]
 800510c:	e036      	b.n	800517c <USB_EPStartXfer+0x3dc>
 800510e:	bf00      	nop
 8005110:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4413      	add	r3, r2
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	04d9      	lsls	r1, r3, #19
 800513c:	4b39      	ldr	r3, [pc, #228]	; (8005224 <USB_EPStartXfer+0x484>)
 800513e:	400b      	ands	r3, r1
 8005140:	69b9      	ldr	r1, [r7, #24]
 8005142:	0148      	lsls	r0, r1, #5
 8005144:	69f9      	ldr	r1, [r7, #28]
 8005146:	4401      	add	r1, r0
 8005148:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	8af9      	ldrh	r1, [r7, #22]
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	0148      	lsls	r0, r1, #5
 8005170:	69f9      	ldr	r1, [r7, #28]
 8005172:	4401      	add	r1, r0
 8005174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005178:	4313      	orrs	r3, r2
 800517a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10d      	bne.n	800519e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	460a      	mov	r2, r1
 800519c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	78db      	ldrb	r3, [r3, #3]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d128      	bne.n	80051f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d110      	bne.n	80051d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00f      	b.n	80051f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005216:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	1ff80000 	.word	0x1ff80000

08005228 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 80cd 	bne.w	80053e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d132      	bne.n	80052b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	440a      	add	r2, r1
 8005268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	0cdb      	lsrs	r3, r3, #19
 80052b2:	04db      	lsls	r3, r3, #19
 80052b4:	6113      	str	r3, [r2, #16]
 80052b6:	e04e      	b.n	8005356 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	0cdb      	lsrs	r3, r3, #19
 80052d4:	04db      	lsls	r3, r3, #19
 80052d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d903      	bls.n	8005310 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800532a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	0148      	lsls	r0, r1, #5
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	4401      	add	r1, r0
 800534e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005352:	4313      	orrs	r3, r2
 8005354:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d11e      	bne.n	800539a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d009      	beq.n	8005378 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	e092      	b.n	80054c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d07e      	beq.n	80054c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	6979      	ldr	r1, [r7, #20]
 80053da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053de:	4313      	orrs	r3, r2
 80053e0:	634b      	str	r3, [r1, #52]	; 0x34
 80053e2:	e06d      	b.n	80054c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fe:	0cdb      	lsrs	r3, r3, #19
 8005400:	04db      	lsls	r3, r3, #19
 8005402:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005422:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005426:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546e:	6939      	ldr	r1, [r7, #16]
 8005470:	0148      	lsls	r0, r1, #5
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	4401      	add	r1, r0
 8005476:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10d      	bne.n	80054a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68d9      	ldr	r1, [r3, #12]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	460a      	mov	r2, r1
 800549e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b089      	sub	sp, #36	; 0x24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	4611      	mov	r1, r2
 80054da:	461a      	mov	r2, r3
 80054dc:	460b      	mov	r3, r1
 80054de:	71fb      	strb	r3, [r7, #7]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80054ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11a      	bne.n	800552a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054f4:	88bb      	ldrh	r3, [r7, #4]
 80054f6:	3303      	adds	r3, #3
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e00f      	b.n	8005522 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	031a      	lsls	r2, r3, #12
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550e:	461a      	mov	r2, r3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3304      	adds	r3, #4
 800551a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3301      	adds	r3, #1
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	429a      	cmp	r2, r3
 8005528:	d3eb      	bcc.n	8005502 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3724      	adds	r7, #36	; 0x24
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	3303      	adds	r3, #3
 8005552:	089b      	lsrs	r3, r3, #2
 8005554:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
 800555a:	e00b      	b.n	8005574 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	601a      	str	r2, [r3, #0]
    pDest++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3304      	adds	r3, #4
 800556c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	3301      	adds	r3, #1
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d3ef      	bcc.n	800555c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800557c:	69fb      	ldr	r3, [r7, #28]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3724      	adds	r7, #36	; 0x24
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d12c      	bne.n	8005600 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	db12      	blt.n	80055de <USB_EPSetStall+0x54>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055dc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e02b      	b.n	8005658 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	db12      	blt.n	8005638 <USB_EPSetStall+0xae>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00f      	beq.n	8005638 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005632:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005636:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d128      	bne.n	80056d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d003      	beq.n	80056b2 <USB_EPClearStall+0x4c>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d138      	bne.n	8005724 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e027      	b.n	8005724 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d003      	beq.n	8005704 <USB_EPClearStall+0x9e>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	78db      	ldrb	r3, [r3, #3]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d10f      	bne.n	8005724 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005722:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005750:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005754:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005798:	f023 0303 	bic.w	r3, r3, #3
 800579c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f023 0302 	bic.w	r3, r3, #2
 80057b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057da:	f023 0303 	bic.w	r3, r3, #3
 80057de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ee:	f043 0302 	orr.w	r3, r3, #2
 80057f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4013      	ands	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800581a:	68fb      	ldr	r3, [r7, #12]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	0c1b      	lsrs	r3, r3, #16
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	b29b      	uxth	r3, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058be:	68bb      	ldr	r3, [r7, #8]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	01db      	lsls	r3, r3, #7
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4013      	ands	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800591a:	68bb      	ldr	r3, [r7, #8]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0301 	and.w	r3, r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	460b      	mov	r3, r1
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	333c      	adds	r3, #60	; 0x3c
 80059a2:	3304      	adds	r3, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <USB_EP0_OutStart+0xb8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d90a      	bls.n	80059c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c0:	d101      	bne.n	80059c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e037      	b.n	8005a36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	461a      	mov	r2, r3
 80059ce:	2300      	movs	r3, #0
 80059d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f4:	f043 0318 	orr.w	r3, r3, #24
 80059f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d10f      	bne.n	8005a34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	4f54300a 	.word	0x4f54300a

08005a48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3301      	adds	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <USB_CoreReset+0x64>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e01b      	b.n	8005a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	daf2      	bge.n	8005a54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f043 0201 	orr.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3301      	adds	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a09      	ldr	r2, [pc, #36]	; (8005aac <USB_CoreReset+0x64>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d901      	bls.n	8005a90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e006      	b.n	8005a9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d0f0      	beq.n	8005a7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	00030d40 	.word	0x00030d40

08005ab0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005abc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ac0:	f002 f95c 	bl	8007d7c <USBD_static_malloc>
 8005ac4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e066      	b.n	8005ba6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7c1b      	ldrb	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d119      	bne.n	8005b1c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aec:	2202      	movs	r2, #2
 8005aee:	2181      	movs	r1, #129	; 0x81
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f002 f820 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005afc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b00:	2202      	movs	r2, #2
 8005b02:	2101      	movs	r1, #1
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f002 f816 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2210      	movs	r2, #16
 8005b16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b1a:	e016      	b.n	8005b4a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	2202      	movs	r2, #2
 8005b20:	2181      	movs	r1, #129	; 0x81
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f002 f807 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	2202      	movs	r2, #2
 8005b32:	2101      	movs	r1, #1
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fffe 	bl	8007b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2210      	movs	r2, #16
 8005b46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	2182      	movs	r1, #130	; 0x82
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fff0 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	7c1b      	ldrb	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f002 f8c1 	bl	8007d14 <USBD_LL_PrepareReceive>
 8005b92:	e007      	b.n	8005ba4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f002 f8b8 	bl	8007d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005bba:	2181      	movs	r1, #129	; 0x81
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 ffe0 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005bc8:	2101      	movs	r1, #1
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 ffd9 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005bd8:	2182      	movs	r1, #130	; 0x82
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 ffd1 	bl	8007b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 f8c4 	bl	8007d98 <USBD_static_free>
    pdev->pClassData = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e0af      	b.n	8005dac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d03f      	beq.n	8005cd8 <USBD_CDC_Setup+0xb4>
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	f040 809f 	bne.w	8005d9c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02e      	beq.n	8005cc4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da16      	bge.n	8005c9e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005c7c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	88d2      	ldrh	r2, [r2, #6]
 8005c82:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	88db      	ldrh	r3, [r3, #6]
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	bf28      	it	cs
 8005c8c:	2307      	movcs	r3, #7
 8005c8e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	89fa      	ldrh	r2, [r7, #14]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fb19 	bl	80072ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c9c:	e085      	b.n	8005daa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	785a      	ldrb	r2, [r3, #1]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	88db      	ldrh	r3, [r3, #6]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005cb4:	6939      	ldr	r1, [r7, #16]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	88db      	ldrh	r3, [r3, #6]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fb32 	bl	8007326 <USBD_CtlPrepareRx>
      break;
 8005cc2:	e072      	b.n	8005daa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	7850      	ldrb	r0, [r2, #1]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	4798      	blx	r3
      break;
 8005cd6:	e068      	b.n	8005daa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b0b      	cmp	r3, #11
 8005cde:	d852      	bhi.n	8005d86 <USBD_CDC_Setup+0x162>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USBD_CDC_Setup+0xc4>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005d19 	.word	0x08005d19
 8005cec:	08005d95 	.word	0x08005d95
 8005cf0:	08005d87 	.word	0x08005d87
 8005cf4:	08005d87 	.word	0x08005d87
 8005cf8:	08005d87 	.word	0x08005d87
 8005cfc:	08005d87 	.word	0x08005d87
 8005d00:	08005d87 	.word	0x08005d87
 8005d04:	08005d87 	.word	0x08005d87
 8005d08:	08005d87 	.word	0x08005d87
 8005d0c:	08005d87 	.word	0x08005d87
 8005d10:	08005d43 	.word	0x08005d43
 8005d14:	08005d6d 	.word	0x08005d6d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d107      	bne.n	8005d34 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d24:	f107 030a 	add.w	r3, r7, #10
 8005d28:	2202      	movs	r2, #2
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 face 	bl	80072ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d32:	e032      	b.n	8005d9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fa58 	bl	80071ec <USBD_CtlError>
            ret = USBD_FAIL;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d40:	e02b      	b.n	8005d9a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d4e:	f107 030d 	add.w	r3, r7, #13
 8005d52:	2201      	movs	r2, #1
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 fab9 	bl	80072ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d5c:	e01d      	b.n	8005d9a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 fa43 	bl	80071ec <USBD_CtlError>
            ret = USBD_FAIL;
 8005d66:	2303      	movs	r3, #3
 8005d68:	75fb      	strb	r3, [r7, #23]
          break;
 8005d6a:	e016      	b.n	8005d9a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d00f      	beq.n	8005d98 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fa36 	bl	80071ec <USBD_CtlError>
            ret = USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d84:	e008      	b.n	8005d98 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f001 fa2f 	bl	80071ec <USBD_CtlError>
          ret = USBD_FAIL;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	75fb      	strb	r3, [r7, #23]
          break;
 8005d92:	e002      	b.n	8005d9a <USBD_CDC_Setup+0x176>
          break;
 8005d94:	bf00      	nop
 8005d96:	e008      	b.n	8005daa <USBD_CDC_Setup+0x186>
          break;
 8005d98:	bf00      	nop
      }
      break;
 8005d9a:	e006      	b.n	8005daa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fa24 	bl	80071ec <USBD_CtlError>
      ret = USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	75fb      	strb	r3, [r7, #23]
      break;
 8005da8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e04f      	b.n	8005e76 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ddc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005dde:	78fa      	ldrb	r2, [r7, #3]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	3318      	adds	r3, #24
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d029      	beq.n	8005e48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005df4:	78fa      	ldrb	r2, [r7, #3]
 8005df6:	6879      	ldr	r1, [r7, #4]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	3318      	adds	r3, #24
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	78f9      	ldrb	r1, [r7, #3]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	1a5b      	subs	r3, r3, r1
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4403      	add	r3, r0
 8005e14:	3344      	adds	r3, #68	; 0x44
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e1c:	fb03 f301 	mul.w	r3, r3, r1
 8005e20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d110      	bne.n	8005e48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3318      	adds	r3, #24
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e3a:	78f9      	ldrb	r1, [r7, #3]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2200      	movs	r2, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 ff46 	bl	8007cd2 <USBD_LL_Transmit>
 8005e46:	e015      	b.n	8005e74 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e70:	78fa      	ldrb	r2, [r7, #3]
 8005e72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e015      	b.n	8005ecc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 ff56 	bl	8007d56 <USBD_LL_GetRxDataSize>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e01b      	b.n	8005f26 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d015      	beq.n	8005f24 <USBD_CDC_EP0_RxReady+0x50>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005efe:	2bff      	cmp	r3, #255	; 0xff
 8005f00:	d010      	beq.n	8005f24 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f10:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
	...

08005f30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2243      	movs	r2, #67	; 0x43
 8005f3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f3e:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	200000a8 	.word	0x200000a8

08005f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2243      	movs	r2, #67	; 0x43
 8005f5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005f5e:	4b03      	ldr	r3, [pc, #12]	; (8005f6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20000064 	.word	0x20000064

08005f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2243      	movs	r2, #67	; 0x43
 8005f7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005f7e:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	200000ec 	.word	0x200000ec

08005f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f9e:	4b03      	ldr	r3, [pc, #12]	; (8005fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000020 	.word	0x20000020

08005fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e004      	b.n	8005fce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b087      	sub	sp, #28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e008      	b.n	800600a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006026:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800602e:	2303      	movs	r3, #3
 8006030:	e004      	b.n	800603c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006056:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006066:	2303      	movs	r3, #3
 8006068:	e01a      	b.n	80060a0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006070:	2b00      	cmp	r3, #0
 8006072:	d114      	bne.n	800609e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2201      	movs	r2, #1
 8006078:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006092:	2181      	movs	r1, #129	; 0x81
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fe1c 	bl	8007cd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e016      	b.n	80060f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7c1b      	ldrb	r3, [r3, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d8:	2101      	movs	r1, #1
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f001 fe1a 	bl	8007d14 <USBD_LL_PrepareReceive>
 80060e0:	e007      	b.n	80060f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060e8:	2340      	movs	r3, #64	; 0x40
 80060ea:	2101      	movs	r1, #1
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fe11 	bl	8007d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	e01f      	b.n	8006154 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	79fa      	ldrb	r2, [r7, #7]
 8006146:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 fc8d 	bl	8007a68 <USBD_LL_Init>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006170:	2303      	movs	r3, #3
 8006172:	e016      	b.n	80061a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	f107 020e 	add.w	r2, r7, #14
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fca4 	bl	8007b00 <USBD_LL_Start>
 80061b8:	4603      	mov	r3, r0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	4611      	mov	r1, r2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	4611      	mov	r1, r2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
  }

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 ff90 	bl	8007178 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006266:	461a      	mov	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2b02      	cmp	r3, #2
 800627a:	d01a      	beq.n	80062b2 <USBD_LL_SetupStage+0x72>
 800627c:	2b02      	cmp	r3, #2
 800627e:	d822      	bhi.n	80062c6 <USBD_LL_SetupStage+0x86>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <USBD_LL_SetupStage+0x4a>
 8006284:	2b01      	cmp	r3, #1
 8006286:	d00a      	beq.n	800629e <USBD_LL_SetupStage+0x5e>
 8006288:	e01d      	b.n	80062c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa62 	bl	800675c <USBD_StdDevReq>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e020      	b.n	80062e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fac6 	bl	8006838 <USBD_StdItfReq>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
      break;
 80062b0:	e016      	b.n	80062e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fb05 	bl	80068ca <USBD_StdEPReq>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
      break;
 80062c4:	e00c      	b.n	80062e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fc73 	bl	8007bc0 <USBD_LL_StallEP>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
      break;
 80062de:	bf00      	nop
  }

  return ret;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	460b      	mov	r3, r1
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d138      	bne.n	8006370 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006304:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800630c:	2b03      	cmp	r3, #3
 800630e:	d14a      	bne.n	80063a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d913      	bls.n	8006344 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	4293      	cmp	r3, r2
 8006334:	bf28      	it	cs
 8006336:	4613      	movcs	r3, r2
 8006338:	461a      	mov	r2, r3
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f001 f80f 	bl	8007360 <USBD_CtlContinueRx>
 8006342:	e030      	b.n	80063a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d10b      	bne.n	8006368 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 f80a 	bl	8007382 <USBD_CtlSendStatus>
 800636e:	e01a      	b.n	80063a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b03      	cmp	r3, #3
 800637a:	d114      	bne.n	80063a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00e      	beq.n	80063a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	7afa      	ldrb	r2, [r7, #11]
 8006392:	4611      	mov	r1, r2
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	4798      	blx	r3
 8006398:	4603      	mov	r3, r0
 800639a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	e000      	b.n	80063a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	460b      	mov	r3, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d16b      	bne.n	800649c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3314      	adds	r3, #20
 80063c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d156      	bne.n	8006482 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d914      	bls.n	800640a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	461a      	mov	r2, r3
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 ff84 	bl	8007304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f001 fc86 	bl	8007d14 <USBD_LL_PrepareReceive>
 8006408:	e03b      	b.n	8006482 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	d11c      	bne.n	8006450 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800641e:	429a      	cmp	r2, r3
 8006420:	d316      	bcc.n	8006450 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800642c:	429a      	cmp	r2, r3
 800642e:	d20f      	bcs.n	8006450 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 ff65 	bl	8007304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f001 fc63 	bl	8007d14 <USBD_LL_PrepareReceive>
 800644e:	e018      	b.n	8006482 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b03      	cmp	r3, #3
 800645a:	d10b      	bne.n	8006474 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 fba2 	bl	8007bc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 ff93 	bl	80073a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006488:	2b01      	cmp	r3, #1
 800648a:	d122      	bne.n	80064d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fe98 	bl	80061c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800649a:	e01a      	b.n	80064d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d114      	bne.n	80064d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00e      	beq.n	80064d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	7afa      	ldrb	r2, [r7, #11]
 80064be:	4611      	mov	r1, r2
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	4798      	blx	r3
 80064c4:	4603      	mov	r3, r0
 80064c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	e000      	b.n	80064d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e02f      	b.n	8006570 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6852      	ldr	r2, [r2, #4]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	4611      	mov	r1, r2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	2200      	movs	r2, #0
 800653e:	2100      	movs	r1, #0
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 faf8 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2240      	movs	r2, #64	; 0x40
 8006552:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	2200      	movs	r2, #0
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 faea 	bl	8007b36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2240      	movs	r2, #64	; 0x40
 800656c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2204      	movs	r2, #4
 80065b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d106      	bne.n	80065e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e012      	b.n	8006630 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b03      	cmp	r3, #3
 8006614:	d10b      	bne.n	800662e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800664e:	2303      	movs	r3, #3
 8006650:	e014      	b.n	800667c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d10d      	bne.n	800667a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	78fa      	ldrb	r2, [r7, #3]
 8006674:	4611      	mov	r1, r2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800669a:	2303      	movs	r3, #3
 800669c:	e014      	b.n	80066c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d10d      	bne.n	80066c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	4611      	mov	r1, r2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6852      	ldr	r2, [r2, #4]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	4611      	mov	r1, r2
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
  }

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800671e:	b480      	push	{r7}
 8006720:	b087      	sub	sp, #28
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	3301      	adds	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800673c:	8a3b      	ldrh	r3, [r7, #16]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	b21a      	sxth	r2, r3
 8006742:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006746:	4313      	orrs	r3, r2
 8006748:	b21b      	sxth	r3, r3
 800674a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800674c:	89fb      	ldrh	r3, [r7, #14]
}
 800674e:	4618      	mov	r0, r3
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d005      	beq.n	8006782 <USBD_StdDevReq+0x26>
 8006776:	2b40      	cmp	r3, #64	; 0x40
 8006778:	d853      	bhi.n	8006822 <USBD_StdDevReq+0xc6>
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <USBD_StdDevReq+0x3a>
 800677e:	2b20      	cmp	r3, #32
 8006780:	d14f      	bne.n	8006822 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e04a      	b.n	800682c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2b09      	cmp	r3, #9
 800679c:	d83b      	bhi.n	8006816 <USBD_StdDevReq+0xba>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <USBD_StdDevReq+0x48>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067f9 	.word	0x080067f9
 80067a8:	0800680d 	.word	0x0800680d
 80067ac:	08006817 	.word	0x08006817
 80067b0:	08006803 	.word	0x08006803
 80067b4:	08006817 	.word	0x08006817
 80067b8:	080067d7 	.word	0x080067d7
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	08006817 	.word	0x08006817
 80067c4:	080067ef 	.word	0x080067ef
 80067c8:	080067e1 	.word	0x080067e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f9de 	bl	8006b90 <USBD_GetDescriptor>
          break;
 80067d4:	e024      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb43 	bl	8006e64 <USBD_SetAddress>
          break;
 80067de:	e01f      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fb82 	bl	8006eec <USBD_SetConfig>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
          break;
 80067ec:	e018      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fc21 	bl	8007038 <USBD_GetConfig>
          break;
 80067f6:	e013      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fc52 	bl	80070a4 <USBD_GetStatus>
          break;
 8006800:	e00e      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fc81 	bl	800710c <USBD_SetFeature>
          break;
 800680a:	e009      	b.n	8006820 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc90 	bl	8007134 <USBD_ClrFeature>
          break;
 8006814:	e004      	b.n	8006820 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fce7 	bl	80071ec <USBD_CtlError>
          break;
 800681e:	bf00      	nop
      }
      break;
 8006820:	e004      	b.n	800682c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fce1 	bl	80071ec <USBD_CtlError>
      break;
 800682a:	bf00      	nop
  }

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop

08006838 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d005      	beq.n	800685e <USBD_StdItfReq+0x26>
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d82f      	bhi.n	80068b6 <USBD_StdItfReq+0x7e>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <USBD_StdItfReq+0x26>
 800685a:	2b20      	cmp	r3, #32
 800685c:	d12b      	bne.n	80068b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	b2db      	uxtb	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	2b02      	cmp	r3, #2
 800686a:	d81d      	bhi.n	80068a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	889b      	ldrh	r3, [r3, #4]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b01      	cmp	r3, #1
 8006874:	d813      	bhi.n	800689e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d110      	bne.n	80068b2 <USBD_StdItfReq+0x7a>
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10d      	bne.n	80068b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fd73 	bl	8007382 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800689c:	e009      	b.n	80068b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fca3 	bl	80071ec <USBD_CtlError>
          break;
 80068a6:	e004      	b.n	80068b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fc9e 	bl	80071ec <USBD_CtlError>
          break;
 80068b0:	e000      	b.n	80068b4 <USBD_StdItfReq+0x7c>
          break;
 80068b2:	bf00      	nop
      }
      break;
 80068b4:	e004      	b.n	80068c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fc97 	bl	80071ec <USBD_CtlError>
      break;
 80068be:	bf00      	nop
  }

  return ret;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	889b      	ldrh	r3, [r3, #4]
 80068dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d007      	beq.n	80068fa <USBD_StdEPReq+0x30>
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	f200 8145 	bhi.w	8006b7a <USBD_StdEPReq+0x2b0>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00c      	beq.n	800690e <USBD_StdEPReq+0x44>
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	f040 8140 	bne.w	8006b7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
      break;
 800690c:	e13a      	b.n	8006b84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d007      	beq.n	8006926 <USBD_StdEPReq+0x5c>
 8006916:	2b03      	cmp	r3, #3
 8006918:	f300 8129 	bgt.w	8006b6e <USBD_StdEPReq+0x2a4>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d07f      	beq.n	8006a20 <USBD_StdEPReq+0x156>
 8006920:	2b01      	cmp	r3, #1
 8006922:	d03c      	beq.n	800699e <USBD_StdEPReq+0xd4>
 8006924:	e123      	b.n	8006b6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d002      	beq.n	8006938 <USBD_StdEPReq+0x6e>
 8006932:	2b03      	cmp	r3, #3
 8006934:	d016      	beq.n	8006964 <USBD_StdEPReq+0x9a>
 8006936:	e02c      	b.n	8006992 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <USBD_StdEPReq+0x90>
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d00a      	beq.n	800695a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006944:	7bbb      	ldrb	r3, [r7, #14]
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 f939 	bl	8007bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800694e:	2180      	movs	r1, #128	; 0x80
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f935 	bl	8007bc0 <USBD_LL_StallEP>
 8006956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006958:	e020      	b.n	800699c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc45 	bl	80071ec <USBD_CtlError>
              break;
 8006962:	e01b      	b.n	800699c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	885b      	ldrh	r3, [r3, #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10e      	bne.n	800698a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <USBD_StdEPReq+0xc0>
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	2b80      	cmp	r3, #128	; 0x80
 8006976:	d008      	beq.n	800698a <USBD_StdEPReq+0xc0>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	88db      	ldrh	r3, [r3, #6]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f91b 	bl	8007bc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fcf9 	bl	8007382 <USBD_CtlSendStatus>

              break;
 8006990:	e004      	b.n	800699c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc29 	bl	80071ec <USBD_CtlError>
              break;
 800699a:	bf00      	nop
          }
          break;
 800699c:	e0ec      	b.n	8006b78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d002      	beq.n	80069b0 <USBD_StdEPReq+0xe6>
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d016      	beq.n	80069dc <USBD_StdEPReq+0x112>
 80069ae:	e030      	b.n	8006a12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069b0:	7bbb      	ldrb	r3, [r7, #14]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <USBD_StdEPReq+0x108>
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	2b80      	cmp	r3, #128	; 0x80
 80069ba:	d00a      	beq.n	80069d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 f8fd 	bl	8007bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 f8f9 	bl	8007bc0 <USBD_LL_StallEP>
 80069ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069d0:	e025      	b.n	8006a1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc09 	bl	80071ec <USBD_CtlError>
              break;
 80069da:	e020      	b.n	8006a1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	885b      	ldrh	r3, [r3, #2]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11b      	bne.n	8006a1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f903 	bl	8007bfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fcc2 	bl	8007382 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006a10:	e004      	b.n	8006a1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fbe9 	bl	80071ec <USBD_CtlError>
              break;
 8006a1a:	e000      	b.n	8006a1e <USBD_StdEPReq+0x154>
              break;
 8006a1c:	bf00      	nop
          }
          break;
 8006a1e:	e0ab      	b.n	8006b78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d002      	beq.n	8006a32 <USBD_StdEPReq+0x168>
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d032      	beq.n	8006a96 <USBD_StdEPReq+0x1cc>
 8006a30:	e097      	b.n	8006b62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <USBD_StdEPReq+0x17e>
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d004      	beq.n	8006a48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fbd3 	bl	80071ec <USBD_CtlError>
                break;
 8006a46:	e091      	b.n	8006b6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da0b      	bge.n	8006a68 <USBD_StdEPReq+0x19e>
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	3310      	adds	r3, #16
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	e00b      	b.n	8006a80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a68:	7bbb      	ldrb	r3, [r7, #14]
 8006a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	3304      	adds	r3, #4
 8006a80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc1d 	bl	80072ce <USBD_CtlSendData>
              break;
 8006a94:	e06a      	b.n	8006b6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da11      	bge.n	8006ac2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	f003 020f 	and.w	r2, r3, #15
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3324      	adds	r3, #36	; 0x24
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d117      	bne.n	8006ae8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb96 	bl	80071ec <USBD_CtlError>
                  break;
 8006ac0:	e054      	b.n	8006b6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	f003 020f 	and.w	r2, r3, #15
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fb83 	bl	80071ec <USBD_CtlError>
                  break;
 8006ae6:	e041      	b.n	8006b6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	da0b      	bge.n	8006b08 <USBD_StdEPReq+0x23e>
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3310      	adds	r3, #16
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	3304      	adds	r3, #4
 8006b06:	e00b      	b.n	8006b20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b0e:	4613      	mov	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	3304      	adds	r3, #4
 8006b20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <USBD_StdEPReq+0x264>
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d103      	bne.n	8006b36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e00e      	b.n	8006b54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f001 f87e 	bl	8007c3c <USBD_LL_IsStallEP>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	e002      	b.n	8006b54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2202      	movs	r2, #2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fbb7 	bl	80072ce <USBD_CtlSendData>
              break;
 8006b60:	e004      	b.n	8006b6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fb41 	bl	80071ec <USBD_CtlError>
              break;
 8006b6a:	bf00      	nop
          }
          break;
 8006b6c:	e004      	b.n	8006b78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fb3b 	bl	80071ec <USBD_CtlError>
          break;
 8006b76:	bf00      	nop
      }
      break;
 8006b78:	e004      	b.n	8006b84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb35 	bl	80071ec <USBD_CtlError>
      break;
 8006b82:	bf00      	nop
  }

  return ret;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	885b      	ldrh	r3, [r3, #2]
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b06      	cmp	r3, #6
 8006bb2:	f200 8128 	bhi.w	8006e06 <USBD_GetDescriptor+0x276>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <USBD_GetDescriptor+0x2c>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bd9 	.word	0x08006bd9
 8006bc0:	08006bf1 	.word	0x08006bf1
 8006bc4:	08006c31 	.word	0x08006c31
 8006bc8:	08006e07 	.word	0x08006e07
 8006bcc:	08006e07 	.word	0x08006e07
 8006bd0:	08006da7 	.word	0x08006da7
 8006bd4:	08006dd3 	.word	0x08006dd3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	7c12      	ldrb	r2, [r2, #16]
 8006be4:	f107 0108 	add.w	r1, r7, #8
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	60f8      	str	r0, [r7, #12]
      break;
 8006bee:	e112      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	7c1b      	ldrb	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c00:	f107 0208 	add.w	r2, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	2202      	movs	r2, #2
 8006c10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c12:	e100      	b.n	8006e16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	f107 0208 	add.w	r2, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	701a      	strb	r2, [r3, #0]
      break;
 8006c2e:	e0f2      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	885b      	ldrh	r3, [r3, #2]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	f200 80ac 	bhi.w	8006d94 <USBD_GetDescriptor+0x204>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <USBD_GetDescriptor+0xb4>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c5d 	.word	0x08006c5d
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006cc5 	.word	0x08006cc5
 8006c50:	08006cf9 	.word	0x08006cf9
 8006c54:	08006d2d 	.word	0x08006d2d
 8006c58:	08006d61 	.word	0x08006d61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	7c12      	ldrb	r2, [r2, #16]
 8006c74:	f107 0108 	add.w	r1, r7, #8
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4798      	blx	r3
 8006c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c7e:	e091      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fab2 	bl	80071ec <USBD_CtlError>
            err++;
 8006c88:	7afb      	ldrb	r3, [r7, #11]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c8e:	e089      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	7c12      	ldrb	r2, [r2, #16]
 8006ca8:	f107 0108 	add.w	r1, r7, #8
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
 8006cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb2:	e077      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa98 	bl	80071ec <USBD_CtlError>
            err++;
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cc2:	e06f      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	7c12      	ldrb	r2, [r2, #16]
 8006cdc:	f107 0108 	add.w	r1, r7, #8
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ce6:	e05d      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa7e 	bl	80071ec <USBD_CtlError>
            err++;
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cf6:	e055      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1a:	e043      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa64 	bl	80071ec <USBD_CtlError>
            err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2a:	e03b      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4e:	e029      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa4a 	bl	80071ec <USBD_CtlError>
            err++;
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5e:	e021      	b.n	8006da4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e00f      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa30 	bl	80071ec <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e007      	b.n	8006da4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa28 	bl	80071ec <USBD_CtlError>
          err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006da2:	bf00      	nop
      }
      break;
 8006da4:	e037      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7c1b      	ldrb	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	f107 0208 	add.w	r2, r7, #8
 8006dba:	4610      	mov	r0, r2
 8006dbc:	4798      	blx	r3
 8006dbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dc0:	e029      	b.n	8006e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa11 	bl	80071ec <USBD_CtlError>
        err++;
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	72fb      	strb	r3, [r7, #11]
      break;
 8006dd0:	e021      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7c1b      	ldrb	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10d      	bne.n	8006df6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	f107 0208 	add.w	r2, r7, #8
 8006de6:	4610      	mov	r0, r2
 8006de8:	4798      	blx	r3
 8006dea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	2207      	movs	r2, #7
 8006df2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006df4:	e00f      	b.n	8006e16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9f7 	bl	80071ec <USBD_CtlError>
        err++;
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	3301      	adds	r3, #1
 8006e02:	72fb      	strb	r3, [r7, #11]
      break;
 8006e04:	e007      	b.n	8006e16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9ef 	bl	80071ec <USBD_CtlError>
      err++;
 8006e0e:	7afb      	ldrb	r3, [r7, #11]
 8006e10:	3301      	adds	r3, #1
 8006e12:	72fb      	strb	r3, [r7, #11]
      break;
 8006e14:	bf00      	nop
  }

  if (err != 0U)
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11e      	bne.n	8006e5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	88db      	ldrh	r3, [r3, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e24:	893b      	ldrh	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00e      	beq.n	8006e48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	88da      	ldrh	r2, [r3, #6]
 8006e2e:	893b      	ldrh	r3, [r7, #8]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	bf28      	it	cs
 8006e34:	4613      	movcs	r3, r2
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fa44 	bl	80072ce <USBD_CtlSendData>
 8006e46:	e009      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9ce 	bl	80071ec <USBD_CtlError>
 8006e50:	e004      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa95 	bl	8007382 <USBD_CtlSendStatus>
 8006e58:	e000      	b.n	8006e5c <USBD_GetDescriptor+0x2cc>
    return;
 8006e5a:	bf00      	nop
  }
}
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop

08006e64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	889b      	ldrh	r3, [r3, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d131      	bne.n	8006eda <USBD_SetAddress+0x76>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d12d      	bne.n	8006eda <USBD_SetAddress+0x76>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	2b7f      	cmp	r3, #127	; 0x7f
 8006e84:	d829      	bhi.n	8006eda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	885b      	ldrh	r3, [r3, #2]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d104      	bne.n	8006ea8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f9a3 	bl	80071ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea6:	e01d      	b.n	8006ee4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 feed 	bl	8007c94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa61 	bl	8007382 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	e009      	b.n	8006ee4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed8:	e004      	b.n	8006ee4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f985 	bl	80071ec <USBD_CtlError>
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	4b4c      	ldr	r3, [pc, #304]	; (8007034 <USBD_SetConfig+0x148>)
 8006f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f04:	4b4b      	ldr	r3, [pc, #300]	; (8007034 <USBD_SetConfig+0x148>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d905      	bls.n	8006f18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f96c 	bl	80071ec <USBD_CtlError>
    return USBD_FAIL;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e088      	b.n	800702a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d002      	beq.n	8006f2a <USBD_SetConfig+0x3e>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d025      	beq.n	8006f74 <USBD_SetConfig+0x88>
 8006f28:	e071      	b.n	800700e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f2a:	4b42      	ldr	r3, [pc, #264]	; (8007034 <USBD_SetConfig+0x148>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01c      	beq.n	8006f6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006f32:	4b40      	ldr	r3, [pc, #256]	; (8007034 <USBD_SetConfig+0x148>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f3c:	4b3d      	ldr	r3, [pc, #244]	; (8007034 <USBD_SetConfig+0x148>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff f948 	bl	80061d8 <USBD_SetClassConfig>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f949 	bl	80071ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f5a:	e065      	b.n	8007028 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa10 	bl	8007382 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2203      	movs	r2, #3
 8006f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f6a:	e05d      	b.n	8007028 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa08 	bl	8007382 <USBD_CtlSendStatus>
      break;
 8006f72:	e059      	b.n	8007028 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f74:	4b2f      	ldr	r3, [pc, #188]	; (8007034 <USBD_SetConfig+0x148>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d112      	bne.n	8006fa2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f84:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <USBD_SetConfig+0x148>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f8e:	4b29      	ldr	r3, [pc, #164]	; (8007034 <USBD_SetConfig+0x148>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff f93b 	bl	8006210 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9f1 	bl	8007382 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006fa0:	e042      	b.n	8007028 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <USBD_SetConfig+0x148>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d02a      	beq.n	8007006 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff f929 	bl	8006210 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fbe:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <USBD_SetConfig+0x148>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <USBD_SetConfig+0x148>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff f902 	bl	80061d8 <USBD_SetClassConfig>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00f      	beq.n	8006ffe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f903 	bl	80071ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff f90e 	bl	8006210 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ffc:	e014      	b.n	8007028 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9bf 	bl	8007382 <USBD_CtlSendStatus>
      break;
 8007004:	e010      	b.n	8007028 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f9bb 	bl	8007382 <USBD_CtlSendStatus>
      break;
 800700c:	e00c      	b.n	8007028 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8eb 	bl	80071ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <USBD_SetConfig+0x148>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f8f7 	bl	8006210 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	73fb      	strb	r3, [r7, #15]
      break;
 8007026:	bf00      	nop
  }

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20000218 	.word	0x20000218

08007038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	88db      	ldrh	r3, [r3, #6]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d004      	beq.n	8007054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8cd 	bl	80071ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007052:	e023      	b.n	800709c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	dc02      	bgt.n	8007066 <USBD_GetConfig+0x2e>
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc03      	bgt.n	800706c <USBD_GetConfig+0x34>
 8007064:	e015      	b.n	8007092 <USBD_GetConfig+0x5a>
 8007066:	2b03      	cmp	r3, #3
 8007068:	d00b      	beq.n	8007082 <USBD_GetConfig+0x4a>
 800706a:	e012      	b.n	8007092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3308      	adds	r3, #8
 8007076:	2201      	movs	r2, #1
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f927 	bl	80072ce <USBD_CtlSendData>
        break;
 8007080:	e00c      	b.n	800709c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	2201      	movs	r2, #1
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f91f 	bl	80072ce <USBD_CtlSendData>
        break;
 8007090:	e004      	b.n	800709c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f8a9 	bl	80071ec <USBD_CtlError>
        break;
 800709a:	bf00      	nop
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d81e      	bhi.n	80070fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	88db      	ldrh	r3, [r3, #6]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d004      	beq.n	80070ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f890 	bl	80071ec <USBD_CtlError>
        break;
 80070cc:	e01a      	b.n	8007104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f043 0202 	orr.w	r2, r3, #2
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	330c      	adds	r3, #12
 80070ee:	2202      	movs	r2, #2
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f8eb 	bl	80072ce <USBD_CtlSendData>
      break;
 80070f8:	e004      	b.n	8007104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f875 	bl	80071ec <USBD_CtlError>
      break;
 8007102:	bf00      	nop
  }
}
 8007104:	bf00      	nop
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d106      	bne.n	800712c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f92b 	bl	8007382 <USBD_CtlSendStatus>
  }
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007144:	b2db      	uxtb	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	2b02      	cmp	r3, #2
 800714a:	d80b      	bhi.n	8007164 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	885b      	ldrh	r3, [r3, #2]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10c      	bne.n	800716e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f910 	bl	8007382 <USBD_CtlSendStatus>
      }
      break;
 8007162:	e004      	b.n	800716e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f840 	bl	80071ec <USBD_CtlError>
      break;
 800716c:	e000      	b.n	8007170 <USBD_ClrFeature+0x3c>
      break;
 800716e:	bf00      	nop
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	781a      	ldrb	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f7ff fabb 	bl	800671e <SWAPBYTE>
 80071a8:	4603      	mov	r3, r0
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7ff faae 	bl	800671e <SWAPBYTE>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3301      	adds	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff faa1 	bl	800671e <SWAPBYTE>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	80da      	strh	r2, [r3, #6]
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071f6:	2180      	movs	r1, #128	; 0x80
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fce1 	bl	8007bc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fcdd 	bl	8007bc0 <USBD_LL_StallEP>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d036      	beq.n	8007292 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007228:	6938      	ldr	r0, [r7, #16]
 800722a:	f000 f836 	bl	800729a <USBD_GetLen>
 800722e:	4603      	mov	r3, r0
 8007230:	3301      	adds	r3, #1
 8007232:	b29b      	uxth	r3, r3
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	701a      	strb	r2, [r3, #0]
  idx++;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	3301      	adds	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	4413      	add	r3, r2
 8007254:	2203      	movs	r2, #3
 8007256:	701a      	strb	r2, [r3, #0]
  idx++;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	3301      	adds	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800725e:	e013      	b.n	8007288 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	7812      	ldrb	r2, [r2, #0]
 800726a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3301      	adds	r3, #1
 8007270:	613b      	str	r3, [r7, #16]
    idx++;
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	3301      	adds	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
    idx++;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	3301      	adds	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e7      	bne.n	8007260 <USBD_GetString+0x52>
 8007290:	e000      	b.n	8007294 <USBD_GetString+0x86>
    return;
 8007292:	bf00      	nop
  }
}
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072aa:	e005      	b.n	80072b8 <USBD_GetLen+0x1e>
  {
    len++;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	3301      	adds	r3, #1
 80072b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f5      	bne.n	80072ac <USBD_GetLen+0x12>
  }

  return len;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2202      	movs	r2, #2
 80072de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	2100      	movs	r1, #0
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fcec 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fcdb 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2203      	movs	r2, #3
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fcdf 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	2100      	movs	r1, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fcce 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2204      	movs	r2, #4
 800738e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007392:	2300      	movs	r3, #0
 8007394:	2200      	movs	r2, #0
 8007396:	2100      	movs	r1, #0
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fc9a 	bl	8007cd2 <USBD_LL_Transmit>

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2205      	movs	r2, #5
 80073b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fca8 	bl	8007d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073d4:	2200      	movs	r2, #0
 80073d6:	4912      	ldr	r1, [pc, #72]	; (8007420 <MX_USB_DEVICE_Init+0x50>)
 80073d8:	4812      	ldr	r0, [pc, #72]	; (8007424 <MX_USB_DEVICE_Init+0x54>)
 80073da:	f7fe fe8f 	bl	80060fc <USBD_Init>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073e4:	f7f9 fbd6 	bl	8000b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073e8:	490f      	ldr	r1, [pc, #60]	; (8007428 <MX_USB_DEVICE_Init+0x58>)
 80073ea:	480e      	ldr	r0, [pc, #56]	; (8007424 <MX_USB_DEVICE_Init+0x54>)
 80073ec:	f7fe feb6 	bl	800615c <USBD_RegisterClass>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073f6:	f7f9 fbcd 	bl	8000b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073fa:	490c      	ldr	r1, [pc, #48]	; (800742c <MX_USB_DEVICE_Init+0x5c>)
 80073fc:	4809      	ldr	r0, [pc, #36]	; (8007424 <MX_USB_DEVICE_Init+0x54>)
 80073fe:	f7fe fdd7 	bl	8005fb0 <USBD_CDC_RegisterInterface>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007408:	f7f9 fbc4 	bl	8000b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_USB_DEVICE_Init+0x54>)
 800740e:	f7fe fecc 	bl	80061aa <USBD_Start>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007418:	f7f9 fbbc 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800741c:	bf00      	nop
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000144 	.word	0x20000144
 8007424:	2000059c 	.word	0x2000059c
 8007428:	2000002c 	.word	0x2000002c
 800742c:	20000130 	.word	0x20000130

08007430 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007434:	2200      	movs	r2, #0
 8007436:	4905      	ldr	r1, [pc, #20]	; (800744c <CDC_Init_FS+0x1c>)
 8007438:	4805      	ldr	r0, [pc, #20]	; (8007450 <CDC_Init_FS+0x20>)
 800743a:	f7fe fdce 	bl	8005fda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800743e:	4905      	ldr	r1, [pc, #20]	; (8007454 <CDC_Init_FS+0x24>)
 8007440:	4803      	ldr	r0, [pc, #12]	; (8007450 <CDC_Init_FS+0x20>)
 8007442:	f7fe fde8 	bl	8006016 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007446:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	2000106c 	.word	0x2000106c
 8007450:	2000059c 	.word	0x2000059c
 8007454:	2000086c 	.word	0x2000086c

08007458 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800745c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
 8007474:	4613      	mov	r3, r2
 8007476:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b23      	cmp	r3, #35	; 0x23
 800747c:	d84a      	bhi.n	8007514 <CDC_Control_FS+0xac>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <CDC_Control_FS+0x1c>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	08007515 	.word	0x08007515
 8007488:	08007515 	.word	0x08007515
 800748c:	08007515 	.word	0x08007515
 8007490:	08007515 	.word	0x08007515
 8007494:	08007515 	.word	0x08007515
 8007498:	08007515 	.word	0x08007515
 800749c:	08007515 	.word	0x08007515
 80074a0:	08007515 	.word	0x08007515
 80074a4:	08007515 	.word	0x08007515
 80074a8:	08007515 	.word	0x08007515
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007515 	.word	0x08007515
 80074b4:	08007515 	.word	0x08007515
 80074b8:	08007515 	.word	0x08007515
 80074bc:	08007515 	.word	0x08007515
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007515 	.word	0x08007515
 80074c8:	08007515 	.word	0x08007515
 80074cc:	08007515 	.word	0x08007515
 80074d0:	08007515 	.word	0x08007515
 80074d4:	08007515 	.word	0x08007515
 80074d8:	08007515 	.word	0x08007515
 80074dc:	08007515 	.word	0x08007515
 80074e0:	08007515 	.word	0x08007515
 80074e4:	08007515 	.word	0x08007515
 80074e8:	08007515 	.word	0x08007515
 80074ec:	08007515 	.word	0x08007515
 80074f0:	08007515 	.word	0x08007515
 80074f4:	08007515 	.word	0x08007515
 80074f8:	08007515 	.word	0x08007515
 80074fc:	08007515 	.word	0x08007515
 8007500:	08007515 	.word	0x08007515
 8007504:	08007515 	.word	0x08007515
 8007508:	08007515 	.word	0x08007515
 800750c:	08007515 	.word	0x08007515
 8007510:	08007515 	.word	0x08007515
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007514:	bf00      	nop
  }

  return (USBD_OK);
 8007516:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <CDC_Receive_FS+0x24>)
 8007532:	f7fe fd70 	bl	8006016 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007536:	4804      	ldr	r0, [pc, #16]	; (8007548 <CDC_Receive_FS+0x24>)
 8007538:	f7fe fdb6 	bl	80060a8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800753c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	2000059c 	.word	0x2000059c

0800754c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <CDC_Transmit_FS+0x48>)
 800755e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007562:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800756e:	2301      	movs	r3, #1
 8007570:	e00b      	b.n	800758a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	461a      	mov	r2, r3
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	4806      	ldr	r0, [pc, #24]	; (8007594 <CDC_Transmit_FS+0x48>)
 800757a:	f7fe fd2e 	bl	8005fda <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800757e:	4805      	ldr	r0, [pc, #20]	; (8007594 <CDC_Transmit_FS+0x48>)
 8007580:	f7fe fd62 	bl	8006048 <USBD_CDC_TransmitPacket>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	2000059c 	.word	0x2000059c

08007598 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2212      	movs	r2, #18
 80075cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000160 	.word	0x20000160

080075e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2204      	movs	r2, #4
 80075f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075f2:	4b03      	ldr	r3, [pc, #12]	; (8007600 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000174 	.word	0x20000174

08007604 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d105      	bne.n	8007622 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	4907      	ldr	r1, [pc, #28]	; (8007638 <USBD_FS_ProductStrDescriptor+0x34>)
 800761a:	4808      	ldr	r0, [pc, #32]	; (800763c <USBD_FS_ProductStrDescriptor+0x38>)
 800761c:	f7ff fdf7 	bl	800720e <USBD_GetString>
 8007620:	e004      	b.n	800762c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4904      	ldr	r1, [pc, #16]	; (8007638 <USBD_FS_ProductStrDescriptor+0x34>)
 8007626:	4805      	ldr	r0, [pc, #20]	; (800763c <USBD_FS_ProductStrDescriptor+0x38>)
 8007628:	f7ff fdf1 	bl	800720e <USBD_GetString>
  }
  return USBD_StrDesc;
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2000186c 	.word	0x2000186c
 800763c:	08008834 	.word	0x08008834

08007640 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	4904      	ldr	r1, [pc, #16]	; (8007660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007650:	4804      	ldr	r0, [pc, #16]	; (8007664 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007652:	f7ff fddc 	bl	800720e <USBD_GetString>
  return USBD_StrDesc;
 8007656:	4b02      	ldr	r3, [pc, #8]	; (8007660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	2000186c 	.word	0x2000186c
 8007664:	0800884c 	.word	0x0800884c

08007668 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	221a      	movs	r2, #26
 8007678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800767a:	f000 f843 	bl	8007704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800767e:	4b02      	ldr	r3, [pc, #8]	; (8007688 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000178 	.word	0x20000178

0800768c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	4603      	mov	r3, r0
 8007694:	6039      	str	r1, [r7, #0]
 8007696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d105      	bne.n	80076aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	4907      	ldr	r1, [pc, #28]	; (80076c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076a2:	4808      	ldr	r0, [pc, #32]	; (80076c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076a4:	f7ff fdb3 	bl	800720e <USBD_GetString>
 80076a8:	e004      	b.n	80076b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	4904      	ldr	r1, [pc, #16]	; (80076c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ae:	4805      	ldr	r0, [pc, #20]	; (80076c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076b0:	f7ff fdad 	bl	800720e <USBD_GetString>
  }
  return USBD_StrDesc;
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000186c 	.word	0x2000186c
 80076c4:	08008860 	.word	0x08008860

080076c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076de:	4808      	ldr	r0, [pc, #32]	; (8007700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076e0:	f7ff fd95 	bl	800720e <USBD_GetString>
 80076e4:	e004      	b.n	80076f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4904      	ldr	r1, [pc, #16]	; (80076fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076ea:	4805      	ldr	r0, [pc, #20]	; (8007700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076ec:	f7ff fd8f 	bl	800720e <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000186c 	.word	0x2000186c
 8007700:	0800886c 	.word	0x0800886c

08007704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <Get_SerialNum+0x44>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <Get_SerialNum+0x48>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <Get_SerialNum+0x4c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800772a:	2208      	movs	r2, #8
 800772c:	4909      	ldr	r1, [pc, #36]	; (8007754 <Get_SerialNum+0x50>)
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 f814 	bl	800775c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007734:	2204      	movs	r2, #4
 8007736:	4908      	ldr	r1, [pc, #32]	; (8007758 <Get_SerialNum+0x54>)
 8007738:	68b8      	ldr	r0, [r7, #8]
 800773a:	f000 f80f 	bl	800775c <IntToUnicode>
  }
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	1fff7a10 	.word	0x1fff7a10
 800774c:	1fff7a14 	.word	0x1fff7a14
 8007750:	1fff7a18 	.word	0x1fff7a18
 8007754:	2000017a 	.word	0x2000017a
 8007758:	2000018a 	.word	0x2000018a

0800775c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
 8007772:	e027      	b.n	80077c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0f1b      	lsrs	r3, r3, #28
 8007778:	2b09      	cmp	r3, #9
 800777a:	d80b      	bhi.n	8007794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	0f1b      	lsrs	r3, r3, #28
 8007780:	b2da      	uxtb	r2, r3
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	4619      	mov	r1, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	440b      	add	r3, r1
 800778c:	3230      	adds	r2, #48	; 0x30
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e00a      	b.n	80077aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	0f1b      	lsrs	r3, r3, #28
 8007798:	b2da      	uxtb	r2, r3
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	4619      	mov	r1, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	440b      	add	r3, r1
 80077a4:	3237      	adds	r2, #55	; 0x37
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	3301      	adds	r3, #1
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	3301      	adds	r3, #1
 80077c2:	75fb      	strb	r3, [r7, #23]
 80077c4:	7dfa      	ldrb	r2, [r7, #23]
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d3d3      	bcc.n	8007774 <IntToUnicode+0x18>
  }
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e4:	f107 0314 	add.w	r3, r7, #20
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	605a      	str	r2, [r3, #4]
 80077ee:	609a      	str	r2, [r3, #8]
 80077f0:	60da      	str	r2, [r3, #12]
 80077f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077fc:	d13a      	bne.n	8007874 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_PCD_MspInit+0xa0>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	4a1d      	ldr	r2, [pc, #116]	; (800787c <HAL_PCD_MspInit+0xa0>)
 8007808:	f043 0301 	orr.w	r3, r3, #1
 800780c:	6313      	str	r3, [r2, #48]	; 0x30
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <HAL_PCD_MspInit+0xa0>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800781a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800781e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007820:	2302      	movs	r3, #2
 8007822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007828:	2303      	movs	r3, #3
 800782a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800782c:	230a      	movs	r3, #10
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	4619      	mov	r1, r3
 8007836:	4812      	ldr	r0, [pc, #72]	; (8007880 <HAL_PCD_MspInit+0xa4>)
 8007838:	f7fa fa4e 	bl	8001cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <HAL_PCD_MspInit+0xa0>)
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	4a0e      	ldr	r2, [pc, #56]	; (800787c <HAL_PCD_MspInit+0xa0>)
 8007842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007846:	6353      	str	r3, [r2, #52]	; 0x34
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_PCD_MspInit+0xa0>)
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <HAL_PCD_MspInit+0xa0>)
 8007852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007856:	6453      	str	r3, [r2, #68]	; 0x44
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <HAL_PCD_MspInit+0xa0>)
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007864:	2200      	movs	r2, #0
 8007866:	2100      	movs	r1, #0
 8007868:	2043      	movs	r0, #67	; 0x43
 800786a:	f7fa f9fe 	bl	8001c6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800786e:	2043      	movs	r0, #67	; 0x43
 8007870:	f7fa fa17 	bl	8001ca2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007874:	bf00      	nop
 8007876:	3728      	adds	r7, #40	; 0x28
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40023800 	.word	0x40023800
 8007880:	40020000 	.word	0x40020000

08007884 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f7fe fcd0 	bl	8006240 <USBD_LL_SetupStage>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	4619      	mov	r1, r3
 80078d2:	f7fe fd0a 	bl	80062ea <USBD_LL_DataOutStage>
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	3348      	adds	r3, #72	; 0x48
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	4619      	mov	r1, r3
 8007906:	f7fe fd53 	bl	80063b0 <USBD_LL_DataInStage>
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe fe67 	bl	80065f4 <USBD_LL_SOF>
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007936:	2301      	movs	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007942:	2300      	movs	r3, #0
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	e008      	b.n	800795a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d102      	bne.n	8007956 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	e001      	b.n	800795a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007956:	f7f9 f91d 	bl	8000b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007960:	7bfa      	ldrb	r2, [r7, #15]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fe07 	bl	8006578 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fdb3 	bl	80064dc <USBD_LL_Reset>
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fe02 	bl	8006598 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <HAL_PCD_SuspendCallback+0x48>)
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	4a03      	ldr	r2, [pc, #12]	; (80079c8 <HAL_PCD_SuspendCallback+0x48>)
 80079ba:	f043 0306 	orr.w	r3, r3, #6
 80079be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fdf2 	bl	80065c4 <USBD_LL_Resume>
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	4611      	mov	r1, r2
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fe40 	bl	8006684 <USBD_LL_IsoOUTIncomplete>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fe08 	bl	8006638 <USBD_LL_IsoINIncomplete>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fe46 	bl	80066d0 <USBD_LL_DevConnected>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fe43 	bl	80066e6 <USBD_LL_DevDisconnected>
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d13c      	bne.n	8007af2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a78:	4a20      	ldr	r2, [pc, #128]	; (8007afc <USBD_LL_Init+0x94>)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <USBD_LL_Init+0x94>)
 8007a84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a88:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <USBD_LL_Init+0x94>)
 8007a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <USBD_LL_Init+0x94>)
 8007a92:	2204      	movs	r2, #4
 8007a94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a96:	4b19      	ldr	r3, [pc, #100]	; (8007afc <USBD_LL_Init+0x94>)
 8007a98:	2202      	movs	r2, #2
 8007a9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a9c:	4b17      	ldr	r3, [pc, #92]	; (8007afc <USBD_LL_Init+0x94>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007aa2:	4b16      	ldr	r3, [pc, #88]	; (8007afc <USBD_LL_Init+0x94>)
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007aa8:	4b14      	ldr	r3, [pc, #80]	; (8007afc <USBD_LL_Init+0x94>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007aae:	4b13      	ldr	r3, [pc, #76]	; (8007afc <USBD_LL_Init+0x94>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <USBD_LL_Init+0x94>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007aba:	4b10      	ldr	r3, [pc, #64]	; (8007afc <USBD_LL_Init+0x94>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <USBD_LL_Init+0x94>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ac6:	480d      	ldr	r0, [pc, #52]	; (8007afc <USBD_LL_Init+0x94>)
 8007ac8:	f7fa fabb 	bl	8002042 <HAL_PCD_Init>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ad2:	f7f9 f85f 	bl	8000b94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ad6:	2180      	movs	r1, #128	; 0x80
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <USBD_LL_Init+0x94>)
 8007ada:	f7fb fc18 	bl	800330e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4806      	ldr	r0, [pc, #24]	; (8007afc <USBD_LL_Init+0x94>)
 8007ae4:	f7fb fbcc 	bl	8003280 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	2101      	movs	r1, #1
 8007aec:	4803      	ldr	r0, [pc, #12]	; (8007afc <USBD_LL_Init+0x94>)
 8007aee:	f7fb fbc7 	bl	8003280 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20001a6c 	.word	0x20001a6c

08007b00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fa fbb0 	bl	800227c <HAL_PCD_Start>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 f942 	bl	8007dac <USBD_Get_USB_Status>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	4608      	mov	r0, r1
 8007b40:	4611      	mov	r1, r2
 8007b42:	461a      	mov	r2, r3
 8007b44:	4603      	mov	r3, r0
 8007b46:	70fb      	strb	r3, [r7, #3]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	70bb      	strb	r3, [r7, #2]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b5e:	78bb      	ldrb	r3, [r7, #2]
 8007b60:	883a      	ldrh	r2, [r7, #0]
 8007b62:	78f9      	ldrb	r1, [r7, #3]
 8007b64:	f7fa ff94 	bl	8002a90 <HAL_PCD_EP_Open>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f91c 	bl	8007dac <USBD_Get_USB_Status>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fa ffdd 	bl	8002b60 <HAL_PCD_EP_Close>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 f8fd 	bl	8007dac <USBD_Get_USB_Status>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fb f8b5 	bl	8002d4e <HAL_PCD_EP_SetStall>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f8de 	bl	8007dac <USBD_Get_USB_Status>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fb f8fa 	bl	8002e16 <HAL_PCD_EP_ClrStall>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f8bf 	bl	8007dac <USBD_Get_USB_Status>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	da0b      	bge.n	8007c70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	4613      	mov	r3, r2
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	333e      	adds	r3, #62	; 0x3e
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	e00b      	b.n	8007c88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fa fec7 	bl	8002a46 <HAL_PCD_SetAddress>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f874 	bl	8007dac <USBD_Get_USB_Status>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b086      	sub	sp, #24
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cf0:	7af9      	ldrb	r1, [r7, #11]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	f7fa ffe0 	bl	8002cba <HAL_PCD_EP_Transmit>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfe:	7dfb      	ldrb	r3, [r7, #23]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f853 	bl	8007dac <USBD_Get_USB_Status>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	607a      	str	r2, [r7, #4]
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	460b      	mov	r3, r1
 8007d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d32:	7af9      	ldrb	r1, [r7, #11]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	f7fa ff5c 	bl	8002bf4 <HAL_PCD_EP_Receive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f832 	bl	8007dac <USBD_Get_USB_Status>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fa ff8c 	bl	8002c8a <HAL_PCD_EP_GetRxCount>
 8007d72:	4603      	mov	r3, r0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <USBD_static_malloc+0x18>)
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	2000021c 	.word	0x2000021c

08007d98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	4603      	mov	r3, r0
 8007db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d817      	bhi.n	8007df0 <USBD_Get_USB_Status+0x44>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <USBD_Get_USB_Status+0x1c>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007ddf 	.word	0x08007ddf
 8007dd0:	08007de5 	.word	0x08007de5
 8007dd4:	08007deb 	.word	0x08007deb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e00b      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e008      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
    break;
 8007de8:	e005      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dea:	2303      	movs	r3, #3
 8007dec:	73fb      	strb	r3, [r7, #15]
    break;
 8007dee:	e002      	b.n	8007df6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007df0:	2303      	movs	r3, #3
 8007df2:	73fb      	strb	r3, [r7, #15]
    break;
 8007df4:	bf00      	nop
  }
  return usb_status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <atoi>:
 8007e04:	220a      	movs	r2, #10
 8007e06:	2100      	movs	r1, #0
 8007e08:	f000 b8d6 	b.w	8007fb8 <strtol>

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	; (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000194 	.word	0x20000194

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4d0d      	ldr	r5, [pc, #52]	; (8007e50 <__libc_init_array+0x38>)
 8007e1c:	4c0d      	ldr	r4, [pc, #52]	; (8007e54 <__libc_init_array+0x3c>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	2600      	movs	r6, #0
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	4d0b      	ldr	r5, [pc, #44]	; (8007e58 <__libc_init_array+0x40>)
 8007e2a:	4c0c      	ldr	r4, [pc, #48]	; (8007e5c <__libc_init_array+0x44>)
 8007e2c:	f000 fcdc 	bl	80087e8 <_init>
 8007e30:	1b64      	subs	r4, r4, r5
 8007e32:	10a4      	asrs	r4, r4, #2
 8007e34:	2600      	movs	r6, #0
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	080089d0 	.word	0x080089d0
 8007e54:	080089d0 	.word	0x080089d0
 8007e58:	080089d0 	.word	0x080089d0
 8007e5c:	080089d4 	.word	0x080089d4

08007e60 <memset>:
 8007e60:	4402      	add	r2, r0
 8007e62:	4603      	mov	r3, r0
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d100      	bne.n	8007e6a <memset+0xa>
 8007e68:	4770      	bx	lr
 8007e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6e:	e7f9      	b.n	8007e64 <memset+0x4>

08007e70 <siprintf>:
 8007e70:	b40e      	push	{r1, r2, r3}
 8007e72:	b500      	push	{lr}
 8007e74:	b09c      	sub	sp, #112	; 0x70
 8007e76:	ab1d      	add	r3, sp, #116	; 0x74
 8007e78:	9002      	str	r0, [sp, #8]
 8007e7a:	9006      	str	r0, [sp, #24]
 8007e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e80:	4809      	ldr	r0, [pc, #36]	; (8007ea8 <siprintf+0x38>)
 8007e82:	9107      	str	r1, [sp, #28]
 8007e84:	9104      	str	r1, [sp, #16]
 8007e86:	4909      	ldr	r1, [pc, #36]	; (8007eac <siprintf+0x3c>)
 8007e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8c:	9105      	str	r1, [sp, #20]
 8007e8e:	6800      	ldr	r0, [r0, #0]
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	a902      	add	r1, sp, #8
 8007e94:	f000 f8f6 	bl	8008084 <_svfiprintf_r>
 8007e98:	9b02      	ldr	r3, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	b01c      	add	sp, #112	; 0x70
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	4770      	bx	lr
 8007ea8:	20000194 	.word	0x20000194
 8007eac:	ffff0208 	.word	0xffff0208

08007eb0 <_strtol_l.isra.0>:
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb6:	d001      	beq.n	8007ebc <_strtol_l.isra.0+0xc>
 8007eb8:	2b24      	cmp	r3, #36	; 0x24
 8007eba:	d906      	bls.n	8007eca <_strtol_l.isra.0+0x1a>
 8007ebc:	f7ff ffa6 	bl	8007e0c <__errno>
 8007ec0:	2316      	movs	r3, #22
 8007ec2:	6003      	str	r3, [r0, #0]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	4f3a      	ldr	r7, [pc, #232]	; (8007fb4 <_strtol_l.isra.0+0x104>)
 8007ecc:	468e      	mov	lr, r1
 8007ece:	4676      	mov	r6, lr
 8007ed0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ed4:	5de5      	ldrb	r5, [r4, r7]
 8007ed6:	f015 0508 	ands.w	r5, r5, #8
 8007eda:	d1f8      	bne.n	8007ece <_strtol_l.isra.0+0x1e>
 8007edc:	2c2d      	cmp	r4, #45	; 0x2d
 8007ede:	d134      	bne.n	8007f4a <_strtol_l.isra.0+0x9a>
 8007ee0:	f89e 4000 	ldrb.w	r4, [lr]
 8007ee4:	f04f 0801 	mov.w	r8, #1
 8007ee8:	f106 0e02 	add.w	lr, r6, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05c      	beq.n	8007faa <_strtol_l.isra.0+0xfa>
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d10c      	bne.n	8007f0e <_strtol_l.isra.0+0x5e>
 8007ef4:	2c30      	cmp	r4, #48	; 0x30
 8007ef6:	d10a      	bne.n	8007f0e <_strtol_l.isra.0+0x5e>
 8007ef8:	f89e 4000 	ldrb.w	r4, [lr]
 8007efc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f00:	2c58      	cmp	r4, #88	; 0x58
 8007f02:	d14d      	bne.n	8007fa0 <_strtol_l.isra.0+0xf0>
 8007f04:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f10e 0e02 	add.w	lr, lr, #2
 8007f0e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007f12:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f16:	2600      	movs	r6, #0
 8007f18:	fbbc f9f3 	udiv	r9, ip, r3
 8007f1c:	4635      	mov	r5, r6
 8007f1e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007f26:	2f09      	cmp	r7, #9
 8007f28:	d818      	bhi.n	8007f5c <_strtol_l.isra.0+0xac>
 8007f2a:	463c      	mov	r4, r7
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	dd24      	ble.n	8007f7a <_strtol_l.isra.0+0xca>
 8007f30:	2e00      	cmp	r6, #0
 8007f32:	db1f      	blt.n	8007f74 <_strtol_l.isra.0+0xc4>
 8007f34:	45a9      	cmp	r9, r5
 8007f36:	d31d      	bcc.n	8007f74 <_strtol_l.isra.0+0xc4>
 8007f38:	d101      	bne.n	8007f3e <_strtol_l.isra.0+0x8e>
 8007f3a:	45a2      	cmp	sl, r4
 8007f3c:	db1a      	blt.n	8007f74 <_strtol_l.isra.0+0xc4>
 8007f3e:	fb05 4503 	mla	r5, r5, r3, r4
 8007f42:	2601      	movs	r6, #1
 8007f44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f48:	e7eb      	b.n	8007f22 <_strtol_l.isra.0+0x72>
 8007f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8007f4c:	bf08      	it	eq
 8007f4e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007f52:	46a8      	mov	r8, r5
 8007f54:	bf08      	it	eq
 8007f56:	f106 0e02 	addeq.w	lr, r6, #2
 8007f5a:	e7c7      	b.n	8007eec <_strtol_l.isra.0+0x3c>
 8007f5c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007f60:	2f19      	cmp	r7, #25
 8007f62:	d801      	bhi.n	8007f68 <_strtol_l.isra.0+0xb8>
 8007f64:	3c37      	subs	r4, #55	; 0x37
 8007f66:	e7e1      	b.n	8007f2c <_strtol_l.isra.0+0x7c>
 8007f68:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007f6c:	2f19      	cmp	r7, #25
 8007f6e:	d804      	bhi.n	8007f7a <_strtol_l.isra.0+0xca>
 8007f70:	3c57      	subs	r4, #87	; 0x57
 8007f72:	e7db      	b.n	8007f2c <_strtol_l.isra.0+0x7c>
 8007f74:	f04f 36ff 	mov.w	r6, #4294967295
 8007f78:	e7e4      	b.n	8007f44 <_strtol_l.isra.0+0x94>
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	da05      	bge.n	8007f8a <_strtol_l.isra.0+0xda>
 8007f7e:	2322      	movs	r3, #34	; 0x22
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	4665      	mov	r5, ip
 8007f84:	b942      	cbnz	r2, 8007f98 <_strtol_l.isra.0+0xe8>
 8007f86:	4628      	mov	r0, r5
 8007f88:	e79d      	b.n	8007ec6 <_strtol_l.isra.0+0x16>
 8007f8a:	f1b8 0f00 	cmp.w	r8, #0
 8007f8e:	d000      	beq.n	8007f92 <_strtol_l.isra.0+0xe2>
 8007f90:	426d      	negs	r5, r5
 8007f92:	2a00      	cmp	r2, #0
 8007f94:	d0f7      	beq.n	8007f86 <_strtol_l.isra.0+0xd6>
 8007f96:	b10e      	cbz	r6, 8007f9c <_strtol_l.isra.0+0xec>
 8007f98:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	e7f2      	b.n	8007f86 <_strtol_l.isra.0+0xd6>
 8007fa0:	2430      	movs	r4, #48	; 0x30
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1b3      	bne.n	8007f0e <_strtol_l.isra.0+0x5e>
 8007fa6:	2308      	movs	r3, #8
 8007fa8:	e7b1      	b.n	8007f0e <_strtol_l.isra.0+0x5e>
 8007faa:	2c30      	cmp	r4, #48	; 0x30
 8007fac:	d0a4      	beq.n	8007ef8 <_strtol_l.isra.0+0x48>
 8007fae:	230a      	movs	r3, #10
 8007fb0:	e7ad      	b.n	8007f0e <_strtol_l.isra.0+0x5e>
 8007fb2:	bf00      	nop
 8007fb4:	08008895 	.word	0x08008895

08007fb8 <strtol>:
 8007fb8:	4613      	mov	r3, r2
 8007fba:	460a      	mov	r2, r1
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <strtol+0x10>)
 8007fc0:	6800      	ldr	r0, [r0, #0]
 8007fc2:	f7ff bf75 	b.w	8007eb0 <_strtol_l.isra.0>
 8007fc6:	bf00      	nop
 8007fc8:	20000194 	.word	0x20000194

08007fcc <__ssputs_r>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	688e      	ldr	r6, [r1, #8]
 8007fd2:	429e      	cmp	r6, r3
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4690      	mov	r8, r2
 8007fda:	461f      	mov	r7, r3
 8007fdc:	d838      	bhi.n	8008050 <__ssputs_r+0x84>
 8007fde:	898a      	ldrh	r2, [r1, #12]
 8007fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe4:	d032      	beq.n	800804c <__ssputs_r+0x80>
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	6909      	ldr	r1, [r1, #16]
 8007fea:	eba5 0901 	sub.w	r9, r5, r1
 8007fee:	6965      	ldr	r5, [r4, #20]
 8007ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	444b      	add	r3, r9
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	429d      	cmp	r5, r3
 8008000:	bf38      	it	cc
 8008002:	461d      	movcc	r5, r3
 8008004:	0553      	lsls	r3, r2, #21
 8008006:	d531      	bpl.n	800806c <__ssputs_r+0xa0>
 8008008:	4629      	mov	r1, r5
 800800a:	f000 fb47 	bl	800869c <_malloc_r>
 800800e:	4606      	mov	r6, r0
 8008010:	b950      	cbnz	r0, 8008028 <__ssputs_r+0x5c>
 8008012:	230c      	movs	r3, #12
 8008014:	f8ca 3000 	str.w	r3, [sl]
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	6921      	ldr	r1, [r4, #16]
 800802a:	464a      	mov	r2, r9
 800802c:	f000 fabe 	bl	80085ac <memcpy>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	6126      	str	r6, [r4, #16]
 800803e:	6165      	str	r5, [r4, #20]
 8008040:	444e      	add	r6, r9
 8008042:	eba5 0509 	sub.w	r5, r5, r9
 8008046:	6026      	str	r6, [r4, #0]
 8008048:	60a5      	str	r5, [r4, #8]
 800804a:	463e      	mov	r6, r7
 800804c:	42be      	cmp	r6, r7
 800804e:	d900      	bls.n	8008052 <__ssputs_r+0x86>
 8008050:	463e      	mov	r6, r7
 8008052:	4632      	mov	r2, r6
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	4641      	mov	r1, r8
 8008058:	f000 fab6 	bl	80085c8 <memmove>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	1b9b      	subs	r3, r3, r6
 8008062:	4432      	add	r2, r6
 8008064:	60a3      	str	r3, [r4, #8]
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	2000      	movs	r0, #0
 800806a:	e7db      	b.n	8008024 <__ssputs_r+0x58>
 800806c:	462a      	mov	r2, r5
 800806e:	f000 fb6f 	bl	8008750 <_realloc_r>
 8008072:	4606      	mov	r6, r0
 8008074:	2800      	cmp	r0, #0
 8008076:	d1e1      	bne.n	800803c <__ssputs_r+0x70>
 8008078:	6921      	ldr	r1, [r4, #16]
 800807a:	4650      	mov	r0, sl
 800807c:	f000 fabe 	bl	80085fc <_free_r>
 8008080:	e7c7      	b.n	8008012 <__ssputs_r+0x46>
	...

08008084 <_svfiprintf_r>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	4698      	mov	r8, r3
 800808a:	898b      	ldrh	r3, [r1, #12]
 800808c:	061b      	lsls	r3, r3, #24
 800808e:	b09d      	sub	sp, #116	; 0x74
 8008090:	4607      	mov	r7, r0
 8008092:	460d      	mov	r5, r1
 8008094:	4614      	mov	r4, r2
 8008096:	d50e      	bpl.n	80080b6 <_svfiprintf_r+0x32>
 8008098:	690b      	ldr	r3, [r1, #16]
 800809a:	b963      	cbnz	r3, 80080b6 <_svfiprintf_r+0x32>
 800809c:	2140      	movs	r1, #64	; 0x40
 800809e:	f000 fafd 	bl	800869c <_malloc_r>
 80080a2:	6028      	str	r0, [r5, #0]
 80080a4:	6128      	str	r0, [r5, #16]
 80080a6:	b920      	cbnz	r0, 80080b2 <_svfiprintf_r+0x2e>
 80080a8:	230c      	movs	r3, #12
 80080aa:	603b      	str	r3, [r7, #0]
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e0d1      	b.n	8008256 <_svfiprintf_r+0x1d2>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	616b      	str	r3, [r5, #20]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ba:	2320      	movs	r3, #32
 80080bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c4:	2330      	movs	r3, #48	; 0x30
 80080c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008270 <_svfiprintf_r+0x1ec>
 80080ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ce:	f04f 0901 	mov.w	r9, #1
 80080d2:	4623      	mov	r3, r4
 80080d4:	469a      	mov	sl, r3
 80080d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080da:	b10a      	cbz	r2, 80080e0 <_svfiprintf_r+0x5c>
 80080dc:	2a25      	cmp	r2, #37	; 0x25
 80080de:	d1f9      	bne.n	80080d4 <_svfiprintf_r+0x50>
 80080e0:	ebba 0b04 	subs.w	fp, sl, r4
 80080e4:	d00b      	beq.n	80080fe <_svfiprintf_r+0x7a>
 80080e6:	465b      	mov	r3, fp
 80080e8:	4622      	mov	r2, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	4638      	mov	r0, r7
 80080ee:	f7ff ff6d 	bl	8007fcc <__ssputs_r>
 80080f2:	3001      	adds	r0, #1
 80080f4:	f000 80aa 	beq.w	800824c <_svfiprintf_r+0x1c8>
 80080f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fa:	445a      	add	r2, fp
 80080fc:	9209      	str	r2, [sp, #36]	; 0x24
 80080fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a2 	beq.w	800824c <_svfiprintf_r+0x1c8>
 8008108:	2300      	movs	r3, #0
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008112:	f10a 0a01 	add.w	sl, sl, #1
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800811e:	931a      	str	r3, [sp, #104]	; 0x68
 8008120:	4654      	mov	r4, sl
 8008122:	2205      	movs	r2, #5
 8008124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008128:	4851      	ldr	r0, [pc, #324]	; (8008270 <_svfiprintf_r+0x1ec>)
 800812a:	f7f8 f851 	bl	80001d0 <memchr>
 800812e:	9a04      	ldr	r2, [sp, #16]
 8008130:	b9d8      	cbnz	r0, 800816a <_svfiprintf_r+0xe6>
 8008132:	06d0      	lsls	r0, r2, #27
 8008134:	bf44      	itt	mi
 8008136:	2320      	movmi	r3, #32
 8008138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813c:	0711      	lsls	r1, r2, #28
 800813e:	bf44      	itt	mi
 8008140:	232b      	movmi	r3, #43	; 0x2b
 8008142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b2a      	cmp	r3, #42	; 0x2a
 800814c:	d015      	beq.n	800817a <_svfiprintf_r+0xf6>
 800814e:	9a07      	ldr	r2, [sp, #28]
 8008150:	4654      	mov	r4, sl
 8008152:	2000      	movs	r0, #0
 8008154:	f04f 0c0a 	mov.w	ip, #10
 8008158:	4621      	mov	r1, r4
 800815a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800815e:	3b30      	subs	r3, #48	; 0x30
 8008160:	2b09      	cmp	r3, #9
 8008162:	d94e      	bls.n	8008202 <_svfiprintf_r+0x17e>
 8008164:	b1b0      	cbz	r0, 8008194 <_svfiprintf_r+0x110>
 8008166:	9207      	str	r2, [sp, #28]
 8008168:	e014      	b.n	8008194 <_svfiprintf_r+0x110>
 800816a:	eba0 0308 	sub.w	r3, r0, r8
 800816e:	fa09 f303 	lsl.w	r3, r9, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	46a2      	mov	sl, r4
 8008178:	e7d2      	b.n	8008120 <_svfiprintf_r+0x9c>
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	1d19      	adds	r1, r3, #4
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	9103      	str	r1, [sp, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bfbb      	ittet	lt
 8008186:	425b      	neglt	r3, r3
 8008188:	f042 0202 	orrlt.w	r2, r2, #2
 800818c:	9307      	strge	r3, [sp, #28]
 800818e:	9307      	strlt	r3, [sp, #28]
 8008190:	bfb8      	it	lt
 8008192:	9204      	strlt	r2, [sp, #16]
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	2b2e      	cmp	r3, #46	; 0x2e
 8008198:	d10c      	bne.n	80081b4 <_svfiprintf_r+0x130>
 800819a:	7863      	ldrb	r3, [r4, #1]
 800819c:	2b2a      	cmp	r3, #42	; 0x2a
 800819e:	d135      	bne.n	800820c <_svfiprintf_r+0x188>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	1d1a      	adds	r2, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	9203      	str	r2, [sp, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfb8      	it	lt
 80081ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b0:	3402      	adds	r4, #2
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008280 <_svfiprintf_r+0x1fc>
 80081b8:	7821      	ldrb	r1, [r4, #0]
 80081ba:	2203      	movs	r2, #3
 80081bc:	4650      	mov	r0, sl
 80081be:	f7f8 f807 	bl	80001d0 <memchr>
 80081c2:	b140      	cbz	r0, 80081d6 <_svfiprintf_r+0x152>
 80081c4:	2340      	movs	r3, #64	; 0x40
 80081c6:	eba0 000a 	sub.w	r0, r0, sl
 80081ca:	fa03 f000 	lsl.w	r0, r3, r0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	4303      	orrs	r3, r0
 80081d2:	3401      	adds	r4, #1
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081da:	4826      	ldr	r0, [pc, #152]	; (8008274 <_svfiprintf_r+0x1f0>)
 80081dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e0:	2206      	movs	r2, #6
 80081e2:	f7f7 fff5 	bl	80001d0 <memchr>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d038      	beq.n	800825c <_svfiprintf_r+0x1d8>
 80081ea:	4b23      	ldr	r3, [pc, #140]	; (8008278 <_svfiprintf_r+0x1f4>)
 80081ec:	bb1b      	cbnz	r3, 8008236 <_svfiprintf_r+0x1b2>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	3308      	adds	r3, #8
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	4433      	add	r3, r6
 80081fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008200:	e767      	b.n	80080d2 <_svfiprintf_r+0x4e>
 8008202:	fb0c 3202 	mla	r2, ip, r2, r3
 8008206:	460c      	mov	r4, r1
 8008208:	2001      	movs	r0, #1
 800820a:	e7a5      	b.n	8008158 <_svfiprintf_r+0xd4>
 800820c:	2300      	movs	r3, #0
 800820e:	3401      	adds	r4, #1
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	4619      	mov	r1, r3
 8008214:	f04f 0c0a 	mov.w	ip, #10
 8008218:	4620      	mov	r0, r4
 800821a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821e:	3a30      	subs	r2, #48	; 0x30
 8008220:	2a09      	cmp	r2, #9
 8008222:	d903      	bls.n	800822c <_svfiprintf_r+0x1a8>
 8008224:	2b00      	cmp	r3, #0
 8008226:	d0c5      	beq.n	80081b4 <_svfiprintf_r+0x130>
 8008228:	9105      	str	r1, [sp, #20]
 800822a:	e7c3      	b.n	80081b4 <_svfiprintf_r+0x130>
 800822c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008230:	4604      	mov	r4, r0
 8008232:	2301      	movs	r3, #1
 8008234:	e7f0      	b.n	8008218 <_svfiprintf_r+0x194>
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4b0f      	ldr	r3, [pc, #60]	; (800827c <_svfiprintf_r+0x1f8>)
 800823e:	a904      	add	r1, sp, #16
 8008240:	4638      	mov	r0, r7
 8008242:	f3af 8000 	nop.w
 8008246:	1c42      	adds	r2, r0, #1
 8008248:	4606      	mov	r6, r0
 800824a:	d1d6      	bne.n	80081fa <_svfiprintf_r+0x176>
 800824c:	89ab      	ldrh	r3, [r5, #12]
 800824e:	065b      	lsls	r3, r3, #25
 8008250:	f53f af2c 	bmi.w	80080ac <_svfiprintf_r+0x28>
 8008254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008256:	b01d      	add	sp, #116	; 0x74
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <_svfiprintf_r+0x1f8>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4638      	mov	r0, r7
 8008268:	f000 f87a 	bl	8008360 <_printf_i>
 800826c:	e7eb      	b.n	8008246 <_svfiprintf_r+0x1c2>
 800826e:	bf00      	nop
 8008270:	08008995 	.word	0x08008995
 8008274:	0800899f 	.word	0x0800899f
 8008278:	00000000 	.word	0x00000000
 800827c:	08007fcd 	.word	0x08007fcd
 8008280:	0800899b 	.word	0x0800899b

08008284 <_printf_common>:
 8008284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008288:	4616      	mov	r6, r2
 800828a:	4699      	mov	r9, r3
 800828c:	688a      	ldr	r2, [r1, #8]
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008294:	4293      	cmp	r3, r2
 8008296:	bfb8      	it	lt
 8008298:	4613      	movlt	r3, r2
 800829a:	6033      	str	r3, [r6, #0]
 800829c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082a0:	4607      	mov	r7, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	b10a      	cbz	r2, 80082aa <_printf_common+0x26>
 80082a6:	3301      	adds	r3, #1
 80082a8:	6033      	str	r3, [r6, #0]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	0699      	lsls	r1, r3, #26
 80082ae:	bf42      	ittt	mi
 80082b0:	6833      	ldrmi	r3, [r6, #0]
 80082b2:	3302      	addmi	r3, #2
 80082b4:	6033      	strmi	r3, [r6, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	f015 0506 	ands.w	r5, r5, #6
 80082bc:	d106      	bne.n	80082cc <_printf_common+0x48>
 80082be:	f104 0a19 	add.w	sl, r4, #25
 80082c2:	68e3      	ldr	r3, [r4, #12]
 80082c4:	6832      	ldr	r2, [r6, #0]
 80082c6:	1a9b      	subs	r3, r3, r2
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	dc26      	bgt.n	800831a <_printf_common+0x96>
 80082cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082d0:	1e13      	subs	r3, r2, #0
 80082d2:	6822      	ldr	r2, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	2301      	movne	r3, #1
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d42b      	bmi.n	8008334 <_printf_common+0xb0>
 80082dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082e0:	4649      	mov	r1, r9
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c0      	blx	r8
 80082e6:	3001      	adds	r0, #1
 80082e8:	d01e      	beq.n	8008328 <_printf_common+0xa4>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	68e5      	ldr	r5, [r4, #12]
 80082ee:	6832      	ldr	r2, [r6, #0]
 80082f0:	f003 0306 	and.w	r3, r3, #6
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	bf08      	it	eq
 80082f8:	1aad      	subeq	r5, r5, r2
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	6922      	ldr	r2, [r4, #16]
 80082fe:	bf0c      	ite	eq
 8008300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008304:	2500      	movne	r5, #0
 8008306:	4293      	cmp	r3, r2
 8008308:	bfc4      	itt	gt
 800830a:	1a9b      	subgt	r3, r3, r2
 800830c:	18ed      	addgt	r5, r5, r3
 800830e:	2600      	movs	r6, #0
 8008310:	341a      	adds	r4, #26
 8008312:	42b5      	cmp	r5, r6
 8008314:	d11a      	bne.n	800834c <_printf_common+0xc8>
 8008316:	2000      	movs	r0, #0
 8008318:	e008      	b.n	800832c <_printf_common+0xa8>
 800831a:	2301      	movs	r3, #1
 800831c:	4652      	mov	r2, sl
 800831e:	4649      	mov	r1, r9
 8008320:	4638      	mov	r0, r7
 8008322:	47c0      	blx	r8
 8008324:	3001      	adds	r0, #1
 8008326:	d103      	bne.n	8008330 <_printf_common+0xac>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008330:	3501      	adds	r5, #1
 8008332:	e7c6      	b.n	80082c2 <_printf_common+0x3e>
 8008334:	18e1      	adds	r1, r4, r3
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	2030      	movs	r0, #48	; 0x30
 800833a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800833e:	4422      	add	r2, r4
 8008340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008348:	3302      	adds	r3, #2
 800834a:	e7c7      	b.n	80082dc <_printf_common+0x58>
 800834c:	2301      	movs	r3, #1
 800834e:	4622      	mov	r2, r4
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d0e6      	beq.n	8008328 <_printf_common+0xa4>
 800835a:	3601      	adds	r6, #1
 800835c:	e7d9      	b.n	8008312 <_printf_common+0x8e>
	...

08008360 <_printf_i>:
 8008360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	4691      	mov	r9, r2
 8008368:	7e27      	ldrb	r7, [r4, #24]
 800836a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800836c:	2f78      	cmp	r7, #120	; 0x78
 800836e:	4680      	mov	r8, r0
 8008370:	469a      	mov	sl, r3
 8008372:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008376:	d807      	bhi.n	8008388 <_printf_i+0x28>
 8008378:	2f62      	cmp	r7, #98	; 0x62
 800837a:	d80a      	bhi.n	8008392 <_printf_i+0x32>
 800837c:	2f00      	cmp	r7, #0
 800837e:	f000 80d8 	beq.w	8008532 <_printf_i+0x1d2>
 8008382:	2f58      	cmp	r7, #88	; 0x58
 8008384:	f000 80a3 	beq.w	80084ce <_printf_i+0x16e>
 8008388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800838c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008390:	e03a      	b.n	8008408 <_printf_i+0xa8>
 8008392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008396:	2b15      	cmp	r3, #21
 8008398:	d8f6      	bhi.n	8008388 <_printf_i+0x28>
 800839a:	a001      	add	r0, pc, #4	; (adr r0, 80083a0 <_printf_i+0x40>)
 800839c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083a0:	080083f9 	.word	0x080083f9
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	08008389 	.word	0x08008389
 80083ac:	08008389 	.word	0x08008389
 80083b0:	08008389 	.word	0x08008389
 80083b4:	08008389 	.word	0x08008389
 80083b8:	0800840d 	.word	0x0800840d
 80083bc:	08008389 	.word	0x08008389
 80083c0:	08008389 	.word	0x08008389
 80083c4:	08008389 	.word	0x08008389
 80083c8:	08008389 	.word	0x08008389
 80083cc:	08008519 	.word	0x08008519
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	080084fb 	.word	0x080084fb
 80083d8:	08008389 	.word	0x08008389
 80083dc:	08008389 	.word	0x08008389
 80083e0:	0800853b 	.word	0x0800853b
 80083e4:	08008389 	.word	0x08008389
 80083e8:	0800843d 	.word	0x0800843d
 80083ec:	08008389 	.word	0x08008389
 80083f0:	08008389 	.word	0x08008389
 80083f4:	08008503 	.word	0x08008503
 80083f8:	680b      	ldr	r3, [r1, #0]
 80083fa:	1d1a      	adds	r2, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	600a      	str	r2, [r1, #0]
 8008400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008408:	2301      	movs	r3, #1
 800840a:	e0a3      	b.n	8008554 <_printf_i+0x1f4>
 800840c:	6825      	ldr	r5, [r4, #0]
 800840e:	6808      	ldr	r0, [r1, #0]
 8008410:	062e      	lsls	r6, r5, #24
 8008412:	f100 0304 	add.w	r3, r0, #4
 8008416:	d50a      	bpl.n	800842e <_printf_i+0xce>
 8008418:	6805      	ldr	r5, [r0, #0]
 800841a:	600b      	str	r3, [r1, #0]
 800841c:	2d00      	cmp	r5, #0
 800841e:	da03      	bge.n	8008428 <_printf_i+0xc8>
 8008420:	232d      	movs	r3, #45	; 0x2d
 8008422:	426d      	negs	r5, r5
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	485e      	ldr	r0, [pc, #376]	; (80085a4 <_printf_i+0x244>)
 800842a:	230a      	movs	r3, #10
 800842c:	e019      	b.n	8008462 <_printf_i+0x102>
 800842e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008432:	6805      	ldr	r5, [r0, #0]
 8008434:	600b      	str	r3, [r1, #0]
 8008436:	bf18      	it	ne
 8008438:	b22d      	sxthne	r5, r5
 800843a:	e7ef      	b.n	800841c <_printf_i+0xbc>
 800843c:	680b      	ldr	r3, [r1, #0]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	1d18      	adds	r0, r3, #4
 8008442:	6008      	str	r0, [r1, #0]
 8008444:	0628      	lsls	r0, r5, #24
 8008446:	d501      	bpl.n	800844c <_printf_i+0xec>
 8008448:	681d      	ldr	r5, [r3, #0]
 800844a:	e002      	b.n	8008452 <_printf_i+0xf2>
 800844c:	0669      	lsls	r1, r5, #25
 800844e:	d5fb      	bpl.n	8008448 <_printf_i+0xe8>
 8008450:	881d      	ldrh	r5, [r3, #0]
 8008452:	4854      	ldr	r0, [pc, #336]	; (80085a4 <_printf_i+0x244>)
 8008454:	2f6f      	cmp	r7, #111	; 0x6f
 8008456:	bf0c      	ite	eq
 8008458:	2308      	moveq	r3, #8
 800845a:	230a      	movne	r3, #10
 800845c:	2100      	movs	r1, #0
 800845e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008462:	6866      	ldr	r6, [r4, #4]
 8008464:	60a6      	str	r6, [r4, #8]
 8008466:	2e00      	cmp	r6, #0
 8008468:	bfa2      	ittt	ge
 800846a:	6821      	ldrge	r1, [r4, #0]
 800846c:	f021 0104 	bicge.w	r1, r1, #4
 8008470:	6021      	strge	r1, [r4, #0]
 8008472:	b90d      	cbnz	r5, 8008478 <_printf_i+0x118>
 8008474:	2e00      	cmp	r6, #0
 8008476:	d04d      	beq.n	8008514 <_printf_i+0x1b4>
 8008478:	4616      	mov	r6, r2
 800847a:	fbb5 f1f3 	udiv	r1, r5, r3
 800847e:	fb03 5711 	mls	r7, r3, r1, r5
 8008482:	5dc7      	ldrb	r7, [r0, r7]
 8008484:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008488:	462f      	mov	r7, r5
 800848a:	42bb      	cmp	r3, r7
 800848c:	460d      	mov	r5, r1
 800848e:	d9f4      	bls.n	800847a <_printf_i+0x11a>
 8008490:	2b08      	cmp	r3, #8
 8008492:	d10b      	bne.n	80084ac <_printf_i+0x14c>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	07df      	lsls	r7, r3, #31
 8008498:	d508      	bpl.n	80084ac <_printf_i+0x14c>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	4299      	cmp	r1, r3
 80084a0:	bfde      	ittt	le
 80084a2:	2330      	movle	r3, #48	; 0x30
 80084a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084ac:	1b92      	subs	r2, r2, r6
 80084ae:	6122      	str	r2, [r4, #16]
 80084b0:	f8cd a000 	str.w	sl, [sp]
 80084b4:	464b      	mov	r3, r9
 80084b6:	aa03      	add	r2, sp, #12
 80084b8:	4621      	mov	r1, r4
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7ff fee2 	bl	8008284 <_printf_common>
 80084c0:	3001      	adds	r0, #1
 80084c2:	d14c      	bne.n	800855e <_printf_i+0x1fe>
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	b004      	add	sp, #16
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	4835      	ldr	r0, [pc, #212]	; (80085a4 <_printf_i+0x244>)
 80084d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	680e      	ldr	r6, [r1, #0]
 80084d8:	061f      	lsls	r7, r3, #24
 80084da:	f856 5b04 	ldr.w	r5, [r6], #4
 80084de:	600e      	str	r6, [r1, #0]
 80084e0:	d514      	bpl.n	800850c <_printf_i+0x1ac>
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	bf44      	itt	mi
 80084e6:	f043 0320 	orrmi.w	r3, r3, #32
 80084ea:	6023      	strmi	r3, [r4, #0]
 80084ec:	b91d      	cbnz	r5, 80084f6 <_printf_i+0x196>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	f023 0320 	bic.w	r3, r3, #32
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	2310      	movs	r3, #16
 80084f8:	e7b0      	b.n	800845c <_printf_i+0xfc>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f043 0320 	orr.w	r3, r3, #32
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	2378      	movs	r3, #120	; 0x78
 8008504:	4828      	ldr	r0, [pc, #160]	; (80085a8 <_printf_i+0x248>)
 8008506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800850a:	e7e3      	b.n	80084d4 <_printf_i+0x174>
 800850c:	065e      	lsls	r6, r3, #25
 800850e:	bf48      	it	mi
 8008510:	b2ad      	uxthmi	r5, r5
 8008512:	e7e6      	b.n	80084e2 <_printf_i+0x182>
 8008514:	4616      	mov	r6, r2
 8008516:	e7bb      	b.n	8008490 <_printf_i+0x130>
 8008518:	680b      	ldr	r3, [r1, #0]
 800851a:	6826      	ldr	r6, [r4, #0]
 800851c:	6960      	ldr	r0, [r4, #20]
 800851e:	1d1d      	adds	r5, r3, #4
 8008520:	600d      	str	r5, [r1, #0]
 8008522:	0635      	lsls	r5, r6, #24
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	d501      	bpl.n	800852c <_printf_i+0x1cc>
 8008528:	6018      	str	r0, [r3, #0]
 800852a:	e002      	b.n	8008532 <_printf_i+0x1d2>
 800852c:	0671      	lsls	r1, r6, #25
 800852e:	d5fb      	bpl.n	8008528 <_printf_i+0x1c8>
 8008530:	8018      	strh	r0, [r3, #0]
 8008532:	2300      	movs	r3, #0
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	4616      	mov	r6, r2
 8008538:	e7ba      	b.n	80084b0 <_printf_i+0x150>
 800853a:	680b      	ldr	r3, [r1, #0]
 800853c:	1d1a      	adds	r2, r3, #4
 800853e:	600a      	str	r2, [r1, #0]
 8008540:	681e      	ldr	r6, [r3, #0]
 8008542:	6862      	ldr	r2, [r4, #4]
 8008544:	2100      	movs	r1, #0
 8008546:	4630      	mov	r0, r6
 8008548:	f7f7 fe42 	bl	80001d0 <memchr>
 800854c:	b108      	cbz	r0, 8008552 <_printf_i+0x1f2>
 800854e:	1b80      	subs	r0, r0, r6
 8008550:	6060      	str	r0, [r4, #4]
 8008552:	6863      	ldr	r3, [r4, #4]
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	2300      	movs	r3, #0
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800855c:	e7a8      	b.n	80084b0 <_printf_i+0x150>
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	4632      	mov	r2, r6
 8008562:	4649      	mov	r1, r9
 8008564:	4640      	mov	r0, r8
 8008566:	47d0      	blx	sl
 8008568:	3001      	adds	r0, #1
 800856a:	d0ab      	beq.n	80084c4 <_printf_i+0x164>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	079b      	lsls	r3, r3, #30
 8008570:	d413      	bmi.n	800859a <_printf_i+0x23a>
 8008572:	68e0      	ldr	r0, [r4, #12]
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	4298      	cmp	r0, r3
 8008578:	bfb8      	it	lt
 800857a:	4618      	movlt	r0, r3
 800857c:	e7a4      	b.n	80084c8 <_printf_i+0x168>
 800857e:	2301      	movs	r3, #1
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d09b      	beq.n	80084c4 <_printf_i+0x164>
 800858c:	3501      	adds	r5, #1
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	1a5b      	subs	r3, r3, r1
 8008594:	42ab      	cmp	r3, r5
 8008596:	dcf2      	bgt.n	800857e <_printf_i+0x21e>
 8008598:	e7eb      	b.n	8008572 <_printf_i+0x212>
 800859a:	2500      	movs	r5, #0
 800859c:	f104 0619 	add.w	r6, r4, #25
 80085a0:	e7f5      	b.n	800858e <_printf_i+0x22e>
 80085a2:	bf00      	nop
 80085a4:	080089a6 	.word	0x080089a6
 80085a8:	080089b7 	.word	0x080089b7

080085ac <memcpy>:
 80085ac:	440a      	add	r2, r1
 80085ae:	4291      	cmp	r1, r2
 80085b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085b4:	d100      	bne.n	80085b8 <memcpy+0xc>
 80085b6:	4770      	bx	lr
 80085b8:	b510      	push	{r4, lr}
 80085ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085c2:	4291      	cmp	r1, r2
 80085c4:	d1f9      	bne.n	80085ba <memcpy+0xe>
 80085c6:	bd10      	pop	{r4, pc}

080085c8 <memmove>:
 80085c8:	4288      	cmp	r0, r1
 80085ca:	b510      	push	{r4, lr}
 80085cc:	eb01 0402 	add.w	r4, r1, r2
 80085d0:	d902      	bls.n	80085d8 <memmove+0x10>
 80085d2:	4284      	cmp	r4, r0
 80085d4:	4623      	mov	r3, r4
 80085d6:	d807      	bhi.n	80085e8 <memmove+0x20>
 80085d8:	1e43      	subs	r3, r0, #1
 80085da:	42a1      	cmp	r1, r4
 80085dc:	d008      	beq.n	80085f0 <memmove+0x28>
 80085de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085e6:	e7f8      	b.n	80085da <memmove+0x12>
 80085e8:	4402      	add	r2, r0
 80085ea:	4601      	mov	r1, r0
 80085ec:	428a      	cmp	r2, r1
 80085ee:	d100      	bne.n	80085f2 <memmove+0x2a>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fa:	e7f7      	b.n	80085ec <memmove+0x24>

080085fc <_free_r>:
 80085fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085fe:	2900      	cmp	r1, #0
 8008600:	d048      	beq.n	8008694 <_free_r+0x98>
 8008602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008606:	9001      	str	r0, [sp, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f1a1 0404 	sub.w	r4, r1, #4
 800860e:	bfb8      	it	lt
 8008610:	18e4      	addlt	r4, r4, r3
 8008612:	f000 f8d3 	bl	80087bc <__malloc_lock>
 8008616:	4a20      	ldr	r2, [pc, #128]	; (8008698 <_free_r+0x9c>)
 8008618:	9801      	ldr	r0, [sp, #4]
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	4615      	mov	r5, r2
 800861e:	b933      	cbnz	r3, 800862e <_free_r+0x32>
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	6014      	str	r4, [r2, #0]
 8008624:	b003      	add	sp, #12
 8008626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800862a:	f000 b8cd 	b.w	80087c8 <__malloc_unlock>
 800862e:	42a3      	cmp	r3, r4
 8008630:	d90b      	bls.n	800864a <_free_r+0x4e>
 8008632:	6821      	ldr	r1, [r4, #0]
 8008634:	1862      	adds	r2, r4, r1
 8008636:	4293      	cmp	r3, r2
 8008638:	bf04      	itt	eq
 800863a:	681a      	ldreq	r2, [r3, #0]
 800863c:	685b      	ldreq	r3, [r3, #4]
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	bf04      	itt	eq
 8008642:	1852      	addeq	r2, r2, r1
 8008644:	6022      	streq	r2, [r4, #0]
 8008646:	602c      	str	r4, [r5, #0]
 8008648:	e7ec      	b.n	8008624 <_free_r+0x28>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x58>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x4e>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1855      	adds	r5, r2, r1
 8008658:	42a5      	cmp	r5, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x78>
 800865c:	6824      	ldr	r4, [r4, #0]
 800865e:	4421      	add	r1, r4
 8008660:	1854      	adds	r4, r2, r1
 8008662:	42a3      	cmp	r3, r4
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1dd      	bne.n	8008624 <_free_r+0x28>
 8008668:	681c      	ldr	r4, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	4421      	add	r1, r4
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	e7d7      	b.n	8008624 <_free_r+0x28>
 8008674:	d902      	bls.n	800867c <_free_r+0x80>
 8008676:	230c      	movs	r3, #12
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	e7d3      	b.n	8008624 <_free_r+0x28>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1961      	adds	r1, r4, r5
 8008680:	428b      	cmp	r3, r1
 8008682:	bf04      	itt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	bf04      	itt	eq
 800868c:	1949      	addeq	r1, r1, r5
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	6054      	str	r4, [r2, #4]
 8008692:	e7c7      	b.n	8008624 <_free_r+0x28>
 8008694:	b003      	add	sp, #12
 8008696:	bd30      	pop	{r4, r5, pc}
 8008698:	2000043c 	.word	0x2000043c

0800869c <_malloc_r>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	1ccd      	adds	r5, r1, #3
 80086a0:	f025 0503 	bic.w	r5, r5, #3
 80086a4:	3508      	adds	r5, #8
 80086a6:	2d0c      	cmp	r5, #12
 80086a8:	bf38      	it	cc
 80086aa:	250c      	movcc	r5, #12
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	4606      	mov	r6, r0
 80086b0:	db01      	blt.n	80086b6 <_malloc_r+0x1a>
 80086b2:	42a9      	cmp	r1, r5
 80086b4:	d903      	bls.n	80086be <_malloc_r+0x22>
 80086b6:	230c      	movs	r3, #12
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	2000      	movs	r0, #0
 80086bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086be:	f000 f87d 	bl	80087bc <__malloc_lock>
 80086c2:	4921      	ldr	r1, [pc, #132]	; (8008748 <_malloc_r+0xac>)
 80086c4:	680a      	ldr	r2, [r1, #0]
 80086c6:	4614      	mov	r4, r2
 80086c8:	b99c      	cbnz	r4, 80086f2 <_malloc_r+0x56>
 80086ca:	4f20      	ldr	r7, [pc, #128]	; (800874c <_malloc_r+0xb0>)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	b923      	cbnz	r3, 80086da <_malloc_r+0x3e>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4630      	mov	r0, r6
 80086d4:	f000 f862 	bl	800879c <_sbrk_r>
 80086d8:	6038      	str	r0, [r7, #0]
 80086da:	4629      	mov	r1, r5
 80086dc:	4630      	mov	r0, r6
 80086de:	f000 f85d 	bl	800879c <_sbrk_r>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d123      	bne.n	800872e <_malloc_r+0x92>
 80086e6:	230c      	movs	r3, #12
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	4630      	mov	r0, r6
 80086ec:	f000 f86c 	bl	80087c8 <__malloc_unlock>
 80086f0:	e7e3      	b.n	80086ba <_malloc_r+0x1e>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	1b5b      	subs	r3, r3, r5
 80086f6:	d417      	bmi.n	8008728 <_malloc_r+0x8c>
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	d903      	bls.n	8008704 <_malloc_r+0x68>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	441c      	add	r4, r3
 8008700:	6025      	str	r5, [r4, #0]
 8008702:	e004      	b.n	800870e <_malloc_r+0x72>
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	42a2      	cmp	r2, r4
 8008708:	bf0c      	ite	eq
 800870a:	600b      	streq	r3, [r1, #0]
 800870c:	6053      	strne	r3, [r2, #4]
 800870e:	4630      	mov	r0, r6
 8008710:	f000 f85a 	bl	80087c8 <__malloc_unlock>
 8008714:	f104 000b 	add.w	r0, r4, #11
 8008718:	1d23      	adds	r3, r4, #4
 800871a:	f020 0007 	bic.w	r0, r0, #7
 800871e:	1ac2      	subs	r2, r0, r3
 8008720:	d0cc      	beq.n	80086bc <_malloc_r+0x20>
 8008722:	1a1b      	subs	r3, r3, r0
 8008724:	50a3      	str	r3, [r4, r2]
 8008726:	e7c9      	b.n	80086bc <_malloc_r+0x20>
 8008728:	4622      	mov	r2, r4
 800872a:	6864      	ldr	r4, [r4, #4]
 800872c:	e7cc      	b.n	80086c8 <_malloc_r+0x2c>
 800872e:	1cc4      	adds	r4, r0, #3
 8008730:	f024 0403 	bic.w	r4, r4, #3
 8008734:	42a0      	cmp	r0, r4
 8008736:	d0e3      	beq.n	8008700 <_malloc_r+0x64>
 8008738:	1a21      	subs	r1, r4, r0
 800873a:	4630      	mov	r0, r6
 800873c:	f000 f82e 	bl	800879c <_sbrk_r>
 8008740:	3001      	adds	r0, #1
 8008742:	d1dd      	bne.n	8008700 <_malloc_r+0x64>
 8008744:	e7cf      	b.n	80086e6 <_malloc_r+0x4a>
 8008746:	bf00      	nop
 8008748:	2000043c 	.word	0x2000043c
 800874c:	20000440 	.word	0x20000440

08008750 <_realloc_r>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	4607      	mov	r7, r0
 8008754:	4614      	mov	r4, r2
 8008756:	460e      	mov	r6, r1
 8008758:	b921      	cbnz	r1, 8008764 <_realloc_r+0x14>
 800875a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800875e:	4611      	mov	r1, r2
 8008760:	f7ff bf9c 	b.w	800869c <_malloc_r>
 8008764:	b922      	cbnz	r2, 8008770 <_realloc_r+0x20>
 8008766:	f7ff ff49 	bl	80085fc <_free_r>
 800876a:	4625      	mov	r5, r4
 800876c:	4628      	mov	r0, r5
 800876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008770:	f000 f830 	bl	80087d4 <_malloc_usable_size_r>
 8008774:	42a0      	cmp	r0, r4
 8008776:	d20f      	bcs.n	8008798 <_realloc_r+0x48>
 8008778:	4621      	mov	r1, r4
 800877a:	4638      	mov	r0, r7
 800877c:	f7ff ff8e 	bl	800869c <_malloc_r>
 8008780:	4605      	mov	r5, r0
 8008782:	2800      	cmp	r0, #0
 8008784:	d0f2      	beq.n	800876c <_realloc_r+0x1c>
 8008786:	4631      	mov	r1, r6
 8008788:	4622      	mov	r2, r4
 800878a:	f7ff ff0f 	bl	80085ac <memcpy>
 800878e:	4631      	mov	r1, r6
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff33 	bl	80085fc <_free_r>
 8008796:	e7e9      	b.n	800876c <_realloc_r+0x1c>
 8008798:	4635      	mov	r5, r6
 800879a:	e7e7      	b.n	800876c <_realloc_r+0x1c>

0800879c <_sbrk_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d06      	ldr	r5, [pc, #24]	; (80087b8 <_sbrk_r+0x1c>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	f7f8 fd1e 	bl	80011e8 <_sbrk>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_sbrk_r+0x1a>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_sbrk_r+0x1a>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20001e74 	.word	0x20001e74

080087bc <__malloc_lock>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <__malloc_lock+0x8>)
 80087be:	f000 b811 	b.w	80087e4 <__retarget_lock_acquire_recursive>
 80087c2:	bf00      	nop
 80087c4:	20001e7c 	.word	0x20001e7c

080087c8 <__malloc_unlock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__malloc_unlock+0x8>)
 80087ca:	f000 b80c 	b.w	80087e6 <__retarget_lock_release_recursive>
 80087ce:	bf00      	nop
 80087d0:	20001e7c 	.word	0x20001e7c

080087d4 <_malloc_usable_size_r>:
 80087d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d8:	1f18      	subs	r0, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	bfbc      	itt	lt
 80087de:	580b      	ldrlt	r3, [r1, r0]
 80087e0:	18c0      	addlt	r0, r0, r3
 80087e2:	4770      	bx	lr

080087e4 <__retarget_lock_acquire_recursive>:
 80087e4:	4770      	bx	lr

080087e6 <__retarget_lock_release_recursive>:
 80087e6:	4770      	bx	lr

080087e8 <_init>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr

080087f4 <_fini>:
 80087f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f6:	bf00      	nop
 80087f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fa:	bc08      	pop	{r3}
 80087fc:	469e      	mov	lr, r3
 80087fe:	4770      	bx	lr
