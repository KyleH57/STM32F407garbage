
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007d7c  08007d7c  00017d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007efc  08007efc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f04  08007f04  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  200001ec  080080f8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  080080f8  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f3e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a15  00000000  00000000  0003a15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255db  00000000  00000000  0003fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015908  00000000  00000000  00065363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e9d  00000000  00000000  0007ac6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  00151b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d64 	.word	0x08007d64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08007d64 	.word	0x08007d64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f000 fded 	bl	80010a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f8c7 	bl	800065c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 fa67 	bl	80009a0 <MX_GPIO_Init>
	MX_ADC2_Init();
 80004d2:	f000 f92d 	bl	8000730 <MX_ADC2_Init>
	MX_ADC3_Init();
 80004d6:	f000 f97d 	bl	80007d4 <MX_ADC3_Init>
	MX_CAN2_Init();
 80004da:	f000 f9cd 	bl	8000878 <MX_CAN2_Init>
	MX_SPI1_Init();
 80004de:	f000 f9ff 	bl	80008e0 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 80004e2:	f000 fa33 	bl	800094c <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80004e6:	f006 fe5f 	bl	80071a8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	const uint8_t spStat[3] = {'S', 'P','\n'};
 80004ea:	4a54      	ldr	r2, [pc, #336]	; (800063c <main+0x17c>)
 80004ec:	f107 0320 	add.w	r3, r7, #32
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	3302      	adds	r3, #2
 80004f8:	0c12      	lsrs	r2, r2, #16
 80004fa:	701a      	strb	r2, [r3, #0]
	const uint8_t onStat[3] = {'M', '3','\n'};
 80004fc:	4a50      	ldr	r2, [pc, #320]	; (8000640 <main+0x180>)
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	701a      	strb	r2, [r3, #0]
	const uint8_t offStat[3] = {'M', '5','\n'};
 800050e:	4a4d      	ldr	r2, [pc, #308]	; (8000644 <main+0x184>)
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	0c12      	lsrs	r2, r2, #16
 800051e:	701a      	strb	r2, [r3, #0]
	//uint8_t txBuf[8] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t rxBuf[8] = { '0', '0', '0', '0', '0', '0', '0', '\n' };
 8000520:	4a49      	ldr	r2, [pc, #292]	; (8000648 <main+0x188>)
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052a:	e883 0003 	stmia.w	r3, {r0, r1}
	//string *rxPtr1 = &rxBuf[1];
	char *rxPtr1 = &rxBuf[1];
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	3301      	adds	r3, #1
 8000534:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t CDCrx[8] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', '\n'};
 8000536:	4a45      	ldr	r2, [pc, #276]	; (800064c <main+0x18c>)
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000540:	e883 0003 	stmia.w	r3, {r0, r1}

	int rpm = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		HAL_Delay(100);
 8000548:	2064      	movs	r0, #100	; 0x64
 800054a:	f000 fe1d 	bl	8001188 <HAL_Delay>

		//HAL_Delay(3);

		hStatus = HAL_UART_Receive(&huart3, rxBuf, 8, 10);
 800054e:	f107 0110 	add.w	r1, r7, #16
 8000552:	230a      	movs	r3, #10
 8000554:	2208      	movs	r2, #8
 8000556:	483e      	ldr	r0, [pc, #248]	; (8000650 <main+0x190>)
 8000558:	f003 fbbc 	bl	8003cd4 <HAL_UART_Receive>
 800055c:	4603      	mov	r3, r0
 800055e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//HAL_UART_Receive(&huart3, rxBuf, 8, 10);

		uint32_t x = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]

		CDC_Receive_FS(CDCrx, &x);
 8000566:	1d3a      	adds	r2, r7, #4
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fec4 	bl	80072fc <CDC_Receive_FS>

		if (CDCrx[0] == 'M') {
 8000574:	7a3b      	ldrb	r3, [r7, #8]
 8000576:	2b4d      	cmp	r3, #77	; 0x4d
 8000578:	d119      	bne.n	80005ae <main+0xee>
			if (CDCrx[1] == '3') {
 800057a:	7a7b      	ldrb	r3, [r7, #9]
 800057c:	2b33      	cmp	r3, #51	; 0x33
 800057e:	d109      	bne.n	8000594 <main+0xd4>
				//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
				spindleFWD(&huart3);
 8000580:	4833      	ldr	r0, [pc, #204]	; (8000650 <main+0x190>)
 8000582:	f000 fae7 	bl	8000b54 <spindleFWD>
				CDC_Transmit_FS(onStat, 3);
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2103      	movs	r1, #3
 800058c:	4618      	mov	r0, r3
 800058e:	f006 fec9 	bl	8007324 <CDC_Transmit_FS>
 8000592:	e040      	b.n	8000616 <main+0x156>
			} else if (CDCrx[1] == '5') {
 8000594:	7a7b      	ldrb	r3, [r7, #9]
 8000596:	2b35      	cmp	r3, #53	; 0x35
 8000598:	d13d      	bne.n	8000616 <main+0x156>
				//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
				spindleOff(&huart3);
 800059a:	482d      	ldr	r0, [pc, #180]	; (8000650 <main+0x190>)
 800059c:	f000 fb02 	bl	8000ba4 <spindleOff>
				CDC_Transmit_FS(offStat, 3);
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	2103      	movs	r1, #3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 febc 	bl	8007324 <CDC_Transmit_FS>
 80005ac:	e033      	b.n	8000616 <main+0x156>
			}

		}
		else if (CDCrx[0] == 'S') {
 80005ae:	7a3b      	ldrb	r3, [r7, #8]
 80005b0:	2b53      	cmp	r3, #83	; 0x53
 80005b2:	d130      	bne.n	8000616 <main+0x156>
			CDC_Transmit_FS(CDCrx, 8);
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	2108      	movs	r1, #8
 80005ba:	4618      	mov	r0, r3
 80005bc:	f006 feb2 	bl	8007324 <CDC_Transmit_FS>
			for (int i = 0; i < 6; i++) {
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80005c4:	e010      	b.n	80005e8 <main+0x128>
				if (CDCrx[i] == '\n') {
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005cc:	4413      	add	r3, r2
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b0a      	cmp	r3, #10
 80005d2:	d106      	bne.n	80005e2 <main+0x122>

					//set newline to null so we can use stoi
					CDCrx[i] = 'X';
 80005d4:	f107 0208 	add.w	r2, r7, #8
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	4413      	add	r3, r2
 80005dc:	2258      	movs	r2, #88	; 0x58
 80005de:	701a      	strb	r2, [r3, #0]
					break;
 80005e0:	e005      	b.n	80005ee <main+0x12e>
			for (int i = 0; i < 6; i++) {
 80005e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005e4:	3301      	adds	r3, #1
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	ddeb      	ble.n	80005c6 <main+0x106>
				}
			}

			//rounddown ok
			rpm = atoi(rxPtr1)/3;
 80005ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005f0:	f007 faf4 	bl	8007bdc <atoi>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <main+0x194>)
 80005f8:	fb82 1203 	smull	r1, r2, r2, r3
 80005fc:	17db      	asrs	r3, r3, #31
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
			setFreq(rpm, &huart3);
 8000602:	4913      	ldr	r1, [pc, #76]	; (8000650 <main+0x190>)
 8000604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000606:	f000 faf5 	bl	8000bf4 <setFreq>
			CDC_Transmit_FS(CDCrx, 8);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2108      	movs	r1, #8
 8000610:	4618      	mov	r0, r3
 8000612:	f006 fe87 	bl	8007324 <CDC_Transmit_FS>
		} else {

			//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
		}

		CDCrx[0] = 'a';
 8000616:	2361      	movs	r3, #97	; 0x61
 8000618:	723b      	strb	r3, [r7, #8]

		if(rpm > 1000)
 800061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800061c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000620:	dd05      	ble.n	800062e <main+0x16e>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <main+0x198>)
 8000628:	f001 fbde 	bl	8001de8 <HAL_GPIO_WritePin>
 800062c:	e78c      	b.n	8000548 <main+0x88>
		}
		else
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2102      	movs	r1, #2
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0x198>)
 8000634:	f001 fbd8 	bl	8001de8 <HAL_GPIO_WritePin>
	while (1) {
 8000638:	e786      	b.n	8000548 <main+0x88>
 800063a:	bf00      	nop
 800063c:	08007d7c 	.word	0x08007d7c
 8000640:	08007d80 	.word	0x08007d80
 8000644:	08007d84 	.word	0x08007d84
 8000648:	08007d88 	.word	0x08007d88
 800064c:	08007d90 	.word	0x08007d90
 8000650:	2000042c 	.word	0x2000042c
 8000654:	55555556 	.word	0x55555556
 8000658:	40020800 	.word	0x40020800

0800065c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 fae4 	bl	8007c38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fd1d 	bl	8003120 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
		Error_Handler();
 80006ec:	f000 f9ee 	bl	8000acc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f002 ff7e 	bl	8003610 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
		Error_Handler();
 800071a:	f000 f9d7 	bl	8000acc <Error_Handler>
	}
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <MX_ADC2_Init+0x9c>)
 8000746:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC2_Init+0x98>)
 800074a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800074e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_ADC2_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC2_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_ADC2_Init+0xa0>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC2_Init+0x98>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC2_Init+0x98>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC2_Init+0x98>)
 8000792:	f000 fd1d 	bl	80011d0 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC2_Init+0x70>
		Error_Handler();
 800079c:	f000 f996 	bl	8000acc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC2_Init+0x98>)
 80007b2:	f000 fd51 	bl	8001258 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC2_Init+0x90>
		Error_Handler();
 80007bc:	f000 f986 	bl	8000acc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000470 	.word	0x20000470
 80007cc:	40012100 	.word	0x40012100
 80007d0:	0f000001 	.word	0x0f000001

080007d4 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC3_Init+0x98>)
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_ADC3_Init+0x9c>)
 80007ea:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC3_Init+0x98>)
 80007ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f2:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC3_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC3_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC3_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_ADC3_Init+0x98>)
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_ADC3_Init+0xa0>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ADC3_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_ADC3_Init+0x98>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ADC3_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC3_Init+0x98>)
 8000830:	2201      	movs	r2, #1
 8000832:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_ADC3_Init+0x98>)
 8000836:	f000 fccb 	bl	80011d0 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC3_Init+0x70>
		Error_Handler();
 8000840:	f000 f944 	bl	8000acc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000844:	2303      	movs	r3, #3
 8000846:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC3_Init+0x98>)
 8000856:	f000 fcff 	bl	8001258 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC3_Init+0x90>
		Error_Handler();
 8000860:	f000 f934 	bl	8000acc <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200004e0 	.word	0x200004e0
 8000870:	40012200 	.word	0x40012200
 8000874:	0f000001 	.word	0x0f000001

08000878 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_CAN2_Init+0x60>)
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <MX_CAN2_Init+0x64>)
 8000880:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_CAN2_Init+0x60>)
 8000884:	2210      	movs	r2, #16
 8000886:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_CAN2_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_CAN2_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_CAN2_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_CAN2_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_CAN2_Init+0x60>)
 80008c6:	f000 fee5 	bl	8001694 <HAL_CAN_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_CAN2_Init+0x5c>
		Error_Handler();
 80008d0:	f000 f8fc 	bl	8000acc <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200004b8 	.word	0x200004b8
 80008dc:	40006800 	.word	0x40006800

080008e0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_SPI1_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <MX_SPI1_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_SPI1_Init+0x64>)
 800090c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000910:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_SPI1_Init+0x64>)
 800092c:	220a      	movs	r2, #10
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_SPI1_Init+0x64>)
 8000932:	f003 f867 	bl	8003a04 <HAL_SPI_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_SPI1_Init+0x60>
		Error_Handler();
 800093c:	f000 f8c6 	bl	8000acc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000528 	.word	0x20000528
 8000948:	40013000 	.word	0x40013000

0800094c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END   USART3_Init 1 */

	huart3.Instance = USART3;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART3_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800095c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x4c>)
 8000984:	f003 f8c7 	bl	8003b16 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800098e:	f000 f89d 	bl	8000acc <Error_Handler>

	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END   USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000042c 	.word	0x2000042c
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b40      	ldr	r3, [pc, #256]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a3f      	ldr	r2, [pc, #252]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b36      	ldr	r3, [pc, #216]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a31      	ldr	r2, [pc, #196]	; (8000abc <MX_GPIO_Init+0x11c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2102      	movs	r1, #2
 8000a46:	481e      	ldr	r0, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0x120>)
 8000a48:	f001 f9ce 	bl	8001de8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2102      	movs	r1, #2
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x124>)
 8000a52:	f001 f9c9 	bl	8001de8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000a56:	2200      	movs	r2, #0
 8000a58:	211f      	movs	r1, #31
 8000a5a:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <MX_GPIO_Init+0x128>)
 8000a5c:	f001 f9c4 	bl	8001de8 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x120>)
 8000a78:	f001 f81a 	bl	8001ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0x124>)
 8000a94:	f001 f80c 	bl	8001ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000a98:	231f      	movs	r3, #31
 8000a9a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_GPIO_Init+0x128>)
 8000ab0:	f000 fffe 	bl	8001ab0 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <sendData8>:

uint8_t wrMsg[] = { 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };

uint8_t check[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void sendData8(UART_HandleTypeDef *huart) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <sendData8+0x38>)
 8000ae6:	f001 f97f 	bl	8001de8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000aea:	2005      	movs	r0, #5
 8000aec:	f000 fb4c 	bl	8001188 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000af0:	230a      	movs	r3, #10
 8000af2:	2208      	movs	r2, #8
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <sendData8+0x3c>)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f003 f85a 	bl	8003bb0 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2102      	movs	r1, #2
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <sendData8+0x38>)
 8000b02:	f001 f971 	bl	8001de8 <HAL_GPIO_WritePin>

}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400
 8000b14:	20000000 	.word	0x20000000

08000b18 <appendCRC8>:

void clearSer() {
	//TODO
}

void appendCRC8() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000b1e:	2106      	movs	r1, #6
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <appendCRC8+0x38>)
 8000b22:	f000 f895 	bl	8000c50 <crc_chk_value>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	781a      	ldrb	r2, [r3, #0]
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <appendCRC8+0x38>)
 8000b36:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <appendCRC8+0x38>)
 8000b44:	71da      	strb	r2, [r3, #7]
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000

08000b54 <spindleFWD>:
//  curData |= byteBuffer[4];
//
//  return curData;
}

void spindleFWD(UART_HandleTypeDef *huart) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <spindleFWD+0x4c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <spindleFWD+0x4c>)
 8000b64:	2203      	movs	r2, #3
 8000b66:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <spindleFWD+0x4c>)
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <spindleFWD+0x4c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <spindleFWD+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <spindleFWD+0x4c>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <spindleFWD+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <spindleFWD+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000b8c:	f7ff ffc4 	bl	8000b18 <appendCRC8>

	sendData8(huart);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffa1 	bl	8000ad8 <sendData8>
	//checkEcho8();
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <spindleOff>:

void spindleOff(UART_HandleTypeDef *huart) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <spindleOff+0x4c>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <spindleOff+0x4c>)
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <spindleOff+0x4c>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <spindleOff+0x4c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <spindleOff+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <spindleOff+0x4c>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <spindleOff+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <spindleOff+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000bdc:	f7ff ff9c 	bl	8000b18 <appendCRC8>

	sendData8(huart);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff79 	bl	8000ad8 <sendData8>

	//checkEcho8();
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000000 	.word	0x20000000

08000bf4 <setFreq>:

void setFreq(uint16_t freq, UART_HandleTypeDef *huart) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <setFreq+0x58>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <setFreq+0x58>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <setFreq+0x58>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <setFreq+0x58>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <setFreq+0x58>)
 8000c22:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <setFreq+0x58>)
 8000c2a:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <setFreq+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <setFreq+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000c38:	f7ff ff6e 	bl	8000b18 <appendCRC8>

	sendData8(huart);
 8000c3c:	6838      	ldr	r0, [r7, #0]
 8000c3e:	f7ff ff4b 	bl	8000ad8 <sendData8>

	//checkEcho8();
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length) {
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c60:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--) {
 8000c62:	e01f      	b.n	8000ca4 <crc_chk_value+0x54>
		crc_value ^= *data_value++;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4053      	eors	r3, r2
 8000c72:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	e011      	b.n	8000c9e <crc_chk_value+0x4e>
			if (crc_value & 0x0001)
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000c84:	89fb      	ldrh	r3, [r7, #14]
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <crc_chk_value+0x6c>)
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	81fb      	strh	r3, [r7, #14]
 8000c90:	e002      	b.n	8000c98 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	085b      	lsrs	r3, r3, #1
 8000c96:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	ddea      	ble.n	8000c7a <crc_chk_value+0x2a>
	while (length--) {
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	70fa      	strb	r2, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1da      	bne.n	8000c64 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000cae:	89fb      	ldrh	r3, [r7, #14]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	ffffa001 	.word	0xffffa001

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2e      	ldr	r2, [pc, #184]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481c      	ldr	r0, [pc, #112]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000d7e:	f000 fe97 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d82:	e02c      	b.n	8000dde <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_ADC_MspInit+0xe4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d127      	bne.n	8000dde <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a15      	ldr	r2, [pc, #84]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dda:	f000 fe69 	bl	8001ab0 <HAL_GPIO_Init>
}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	; 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012100 	.word	0x40012100
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40012200 	.word	0x40012200

08000df8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <HAL_CAN_MspInit+0xa0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d13a      	bne.n	8000e90 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_CAN_MspInit+0xa4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e80:	2309      	movs	r3, #9
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <HAL_CAN_MspInit+0xa8>)
 8000e8c:	f000 fe10 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40006800 	.word	0x40006800
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400

08000ea4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0x84>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d12b      	bne.n	8000f1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_SPI_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	23f0      	movs	r3, #240	; 0xf0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	; (8000f30 <HAL_SPI_MspInit+0x8c>)
 8000f1a:	f000 fdc9 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	; 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40013000 	.word	0x40013000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <HAL_UART_MspInit+0x84>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12c      	bne.n	8000fb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000fac:	f000 fd80 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020400 	.word	0x40020400

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f89a 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <OTG_FS_IRQHandler+0x10>)
 800101e:	f001 f84c 	bl	80020ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20001a54 	.word	0x20001a54

0800102c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <SystemInit+0x20>)
 8001032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <SystemInit+0x20>)
 8001038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800103c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001056:	490e      	ldr	r1, [pc, #56]	; (8001090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800106c:	4c0b      	ldr	r4, [pc, #44]	; (800109c <LoopFillZerobss+0x26>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800107a:	f7ff ffd7 	bl	800102c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800107e:	f006 fdb7 	bl	8007bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001082:	f7ff fa1d 	bl	80004c0 <main>
  bx  lr    
 8001086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001094:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 8001098:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800109c:	20001e5c 	.word	0x20001e5c

080010a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_Init+0x40>)
 80010ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_Init+0x40>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x40>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 fcad 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fdf2 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fcc5 	bl	8001a96 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 fc8d 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000008 	.word	0x20000008
 8001140:	20000010 	.word	0x20000010
 8001144:	2000000c 	.word	0x2000000c

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000010 	.word	0x20000010
 800116c:	20000580 	.word	0x20000580

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000580 	.word	0x20000580

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff ffee 	bl	8001170 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffde 	bl	8001170 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000010 	.word	0x20000010

080011d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e033      	b.n	800124e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fd8e 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d118      	bne.n	8001240 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001216:	f023 0302 	bic.w	r3, r3, #2
 800121a:	f043 0202 	orr.w	r2, r3, #2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f93a 	bl	800149c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	f043 0201 	orr.w	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
 800123e:	e001      	b.n	8001244 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1c>
 8001270:	2302      	movs	r3, #2
 8001272:	e105      	b.n	8001480 <HAL_ADC_ConfigChannel+0x228>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d925      	bls.n	80012d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	3b1e      	subs	r3, #30
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68d9      	ldr	r1, [r3, #12]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	4603      	mov	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4403      	add	r3, r0
 80012c2:	3b1e      	subs	r3, #30
 80012c4:	409a      	lsls	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	e022      	b.n	8001316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6919      	ldr	r1, [r3, #16]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	2207      	movs	r2, #7
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	400a      	ands	r2, r1
 80012f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	4603      	mov	r3, r0
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4403      	add	r3, r0
 800130c:	409a      	lsls	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b06      	cmp	r3, #6
 800131c:	d824      	bhi.n	8001368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b05      	subs	r3, #5
 8001330:	221f      	movs	r2, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	3b05      	subs	r3, #5
 800135a:	fa00 f203 	lsl.w	r2, r0, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
 8001366:	e04c      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d824      	bhi.n	80013ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b23      	subs	r3, #35	; 0x23
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43da      	mvns	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b23      	subs	r3, #35	; 0x23
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
 80013b8:	e023      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3b41      	subs	r3, #65	; 0x41
 80013cc:	221f      	movs	r2, #31
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b41      	subs	r3, #65	; 0x41
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_ADC_ConfigChannel+0x234>)
 8001404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_ADC_ConfigChannel+0x238>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d109      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1cc>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d105      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a19      	ldr	r2, [pc, #100]	; (8001490 <HAL_ADC_ConfigChannel+0x238>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d123      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x21e>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b10      	cmp	r3, #16
 8001434:	d003      	beq.n	800143e <HAL_ADC_ConfigChannel+0x1e6>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b11      	cmp	r3, #17
 800143c:	d11b      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b10      	cmp	r3, #16
 8001450:	d111      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_ADC_ConfigChannel+0x23c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_ADC_ConfigChannel+0x240>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9a      	lsrs	r2, r3, #18
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001468:	e002      	b.n	8001470 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3b01      	subs	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f9      	bne.n	800146a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40012300 	.word	0x40012300
 8001490:	40012000 	.word	0x40012000
 8001494:	20000008 	.word	0x20000008
 8001498:	431bde83 	.word	0x431bde83

0800149c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <ADC_Init+0x1f0>)
 80014a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	021a      	lsls	r2, r3, #8
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6899      	ldr	r1, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	4a58      	ldr	r2, [pc, #352]	; (8001690 <ADC_Init+0x1f4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d022      	beq.n	800157a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001542:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6899      	ldr	r1, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	e00f      	b.n	800159a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001588:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001598:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0202 	bic.w	r2, r2, #2
 80015a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6899      	ldr	r1, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7e1b      	ldrb	r3, [r3, #24]
 80015b4:	005a      	lsls	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01b      	beq.n	8001600 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	3b01      	subs	r3, #1
 80015f4:	035a      	lsls	r2, r3, #13
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	e007      	b.n	8001610 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800160e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	3b01      	subs	r3, #1
 800162c:	051a      	lsls	r2, r3, #20
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001652:	025a      	lsls	r2, r3, #9
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	029a      	lsls	r2, r3, #10
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	609a      	str	r2, [r3, #8]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40012300 	.word	0x40012300
 8001690:	0f000001 	.word	0x0f000001

08001694 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0ed      	b.n	8001882 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d102      	bne.n	80016b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fba0 	bl	8000df8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0202 	bic.w	r2, r2, #2
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c8:	f7ff fd52 	bl	8001170 <HAL_GetTick>
 80016cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ce:	e012      	b.n	80016f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d0:	f7ff fd4e 	bl	8001170 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b0a      	cmp	r3, #10
 80016dc:	d90b      	bls.n	80016f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2205      	movs	r2, #5
 80016ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0c5      	b.n	8001882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e5      	bne.n	80016d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001714:	f7ff fd2c 	bl	8001170 <HAL_GetTick>
 8001718:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800171a:	e012      	b.n	8001742 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800171c:	f7ff fd28 	bl	8001170 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b0a      	cmp	r3, #10
 8001728:	d90b      	bls.n	8001742 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2205      	movs	r2, #5
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e09f      	b.n	8001882 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0e5      	beq.n	800171c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e5b      	ldrb	r3, [r3, #25]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e007      	b.n	80017a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e9b      	ldrb	r3, [r3, #26]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0220 	orr.w	r2, r2, #32
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e007      	b.n	80017ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0220 	bic.w	r2, r2, #32
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7edb      	ldrb	r3, [r3, #27]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0210 	bic.w	r2, r2, #16
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0210 	orr.w	r2, r2, #16
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7f1b      	ldrb	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e007      	b.n	8001822 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0208 	bic.w	r2, r2, #8
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7f5b      	ldrb	r3, [r3, #29]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e007      	b.n	800184c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0204 	bic.w	r2, r2, #4
 800184a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	ea42 0103 	orr.w	r1, r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff29 	bl	800188c <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff3e 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff31 	bl	80018f0 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e16b      	b.n	8001da4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 815a 	bne.w	8001d9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80b4 	beq.w	8001d9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a5f      	ldr	r2, [pc, #380]	; (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a5b      	ldr	r2, [pc, #364]	; (8001dc0 <HAL_GPIO_Init+0x310>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_GPIO_Init+0x314>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d02b      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a51      	ldr	r2, [pc, #324]	; (8001dc8 <HAL_GPIO_Init+0x318>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d025      	beq.n	8001cd2 <HAL_GPIO_Init+0x222>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <HAL_GPIO_Init+0x31c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01f      	beq.n	8001cce <HAL_GPIO_Init+0x21e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4f      	ldr	r2, [pc, #316]	; (8001dd0 <HAL_GPIO_Init+0x320>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d019      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_GPIO_Init+0x324>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x216>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x328>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x32c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x20e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	; (8001de0 <HAL_GPIO_Init+0x330>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x20a>
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x310>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1a:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_GPIO_Init+0x334>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae90 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40021800 	.word	0x40021800
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1c:	b08f      	sub	sp, #60	; 0x3c
 8001e1e:	af0a      	add	r7, sp, #40	; 0x28
 8001e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e10f      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f005 fbb4 	bl	80075b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fafb 	bl	8004466 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	687e      	ldr	r6, [r7, #4]
 8001e78:	466d      	mov	r5, sp
 8001e7a:	f106 0410 	add.w	r4, r6, #16
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8e:	1d33      	adds	r3, r6, #4
 8001e90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e92:	6838      	ldr	r0, [r7, #0]
 8001e94:	f002 f9d2 	bl	800423c <USB_CoreInit>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0d0      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fae9 	bl	8004488 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e04a      	b.n	8001f52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	333d      	adds	r3, #61	; 0x3d
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	1a9b      	subs	r3, r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	333c      	adds	r3, #60	; 0x3c
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	b298      	uxth	r0, r3
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3342      	adds	r3, #66	; 0x42
 8001ef8:	4602      	mov	r2, r0
 8001efa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	333f      	adds	r3, #63	; 0x3f
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3344      	adds	r3, #68	; 0x44
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3348      	adds	r3, #72	; 0x48
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3350      	adds	r3, #80	; 0x50
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3af      	bcc.n	8001ebc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e044      	b.n	8001fec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3b5      	bcc.n	8001f62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	687e      	ldr	r6, [r7, #4]
 8001ffe:	466d      	mov	r5, sp
 8002000:	f106 0410 	add.w	r4, r6, #16
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002010:	e885 0003 	stmia.w	r5, {r0, r1}
 8002014:	1d33      	adds	r3, r6, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f002 fa5f 	bl	80044dc <USB_DevInit>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00d      	b.n	800204c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 faa7 	bl	8005598 <USB_DevDisconnect>

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002054 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_PCD_Start+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e020      	b.n	80020b2 <HAL_PCD_Start+0x5e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	2b01      	cmp	r3, #1
 800207e:	d109      	bne.n	8002094 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002084:	2b01      	cmp	r3, #1
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 f9d3 	bl	8004444 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fa57 	bl	8005556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ba:	b590      	push	{r4, r7, lr}
 80020bc:	b08d      	sub	sp, #52	; 0x34
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fb15 	bl	8005700 <USB_GetMode>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 839d 	bne.w	8002818 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fa79 	bl	80055da <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8393 	beq.w	8002816 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fa70 	bl	80055da <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d107      	bne.n	8002114 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f002 0202 	and.w	r2, r2, #2
 8002112:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fa5e 	bl	80055da <USB_ReadInterrupts>
 800211e:	4603      	mov	r3, r0
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d161      	bne.n	80021ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0210 	bic.w	r2, r2, #16
 8002136:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	0c5b      	lsrs	r3, r3, #17
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	2b02      	cmp	r3, #2
 8002162:	d124      	bne.n	80021ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d035      	beq.n	80021dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800217a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	6a38      	ldr	r0, [r7, #32]
 8002184:	f003 f8c4 	bl	8005310 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002194:	441a      	add	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021a6:	441a      	add	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	619a      	str	r2, [r3, #24]
 80021ac:	e016      	b.n	80021dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	0c5b      	lsrs	r3, r3, #17
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d110      	bne.n	80021dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021c0:	2208      	movs	r2, #8
 80021c2:	4619      	mov	r1, r3
 80021c4:	6a38      	ldr	r0, [r7, #32]
 80021c6:	f003 f8a3 	bl	8005310 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	441a      	add	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0210 	orr.w	r2, r2, #16
 80021ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 f9f2 	bl	80055da <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002200:	d16e      	bne.n	80022e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f003 f9f8 	bl	8005600 <USB_ReadDevAllOutEpInterrupt>
 8002210:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002212:	e062      	b.n	80022da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d057      	beq.n	80022ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fa1d 	bl	8005668 <USB_ReadDevOutEPInterrupt>
 800222e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00c      	beq.n	8002254 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002246:	461a      	mov	r2, r3
 8002248:	2301      	movs	r3, #1
 800224a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800224c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fdb0 	bl	8002db4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226a:	461a      	mov	r2, r3
 800226c:	2308      	movs	r3, #8
 800226e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 feaa 	bl	8002fcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228e:	461a      	mov	r2, r3
 8002290:	2310      	movs	r3, #16
 8002292:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	461a      	mov	r2, r3
 80022c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3301      	adds	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d199      	bne.n	8002214 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 f978 	bl	80055da <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022f4:	f040 80c0 	bne.w	8002478 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 f999 	bl	8005634 <USB_ReadDevAllInEpInterrupt>
 8002302:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002308:	e0b2      	b.n	8002470 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a7 	beq.w	8002464 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f003 f9bf 	bl	80056a4 <USB_ReadDevInEPInterrupt>
 8002326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d057      	beq.n	80023e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	2201      	movs	r2, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	69f9      	ldr	r1, [r7, #28]
 800234e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002352:	4013      	ands	r3, r2
 8002354:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002362:	461a      	mov	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d132      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3348      	adds	r3, #72	; 0x48
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4403      	add	r3, r0
 8002390:	3344      	adds	r3, #68	; 0x44
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4419      	add	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4403      	add	r3, r0
 80023a4:	3348      	adds	r3, #72	; 0x48
 80023a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x31c>
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3350      	adds	r3, #80	; 0x50
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ce:	461a      	mov	r2, r3
 80023d0:	2101      	movs	r1, #1
 80023d2:	f003 f9c7 	bl	8005764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 f96a 	bl	80076b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	461a      	mov	r2, r3
 80023fa:	2308      	movs	r3, #8
 80023fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800244c:	461a      	mov	r2, r3
 800244e:	2302      	movs	r3, #2
 8002450:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800245c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fc1b 	bl	8002c9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3301      	adds	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	085b      	lsrs	r3, r3, #1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f af49 	bne.w	800230a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f8ac 	bl	80055da <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800248c:	d122      	bne.n	80024d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024b4:	2100      	movs	r1, #0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fe26 	bl	8003108 <HAL_PCDEx_LPM_Callback>
 80024bc:	e002      	b.n	80024c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f005 f970 	bl	80077a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80024d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 f87e 	bl	80055da <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e8:	d112      	bne.n	8002510 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f005 f92c 	bl	8007758 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800250e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 f860 	bl	80055da <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	f040 80c7 	bne.w	80026b6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2110      	movs	r1, #16
 8002542:	4618      	mov	r0, r3
 8002544:	f002 f92e 	bl	80047a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254c:	e056      	b.n	80025fc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255a:	461a      	mov	r2, r3
 800255c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002560:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002572:	0151      	lsls	r1, r2, #5
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	440a      	add	r2, r1
 8002578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800257c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002580:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	440a      	add	r2, r1
 8002598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800259c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ae:	461a      	mov	r2, r3
 80025b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	0151      	lsls	r1, r2, #5
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	440a      	add	r2, r1
 80025cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	3301      	adds	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002602:	429a      	cmp	r2, r3
 8002604:	d3a3      	bcc.n	800254e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002614:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002618:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002632:	f043 030b 	orr.w	r3, r3, #11
 8002636:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002648:	f043 030b 	orr.w	r3, r3, #11
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	e015      	b.n	800267c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002662:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002666:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002676:	f043 030b 	orr.w	r3, r3, #11
 800267a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800268e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026a0:	461a      	mov	r2, r3
 80026a2:	f003 f85f 	bl	8005764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 ff8d 	bl	80055da <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ca:	d124      	bne.n	8002716 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 f823 	bl	800571c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 f8c3 	bl	8004866 <USB_GetDevSpeed>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681c      	ldr	r4, [r3, #0]
 80026ec:	f001 f956 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80026f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4620      	mov	r0, r4
 80026fc:	f001 fe00 	bl	8004300 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f005 f800 	bl	8007706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 ff5d 	bl	80055da <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b08      	cmp	r3, #8
 8002728:	d10a      	bne.n	8002740 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f004 ffdd 	bl	80076ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f002 0208 	and.w	r2, r2, #8
 800273e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f002 ff48 	bl	80055da <USB_ReadInterrupts>
 800274a:	4603      	mov	r3, r0
 800274c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002754:	d10f      	bne.n	8002776 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	b2db      	uxtb	r3, r3
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f005 f83f 	bl	80077e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 ff2d 	bl	80055da <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278a:	d10f      	bne.n	80027ac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f005 f812 	bl	80077c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 ff12 	bl	80055da <USB_ReadInterrupts>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c0:	d10a      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f005 f820 	bl	8007808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f002 fefc 	bl	80055da <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d115      	bne.n	8002818 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f005 f810 	bl	8007824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e000      	b.n	8002818 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002816:	bf00      	nop
    }
  }
}
 8002818:	3734      	adds	r7, #52	; 0x34
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_PCD_SetAddress+0x1a>
 8002834:	2302      	movs	r3, #2
 8002836:	e013      	b.n	8002860 <HAL_PCD_SetAddress+0x42>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fe5a 	bl	800550a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	70fb      	strb	r3, [r7, #3]
 800287a:	460b      	mov	r3, r1
 800287c:	803b      	strh	r3, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800288a:	2b00      	cmp	r3, #0
 800288c:	da0f      	bge.n	80028ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 020f 	and.w	r2, r3, #15
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	3338      	adds	r3, #56	; 0x38
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
 80028ac:	e00f      	b.n	80028ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	f003 020f 	and.w	r2, r3, #15
 80028b4:	4613      	mov	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028da:	883a      	ldrh	r2, [r7, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	78ba      	ldrb	r2, [r7, #2]
 80028e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028f8:	78bb      	ldrb	r3, [r7, #2]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d102      	bne.n	8002904 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_PCD_EP_Open+0xaa>
 800290e:	2302      	movs	r3, #2
 8002910:	e00e      	b.n	8002930 <HAL_PCD_EP_Open+0xc8>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68f9      	ldr	r1, [r7, #12]
 8002920:	4618      	mov	r0, r3
 8002922:	f001 ffc5 	bl	80048b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800292e:	7afb      	ldrb	r3, [r7, #11]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002948:	2b00      	cmp	r3, #0
 800294a:	da0f      	bge.n	800296c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	3338      	adds	r3, #56	; 0x38
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	705a      	strb	r2, [r3, #1]
 800296a:	e00f      	b.n	800298c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	3304      	adds	r3, #4
 8002984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_EP_Close+0x6e>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e00e      	b.n	80029c4 <HAL_PCD_EP_Close+0x8c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 f803 	bl	80049c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029dc:	7afb      	ldrb	r3, [r7, #11]
 80029de:	f003 020f 	and.w	r2, r3, #15
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	f002 fade 	bl	8005000 <USB_EP0StartXfer>
 8002a44:	e008      	b.n	8002a58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6979      	ldr	r1, [r7, #20]
 8002a54:	f002 f890 	bl	8004b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 020f 	and.w	r2, r3, #15
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a84:	681b      	ldr	r3, [r3, #0]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	6979      	ldr	r1, [r7, #20]
 8002b04:	f002 fa7c 	bl	8005000 <USB_EP0StartXfer>
 8002b08:	e008      	b.n	8002b1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	f002 f82e 	bl	8004b78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 020f 	and.w	r2, r3, #15
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d901      	bls.n	8002b44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e050      	b.n	8002be6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da0f      	bge.n	8002b6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3338      	adds	r3, #56	; 0x38
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	3304      	adds	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	705a      	strb	r2, [r3, #1]
 8002b6a:	e00d      	b.n	8002b88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_PCD_EP_SetStall+0x82>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e01e      	b.n	8002be6 <HAL_PCD_EP_SetStall+0xc0>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68f9      	ldr	r1, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f002 fbd3 	bl	8005362 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10a      	bne.n	8002bdc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	b2d9      	uxtb	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f002 fdc4 	bl	8005764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d901      	bls.n	8002c0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e042      	b.n	8002c92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da0f      	bge.n	8002c34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3338      	adds	r3, #56	; 0x38
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	705a      	strb	r2, [r3, #1]
 8002c32:	e00f      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_PCD_EP_ClrStall+0x86>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e00e      	b.n	8002c92 <HAL_PCD_EP_ClrStall+0xa4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fbdb 	bl	800543e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b08a      	sub	sp, #40	; 0x28
 8002c9e:	af02      	add	r7, sp, #8
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	3338      	adds	r3, #56	; 0x38
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d901      	bls.n	8002cd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06c      	b.n	8002dac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d902      	bls.n	8002cee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3303      	adds	r3, #3
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cf6:	e02b      	b.n	8002d50 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d902      	bls.n	8002d14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3303      	adds	r3, #3
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	68d9      	ldr	r1, [r3, #12]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4603      	mov	r3, r0
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f002 fab7 	bl	80052a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	441a      	add	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699a      	ldr	r2, [r3, #24]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d809      	bhi.n	8002d7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d203      	bcs.n	8002d7a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1be      	bne.n	8002cf8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d811      	bhi.n	8002daa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	6939      	ldr	r1, [r7, #16]
 8002da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002da6:	4013      	ands	r3, r2
 8002da8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	333c      	adds	r3, #60	; 0x3c
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	f040 80a0 	bne.w	8002f2c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d015      	beq.n	8002e22 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f240 80dd 	bls.w	8002fba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80d7 	beq.w	8002fba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	6093      	str	r3, [r2, #8]
 8002e20:	e0cb      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e0bc      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 80b7 	bne.w	8002fba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d90f      	bls.n	8002e74 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e70:	6093      	str	r3, [r2, #8]
 8002e72:	e0a2      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e86:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	440b      	add	r3, r1
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e9a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4403      	add	r3, r0
 8002eaa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002eae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4419      	add	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4403      	add	r3, r0
 8002ee8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d114      	bne.n	8002f1e <PCD_EP_OutXfrComplete_int+0x16a>
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f16:	461a      	mov	r2, r3
 8002f18:	2101      	movs	r1, #1
 8002f1a:	f002 fc23 	bl	8005764 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f004 fbab 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 8002f2a:	e046      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d124      	bne.n	8002f7e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f50:	6093      	str	r3, [r2, #8]
 8002f52:	e032      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	4619      	mov	r1, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f004 fb82 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 8002f7c:	e01d      	b.n	8002fba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d114      	bne.n	8002fae <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d108      	bne.n	8002fae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2100      	movs	r1, #0
 8002faa:	f002 fbdb 	bl	8005764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f004 fb63 	bl	8007680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	4f54300a 	.word	0x4f54300a
 8002fc8:	4f54310a 	.word	0x4f54310a

08002fcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	333c      	adds	r3, #60	; 0x3c
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a15      	ldr	r2, [pc, #84]	; (8003054 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d90e      	bls.n	8003020 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003018:	461a      	mov	r2, r3
 800301a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f004 fb1b 	bl	800765c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <PCD_EP_OutSetupPacket_int+0x88>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d90c      	bls.n	8003048 <PCD_EP_OutSetupPacket_int+0x7c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003040:	461a      	mov	r2, r3
 8003042:	2101      	movs	r1, #1
 8003044:	f002 fb8e 	bl	8005764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	4f54300a 	.word	0x4f54300a

08003058 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
 8003064:	4613      	mov	r3, r2
 8003066:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003076:	883b      	ldrh	r3, [r7, #0]
 8003078:	0419      	lsls	r1, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	430a      	orrs	r2, r1
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
 8003084:	e028      	b.n	80030d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4413      	add	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
 8003098:	e00d      	b.n	80030b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4413      	add	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	3301      	adds	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	429a      	cmp	r2, r3
 80030be:	d3ec      	bcc.n	800309a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030c0:	883b      	ldrh	r3, [r7, #0]
 80030c2:	0418      	lsls	r0, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6819      	ldr	r1, [r3, #0]
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	4302      	orrs	r2, r0
 80030d0:	3340      	adds	r3, #64	; 0x40
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	887a      	ldrh	r2, [r7, #2]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e264      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d075      	beq.n	800322a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313e:	4ba3      	ldr	r3, [pc, #652]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b04      	cmp	r3, #4
 8003148:	d00c      	beq.n	8003164 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800314a:	4ba0      	ldr	r3, [pc, #640]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d112      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b9d      	ldr	r3, [pc, #628]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003162:	d10b      	bne.n	800317c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003164:	4b99      	ldr	r3, [pc, #612]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05b      	beq.n	8003228 <HAL_RCC_OscConfig+0x108>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d157      	bne.n	8003228 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e23f      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d106      	bne.n	8003194 <HAL_RCC_OscConfig+0x74>
 8003186:	4b91      	ldr	r3, [pc, #580]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a90      	ldr	r2, [pc, #576]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e01d      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x98>
 800319e:	4b8b      	ldr	r3, [pc, #556]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a8a      	ldr	r2, [pc, #552]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a87      	ldr	r2, [pc, #540]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0xb0>
 80031b8:	4b84      	ldr	r3, [pc, #528]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a83      	ldr	r2, [pc, #524]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b81      	ldr	r3, [pc, #516]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a80      	ldr	r2, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d013      	beq.n	8003200 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fd ffca 	bl	8001170 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e0:	f7fd ffc6 	bl	8001170 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e204      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0xc0>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fd ffb6 	bl	8001170 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fd ffb2 	bl	8001170 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1f0      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321a:	4b6c      	ldr	r3, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0xe8>
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d063      	beq.n	80032fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003236:	4b65      	ldr	r3, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b62      	ldr	r3, [pc, #392]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b5f      	ldr	r3, [pc, #380]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b5c      	ldr	r3, [pc, #368]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1c4      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4952      	ldr	r1, [pc, #328]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <HAL_RCC_OscConfig+0x2b0>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fd ff6b 	bl	8001170 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329e:	f7fd ff67 	bl	8001170 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1a5      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4940      	ldr	r1, [pc, #256]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x2b0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd ff4a 	bl	8001170 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fd ff46 	bl	8001170 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e184      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d030      	beq.n	800336c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_RCC_OscConfig+0x2b4>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fd ff2a 	bl	8001170 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7fd ff26 	bl	8001170 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e164      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x200>
 800333e:	e015      	b.n	800336c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003340:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x2b4>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003346:	f7fd ff13 	bl	8001170 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334e:	f7fd ff0f 	bl	8001170 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e14d      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a0 	beq.w	80034ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337e:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_RCC_OscConfig+0x2ac>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_OscConfig+0x2b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d121      	bne.n	80033fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_RCC_OscConfig+0x2b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_RCC_OscConfig+0x2b8>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c2:	f7fd fed5 	bl	8001170 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	e011      	b.n	80033ee <HAL_RCC_OscConfig+0x2ce>
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
 80033d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fd fec8 	bl	8001170 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e106      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	4b85      	ldr	r3, [pc, #532]	; (8003604 <HAL_RCC_OscConfig+0x4e4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d106      	bne.n	8003410 <HAL_RCC_OscConfig+0x2f0>
 8003402:	4b81      	ldr	r3, [pc, #516]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	4a80      	ldr	r2, [pc, #512]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6713      	str	r3, [r2, #112]	; 0x70
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x32a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x312>
 8003418:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a7a      	ldr	r2, [pc, #488]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a77      	ldr	r2, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x32a>
 8003432:	4b75      	ldr	r3, [pc, #468]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a74      	ldr	r2, [pc, #464]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	4b72      	ldr	r3, [pc, #456]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a71      	ldr	r2, [pc, #452]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003452:	f7fd fe8d 	bl	8001170 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fd fe89 	bl	8001170 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0c5      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b65      	ldr	r3, [pc, #404]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x33a>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fd fe77 	bl	8001170 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd fe73 	bl	8001170 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0af      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a55      	ldr	r2, [pc, #340]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 809b 	beq.w	80035fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034c4:	4b50      	ldr	r3, [pc, #320]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d05c      	beq.n	800358a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d141      	bne.n	800355c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fd fe47 	bl	8001170 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fd fe43 	bl	8001170 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e081      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f8:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	019b      	lsls	r3, r3, #6
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3b01      	subs	r3, #1
 800351e:	041b      	lsls	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	061b      	lsls	r3, r3, #24
 8003528:	4937      	ldr	r1, [pc, #220]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fd fe1c 	bl	8001170 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7fd fe18 	bl	8001170 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e056      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354e:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x41c>
 800355a:	e04e      	b.n	80035fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_OscConfig+0x4ec>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fd fe05 	bl	8001170 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fd fe01 	bl	8001170 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e03f      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357c:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x44a>
 8003588:	e037      	b.n	80035fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e032      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_RCC_OscConfig+0x4e8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d028      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d121      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d11a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d111      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40007000 	.word	0x40007000
 8003608:	40023800 	.word	0x40023800
 800360c:	42470060 	.word	0x42470060

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0cc      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b68      	ldr	r3, [pc, #416]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d90c      	bls.n	800364c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0b8      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d020      	beq.n	800369a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800366e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800367c:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a52      	ldr	r2, [pc, #328]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003688:	4b50      	ldr	r3, [pc, #320]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	494d      	ldr	r1, [pc, #308]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d044      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b47      	ldr	r3, [pc, #284]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d119      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d003      	beq.n	80036ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e06f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e067      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4934      	ldr	r1, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fd fd36 	bl	8001170 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fd fd32 	bl	8001170 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04f      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d20c      	bcs.n	8003758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e032      	b.n	80037be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4916      	ldr	r1, [pc, #88]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	490e      	ldr	r1, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003796:	f000 f821 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	490a      	ldr	r1, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	5ccb      	ldrb	r3, [r1, r3]
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fc96 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023c00 	.word	0x40023c00
 80037cc:	40023800 	.word	0x40023800
 80037d0:	08007de0 	.word	0x08007de0
 80037d4:	20000008 	.word	0x20000008
 80037d8:	2000000c 	.word	0x2000000c

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	2300      	movs	r3, #0
 80037ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037f4:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d00d      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x40>
 8003800:	2b08      	cmp	r3, #8
 8003802:	f200 80bd 	bhi.w	8003980 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x34>
 800380a:	2b04      	cmp	r3, #4
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x3a>
 800380e:	e0b7      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003812:	60bb      	str	r3, [r7, #8]
       break;
 8003814:	e0b7      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003816:	4b60      	ldr	r3, [pc, #384]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e0b4      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800381c:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003824:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04d      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003832:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	461a      	mov	r2, r3
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	ea02 0800 	and.w	r8, r2, r0
 800384a:	ea03 0901 	and.w	r9, r3, r1
 800384e:	4640      	mov	r0, r8
 8003850:	4649      	mov	r1, r9
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	014b      	lsls	r3, r1, #5
 800385c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003860:	0142      	lsls	r2, r0, #5
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	ebb0 0008 	subs.w	r0, r0, r8
 800386a:	eb61 0109 	sbc.w	r1, r1, r9
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800387c:	0182      	lsls	r2, r0, #6
 800387e:	1a12      	subs	r2, r2, r0
 8003880:	eb63 0301 	sbc.w	r3, r3, r1
 8003884:	f04f 0000 	mov.w	r0, #0
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	00d9      	lsls	r1, r3, #3
 800388e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003892:	00d0      	lsls	r0, r2, #3
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	eb12 0208 	adds.w	r2, r2, r8
 800389c:	eb43 0309 	adc.w	r3, r3, r9
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	0299      	lsls	r1, r3, #10
 80038aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038ae:	0290      	lsls	r0, r2, #10
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	f7fc fc82 	bl	80001c8 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4613      	mov	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e04a      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	ea02 0400 	and.w	r4, r2, r0
 80038e6:	ea03 0501 	and.w	r5, r3, r1
 80038ea:	4620      	mov	r0, r4
 80038ec:	4629      	mov	r1, r5
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038fc:	0142      	lsls	r2, r0, #5
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	1b00      	subs	r0, r0, r4
 8003904:	eb61 0105 	sbc.w	r1, r1, r5
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003916:	0182      	lsls	r2, r0, #6
 8003918:	1a12      	subs	r2, r2, r0
 800391a:	eb63 0301 	sbc.w	r3, r3, r1
 800391e:	f04f 0000 	mov.w	r0, #0
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800392c:	00d0      	lsls	r0, r2, #3
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	1912      	adds	r2, r2, r4
 8003934:	eb45 0303 	adc.w	r3, r5, r3
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0299      	lsls	r1, r3, #10
 8003942:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003946:	0290      	lsls	r0, r2, #10
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	461a      	mov	r2, r3
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	f7fc fc36 	bl	80001c8 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	3301      	adds	r3, #1
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	60bb      	str	r3, [r7, #8]
      break;
 800397e:	e002      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003982:	60bb      	str	r3, [r7, #8]
      break;
 8003984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003986:	68bb      	ldr	r3, [r7, #8]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	00f42400 	.word	0x00f42400

0800399c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	; (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008

080039b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b8:	f7ff fff0 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	; (80039d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08007df0 	.word	0x08007df0

080039dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039e0:	f7ff ffdc 	bl	800399c <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	0b5b      	lsrs	r3, r3, #13
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	08007df0 	.word	0x08007df0

08003a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07b      	b.n	8003b0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d009      	beq.n	8003a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
 8003a2e:	e005      	b.n	8003a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fa24 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	ea42 0103 	orr.w	r1, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f003 0104 	and.w	r1, r3, #4
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0210 	and.w	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e03f      	b.n	8003ba8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd f9f9 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9a6 	bl	8003eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d17c      	bne.n	8003cca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Transmit+0x2c>
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e075      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Transmit+0x3e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e06e      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2221      	movs	r2, #33	; 0x21
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c04:	f7fd fab4 	bl	8001170 <HAL_GetTick>
 8003c08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	88fa      	ldrh	r2, [r7, #6]
 8003c0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1e:	d108      	bne.n	8003c32 <HAL_UART_Transmit+0x82>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	e003      	b.n	8003c3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c42:	e02a      	b.n	8003c9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f8e2 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e036      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	3302      	adds	r3, #2
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	e007      	b.n	8003c8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1cf      	bne.n	8003c44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2200      	movs	r2, #0
 8003cac:	2140      	movs	r1, #64	; 0x40
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8b2 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	f040 808c 	bne.w	8003e0e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_UART_Receive+0x2e>
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e084      	b.n	8003e10 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_UART_Receive+0x40>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e07d      	b.n	8003e10 <HAL_UART_Receive+0x13c>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2222      	movs	r2, #34	; 0x22
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d30:	f7fd fa1e 	bl	8001170 <HAL_GetTick>
 8003d34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4a:	d108      	bne.n	8003d5e <HAL_UART_Receive+0x8a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e003      	b.n	8003d66 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d6e:	e043      	b.n	8003df8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2120      	movs	r1, #32
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f84c 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e042      	b.n	8003e10 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10c      	bne.n	8003daa <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	3302      	adds	r3, #2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	e01f      	b.n	8003dea <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	d007      	beq.n	8003dc4 <HAL_UART_Receive+0xf0>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_UART_Receive+0xfe>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e008      	b.n	8003de4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1b6      	bne.n	8003d70 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e28:	e02c      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e38:	f7fd f99a 	bl	8001170 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d21d      	bcs.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e00f      	b.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d0c3      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	b09f      	sub	sp, #124	; 0x7c
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	68d9      	ldr	r1, [r3, #12]
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	ea40 0301 	orr.w	r3, r0, r1
 8003ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	431a      	orrs	r2, r3
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ef0:	f021 010c 	bic.w	r1, r1, #12
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003efa:	430b      	orrs	r3, r1
 8003efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	6999      	ldr	r1, [r3, #24]
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	ea40 0301 	orr.w	r3, r0, r1
 8003f14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4bc5      	ldr	r3, [pc, #788]	; (8004230 <UART_SetConfig+0x384>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d004      	beq.n	8003f2a <UART_SetConfig+0x7e>
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4bc3      	ldr	r3, [pc, #780]	; (8004234 <UART_SetConfig+0x388>)
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d103      	bne.n	8003f32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f2a:	f7ff fd57 	bl	80039dc <HAL_RCC_GetPCLK2Freq>
 8003f2e:	6778      	str	r0, [r7, #116]	; 0x74
 8003f30:	e002      	b.n	8003f38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7ff fd3f 	bl	80039b4 <HAL_RCC_GetPCLK1Freq>
 8003f36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f40:	f040 80b6 	bne.w	80040b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	461c      	mov	r4, r3
 8003f48:	f04f 0500 	mov.w	r5, #0
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	462b      	mov	r3, r5
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	6439      	str	r1, [r7, #64]	; 0x40
 8003f54:	415b      	adcs	r3, r3
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
 8003f58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f5c:	1912      	adds	r2, r2, r4
 8003f5e:	eb45 0303 	adc.w	r3, r5, r3
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	00d9      	lsls	r1, r3, #3
 8003f6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f70:	00d0      	lsls	r0, r2, #3
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	1911      	adds	r1, r2, r4
 8003f78:	6639      	str	r1, [r7, #96]	; 0x60
 8003f7a:	416b      	adcs	r3, r5
 8003f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	1891      	adds	r1, r2, r2
 8003f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f8c:	415b      	adcs	r3, r3
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f98:	f7fc f916 	bl	80001c8 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4ba5      	ldr	r3, [pc, #660]	; (8004238 <UART_SetConfig+0x38c>)
 8003fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	011e      	lsls	r6, r3, #4
 8003faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fac:	461c      	mov	r4, r3
 8003fae:	f04f 0500 	mov.w	r5, #0
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	1891      	adds	r1, r2, r2
 8003fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003fc2:	1912      	adds	r2, r2, r4
 8003fc4:	eb45 0303 	adc.w	r3, r5, r3
 8003fc8:	f04f 0000 	mov.w	r0, #0
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	00d9      	lsls	r1, r3, #3
 8003fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fd6:	00d0      	lsls	r0, r2, #3
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	1911      	adds	r1, r2, r4
 8003fde:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fe0:	416b      	adcs	r3, r5
 8003fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	1891      	adds	r1, r2, r2
 8003ff0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ffa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ffe:	f7fc f8e3 	bl	80001c8 <__aeabi_uldivmod>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4b8c      	ldr	r3, [pc, #560]	; (8004238 <UART_SetConfig+0x38c>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a87      	ldr	r2, [pc, #540]	; (8004238 <UART_SetConfig+0x38c>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004028:	441e      	add	r6, r3
 800402a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402c:	4618      	mov	r0, r3
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	1894      	adds	r4, r2, r2
 8004038:	623c      	str	r4, [r7, #32]
 800403a:	415b      	adcs	r3, r3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
 800403e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004042:	1812      	adds	r2, r2, r0
 8004044:	eb41 0303 	adc.w	r3, r1, r3
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	f04f 0500 	mov.w	r5, #0
 8004050:	00dd      	lsls	r5, r3, #3
 8004052:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004056:	00d4      	lsls	r4, r2, #3
 8004058:	4622      	mov	r2, r4
 800405a:	462b      	mov	r3, r5
 800405c:	1814      	adds	r4, r2, r0
 800405e:	653c      	str	r4, [r7, #80]	; 0x50
 8004060:	414b      	adcs	r3, r1
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	1891      	adds	r1, r2, r2
 8004070:	61b9      	str	r1, [r7, #24]
 8004072:	415b      	adcs	r3, r3
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800407a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800407e:	f7fc f8a3 	bl	80001c8 <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <UART_SetConfig+0x38c>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a67      	ldr	r2, [pc, #412]	; (8004238 <UART_SetConfig+0x38c>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	f003 0207 	and.w	r2, r3, #7
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4432      	add	r2, r6
 80040ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040ae:	e0b9      	b.n	8004224 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b2:	461c      	mov	r4, r3
 80040b4:	f04f 0500 	mov.w	r5, #0
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	6139      	str	r1, [r7, #16]
 80040c0:	415b      	adcs	r3, r3
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c8:	1912      	adds	r2, r2, r4
 80040ca:	eb45 0303 	adc.w	r3, r5, r3
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	00d9      	lsls	r1, r3, #3
 80040d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040dc:	00d0      	lsls	r0, r2, #3
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	eb12 0804 	adds.w	r8, r2, r4
 80040e6:	eb43 0905 	adc.w	r9, r3, r5
 80040ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	008b      	lsls	r3, r1, #2
 80040fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004102:	0082      	lsls	r2, r0, #2
 8004104:	4640      	mov	r0, r8
 8004106:	4649      	mov	r1, r9
 8004108:	f7fc f85e 	bl	80001c8 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b49      	ldr	r3, [pc, #292]	; (8004238 <UART_SetConfig+0x38c>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011e      	lsls	r6, r3, #4
 800411a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411c:	4618      	mov	r0, r3
 800411e:	f04f 0100 	mov.w	r1, #0
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	1894      	adds	r4, r2, r2
 8004128:	60bc      	str	r4, [r7, #8]
 800412a:	415b      	adcs	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004132:	1812      	adds	r2, r2, r0
 8004134:	eb41 0303 	adc.w	r3, r1, r3
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	f04f 0500 	mov.w	r5, #0
 8004140:	00dd      	lsls	r5, r3, #3
 8004142:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004146:	00d4      	lsls	r4, r2, #3
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	1814      	adds	r4, r2, r0
 800414e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004150:	414b      	adcs	r3, r1
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4618      	mov	r0, r3
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800416c:	0082      	lsls	r2, r0, #2
 800416e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004172:	f7fc f829 	bl	80001c8 <__aeabi_uldivmod>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <UART_SetConfig+0x38c>)
 800417c:	fba3 1302 	umull	r1, r3, r3, r2
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	2164      	movs	r1, #100	; 0x64
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	3332      	adds	r3, #50	; 0x32
 800418e:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <UART_SetConfig+0x38c>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419a:	441e      	add	r6, r3
 800419c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419e:	4618      	mov	r0, r3
 80041a0:	f04f 0100 	mov.w	r1, #0
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	1894      	adds	r4, r2, r2
 80041aa:	603c      	str	r4, [r7, #0]
 80041ac:	415b      	adcs	r3, r3
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b4:	1812      	adds	r2, r2, r0
 80041b6:	eb41 0303 	adc.w	r3, r1, r3
 80041ba:	f04f 0400 	mov.w	r4, #0
 80041be:	f04f 0500 	mov.w	r5, #0
 80041c2:	00dd      	lsls	r5, r3, #3
 80041c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c8:	00d4      	lsls	r4, r2, #3
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	eb12 0a00 	adds.w	sl, r2, r0
 80041d2:	eb43 0b01 	adc.w	fp, r3, r1
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	f04f 0100 	mov.w	r1, #0
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	008b      	lsls	r3, r1, #2
 80041ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ee:	0082      	lsls	r2, r0, #2
 80041f0:	4650      	mov	r0, sl
 80041f2:	4659      	mov	r1, fp
 80041f4:	f7fb ffe8 	bl	80001c8 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <UART_SetConfig+0x38c>)
 80041fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2164      	movs	r1, #100	; 0x64
 8004206:	fb01 f303 	mul.w	r3, r1, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	3332      	adds	r3, #50	; 0x32
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <UART_SetConfig+0x38c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4432      	add	r2, r6
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	377c      	adds	r7, #124	; 0x7c
 8004228:	46bd      	mov	sp, r7
 800422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422e:	bf00      	nop
 8004230:	40011000 	.word	0x40011000
 8004234:	40011400 	.word	0x40011400
 8004238:	51eb851f 	.word	0x51eb851f

0800423c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800423c:	b084      	sub	sp, #16
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	f107 001c 	add.w	r0, r7, #28
 800424a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	2b01      	cmp	r3, #1
 8004252:	d122      	bne.n	800429a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800427c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f001 fac6 	bl	8005820 <USB_CoreReset>
 8004294:	4603      	mov	r3, r0
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e01a      	b.n	80042d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f001 faba 	bl	8005820 <USB_CoreReset>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
 80042c2:	e005      	b.n	80042d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10b      	bne.n	80042ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f043 0206 	orr.w	r2, r3, #6
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fa:	b004      	add	sp, #16
 80042fc:	4770      	bx	lr
	...

08004300 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d165      	bne.n	80043e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a41      	ldr	r2, [pc, #260]	; (800441c <USB_SetTurnaroundTime+0x11c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d906      	bls.n	800432a <USB_SetTurnaroundTime+0x2a>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a40      	ldr	r2, [pc, #256]	; (8004420 <USB_SetTurnaroundTime+0x120>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d202      	bcs.n	800432a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004324:	230f      	movs	r3, #15
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e062      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a3c      	ldr	r2, [pc, #240]	; (8004420 <USB_SetTurnaroundTime+0x120>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d306      	bcc.n	8004340 <USB_SetTurnaroundTime+0x40>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a3b      	ldr	r2, [pc, #236]	; (8004424 <USB_SetTurnaroundTime+0x124>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d202      	bcs.n	8004340 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800433a:	230e      	movs	r3, #14
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e057      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a38      	ldr	r2, [pc, #224]	; (8004424 <USB_SetTurnaroundTime+0x124>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d306      	bcc.n	8004356 <USB_SetTurnaroundTime+0x56>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a37      	ldr	r2, [pc, #220]	; (8004428 <USB_SetTurnaroundTime+0x128>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d202      	bcs.n	8004356 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004350:	230d      	movs	r3, #13
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e04c      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a33      	ldr	r2, [pc, #204]	; (8004428 <USB_SetTurnaroundTime+0x128>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d306      	bcc.n	800436c <USB_SetTurnaroundTime+0x6c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <USB_SetTurnaroundTime+0x12c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d802      	bhi.n	800436c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004366:	230c      	movs	r3, #12
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e041      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <USB_SetTurnaroundTime+0x12c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d906      	bls.n	8004382 <USB_SetTurnaroundTime+0x82>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <USB_SetTurnaroundTime+0x130>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d802      	bhi.n	8004382 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800437c:	230b      	movs	r3, #11
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e036      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <USB_SetTurnaroundTime+0x130>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d906      	bls.n	8004398 <USB_SetTurnaroundTime+0x98>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4a29      	ldr	r2, [pc, #164]	; (8004434 <USB_SetTurnaroundTime+0x134>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004392:	230a      	movs	r3, #10
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e02b      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <USB_SetTurnaroundTime+0x134>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d906      	bls.n	80043ae <USB_SetTurnaroundTime+0xae>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4a25      	ldr	r2, [pc, #148]	; (8004438 <USB_SetTurnaroundTime+0x138>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d202      	bcs.n	80043ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043a8:	2309      	movs	r3, #9
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e020      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <USB_SetTurnaroundTime+0x138>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d306      	bcc.n	80043c4 <USB_SetTurnaroundTime+0xc4>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4a20      	ldr	r2, [pc, #128]	; (800443c <USB_SetTurnaroundTime+0x13c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d802      	bhi.n	80043c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043be:	2308      	movs	r3, #8
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e015      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a1d      	ldr	r2, [pc, #116]	; (800443c <USB_SetTurnaroundTime+0x13c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d906      	bls.n	80043da <USB_SetTurnaroundTime+0xda>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <USB_SetTurnaroundTime+0x140>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d202      	bcs.n	80043da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043d4:	2307      	movs	r3, #7
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e00a      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043da:	2306      	movs	r3, #6
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e007      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043e6:	2309      	movs	r3, #9
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e001      	b.n	80043f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043ec:	2309      	movs	r3, #9
 80043ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	00d8acbf 	.word	0x00d8acbf
 8004420:	00e4e1c0 	.word	0x00e4e1c0
 8004424:	00f42400 	.word	0x00f42400
 8004428:	01067380 	.word	0x01067380
 800442c:	011a499f 	.word	0x011a499f
 8004430:	01312cff 	.word	0x01312cff
 8004434:	014ca43f 	.word	0x014ca43f
 8004438:	016e3600 	.word	0x016e3600
 800443c:	01a6ab1f 	.word	0x01a6ab1f
 8004440:	01e84800 	.word	0x01e84800

08004444 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	e00b      	b.n	80044cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e001      	b.n	80044cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e003      	b.n	80044d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044cc:	2032      	movs	r0, #50	; 0x32
 80044ce:	f7fc fe5b 	bl	8001188 <HAL_Delay>

  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044dc:	b084      	sub	sp, #16
 80044de:	b580      	push	{r7, lr}
 80044e0:	b086      	sub	sp, #24
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e009      	b.n	8004510 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	3340      	adds	r3, #64	; 0x40
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	2200      	movs	r2, #0
 8004508:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0e      	cmp	r3, #14
 8004514:	d9f2      	bls.n	80044fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11c      	bne.n	8004556 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452a:	f043 0302 	orr.w	r3, r3, #2
 800452e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
 8004554:	e00b      	b.n	800456e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004580:	4619      	mov	r1, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004588:	461a      	mov	r2, r3
 800458a:	680b      	ldr	r3, [r1, #0]
 800458c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10c      	bne.n	80045ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d104      	bne.n	80045a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800459a:	2100      	movs	r1, #0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f949 	bl	8004834 <USB_SetDevSpeed>
 80045a2:	e008      	b.n	80045b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045a4:	2101      	movs	r1, #1
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f944 	bl	8004834 <USB_SetDevSpeed>
 80045ac:	e003      	b.n	80045b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045ae:	2103      	movs	r1, #3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f93f 	bl	8004834 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045b6:	2110      	movs	r1, #16
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f8f3 	bl	80047a4 <USB_FlushTxFifo>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f911 	bl	80047f0 <USB_FlushRxFifo>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	461a      	mov	r2, r3
 80045e0:	2300      	movs	r3, #0
 80045e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	461a      	mov	r2, r3
 80045f8:	2300      	movs	r3, #0
 80045fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	e043      	b.n	800468a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004618:	d118      	bne.n	800464c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	461a      	mov	r2, r3
 800462e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	e013      	b.n	800465e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	461a      	mov	r2, r3
 8004644:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e008      	b.n	800465e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	461a      	mov	r2, r3
 800466c:	2300      	movs	r3, #0
 800466e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	461a      	mov	r2, r3
 800467e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004682:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	3301      	adds	r3, #1
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	429a      	cmp	r2, r3
 8004690:	d3b7      	bcc.n	8004602 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e043      	b.n	8004720 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ae:	d118      	bne.n	80046e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e013      	b.n	80046f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	461a      	mov	r2, r3
 80046da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	e008      	b.n	80046f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	2300      	movs	r3, #0
 8004704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004718:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3301      	adds	r3, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3b7      	bcc.n	8004698 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004748:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <USB_DevInit+0x2c4>)
 8004762:	4313      	orrs	r3, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f043 0208 	orr.w	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800479c:	b004      	add	sp, #16
 800479e:	4770      	bx	lr
 80047a0:	803c3800 	.word	0x803c3800

080047a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <USB_FlushTxFifo+0x48>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e006      	b.n	80047de <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d0f0      	beq.n	80047be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	00030d40 	.word	0x00030d40

080047f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2210      	movs	r2, #16
 8004800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3301      	adds	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <USB_FlushRxFifo+0x40>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e006      	b.n	8004822 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b10      	cmp	r3, #16
 800481e:	d0f0      	beq.n	8004802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	00030d40 	.word	0x00030d40

08004834 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
 800488a:	e00a      	b.n	80048a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d002      	beq.n	8004898 <USB_GetDevSpeed+0x32>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b06      	cmp	r3, #6
 8004896:	d102      	bne.n	800489e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004898:	2302      	movs	r3, #2
 800489a:	75fb      	strb	r3, [r7, #23]
 800489c:	e001      	b.n	80048a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800489e:	230f      	movs	r3, #15
 80048a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d13a      	bne.n	8004942 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	68f9      	ldr	r1, [r7, #12]
 80048e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d155      	bne.n	80049b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004920:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	059b      	lsls	r3, r3, #22
 8004926:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004928:	4313      	orrs	r3, r2
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800493a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e036      	b.n	80049b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004960:	4313      	orrs	r3, r2
 8004962:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11a      	bne.n	80049b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	78db      	ldrb	r3, [r3, #3]
 8004994:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004996:	430b      	orrs	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d161      	bne.n	8004aa0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049f2:	d11f      	bne.n	8004a34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	2101      	movs	r1, #1
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a54:	4013      	ands	r3, r2
 8004a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	0159      	lsls	r1, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	440b      	add	r3, r1
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	4619      	mov	r1, r3
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <USB_DeactivateEndpoint+0x1b0>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
 8004a9e:	e060      	b.n	8004b62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab6:	d11f      	bne.n	8004af8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ad6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004af6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	43db      	mvns	r3, r3
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b18:	4013      	ands	r3, r2
 8004b1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	43db      	mvns	r3, r3
 8004b36:	68f9      	ldr	r1, [r7, #12]
 8004b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	0159      	lsls	r1, r3, #5
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <USB_DeactivateEndpoint+0x1b4>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	ec337800 	.word	0xec337800
 8004b74:	eff37800 	.word	0xeff37800

08004b78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08a      	sub	sp, #40	; 0x28
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	785b      	ldrb	r3, [r3, #1]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f040 815c 	bne.w	8004e52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d132      	bne.n	8004c08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	0cdb      	lsrs	r3, r3, #19
 8004c02:	04db      	lsls	r3, r3, #19
 8004c04:	6113      	str	r3, [r2, #16]
 8004c06:	e074      	b.n	8004cf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c22:	0cdb      	lsrs	r3, r3, #19
 8004c24:	04db      	lsls	r3, r3, #19
 8004c26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6959      	ldr	r1, [r3, #20]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	440b      	add	r3, r1
 8004c64:	1e59      	subs	r1, r3, #1
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6e:	04d9      	lsls	r1, r3, #19
 8004c70:	4b9d      	ldr	r3, [pc, #628]	; (8004ee8 <USB_EPStartXfer+0x370>)
 8004c72:	400b      	ands	r3, r1
 8004c74:	69b9      	ldr	r1, [r7, #24]
 8004c76:	0148      	lsls	r0, r1, #5
 8004c78:	69f9      	ldr	r1, [r7, #28]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c80:	4313      	orrs	r3, r2
 8004c82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9a:	69b9      	ldr	r1, [r7, #24]
 8004c9c:	0148      	lsls	r0, r1, #5
 8004c9e:	69f9      	ldr	r1, [r7, #28]
 8004ca0:	4401      	add	r1, r0
 8004ca2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	78db      	ldrb	r3, [r3, #3]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d11f      	bne.n	8004cf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ccc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d14b      	bne.n	8004d90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d128      	bne.n	8004d6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d110      	bne.n	8004d4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e00f      	b.n	8004d6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e12f      	b.n	8004ff0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	78db      	ldrb	r3, [r3, #3]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d015      	beq.n	8004de4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8117 	beq.w	8004ff0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	69f9      	ldr	r1, [r7, #28]
 8004dda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dde:	4313      	orrs	r3, r2
 8004de0:	634b      	str	r3, [r1, #52]	; 0x34
 8004de2:	e105      	b.n	8004ff0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d110      	bne.n	8004e16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e00f      	b.n	8004e36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68d9      	ldr	r1, [r3, #12]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	b298      	uxth	r0, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4603      	mov	r3, r0
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fa2b 	bl	80052a6 <USB_WritePacket>
 8004e50:	e0ce      	b.n	8004ff0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	04db      	lsls	r3, r3, #19
 8004e70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d126      	bne.n	8004eec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	0148      	lsls	r0, r1, #5
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	4401      	add	r1, r0
 8004ebc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ede:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee2:	6113      	str	r3, [r2, #16]
 8004ee4:	e036      	b.n	8004f54 <USB_EPStartXfer+0x3dc>
 8004ee6:	bf00      	nop
 8004ee8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	8afb      	ldrh	r3, [r7, #22]
 8004f12:	04d9      	lsls	r1, r3, #19
 8004f14:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <USB_EPStartXfer+0x484>)
 8004f16:	400b      	ands	r3, r1
 8004f18:	69b9      	ldr	r1, [r7, #24]
 8004f1a:	0148      	lsls	r0, r1, #5
 8004f1c:	69f9      	ldr	r1, [r7, #28]
 8004f1e:	4401      	add	r1, r0
 8004f20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f24:	4313      	orrs	r3, r2
 8004f26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	8af9      	ldrh	r1, [r7, #22]
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	69b9      	ldr	r1, [r7, #24]
 8004f46:	0148      	lsls	r0, r1, #5
 8004f48:	69f9      	ldr	r1, [r7, #28]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f50:	4313      	orrs	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68d9      	ldr	r1, [r3, #12]
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	460a      	mov	r2, r1
 8004f74:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	78db      	ldrb	r3, [r3, #3]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d128      	bne.n	8004fd0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d110      	bne.n	8004fb0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e00f      	b.n	8004fd0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	1ff80000 	.word	0x1ff80000

08005000 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	4613      	mov	r3, r2
 800500c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	f040 80cd 	bne.w	80051bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d132      	bne.n	8005090 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	0151      	lsls	r1, r2, #5
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	440a      	add	r2, r1
 8005040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005044:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005048:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800504c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800506c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	0cdb      	lsrs	r3, r3, #19
 800508a:	04db      	lsls	r3, r3, #19
 800508c:	6113      	str	r3, [r2, #16]
 800508e:	e04e      	b.n	800512e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	0cdb      	lsrs	r3, r3, #19
 80050ac:	04db      	lsls	r3, r3, #19
 80050ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d903      	bls.n	80050e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005106:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	0148      	lsls	r0, r1, #5
 8005122:	6979      	ldr	r1, [r7, #20]
 8005124:	4401      	add	r1, r0
 8005126:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800512a:	4313      	orrs	r3, r2
 800512c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d11e      	bne.n	8005172 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e092      	b.n	8005298 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005190:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d07e      	beq.n	8005298 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	2101      	movs	r1, #1
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b6:	4313      	orrs	r3, r2
 80051b8:	634b      	str	r3, [r1, #52]	; 0x34
 80051ba:	e06d      	b.n	8005298 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d6:	0cdb      	lsrs	r3, r3, #19
 80051d8:	04db      	lsls	r3, r3, #19
 80051da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005246:	6939      	ldr	r1, [r7, #16]
 8005248:	0148      	lsls	r0, r1, #5
 800524a:	6979      	ldr	r1, [r7, #20]
 800524c:	4401      	add	r1, r0
 800524e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005252:	4313      	orrs	r3, r2
 8005254:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d10d      	bne.n	8005278 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d009      	beq.n	8005278 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	460a      	mov	r2, r1
 8005276:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	440a      	add	r2, r1
 800528e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b089      	sub	sp, #36	; 0x24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	4611      	mov	r1, r2
 80052b2:	461a      	mov	r2, r3
 80052b4:	460b      	mov	r3, r1
 80052b6:	71fb      	strb	r3, [r7, #7]
 80052b8:	4613      	mov	r3, r2
 80052ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11a      	bne.n	8005302 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052cc:	88bb      	ldrh	r3, [r7, #4]
 80052ce:	3303      	adds	r3, #3
 80052d0:	089b      	lsrs	r3, r3, #2
 80052d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	e00f      	b.n	80052fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	031a      	lsls	r2, r3, #12
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	461a      	mov	r2, r3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3304      	adds	r3, #4
 80052f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d3eb      	bcc.n	80052da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	4613      	mov	r3, r2
 800531c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	3303      	adds	r3, #3
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e00b      	b.n	800534c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	3304      	adds	r3, #4
 8005344:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	3301      	adds	r3, #1
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d3ef      	bcc.n	8005334 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005354:	69fb      	ldr	r3, [r7, #28]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3724      	adds	r7, #36	; 0x24
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d12c      	bne.n	80053d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	db12      	blt.n	80053b6 <USB_EPSetStall+0x54>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00f      	beq.n	80053b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e02b      	b.n	8005430 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db12      	blt.n	8005410 <USB_EPSetStall+0xae>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00f      	beq.n	8005410 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800540e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800542e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d128      	bne.n	80054ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005478:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d003      	beq.n	800548a <USB_EPClearStall+0x4c>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	78db      	ldrb	r3, [r3, #3]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d138      	bne.n	80054fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e027      	b.n	80054fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	78db      	ldrb	r3, [r3, #3]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d003      	beq.n	80054dc <USB_EPClearStall+0x9e>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	78db      	ldrb	r3, [r3, #3]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d10f      	bne.n	80054fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800550a:	b480      	push	{r7}
 800550c:	b085      	sub	sp, #20
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	460b      	mov	r3, r1
 8005514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005528:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800552c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005570:	f023 0303 	bic.w	r3, r3, #3
 8005574:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005584:	f023 0302 	bic.w	r3, r3, #2
 8005588:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c6:	f043 0302 	orr.w	r3, r3, #2
 80055ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f2:	68fb      	ldr	r3, [r7, #12]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	0c1b      	lsrs	r3, r3, #16
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	4013      	ands	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	b29b      	uxth	r3, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005696:	68bb      	ldr	r3, [r7, #8]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	01db      	lsls	r3, r3, #7
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056de:	78fb      	ldrb	r3, [r7, #3]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4013      	ands	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056f2:	68bb      	ldr	r3, [r7, #8]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005736:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	333c      	adds	r3, #60	; 0x3c
 800577a:	3304      	adds	r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4a26      	ldr	r2, [pc, #152]	; (800581c <USB_EP0_OutStart+0xb8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d90a      	bls.n	800579e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005798:	d101      	bne.n	800579e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e037      	b.n	800580e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	f043 0318 	orr.w	r3, r3, #24
 80057d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10f      	bne.n	800580c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800580a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	4f54300a 	.word	0x4f54300a

08005820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <USB_CoreReset+0x64>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e01b      	b.n	8005876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	daf2      	bge.n	800582c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a09      	ldr	r2, [pc, #36]	; (8005884 <USB_CoreReset+0x64>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e006      	b.n	8005876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b01      	cmp	r3, #1
 8005872:	d0f0      	beq.n	8005856 <USB_CoreReset+0x36>

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	00030d40 	.word	0x00030d40

08005888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005894:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005898:	f002 f95c 	bl	8007b54 <USBD_static_malloc>
 800589c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80058ac:	2302      	movs	r3, #2
 80058ae:	e066      	b.n	800597e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	7c1b      	ldrb	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d119      	bne.n	80058f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c4:	2202      	movs	r2, #2
 80058c6:	2181      	movs	r1, #129	; 0x81
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f002 f820 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d8:	2202      	movs	r2, #2
 80058da:	2101      	movs	r1, #1
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 f816 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2210      	movs	r2, #16
 80058ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80058f2:	e016      	b.n	8005922 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	2202      	movs	r2, #2
 80058f8:	2181      	movs	r1, #129	; 0x81
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f002 f807 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	2202      	movs	r2, #2
 800590a:	2101      	movs	r1, #1
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fffe 	bl	800790e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2210      	movs	r2, #16
 800591e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005922:	2308      	movs	r3, #8
 8005924:	2203      	movs	r2, #3
 8005926:	2182      	movs	r1, #130	; 0x82
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 fff0 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7c1b      	ldrb	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800595e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005962:	2101      	movs	r1, #1
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 f8c1 	bl	8007aec <USBD_LL_PrepareReceive>
 800596a:	e007      	b.n	800597c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	2101      	movs	r1, #1
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f002 f8b8 	bl	8007aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005992:	2181      	movs	r1, #129	; 0x81
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 ffe0 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80059a0:	2101      	movs	r1, #1
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 ffd9 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80059b0:	2182      	movs	r1, #130	; 0x82
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 ffd1 	bl	800795a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e2:	4618      	mov	r0, r3
 80059e4:	f002 f8c4 	bl	8007b70 <USBD_static_free>
    pdev->pClassData = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0af      	b.n	8005b84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d03f      	beq.n	8005ab0 <USBD_CDC_Setup+0xb4>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	f040 809f 	bne.w	8005b74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d02e      	beq.n	8005a9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	da16      	bge.n	8005a76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005a54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	88d2      	ldrh	r2, [r2, #6]
 8005a5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	88db      	ldrh	r3, [r3, #6]
 8005a60:	2b07      	cmp	r3, #7
 8005a62:	bf28      	it	cs
 8005a64:	2307      	movcs	r3, #7
 8005a66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	89fa      	ldrh	r2, [r7, #14]
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 fb19 	bl	80070a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005a74:	e085      	b.n	8005b82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785a      	ldrb	r2, [r3, #1]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	88db      	ldrh	r3, [r3, #6]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a8c:	6939      	ldr	r1, [r7, #16]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	461a      	mov	r2, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 fb32 	bl	80070fe <USBD_CtlPrepareRx>
      break;
 8005a9a:	e072      	b.n	8005b82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	7850      	ldrb	r0, [r2, #1]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	4798      	blx	r3
      break;
 8005aae:	e068      	b.n	8005b82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b0b      	cmp	r3, #11
 8005ab6:	d852      	bhi.n	8005b5e <USBD_CDC_Setup+0x162>
 8005ab8:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <USBD_CDC_Setup+0xc4>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005b6d 	.word	0x08005b6d
 8005ac8:	08005b5f 	.word	0x08005b5f
 8005acc:	08005b5f 	.word	0x08005b5f
 8005ad0:	08005b5f 	.word	0x08005b5f
 8005ad4:	08005b5f 	.word	0x08005b5f
 8005ad8:	08005b5f 	.word	0x08005b5f
 8005adc:	08005b5f 	.word	0x08005b5f
 8005ae0:	08005b5f 	.word	0x08005b5f
 8005ae4:	08005b5f 	.word	0x08005b5f
 8005ae8:	08005b1b 	.word	0x08005b1b
 8005aec:	08005b45 	.word	0x08005b45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d107      	bne.n	8005b0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005afc:	f107 030a 	add.w	r3, r7, #10
 8005b00:	2202      	movs	r2, #2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 face 	bl	80070a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b0a:	e032      	b.n	8005b72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fa58 	bl	8006fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	75fb      	strb	r3, [r7, #23]
          break;
 8005b18:	e02b      	b.n	8005b72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d107      	bne.n	8005b36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b26:	f107 030d 	add.w	r3, r7, #13
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fab9 	bl	80070a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b34:	e01d      	b.n	8005b72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fa43 	bl	8006fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	75fb      	strb	r3, [r7, #23]
          break;
 8005b42:	e016      	b.n	8005b72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d00f      	beq.n	8005b70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fa36 	bl	8006fc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b5c:	e008      	b.n	8005b70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fa2f 	bl	8006fc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6a:	e002      	b.n	8005b72 <USBD_CDC_Setup+0x176>
          break;
 8005b6c:	bf00      	nop
 8005b6e:	e008      	b.n	8005b82 <USBD_CDC_Setup+0x186>
          break;
 8005b70:	bf00      	nop
      }
      break;
 8005b72:	e006      	b.n	8005b82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fa24 	bl	8006fc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e04f      	b.n	8005c4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bb6:	78fa      	ldrb	r2, [r7, #3]
 8005bb8:	6879      	ldr	r1, [r7, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3318      	adds	r3, #24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d029      	beq.n	8005c20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3318      	adds	r3, #24
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	78f9      	ldrb	r1, [r7, #3]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	460b      	mov	r3, r1
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	1a5b      	subs	r3, r3, r1
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4403      	add	r3, r0
 8005bec:	3344      	adds	r3, #68	; 0x44
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005bf4:	fb03 f301 	mul.w	r3, r3, r1
 8005bf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d110      	bne.n	8005c20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c12:	78f9      	ldrb	r1, [r7, #3]
 8005c14:	2300      	movs	r3, #0
 8005c16:	2200      	movs	r2, #0
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 ff46 	bl	8007aaa <USBD_LL_Transmit>
 8005c1e:	e015      	b.n	8005c4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e015      	b.n	8005ca4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 ff56 	bl	8007b2e <USBD_LL_GetRxDataSize>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e01b      	b.n	8005cfe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <USBD_CDC_EP0_RxReady+0x50>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cd6:	2bff      	cmp	r3, #255	; 0xff
 8005cd8:	d010      	beq.n	8005cfc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005ce8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	22ff      	movs	r2, #255	; 0xff
 8005cf8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2243      	movs	r2, #67	; 0x43
 8005d14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d16:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	2000009c 	.word	0x2000009c

08005d28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2243      	movs	r2, #67	; 0x43
 8005d34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20000058 	.word	0x20000058

08005d48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2243      	movs	r2, #67	; 0x43
 8005d54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005d56:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	200000e0 	.word	0x200000e0

08005d68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	220a      	movs	r2, #10
 8005d74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d76:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	20000014 	.word	0x20000014

08005d88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e004      	b.n	8005da6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dc4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e008      	b.n	8005de2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e004      	b.n	8005e14 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e01a      	b.n	8005e78 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d114      	bne.n	8005e76 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e6a:	2181      	movs	r1, #129	; 0x81
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f001 fe1c 	bl	8007aaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e016      	b.n	8005ecc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	7c1b      	ldrb	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fe1a 	bl	8007aec <USBD_LL_PrepareReceive>
 8005eb8:	e007      	b.n	8005eca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 fe11 	bl	8007aec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e01f      	b.n	8005f2c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	79fa      	ldrb	r2, [r7, #7]
 8005f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f001 fc8d 	bl	8007840 <USBD_LL_Init>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e016      	b.n	8005f7a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	f107 020e 	add.w	r2, r7, #14
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	4602      	mov	r2, r0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 fca4 	bl	80078d8 <USBD_LL_Start>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d009      	beq.n	8005fde <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4798      	blx	r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	78fa      	ldrb	r2, [r7, #3]
 8006008:	4611      	mov	r1, r2
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
  }

  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 ff90 	bl	8006f50 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	2b02      	cmp	r3, #2
 8006052:	d01a      	beq.n	800608a <USBD_LL_SetupStage+0x72>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d822      	bhi.n	800609e <USBD_LL_SetupStage+0x86>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <USBD_LL_SetupStage+0x4a>
 800605c:	2b01      	cmp	r3, #1
 800605e:	d00a      	beq.n	8006076 <USBD_LL_SetupStage+0x5e>
 8006060:	e01d      	b.n	800609e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa62 	bl	8006534 <USBD_StdDevReq>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e020      	b.n	80060b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fac6 	bl	8006610 <USBD_StdItfReq>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e016      	b.n	80060b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fb05 	bl	80066a2 <USBD_StdEPReq>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
      break;
 800609c:	e00c      	b.n	80060b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fc73 	bl	8007998 <USBD_LL_StallEP>
 80060b2:	4603      	mov	r3, r0
 80060b4:	73fb      	strb	r3, [r7, #15]
      break;
 80060b6:	bf00      	nop
  }

  return ret;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	460b      	mov	r3, r1
 80060cc:	607a      	str	r2, [r7, #4]
 80060ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060d0:	7afb      	ldrb	r3, [r7, #11]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d138      	bne.n	8006148 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d14a      	bne.n	800617e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d913      	bls.n	800611c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	1ad2      	subs	r2, r2, r3
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4293      	cmp	r3, r2
 800610c:	bf28      	it	cs
 800610e:	4613      	movcs	r3, r2
 8006110:	461a      	mov	r2, r3
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f001 f80f 	bl	8007138 <USBD_CtlContinueRx>
 800611a:	e030      	b.n	800617e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b03      	cmp	r3, #3
 8006126:	d10b      	bne.n	8006140 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 f80a 	bl	800715a <USBD_CtlSendStatus>
 8006146:	e01a      	b.n	800617e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b03      	cmp	r3, #3
 8006152:	d114      	bne.n	800617e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00e      	beq.n	800617e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	7afa      	ldrb	r2, [r7, #11]
 800616a:	4611      	mov	r1, r2
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	4798      	blx	r3
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	e000      	b.n	8006180 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	460b      	mov	r3, r1
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d16b      	bne.n	8006274 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3314      	adds	r3, #20
 80061a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d156      	bne.n	800625a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d914      	bls.n	80061e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	1ad2      	subs	r2, r2, r3
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	461a      	mov	r2, r3
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 ff84 	bl	80070dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d4:	2300      	movs	r3, #0
 80061d6:	2200      	movs	r2, #0
 80061d8:	2100      	movs	r1, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fc86 	bl	8007aec <USBD_LL_PrepareReceive>
 80061e0:	e03b      	b.n	800625a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d11c      	bne.n	8006228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d316      	bcc.n	8006228 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006204:	429a      	cmp	r2, r3
 8006206:	d20f      	bcs.n	8006228 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006208:	2200      	movs	r2, #0
 800620a:	2100      	movs	r1, #0
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 ff65 	bl	80070dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	2100      	movs	r1, #0
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f001 fc63 	bl	8007aec <USBD_LL_PrepareReceive>
 8006226:	e018      	b.n	800625a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d10b      	bne.n	800624c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800624c:	2180      	movs	r1, #128	; 0x80
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f001 fba2 	bl	8007998 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 ff93 	bl	8007180 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d122      	bne.n	80062aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff fe98 	bl	8005f9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006272:	e01a      	b.n	80062aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b03      	cmp	r3, #3
 800627e:	d114      	bne.n	80062aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00e      	beq.n	80062aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	7afa      	ldrb	r2, [r7, #11]
 8006296:	4611      	mov	r1, r2
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	4798      	blx	r3
 800629c:	4603      	mov	r3, r0
 800629e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	e000      	b.n	80062ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e02f      	b.n	8006348 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00f      	beq.n	8006312 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6852      	ldr	r2, [r2, #4]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	4611      	mov	r1, r2
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006312:	2340      	movs	r3, #64	; 0x40
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 faf8 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2240      	movs	r2, #64	; 0x40
 800632a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800632e:	2340      	movs	r3, #64	; 0x40
 8006330:	2200      	movs	r2, #0
 8006332:	2180      	movs	r1, #128	; 0x80
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 faea 	bl	800790e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2240      	movs	r2, #64	; 0x40
 8006344:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637e:	b2da      	uxtb	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d106      	bne.n	80063be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80063de:	2303      	movs	r3, #3
 80063e0:	e012      	b.n	8006408 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d10b      	bne.n	8006406 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006426:	2303      	movs	r3, #3
 8006428:	e014      	b.n	8006454 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b03      	cmp	r3, #3
 8006434:	d10d      	bne.n	8006452 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	4611      	mov	r1, r2
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006472:	2303      	movs	r3, #3
 8006474:	e014      	b.n	80064a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d10d      	bne.n	800649e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	4611      	mov	r1, r2
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	4611      	mov	r1, r2
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
  }

  return USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3301      	adds	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006514:	8a3b      	ldrh	r3, [r7, #16]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	b21a      	sxth	r2, r3
 800651a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800651e:	4313      	orrs	r3, r2
 8006520:	b21b      	sxth	r3, r3
 8006522:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006524:	89fb      	ldrh	r3, [r7, #14]
}
 8006526:	4618      	mov	r0, r3
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d005      	beq.n	800655a <USBD_StdDevReq+0x26>
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d853      	bhi.n	80065fa <USBD_StdDevReq+0xc6>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <USBD_StdDevReq+0x3a>
 8006556:	2b20      	cmp	r3, #32
 8006558:	d14f      	bne.n	80065fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	4798      	blx	r3
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e04a      	b.n	8006604 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b09      	cmp	r3, #9
 8006574:	d83b      	bhi.n	80065ee <USBD_StdDevReq+0xba>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <USBD_StdDevReq+0x48>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	080065d1 	.word	0x080065d1
 8006580:	080065e5 	.word	0x080065e5
 8006584:	080065ef 	.word	0x080065ef
 8006588:	080065db 	.word	0x080065db
 800658c:	080065ef 	.word	0x080065ef
 8006590:	080065af 	.word	0x080065af
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065ef 	.word	0x080065ef
 800659c:	080065c7 	.word	0x080065c7
 80065a0:	080065b9 	.word	0x080065b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9de 	bl	8006968 <USBD_GetDescriptor>
          break;
 80065ac:	e024      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fb43 	bl	8006c3c <USBD_SetAddress>
          break;
 80065b6:	e01f      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fb82 	bl	8006cc4 <USBD_SetConfig>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
          break;
 80065c4:	e018      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065c6:	6839      	ldr	r1, [r7, #0]
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fc21 	bl	8006e10 <USBD_GetConfig>
          break;
 80065ce:	e013      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fc52 	bl	8006e7c <USBD_GetStatus>
          break;
 80065d8:	e00e      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc81 	bl	8006ee4 <USBD_SetFeature>
          break;
 80065e2:	e009      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fc90 	bl	8006f0c <USBD_ClrFeature>
          break;
 80065ec:	e004      	b.n	80065f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fce7 	bl	8006fc4 <USBD_CtlError>
          break;
 80065f6:	bf00      	nop
      }
      break;
 80065f8:	e004      	b.n	8006604 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fce1 	bl	8006fc4 <USBD_CtlError>
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006626:	2b40      	cmp	r3, #64	; 0x40
 8006628:	d005      	beq.n	8006636 <USBD_StdItfReq+0x26>
 800662a:	2b40      	cmp	r3, #64	; 0x40
 800662c:	d82f      	bhi.n	800668e <USBD_StdItfReq+0x7e>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <USBD_StdItfReq+0x26>
 8006632:	2b20      	cmp	r3, #32
 8006634:	d12b      	bne.n	800668e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	b2db      	uxtb	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	2b02      	cmp	r3, #2
 8006642:	d81d      	bhi.n	8006680 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	889b      	ldrh	r3, [r3, #4]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d813      	bhi.n	8006676 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	88db      	ldrh	r3, [r3, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d110      	bne.n	800668a <USBD_StdItfReq+0x7a>
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fd73 	bl	800715a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006674:	e009      	b.n	800668a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fca3 	bl	8006fc4 <USBD_CtlError>
          break;
 800667e:	e004      	b.n	800668a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fc9e 	bl	8006fc4 <USBD_CtlError>
          break;
 8006688:	e000      	b.n	800668c <USBD_StdItfReq+0x7c>
          break;
 800668a:	bf00      	nop
      }
      break;
 800668c:	e004      	b.n	8006698 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc97 	bl	8006fc4 <USBD_CtlError>
      break;
 8006696:	bf00      	nop
  }

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	889b      	ldrh	r3, [r3, #4]
 80066b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d007      	beq.n	80066d2 <USBD_StdEPReq+0x30>
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	f200 8145 	bhi.w	8006952 <USBD_StdEPReq+0x2b0>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00c      	beq.n	80066e6 <USBD_StdEPReq+0x44>
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	f040 8140 	bne.w	8006952 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e13a      	b.n	800695c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d007      	beq.n	80066fe <USBD_StdEPReq+0x5c>
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f300 8129 	bgt.w	8006946 <USBD_StdEPReq+0x2a4>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d07f      	beq.n	80067f8 <USBD_StdEPReq+0x156>
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d03c      	beq.n	8006776 <USBD_StdEPReq+0xd4>
 80066fc:	e123      	b.n	8006946 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d002      	beq.n	8006710 <USBD_StdEPReq+0x6e>
 800670a:	2b03      	cmp	r3, #3
 800670c:	d016      	beq.n	800673c <USBD_StdEPReq+0x9a>
 800670e:	e02c      	b.n	800676a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <USBD_StdEPReq+0x90>
 8006716:	7bbb      	ldrb	r3, [r7, #14]
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d00a      	beq.n	8006732 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 f939 	bl	8007998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006726:	2180      	movs	r1, #128	; 0x80
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 f935 	bl	8007998 <USBD_LL_StallEP>
 800672e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006730:	e020      	b.n	8006774 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fc45 	bl	8006fc4 <USBD_CtlError>
              break;
 800673a:	e01b      	b.n	8006774 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	885b      	ldrh	r3, [r3, #2]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10e      	bne.n	8006762 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <USBD_StdEPReq+0xc0>
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b80      	cmp	r3, #128	; 0x80
 800674e:	d008      	beq.n	8006762 <USBD_StdEPReq+0xc0>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f91b 	bl	8007998 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fcf9 	bl	800715a <USBD_CtlSendStatus>

              break;
 8006768:	e004      	b.n	8006774 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc29 	bl	8006fc4 <USBD_CtlError>
              break;
 8006772:	bf00      	nop
          }
          break;
 8006774:	e0ec      	b.n	8006950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d002      	beq.n	8006788 <USBD_StdEPReq+0xe6>
 8006782:	2b03      	cmp	r3, #3
 8006784:	d016      	beq.n	80067b4 <USBD_StdEPReq+0x112>
 8006786:	e030      	b.n	80067ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00d      	beq.n	80067aa <USBD_StdEPReq+0x108>
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b80      	cmp	r3, #128	; 0x80
 8006792:	d00a      	beq.n	80067aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 f8fd 	bl	8007998 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800679e:	2180      	movs	r1, #128	; 0x80
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f8f9 	bl	8007998 <USBD_LL_StallEP>
 80067a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067a8:	e025      	b.n	80067f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc09 	bl	8006fc4 <USBD_CtlError>
              break;
 80067b2:	e020      	b.n	80067f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11b      	bne.n	80067f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d004      	beq.n	80067d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f903 	bl	80079d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fcc2 	bl	800715a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	4798      	blx	r3
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80067e8:	e004      	b.n	80067f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbe9 	bl	8006fc4 <USBD_CtlError>
              break;
 80067f2:	e000      	b.n	80067f6 <USBD_StdEPReq+0x154>
              break;
 80067f4:	bf00      	nop
          }
          break;
 80067f6:	e0ab      	b.n	8006950 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d002      	beq.n	800680a <USBD_StdEPReq+0x168>
 8006804:	2b03      	cmp	r3, #3
 8006806:	d032      	beq.n	800686e <USBD_StdEPReq+0x1cc>
 8006808:	e097      	b.n	800693a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <USBD_StdEPReq+0x17e>
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d004      	beq.n	8006820 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fbd3 	bl	8006fc4 <USBD_CtlError>
                break;
 800681e:	e091      	b.n	8006944 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	da0b      	bge.n	8006840 <USBD_StdEPReq+0x19e>
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	3310      	adds	r3, #16
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4413      	add	r3, r2
 800683c:	3304      	adds	r3, #4
 800683e:	e00b      	b.n	8006858 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2202      	movs	r2, #2
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fc1d 	bl	80070a6 <USBD_CtlSendData>
              break;
 800686c:	e06a      	b.n	8006944 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800686e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006872:	2b00      	cmp	r3, #0
 8006874:	da11      	bge.n	800689a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	f003 020f 	and.w	r2, r3, #15
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	3324      	adds	r3, #36	; 0x24
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d117      	bne.n	80068c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fb96 	bl	8006fc4 <USBD_CtlError>
                  break;
 8006898:	e054      	b.n	8006944 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	f003 020f 	and.w	r2, r3, #15
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d104      	bne.n	80068c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fb83 	bl	8006fc4 <USBD_CtlError>
                  break;
 80068be:	e041      	b.n	8006944 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	da0b      	bge.n	80068e0 <USBD_StdEPReq+0x23e>
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	3310      	adds	r3, #16
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	4413      	add	r3, r2
 80068dc:	3304      	adds	r3, #4
 80068de:	e00b      	b.n	80068f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068e6:	4613      	mov	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	3304      	adds	r3, #4
 80068f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <USBD_StdEPReq+0x264>
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	d103      	bne.n	800690e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	e00e      	b.n	800692c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f87e 	bl	8007a14 <USBD_LL_IsStallEP>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e002      	b.n	800692c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2202      	movs	r2, #2
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fbb7 	bl	80070a6 <USBD_CtlSendData>
              break;
 8006938:	e004      	b.n	8006944 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb41 	bl	8006fc4 <USBD_CtlError>
              break;
 8006942:	bf00      	nop
          }
          break;
 8006944:	e004      	b.n	8006950 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb3b 	bl	8006fc4 <USBD_CtlError>
          break;
 800694e:	bf00      	nop
      }
      break;
 8006950:	e004      	b.n	800695c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fb35 	bl	8006fc4 <USBD_CtlError>
      break;
 800695a:	bf00      	nop
  }

  return ret;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	2b06      	cmp	r3, #6
 800698a:	f200 8128 	bhi.w	8006bde <USBD_GetDescriptor+0x276>
 800698e:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBD_GetDescriptor+0x2c>)
 8006990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006994:	080069b1 	.word	0x080069b1
 8006998:	080069c9 	.word	0x080069c9
 800699c:	08006a09 	.word	0x08006a09
 80069a0:	08006bdf 	.word	0x08006bdf
 80069a4:	08006bdf 	.word	0x08006bdf
 80069a8:	08006b7f 	.word	0x08006b7f
 80069ac:	08006bab 	.word	0x08006bab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
      break;
 80069c6:	e112      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7c1b      	ldrb	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10d      	bne.n	80069ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	f107 0208 	add.w	r2, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	2202      	movs	r2, #2
 80069e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069ea:	e100      	b.n	8006bee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	f107 0208 	add.w	r2, r7, #8
 80069f8:	4610      	mov	r0, r2
 80069fa:	4798      	blx	r3
 80069fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	2202      	movs	r2, #2
 8006a04:	701a      	strb	r2, [r3, #0]
      break;
 8006a06:	e0f2      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	f200 80ac 	bhi.w	8006b6c <USBD_GetDescriptor+0x204>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBD_GetDescriptor+0xb4>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a35 	.word	0x08006a35
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a9d 	.word	0x08006a9d
 8006a28:	08006ad1 	.word	0x08006ad1
 8006a2c:	08006b05 	.word	0x08006b05
 8006a30:	08006b39 	.word	0x08006b39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7c12      	ldrb	r2, [r2, #16]
 8006a4c:	f107 0108 	add.w	r1, r7, #8
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
 8006a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a56:	e091      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fab2 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006a60:	7afb      	ldrb	r3, [r7, #11]
 8006a62:	3301      	adds	r3, #1
 8006a64:	72fb      	strb	r3, [r7, #11]
          break;
 8006a66:	e089      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	7c12      	ldrb	r2, [r2, #16]
 8006a80:	f107 0108 	add.w	r1, r7, #8
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
 8006a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a8a:	e077      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa98 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	3301      	adds	r3, #1
 8006a98:	72fb      	strb	r3, [r7, #11]
          break;
 8006a9a:	e06f      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006abe:	e05d      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa7e 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	3301      	adds	r3, #1
 8006acc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ace:	e055      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006af2:	e043      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa64 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
          break;
 8006b02:	e03b      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	7c12      	ldrb	r2, [r2, #16]
 8006b1c:	f107 0108 	add.w	r1, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b26:	e029      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa4a 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006b30:	7afb      	ldrb	r3, [r7, #11]
 8006b32:	3301      	adds	r3, #1
 8006b34:	72fb      	strb	r3, [r7, #11]
          break;
 8006b36:	e021      	b.n	8006b7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	7c12      	ldrb	r2, [r2, #16]
 8006b50:	f107 0108 	add.w	r1, r7, #8
 8006b54:	4610      	mov	r0, r2
 8006b56:	4798      	blx	r3
 8006b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b5a:	e00f      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fa30 	bl	8006fc4 <USBD_CtlError>
            err++;
 8006b64:	7afb      	ldrb	r3, [r7, #11]
 8006b66:	3301      	adds	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
          break;
 8006b6a:	e007      	b.n	8006b7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa28 	bl	8006fc4 <USBD_CtlError>
          err++;
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	3301      	adds	r3, #1
 8006b78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006b7a:	bf00      	nop
      }
      break;
 8006b7c:	e037      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7c1b      	ldrb	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	f107 0208 	add.w	r2, r7, #8
 8006b92:	4610      	mov	r0, r2
 8006b94:	4798      	blx	r3
 8006b96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b98:	e029      	b.n	8006bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fa11 	bl	8006fc4 <USBD_CtlError>
        err++;
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ba8:	e021      	b.n	8006bee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7c1b      	ldrb	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bba:	f107 0208 	add.w	r2, r7, #8
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4798      	blx	r3
 8006bc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	2207      	movs	r2, #7
 8006bca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bcc:	e00f      	b.n	8006bee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f9f7 	bl	8006fc4 <USBD_CtlError>
        err++;
 8006bd6:	7afb      	ldrb	r3, [r7, #11]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	72fb      	strb	r3, [r7, #11]
      break;
 8006bdc:	e007      	b.n	8006bee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9ef 	bl	8006fc4 <USBD_CtlError>
      err++;
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	3301      	adds	r3, #1
 8006bea:	72fb      	strb	r3, [r7, #11]
      break;
 8006bec:	bf00      	nop
  }

  if (err != 0U)
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11e      	bne.n	8006c32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d016      	beq.n	8006c2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006bfc:	893b      	ldrh	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00e      	beq.n	8006c20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88da      	ldrh	r2, [r3, #6]
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	bf28      	it	cs
 8006c0c:	4613      	movcs	r3, r2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c12:	893b      	ldrh	r3, [r7, #8]
 8006c14:	461a      	mov	r2, r3
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fa44 	bl	80070a6 <USBD_CtlSendData>
 8006c1e:	e009      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9ce 	bl	8006fc4 <USBD_CtlError>
 8006c28:	e004      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa95 	bl	800715a <USBD_CtlSendStatus>
 8006c30:	e000      	b.n	8006c34 <USBD_GetDescriptor+0x2cc>
    return;
 8006c32:	bf00      	nop
  }
}
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop

08006c3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	889b      	ldrh	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d131      	bne.n	8006cb2 <USBD_SetAddress+0x76>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	88db      	ldrh	r3, [r3, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d12d      	bne.n	8006cb2 <USBD_SetAddress+0x76>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5c:	d829      	bhi.n	8006cb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	885b      	ldrh	r3, [r3, #2]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d104      	bne.n	8006c80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f9a3 	bl	8006fc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7e:	e01d      	b.n	8006cbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7bfa      	ldrb	r2, [r7, #15]
 8006c84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 feed 	bl	8007a6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa61 	bl	800715a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca6:	e009      	b.n	8006cbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	e004      	b.n	8006cbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f985 	bl	8006fc4 <USBD_CtlError>
  }
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	4b4c      	ldr	r3, [pc, #304]	; (8006e0c <USBD_SetConfig+0x148>)
 8006cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cdc:	4b4b      	ldr	r3, [pc, #300]	; (8006e0c <USBD_SetConfig+0x148>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d905      	bls.n	8006cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f96c 	bl	8006fc4 <USBD_CtlError>
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e088      	b.n	8006e02 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d002      	beq.n	8006d02 <USBD_SetConfig+0x3e>
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d025      	beq.n	8006d4c <USBD_SetConfig+0x88>
 8006d00:	e071      	b.n	8006de6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d02:	4b42      	ldr	r3, [pc, #264]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01c      	beq.n	8006d44 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006d0a:	4b40      	ldr	r3, [pc, #256]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d14:	4b3d      	ldr	r3, [pc, #244]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff f948 	bl	8005fb0 <USBD_SetClassConfig>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f949 	bl	8006fc4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d32:	e065      	b.n	8006e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 fa10 	bl	800715a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d42:	e05d      	b.n	8006e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fa08 	bl	800715a <USBD_CtlSendStatus>
      break;
 8006d4a:	e059      	b.n	8006e00 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d112      	bne.n	8006d7a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d5c:	4b2b      	ldr	r3, [pc, #172]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff f93b 	bl	8005fe8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9f1 	bl	800715a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d78:	e042      	b.n	8006e00 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d02a      	beq.n	8006dde <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff f929 	bl	8005fe8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d96:	4b1d      	ldr	r3, [pc, #116]	; (8006e0c <USBD_SetConfig+0x148>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006da0:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <USBD_SetConfig+0x148>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff f902 	bl	8005fb0 <USBD_SetClassConfig>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00f      	beq.n	8006dd6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f903 	bl	8006fc4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff f90e 	bl	8005fe8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dd4:	e014      	b.n	8006e00 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9bf 	bl	800715a <USBD_CtlSendStatus>
      break;
 8006ddc:	e010      	b.n	8006e00 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9bb 	bl	800715a <USBD_CtlSendStatus>
      break;
 8006de4:	e00c      	b.n	8006e00 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8eb 	bl	8006fc4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <USBD_SetConfig+0x148>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff f8f7 	bl	8005fe8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfe:	bf00      	nop
  }

  return ret;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000208 	.word	0x20000208

08006e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	88db      	ldrh	r3, [r3, #6]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d004      	beq.n	8006e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f8cd 	bl	8006fc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e2a:	e023      	b.n	8006e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	dc02      	bgt.n	8006e3e <USBD_GetConfig+0x2e>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dc03      	bgt.n	8006e44 <USBD_GetConfig+0x34>
 8006e3c:	e015      	b.n	8006e6a <USBD_GetConfig+0x5a>
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d00b      	beq.n	8006e5a <USBD_GetConfig+0x4a>
 8006e42:	e012      	b.n	8006e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f927 	bl	80070a6 <USBD_CtlSendData>
        break;
 8006e58:	e00c      	b.n	8006e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f91f 	bl	80070a6 <USBD_CtlSendData>
        break;
 8006e68:	e004      	b.n	8006e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f8a9 	bl	8006fc4 <USBD_CtlError>
        break;
 8006e72:	bf00      	nop
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d81e      	bhi.n	8006ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d004      	beq.n	8006ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f890 	bl	8006fc4 <USBD_CtlError>
        break;
 8006ea4:	e01a      	b.n	8006edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d005      	beq.n	8006ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8eb 	bl	80070a6 <USBD_CtlSendData>
      break;
 8006ed0:	e004      	b.n	8006edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f875 	bl	8006fc4 <USBD_CtlError>
      break;
 8006eda:	bf00      	nop
  }
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d106      	bne.n	8006f04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f92b 	bl	800715a <USBD_CtlSendStatus>
  }
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d80b      	bhi.n	8006f3c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	885b      	ldrh	r3, [r3, #2]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d10c      	bne.n	8006f46 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f910 	bl	800715a <USBD_CtlSendStatus>
      }
      break;
 8006f3a:	e004      	b.n	8006f46 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f840 	bl	8006fc4 <USBD_CtlError>
      break;
 8006f44:	e000      	b.n	8006f48 <USBD_ClrFeature+0x3c>
      break;
 8006f46:	bf00      	nop
  }
}
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	781a      	ldrb	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff fabb 	bl	80064f6 <SWAPBYTE>
 8006f80:	4603      	mov	r3, r0
 8006f82:	461a      	mov	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff faae 	bl	80064f6 <SWAPBYTE>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff faa1 	bl	80064f6 <SWAPBYTE>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	80da      	strh	r2, [r3, #6]
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fce:	2180      	movs	r1, #128	; 0x80
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fce1 	bl	8007998 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fcdd 	bl	8007998 <USBD_LL_StallEP>
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d036      	beq.n	800706a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007000:	6938      	ldr	r0, [r7, #16]
 8007002:	f000 f836 	bl	8007072 <USBD_GetLen>
 8007006:	4603      	mov	r3, r0
 8007008:	3301      	adds	r3, #1
 800700a:	b29b      	uxth	r3, r3
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4413      	add	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
 8007022:	3301      	adds	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	4413      	add	r3, r2
 800702c:	2203      	movs	r2, #3
 800702e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	3301      	adds	r3, #1
 8007034:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007036:	e013      	b.n	8007060 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	3301      	adds	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
    idx++;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	3301      	adds	r3, #1
 800704e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	4413      	add	r3, r2
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
    idx++;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	3301      	adds	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e7      	bne.n	8007038 <USBD_GetString+0x52>
 8007068:	e000      	b.n	800706c <USBD_GetString+0x86>
    return;
 800706a:	bf00      	nop
  }
}
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007082:	e005      	b.n	8007090 <USBD_GetLen+0x1e>
  {
    len++;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	3301      	adds	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3301      	adds	r3, #1
 800708e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f5      	bne.n	8007084 <USBD_GetLen+0x12>
  }

  return len;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2202      	movs	r2, #2
 80070b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	2100      	movs	r1, #0
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fcec 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fcdb 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2203      	movs	r2, #3
 800710e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	2100      	movs	r1, #0
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fcdf 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	2100      	movs	r1, #0
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fcce 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2204      	movs	r2, #4
 8007166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800716a:	2300      	movs	r3, #0
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc9a 	bl	8007aaa <USBD_LL_Transmit>

  return USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2205      	movs	r2, #5
 800718c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007190:	2300      	movs	r3, #0
 8007192:	2200      	movs	r2, #0
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fca8 	bl	8007aec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071ac:	2200      	movs	r2, #0
 80071ae:	4912      	ldr	r1, [pc, #72]	; (80071f8 <MX_USB_DEVICE_Init+0x50>)
 80071b0:	4812      	ldr	r0, [pc, #72]	; (80071fc <MX_USB_DEVICE_Init+0x54>)
 80071b2:	f7fe fe8f 	bl	8005ed4 <USBD_Init>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071bc:	f7f9 fc86 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071c0:	490f      	ldr	r1, [pc, #60]	; (8007200 <MX_USB_DEVICE_Init+0x58>)
 80071c2:	480e      	ldr	r0, [pc, #56]	; (80071fc <MX_USB_DEVICE_Init+0x54>)
 80071c4:	f7fe feb6 	bl	8005f34 <USBD_RegisterClass>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071ce:	f7f9 fc7d 	bl	8000acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071d2:	490c      	ldr	r1, [pc, #48]	; (8007204 <MX_USB_DEVICE_Init+0x5c>)
 80071d4:	4809      	ldr	r0, [pc, #36]	; (80071fc <MX_USB_DEVICE_Init+0x54>)
 80071d6:	f7fe fdd7 	bl	8005d88 <USBD_CDC_RegisterInterface>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071e0:	f7f9 fc74 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071e4:	4805      	ldr	r0, [pc, #20]	; (80071fc <MX_USB_DEVICE_Init+0x54>)
 80071e6:	f7fe fecc 	bl	8005f82 <USBD_Start>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071f0:	f7f9 fc6c 	bl	8000acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071f4:	bf00      	nop
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000138 	.word	0x20000138
 80071fc:	20000584 	.word	0x20000584
 8007200:	20000020 	.word	0x20000020
 8007204:	20000124 	.word	0x20000124

08007208 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800720c:	2200      	movs	r2, #0
 800720e:	4905      	ldr	r1, [pc, #20]	; (8007224 <CDC_Init_FS+0x1c>)
 8007210:	4805      	ldr	r0, [pc, #20]	; (8007228 <CDC_Init_FS+0x20>)
 8007212:	f7fe fdce 	bl	8005db2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007216:	4905      	ldr	r1, [pc, #20]	; (800722c <CDC_Init_FS+0x24>)
 8007218:	4803      	ldr	r0, [pc, #12]	; (8007228 <CDC_Init_FS+0x20>)
 800721a:	f7fe fde8 	bl	8005dee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800721e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007220:	4618      	mov	r0, r3
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20001054 	.word	0x20001054
 8007228:	20000584 	.word	0x20000584
 800722c:	20000854 	.word	0x20000854

08007230 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007234:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	6039      	str	r1, [r7, #0]
 800724a:	71fb      	strb	r3, [r7, #7]
 800724c:	4613      	mov	r3, r2
 800724e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	2b23      	cmp	r3, #35	; 0x23
 8007254:	d84a      	bhi.n	80072ec <CDC_Control_FS+0xac>
 8007256:	a201      	add	r2, pc, #4	; (adr r2, 800725c <CDC_Control_FS+0x1c>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	080072ed 	.word	0x080072ed
 8007260:	080072ed 	.word	0x080072ed
 8007264:	080072ed 	.word	0x080072ed
 8007268:	080072ed 	.word	0x080072ed
 800726c:	080072ed 	.word	0x080072ed
 8007270:	080072ed 	.word	0x080072ed
 8007274:	080072ed 	.word	0x080072ed
 8007278:	080072ed 	.word	0x080072ed
 800727c:	080072ed 	.word	0x080072ed
 8007280:	080072ed 	.word	0x080072ed
 8007284:	080072ed 	.word	0x080072ed
 8007288:	080072ed 	.word	0x080072ed
 800728c:	080072ed 	.word	0x080072ed
 8007290:	080072ed 	.word	0x080072ed
 8007294:	080072ed 	.word	0x080072ed
 8007298:	080072ed 	.word	0x080072ed
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072ed 	.word	0x080072ed
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	080072ed 	.word	0x080072ed
 80072ac:	080072ed 	.word	0x080072ed
 80072b0:	080072ed 	.word	0x080072ed
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	080072ed 	.word	0x080072ed
 80072bc:	080072ed 	.word	0x080072ed
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072ed 	.word	0x080072ed
 80072d0:	080072ed 	.word	0x080072ed
 80072d4:	080072ed 	.word	0x080072ed
 80072d8:	080072ed 	.word	0x080072ed
 80072dc:	080072ed 	.word	0x080072ed
 80072e0:	080072ed 	.word	0x080072ed
 80072e4:	080072ed 	.word	0x080072ed
 80072e8:	080072ed 	.word	0x080072ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072ec:	bf00      	nop
  }

  return (USBD_OK);
 80072ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4805      	ldr	r0, [pc, #20]	; (8007320 <CDC_Receive_FS+0x24>)
 800730a:	f7fe fd70 	bl	8005dee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800730e:	4804      	ldr	r0, [pc, #16]	; (8007320 <CDC_Receive_FS+0x24>)
 8007310:	f7fe fdb6 	bl	8005e80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007314:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000584 	.word	0x20000584

08007324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007334:	4b0d      	ldr	r3, [pc, #52]	; (800736c <CDC_Transmit_FS+0x48>)
 8007336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007346:	2301      	movs	r3, #1
 8007348:	e00b      	b.n	8007362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800734a:	887b      	ldrh	r3, [r7, #2]
 800734c:	461a      	mov	r2, r3
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4806      	ldr	r0, [pc, #24]	; (800736c <CDC_Transmit_FS+0x48>)
 8007352:	f7fe fd2e 	bl	8005db2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007356:	4805      	ldr	r0, [pc, #20]	; (800736c <CDC_Transmit_FS+0x48>)
 8007358:	f7fe fd62 	bl	8005e20 <USBD_CDC_TransmitPacket>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000584 	.word	0x20000584

08007370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
	...

08007394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2212      	movs	r2, #18
 80073a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073a6:	4b03      	ldr	r3, [pc, #12]	; (80073b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20000154 	.word	0x20000154

080073b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2204      	movs	r2, #4
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20000168 	.word	0x20000168

080073dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4907      	ldr	r1, [pc, #28]	; (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f2:	4808      	ldr	r0, [pc, #32]	; (8007414 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f4:	f7ff fdf7 	bl	8006fe6 <USBD_GetString>
 80073f8:	e004      	b.n	8007404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	4904      	ldr	r1, [pc, #16]	; (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
 80073fe:	4805      	ldr	r0, [pc, #20]	; (8007414 <USBD_FS_ProductStrDescriptor+0x38>)
 8007400:	f7ff fdf1 	bl	8006fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007404:	4b02      	ldr	r3, [pc, #8]	; (8007410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20001854 	.word	0x20001854
 8007414:	08007d98 	.word	0x08007d98

08007418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	6039      	str	r1, [r7, #0]
 8007422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	4904      	ldr	r1, [pc, #16]	; (8007438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007428:	4804      	ldr	r0, [pc, #16]	; (800743c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800742a:	f7ff fddc 	bl	8006fe6 <USBD_GetString>
  return USBD_StrDesc;
 800742e:	4b02      	ldr	r3, [pc, #8]	; (8007438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20001854 	.word	0x20001854
 800743c:	08007db0 	.word	0x08007db0

08007440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	221a      	movs	r2, #26
 8007450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007452:	f000 f843 	bl	80074dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007456:	4b02      	ldr	r3, [pc, #8]	; (8007460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	2000016c 	.word	0x2000016c

08007464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4907      	ldr	r1, [pc, #28]	; (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800747a:	4808      	ldr	r0, [pc, #32]	; (800749c <USBD_FS_ConfigStrDescriptor+0x38>)
 800747c:	f7ff fdb3 	bl	8006fe6 <USBD_GetString>
 8007480:	e004      	b.n	800748c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007486:	4805      	ldr	r0, [pc, #20]	; (800749c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007488:	f7ff fdad 	bl	8006fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	; (8007498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20001854 	.word	0x20001854
 800749c:	08007dc4 	.word	0x08007dc4

080074a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4907      	ldr	r1, [pc, #28]	; (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074b6:	4808      	ldr	r0, [pc, #32]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074b8:	f7ff fd95 	bl	8006fe6 <USBD_GetString>
 80074bc:	e004      	b.n	80074c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	4904      	ldr	r1, [pc, #16]	; (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074c2:	4805      	ldr	r0, [pc, #20]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c4:	f7ff fd8f 	bl	8006fe6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074c8:	4b02      	ldr	r3, [pc, #8]	; (80074d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20001854 	.word	0x20001854
 80074d8:	08007dd0 	.word	0x08007dd0

080074dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <Get_SerialNum+0x44>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074e8:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <Get_SerialNum+0x48>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074ee:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <Get_SerialNum+0x4c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4413      	add	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d009      	beq.n	8007516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007502:	2208      	movs	r2, #8
 8007504:	4909      	ldr	r1, [pc, #36]	; (800752c <Get_SerialNum+0x50>)
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f814 	bl	8007534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800750c:	2204      	movs	r2, #4
 800750e:	4908      	ldr	r1, [pc, #32]	; (8007530 <Get_SerialNum+0x54>)
 8007510:	68b8      	ldr	r0, [r7, #8]
 8007512:	f000 f80f 	bl	8007534 <IntToUnicode>
  }
}
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	1fff7a10 	.word	0x1fff7a10
 8007524:	1fff7a14 	.word	0x1fff7a14
 8007528:	1fff7a18 	.word	0x1fff7a18
 800752c:	2000016e 	.word	0x2000016e
 8007530:	2000017e 	.word	0x2000017e

08007534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]
 800754a:	e027      	b.n	800759c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	2b09      	cmp	r3, #9
 8007552:	d80b      	bhi.n	800756c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	0f1b      	lsrs	r3, r3, #28
 8007558:	b2da      	uxtb	r2, r3
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4619      	mov	r1, r3
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	440b      	add	r3, r1
 8007564:	3230      	adds	r2, #48	; 0x30
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	e00a      	b.n	8007582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0f1b      	lsrs	r3, r3, #28
 8007570:	b2da      	uxtb	r2, r3
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4619      	mov	r1, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	440b      	add	r3, r1
 800757c:	3237      	adds	r2, #55	; 0x37
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	3301      	adds	r3, #1
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4413      	add	r3, r2
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	3301      	adds	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
 800759c:	7dfa      	ldrb	r2, [r7, #23]
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d3d3      	bcc.n	800754c <IntToUnicode+0x18>
  }
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	; 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d4:	d13a      	bne.n	800764c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6313      	str	r3, [r2, #48]	; 0x30
 80075e6:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f8:	2302      	movs	r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007604:	230a      	movs	r3, #10
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4619      	mov	r1, r3
 800760e:	4812      	ldr	r0, [pc, #72]	; (8007658 <HAL_PCD_MspInit+0xa4>)
 8007610:	f7fa fa4e 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	4a0e      	ldr	r2, [pc, #56]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	6353      	str	r3, [r2, #52]	; 0x34
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 800762a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800762e:	6453      	str	r3, [r2, #68]	; 0x44
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	2043      	movs	r0, #67	; 0x43
 8007642:	f7fa f9fe 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007646:	2043      	movs	r0, #67	; 0x43
 8007648:	f7fa fa17 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800764c:	bf00      	nop
 800764e:	3728      	adds	r7, #40	; 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40023800 	.word	0x40023800
 8007658:	40020000 	.word	0x40020000

0800765c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe fcd0 	bl	8006018 <USBD_LL_SetupStage>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7fe fd0a 	bl	80060c2 <USBD_LL_DataOutStage>
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	3348      	adds	r3, #72	; 0x48
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	4619      	mov	r1, r3
 80076de:	f7fe fd53 	bl	8006188 <USBD_LL_DataInStage>
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fe67 	bl	80063cc <USBD_LL_SOF>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
 800771e:	e008      	b.n	8007732 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d102      	bne.n	800772e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e001      	b.n	8007732 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800772e:	f7f9 f9cd 	bl	8000acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007738:	7bfa      	ldrb	r2, [r7, #15]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fe07 	bl	8006350 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fdb3 	bl	80062b4 <USBD_LL_Reset>
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fe02 	bl	8006370 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6812      	ldr	r2, [r2, #0]
 800777a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <HAL_PCD_SuspendCallback+0x48>)
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	4a03      	ldr	r2, [pc, #12]	; (80077a0 <HAL_PCD_SuspendCallback+0x48>)
 8007792:	f043 0306 	orr.w	r3, r3, #6
 8007796:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	e000ed00 	.word	0xe000ed00

080077a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fdf2 	bl	800639c <USBD_LL_Resume>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fe40 	bl	800645c <USBD_LL_IsoOUTIncomplete>
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fe08 	bl	8006410 <USBD_LL_IsoINIncomplete>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fe46 	bl	80064a8 <USBD_LL_DevConnected>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fe43 	bl	80064be <USBD_LL_DevDisconnected>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d13c      	bne.n	80078ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <USBD_LL_Init+0x94>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a1e      	ldr	r2, [pc, #120]	; (80078d4 <USBD_LL_Init+0x94>)
 800785c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <USBD_LL_Init+0x94>)
 8007862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007868:	4b1a      	ldr	r3, [pc, #104]	; (80078d4 <USBD_LL_Init+0x94>)
 800786a:	2204      	movs	r2, #4
 800786c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800786e:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <USBD_LL_Init+0x94>)
 8007870:	2202      	movs	r2, #2
 8007872:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007874:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <USBD_LL_Init+0x94>)
 8007876:	2200      	movs	r2, #0
 8007878:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800787a:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <USBD_LL_Init+0x94>)
 800787c:	2202      	movs	r2, #2
 800787e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007880:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <USBD_LL_Init+0x94>)
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007886:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <USBD_LL_Init+0x94>)
 8007888:	2200      	movs	r2, #0
 800788a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <USBD_LL_Init+0x94>)
 800788e:	2200      	movs	r2, #0
 8007890:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <USBD_LL_Init+0x94>)
 8007894:	2200      	movs	r2, #0
 8007896:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <USBD_LL_Init+0x94>)
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800789e:	480d      	ldr	r0, [pc, #52]	; (80078d4 <USBD_LL_Init+0x94>)
 80078a0:	f7fa fabb 	bl	8001e1a <HAL_PCD_Init>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078aa:	f7f9 f90f 	bl	8000acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078ae:	2180      	movs	r1, #128	; 0x80
 80078b0:	4808      	ldr	r0, [pc, #32]	; (80078d4 <USBD_LL_Init+0x94>)
 80078b2:	f7fb fc18 	bl	80030e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	2100      	movs	r1, #0
 80078ba:	4806      	ldr	r0, [pc, #24]	; (80078d4 <USBD_LL_Init+0x94>)
 80078bc:	f7fb fbcc 	bl	8003058 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	2101      	movs	r1, #1
 80078c4:	4803      	ldr	r0, [pc, #12]	; (80078d4 <USBD_LL_Init+0x94>)
 80078c6:	f7fb fbc7 	bl	8003058 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20001a54 	.word	0x20001a54

080078d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fa fbb0 	bl	8002054 <HAL_PCD_Start>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f942 	bl	8007b84 <USBD_Get_USB_Status>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007904:	7bbb      	ldrb	r3, [r7, #14]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	461a      	mov	r2, r3
 800791c:	4603      	mov	r3, r0
 800791e:	70fb      	strb	r3, [r7, #3]
 8007920:	460b      	mov	r3, r1
 8007922:	70bb      	strb	r3, [r7, #2]
 8007924:	4613      	mov	r3, r2
 8007926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007936:	78bb      	ldrb	r3, [r7, #2]
 8007938:	883a      	ldrh	r2, [r7, #0]
 800793a:	78f9      	ldrb	r1, [r7, #3]
 800793c:	f7fa ff94 	bl	8002868 <HAL_PCD_EP_Open>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 f91c 	bl	8007b84 <USBD_Get_USB_Status>
 800794c:	4603      	mov	r3, r0
 800794e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	4611      	mov	r1, r2
 8007978:	4618      	mov	r0, r3
 800797a:	f7fa ffdd 	bl	8002938 <HAL_PCD_EP_Close>
 800797e:	4603      	mov	r3, r0
 8007980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f8fd 	bl	8007b84 <USBD_Get_USB_Status>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800798e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fb f8b5 	bl	8002b26 <HAL_PCD_EP_SetStall>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f8de 	bl	8007b84 <USBD_Get_USB_Status>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fb f8fa 	bl	8002bee <HAL_PCD_EP_ClrStall>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f8bf 	bl	8007b84 <USBD_Get_USB_Status>
 8007a06:	4603      	mov	r3, r0
 8007a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da0b      	bge.n	8007a48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	333e      	adds	r3, #62	; 0x3e
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	e00b      	b.n	8007a60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fa fec7 	bl	800281e <HAL_PCD_SetAddress>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f874 	bl	8007b84 <USBD_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ac8:	7af9      	ldrb	r1, [r7, #11]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	f7fa ffe0 	bl	8002a92 <HAL_PCD_EP_Transmit>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f853 	bl	8007b84 <USBD_Get_USB_Status>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	460b      	mov	r3, r1
 8007afa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b0a:	7af9      	ldrb	r1, [r7, #11]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	f7fa ff5c 	bl	80029cc <HAL_PCD_EP_Receive>
 8007b14:	4603      	mov	r3, r0
 8007b16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f832 	bl	8007b84 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b24:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fa ff8c 	bl	8002a62 <HAL_PCD_EP_GetRxCount>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b5c:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <USBD_static_malloc+0x18>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	2000020c 	.word	0x2000020c

08007b70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d817      	bhi.n	8007bc8 <USBD_Get_USB_Status+0x44>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBD_Get_USB_Status+0x1c>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb1 	.word	0x08007bb1
 8007ba4:	08007bb7 	.word	0x08007bb7
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bc3 	.word	0x08007bc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb4:	e00b      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bba:	e008      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc0:	e005      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc6:	e002      	b.n	8007bce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	73fb      	strb	r3, [r7, #15]
    break;
 8007bcc:	bf00      	nop
  }
  return usb_status;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <atoi>:
 8007bdc:	220a      	movs	r2, #10
 8007bde:	2100      	movs	r1, #0
 8007be0:	f000 b8b6 	b.w	8007d50 <strtol>

08007be4 <__errno>:
 8007be4:	4b01      	ldr	r3, [pc, #4]	; (8007bec <__errno+0x8>)
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20000188 	.word	0x20000188

08007bf0 <__libc_init_array>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	4d0d      	ldr	r5, [pc, #52]	; (8007c28 <__libc_init_array+0x38>)
 8007bf4:	4c0d      	ldr	r4, [pc, #52]	; (8007c2c <__libc_init_array+0x3c>)
 8007bf6:	1b64      	subs	r4, r4, r5
 8007bf8:	10a4      	asrs	r4, r4, #2
 8007bfa:	2600      	movs	r6, #0
 8007bfc:	42a6      	cmp	r6, r4
 8007bfe:	d109      	bne.n	8007c14 <__libc_init_array+0x24>
 8007c00:	4d0b      	ldr	r5, [pc, #44]	; (8007c30 <__libc_init_array+0x40>)
 8007c02:	4c0c      	ldr	r4, [pc, #48]	; (8007c34 <__libc_init_array+0x44>)
 8007c04:	f000 f8ae 	bl	8007d64 <_init>
 8007c08:	1b64      	subs	r4, r4, r5
 8007c0a:	10a4      	asrs	r4, r4, #2
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	42a6      	cmp	r6, r4
 8007c10:	d105      	bne.n	8007c1e <__libc_init_array+0x2e>
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
 8007c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c18:	4798      	blx	r3
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	e7ee      	b.n	8007bfc <__libc_init_array+0xc>
 8007c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c22:	4798      	blx	r3
 8007c24:	3601      	adds	r6, #1
 8007c26:	e7f2      	b.n	8007c0e <__libc_init_array+0x1e>
 8007c28:	08007f04 	.word	0x08007f04
 8007c2c:	08007f04 	.word	0x08007f04
 8007c30:	08007f04 	.word	0x08007f04
 8007c34:	08007f08 	.word	0x08007f08

08007c38 <memset>:
 8007c38:	4402      	add	r2, r0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d100      	bne.n	8007c42 <memset+0xa>
 8007c40:	4770      	bx	lr
 8007c42:	f803 1b01 	strb.w	r1, [r3], #1
 8007c46:	e7f9      	b.n	8007c3c <memset+0x4>

08007c48 <_strtol_l.isra.0>:
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4e:	d001      	beq.n	8007c54 <_strtol_l.isra.0+0xc>
 8007c50:	2b24      	cmp	r3, #36	; 0x24
 8007c52:	d906      	bls.n	8007c62 <_strtol_l.isra.0+0x1a>
 8007c54:	f7ff ffc6 	bl	8007be4 <__errno>
 8007c58:	2316      	movs	r3, #22
 8007c5a:	6003      	str	r3, [r0, #0]
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c62:	4f3a      	ldr	r7, [pc, #232]	; (8007d4c <_strtol_l.isra.0+0x104>)
 8007c64:	468e      	mov	lr, r1
 8007c66:	4676      	mov	r6, lr
 8007c68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c6c:	5de5      	ldrb	r5, [r4, r7]
 8007c6e:	f015 0508 	ands.w	r5, r5, #8
 8007c72:	d1f8      	bne.n	8007c66 <_strtol_l.isra.0+0x1e>
 8007c74:	2c2d      	cmp	r4, #45	; 0x2d
 8007c76:	d134      	bne.n	8007ce2 <_strtol_l.isra.0+0x9a>
 8007c78:	f89e 4000 	ldrb.w	r4, [lr]
 8007c7c:	f04f 0801 	mov.w	r8, #1
 8007c80:	f106 0e02 	add.w	lr, r6, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d05c      	beq.n	8007d42 <_strtol_l.isra.0+0xfa>
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	d10c      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007c8c:	2c30      	cmp	r4, #48	; 0x30
 8007c8e:	d10a      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007c90:	f89e 4000 	ldrb.w	r4, [lr]
 8007c94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c98:	2c58      	cmp	r4, #88	; 0x58
 8007c9a:	d14d      	bne.n	8007d38 <_strtol_l.isra.0+0xf0>
 8007c9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f10e 0e02 	add.w	lr, lr, #2
 8007ca6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007caa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cae:	2600      	movs	r6, #0
 8007cb0:	fbbc f9f3 	udiv	r9, ip, r3
 8007cb4:	4635      	mov	r5, r6
 8007cb6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cbe:	2f09      	cmp	r7, #9
 8007cc0:	d818      	bhi.n	8007cf4 <_strtol_l.isra.0+0xac>
 8007cc2:	463c      	mov	r4, r7
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	dd24      	ble.n	8007d12 <_strtol_l.isra.0+0xca>
 8007cc8:	2e00      	cmp	r6, #0
 8007cca:	db1f      	blt.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007ccc:	45a9      	cmp	r9, r5
 8007cce:	d31d      	bcc.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007cd0:	d101      	bne.n	8007cd6 <_strtol_l.isra.0+0x8e>
 8007cd2:	45a2      	cmp	sl, r4
 8007cd4:	db1a      	blt.n	8007d0c <_strtol_l.isra.0+0xc4>
 8007cd6:	fb05 4503 	mla	r5, r5, r3, r4
 8007cda:	2601      	movs	r6, #1
 8007cdc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ce0:	e7eb      	b.n	8007cba <_strtol_l.isra.0+0x72>
 8007ce2:	2c2b      	cmp	r4, #43	; 0x2b
 8007ce4:	bf08      	it	eq
 8007ce6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007cea:	46a8      	mov	r8, r5
 8007cec:	bf08      	it	eq
 8007cee:	f106 0e02 	addeq.w	lr, r6, #2
 8007cf2:	e7c7      	b.n	8007c84 <_strtol_l.isra.0+0x3c>
 8007cf4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007cf8:	2f19      	cmp	r7, #25
 8007cfa:	d801      	bhi.n	8007d00 <_strtol_l.isra.0+0xb8>
 8007cfc:	3c37      	subs	r4, #55	; 0x37
 8007cfe:	e7e1      	b.n	8007cc4 <_strtol_l.isra.0+0x7c>
 8007d00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d04:	2f19      	cmp	r7, #25
 8007d06:	d804      	bhi.n	8007d12 <_strtol_l.isra.0+0xca>
 8007d08:	3c57      	subs	r4, #87	; 0x57
 8007d0a:	e7db      	b.n	8007cc4 <_strtol_l.isra.0+0x7c>
 8007d0c:	f04f 36ff 	mov.w	r6, #4294967295
 8007d10:	e7e4      	b.n	8007cdc <_strtol_l.isra.0+0x94>
 8007d12:	2e00      	cmp	r6, #0
 8007d14:	da05      	bge.n	8007d22 <_strtol_l.isra.0+0xda>
 8007d16:	2322      	movs	r3, #34	; 0x22
 8007d18:	6003      	str	r3, [r0, #0]
 8007d1a:	4665      	mov	r5, ip
 8007d1c:	b942      	cbnz	r2, 8007d30 <_strtol_l.isra.0+0xe8>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	e79d      	b.n	8007c5e <_strtol_l.isra.0+0x16>
 8007d22:	f1b8 0f00 	cmp.w	r8, #0
 8007d26:	d000      	beq.n	8007d2a <_strtol_l.isra.0+0xe2>
 8007d28:	426d      	negs	r5, r5
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d0f7      	beq.n	8007d1e <_strtol_l.isra.0+0xd6>
 8007d2e:	b10e      	cbz	r6, 8007d34 <_strtol_l.isra.0+0xec>
 8007d30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007d34:	6011      	str	r1, [r2, #0]
 8007d36:	e7f2      	b.n	8007d1e <_strtol_l.isra.0+0xd6>
 8007d38:	2430      	movs	r4, #48	; 0x30
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1b3      	bne.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	e7b1      	b.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d42:	2c30      	cmp	r4, #48	; 0x30
 8007d44:	d0a4      	beq.n	8007c90 <_strtol_l.isra.0+0x48>
 8007d46:	230a      	movs	r3, #10
 8007d48:	e7ad      	b.n	8007ca6 <_strtol_l.isra.0+0x5e>
 8007d4a:	bf00      	nop
 8007d4c:	08007df9 	.word	0x08007df9

08007d50 <strtol>:
 8007d50:	4613      	mov	r3, r2
 8007d52:	460a      	mov	r2, r1
 8007d54:	4601      	mov	r1, r0
 8007d56:	4802      	ldr	r0, [pc, #8]	; (8007d60 <strtol+0x10>)
 8007d58:	6800      	ldr	r0, [r0, #0]
 8007d5a:	f7ff bf75 	b.w	8007c48 <_strtol_l.isra.0>
 8007d5e:	bf00      	nop
 8007d60:	20000188 	.word	0x20000188

08007d64 <_init>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr

08007d70 <_fini>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr
