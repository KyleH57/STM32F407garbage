
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b70  08008b70  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08008b70  08008b70  00018b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b78  08008b78  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b7c  08008b7c  00018b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08008b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  20000220  08008da0  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eac  08008da0  00021eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac12  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c03  00000000  00000000  0003ae62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002592a  00000000  00000000  00040d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f80  00000000  00000000  0006662a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7478  00000000  00000000  0007c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153a22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec8  00000000  00000000  00153a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008950 	.word	0x08008950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08008950 	.word	0x08008950

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b0b8      	sub	sp, #224	; 0xe0
 800056c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056e:	f000 ff61 	bl	8001434 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f945 	bl	8000800 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f000 fae5 	bl	8000b44 <MX_GPIO_Init>
	MX_ADC2_Init();
 800057a:	f000 f9ab 	bl	80008d4 <MX_ADC2_Init>
	MX_ADC3_Init();
 800057e:	f000 f9fb 	bl	8000978 <MX_ADC3_Init>
	MX_CAN2_Init();
 8000582:	f000 fa4b 	bl	8000a1c <MX_CAN2_Init>
	MX_SPI1_Init();
 8000586:	f000 fa7d 	bl	8000a84 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 800058a:	f000 fab1 	bl	8000af0 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 800058e:	f006 ffd3 	bl	8007538 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	const uint8_t spStat[3] =
 8000592:	4a8f      	ldr	r2, [pc, #572]	; (80007d0 <main+0x268>)
 8000594:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	4611      	mov	r1, r2
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	3302      	adds	r3, #2
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	701a      	strb	r2, [r3, #0]
	{ 'S', 'P', '\n' };
	const uint8_t onStat[3] =
 80005a4:	4a8b      	ldr	r2, [pc, #556]	; (80007d4 <main+0x26c>)
 80005a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	3302      	adds	r3, #2
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	701a      	strb	r2, [r3, #0]
	{ 'M', '3', '\n' };
	const uint8_t offStat[3] =
 80005b6:	4a88      	ldr	r2, [pc, #544]	; (80007d8 <main+0x270>)
 80005b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	8019      	strh	r1, [r3, #0]
 80005c2:	3302      	adds	r3, #2
 80005c4:	0c12      	lsrs	r2, r2, #16
 80005c6:	701a      	strb	r2, [r3, #0]
	{ 'M', '5', '\n' };
	const uint8_t ssStat[3] =
 80005c8:	4a84      	ldr	r2, [pc, #528]	; (80007dc <main+0x274>)
 80005ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80005ce:	6812      	ldr	r2, [r2, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	8019      	strh	r1, [r3, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	0c12      	lsrs	r2, r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
	{ 'S', 'S', '\n' };
	const uint8_t errorMsg[3] =
 80005da:	4a81      	ldr	r2, [pc, #516]	; (80007e0 <main+0x278>)
 80005dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	4611      	mov	r1, r2
 80005e4:	8019      	strh	r1, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	0c12      	lsrs	r2, r2, #16
 80005ea:	701a      	strb	r2, [r3, #0]
	{ 'E', 'R', '\n' };
	char initTx[] = "11111111111111111111"; //twenty 1s
 80005ec:	4b7d      	ldr	r3, [pc, #500]	; (80007e4 <main+0x27c>)
 80005ee:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005fc:	6020      	str	r0, [r4, #0]
 80005fe:	3404      	adds	r4, #4
 8000600:	7021      	strb	r1, [r4, #0]
	uint8_t *initTxPtr = &initTx;
 8000602:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000606:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	uint8_t CDCtx[50] =
 800060a:	4a77      	ldr	r2, [pc, #476]	; (80007e8 <main+0x280>)
 800060c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000610:	ca07      	ldmia	r2, {r0, r1, r2}
 8000612:	c303      	stmia	r3!, {r0, r1}
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	f107 0375 	add.w	r3, r7, #117	; 0x75
 800061a:	2229      	movs	r2, #41	; 0x29
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fcd2 	bl	8007fc8 <memset>
	{ 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t CDCrx[100];

	CDCrx[0] == 'a';

	char *CDCrxPtr1 = &CDCrx[2];
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	3302      	adds	r3, #2
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	uint32_t x = -99;
 800062e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000632:	607b      	str	r3, [r7, #4]
	int rpm = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 800063a:	e009      	b.n	8000650 <main+0xe8>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS(CDCrx, &x);
 800063c:	1d3a      	adds	r2, r7, #4
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f007 f821 	bl	800768c <CDC_Receive_FS>
		HAL_Delay(10);
 800064a:	200a      	movs	r0, #10
 800064c:	f000 ff64 	bl	8001518 <HAL_Delay>
	while (CDCrx[0] != 'i')
 8000650:	7a3b      	ldrb	r3, [r7, #8]
 8000652:	2b69      	cmp	r3, #105	; 0x69
 8000654:	d1f2      	bne.n	800063c <main+0xd4>
	}
	CDC_Transmit_FS(initTxPtr, 18);
 8000656:	2112      	movs	r1, #18
 8000658:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800065c:	f007 f82a 	bl	80076b4 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Receive_FS(CDCrx, &x);
 8000660:	1d3a      	adds	r2, r7, #4
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f007 f80f 	bl	800768c <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	485e      	ldr	r0, [pc, #376]	; (80007ec <main+0x284>)
 8000674:	f001 fd80 	bl	8002178 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000678:	2028      	movs	r0, #40	; 0x28
 800067a:	f000 ff4d 	bl	8001518 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	485a      	ldr	r0, [pc, #360]	; (80007ec <main+0x284>)
 8000684:	f001 fd78 	bl	8002178 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000688:	2028      	movs	r0, #40	; 0x28
 800068a:	f000 ff45 	bl	8001518 <HAL_Delay>

		int msgFail = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

		if (CDCrx[0] == 'M')
 8000694:	7a3b      	ldrb	r3, [r7, #8]
 8000696:	2b4d      	cmp	r3, #77	; 0x4d
 8000698:	d13e      	bne.n	8000718 <main+0x1b0>
		{
			if (CDCrx[1] == '3')
 800069a:	7a7b      	ldrb	r3, [r7, #9]
 800069c:	2b33      	cmp	r3, #51	; 0x33
 800069e:	d121      	bne.n	80006e4 <main+0x17c>
			{
				int temp133 = spindleFWD(&huart3);
 80006a0:	4853      	ldr	r0, [pc, #332]	; (80007f0 <main+0x288>)
 80006a2:	f000 fbdd 	bl	8000e60 <spindleFWD>
 80006a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
				if (temp133 > 0)
 80006aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	dd0e      	ble.n	80006d0 <main+0x168>
				{
					sprintf(errorMsg, "E%d\n", temp133);
 80006b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80006b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80006ba:	494e      	ldr	r1, [pc, #312]	; (80007f4 <main+0x28c>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f007 fc8b 	bl	8007fd8 <siprintf>
					CDC_Transmit_FS(errorMsg, 3);
 80006c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80006c6:	2103      	movs	r1, #3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f006 fff3 	bl	80076b4 <CDC_Transmit_FS>
 80006ce:	e005      	b.n	80006dc <main+0x174>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 80006d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d4:	2103      	movs	r1, #3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 ffec 	bl	80076b4 <CDC_Transmit_FS>

				}

				HAL_Delay(10);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 ff1b 	bl	8001518 <HAL_Delay>
 80006e2:	e071      	b.n	80007c8 <main+0x260>

			}
			else if (CDCrx[1] == '5')
 80006e4:	7a7b      	ldrb	r3, [r7, #9]
 80006e6:	2b35      	cmp	r3, #53	; 0x35
 80006e8:	d16e      	bne.n	80007c8 <main+0x260>
			{
				if (spindleOff(&huart3) > 0)
 80006ea:	4841      	ldr	r0, [pc, #260]	; (80007f0 <main+0x288>)
 80006ec:	f000 fbe4 	bl	8000eb8 <spindleOff>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dd06      	ble.n	8000704 <main+0x19c>
				{

					CDC_Transmit_FS(errorMsg, 3);
 80006f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80006fa:	2103      	movs	r1, #3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 ffd9 	bl	80076b4 <CDC_Transmit_FS>
 8000702:	e005      	b.n	8000710 <main+0x1a8>
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 8000704:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000708:	2103      	movs	r1, #3
 800070a:	4618      	mov	r0, r3
 800070c:	f006 ffd2 	bl	80076b4 <CDC_Transmit_FS>
				}
				HAL_Delay(10);
 8000710:	200a      	movs	r0, #10
 8000712:	f000 ff01 	bl	8001518 <HAL_Delay>
 8000716:	e057      	b.n	80007c8 <main+0x260>

			}

		}
		else if (CDCrx[0] == 'S')
 8000718:	7a3b      	ldrb	r3, [r7, #8]
 800071a:	2b53      	cmp	r3, #83	; 0x53
 800071c:	d126      	bne.n	800076c <main+0x204>
		{
			HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f000 fefa 	bl	8001518 <HAL_Delay>
			CDCrx[7] = NULL;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
			//rounddown ok
			rpm = atoi(CDCrxPtr1) / 3;
 8000728:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800072c:	f007 fc1e 	bl	8007f6c <atoi>
 8000730:	4603      	mov	r3, r0
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <main+0x290>)
 8000734:	fb82 1203 	smull	r1, r2, r2, r3
 8000738:	17db      	asrs	r3, r3, #31
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

			//if message fails, send error message
			if (setFreq(rpm, &huart3))
 8000740:	492b      	ldr	r1, [pc, #172]	; (80007f0 <main+0x288>)
 8000742:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000746:	f000 fbe3 	bl	8000f10 <setFreq>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d006      	beq.n	800075e <main+0x1f6>
			{
				CDC_Transmit_FS(errorMsg, 3);
 8000750:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000754:	2103      	movs	r1, #3
 8000756:	4618      	mov	r0, r3
 8000758:	f006 ffac 	bl	80076b4 <CDC_Transmit_FS>
 800075c:	e034      	b.n	80007c8 <main+0x260>
			}
			else
			{
				CDC_Transmit_FS(ssStat, 3);
 800075e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f006 ffa5 	bl	80076b4 <CDC_Transmit_FS>
 800076a:	e02d      	b.n	80007c8 <main+0x260>
			}

		}
		else if (CDCrx[0] == 'R')
 800076c:	7a3b      	ldrb	r3, [r7, #8]
 800076e:	2b52      	cmp	r3, #82	; 0x52
 8000770:	d12a      	bne.n	80007c8 <main+0x260>
		{

			uint16_t spindleI = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	807b      	strh	r3, [r7, #2]

			if (readI(&huart3, &spindleI))
 8000776:	1cbb      	adds	r3, r7, #2
 8000778:	4619      	mov	r1, r3
 800077a:	481d      	ldr	r0, [pc, #116]	; (80007f0 <main+0x288>)
 800077c:	f000 fb60 	bl	8000e40 <readI>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d002      	beq.n	800078c <main+0x224>
			{
				//crc check failed
				spindleI = 999;
 8000786:	f240 33e7 	movw	r3, #999	; 0x3e7
 800078a:	807b      	strh	r3, [r7, #2]
			}

			//wait 15ms to give time between reads
			HAL_Delay(15);
 800078c:	200f      	movs	r0, #15
 800078e:	f000 fec3 	bl	8001518 <HAL_Delay>

			uint16_t spindleRPM = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	803b      	strh	r3, [r7, #0]

			if (readRPM(&huart3, &spindleRPM))
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4815      	ldr	r0, [pc, #84]	; (80007f0 <main+0x288>)
 800079c:	f000 fb40 	bl	8000e20 <readRPM>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <main+0x244>
			{
				//crc check failed
				spindleRPM = 44444;
 80007a6:	f64a 539c 	movw	r3, #44444	; 0xad9c
 80007aa:	803b      	strh	r3, [r7, #0]
			}

			//11 bytes long
			sprintf(CDCtx, "R%05d,%03d\n", spindleRPM, spindleI);
 80007ac:	883b      	ldrh	r3, [r7, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	887b      	ldrh	r3, [r7, #2]
 80007b2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80007b6:	4911      	ldr	r1, [pc, #68]	; (80007fc <main+0x294>)
 80007b8:	f007 fc0e 	bl	8007fd8 <siprintf>

			CDC_Transmit_FS(CDCtx, 11);
 80007bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c0:	210b      	movs	r1, #11
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 ff76 	bl	80076b4 <CDC_Transmit_FS>
			//CDC_Transmit_FS(getCheck(), 8);
		}

		//reset buffer
		CDCrx[0] = 'a';
 80007c8:	2361      	movs	r3, #97	; 0x61
 80007ca:	723b      	strb	r3, [r7, #8]
	{
 80007cc:	e748      	b.n	8000660 <main+0xf8>
 80007ce:	bf00      	nop
 80007d0:	0800897c 	.word	0x0800897c
 80007d4:	08008980 	.word	0x08008980
 80007d8:	08008984 	.word	0x08008984
 80007dc:	08008988 	.word	0x08008988
 80007e0:	0800898c 	.word	0x0800898c
 80007e4:	08008990 	.word	0x08008990
 80007e8:	080089a8 	.word	0x080089a8
 80007ec:	40020800 	.word	0x40020800
 80007f0:	2000046c 	.word	0x2000046c
 80007f4:	08008968 	.word	0x08008968
 80007f8:	55555556 	.word	0x55555556
 80007fc:	08008970 	.word	0x08008970

08000800 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f007 fbda 	bl	8007fc8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	4b28      	ldr	r3, [pc, #160]	; (80008cc <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a27      	ldr	r2, [pc, #156]	; (80008cc <SystemClock_Config+0xcc>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b25      	ldr	r3, [pc, #148]	; (80008cc <SystemClock_Config+0xcc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000870:	2308      	movs	r3, #8
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000874:	23a8      	movs	r3, #168	; 0xa8
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fe13 	bl	80034b0 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000890:	f000 f9ee 	bl	8000c70 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2105      	movs	r1, #5
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 f874 	bl	80039a0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80008be:	f000 f9d7 	bl	8000c70 <Error_Handler>
	}
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	; 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_ADC2_Init+0x98>)
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <MX_ADC2_Init+0x9c>)
 80008ea:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_ADC2_Init+0x98>)
 80008ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_ADC2_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_ADC2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ADC2_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_ADC2_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_ADC2_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_ADC2_Init+0x98>)
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <MX_ADC2_Init+0xa0>)
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_ADC2_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_ADC2_Init+0x98>)
 8000922:	2201      	movs	r2, #1
 8000924:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_ADC2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_ADC2_Init+0x98>)
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_ADC2_Init+0x98>)
 8000936:	f000 fe13 	bl	8001560 <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8000940:	f000 f996 	bl	8000c70 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000944:	2301      	movs	r3, #1
 8000946:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_ADC2_Init+0x98>)
 8000956:	f000 fe47 	bl	80015e8 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 8000960:	f000 f986 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200004b0 	.word	0x200004b0
 8000970:	40012100 	.word	0x40012100
 8000974:	0f000001 	.word	0x0f000001

08000978 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_ADC3_Init+0x98>)
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <MX_ADC3_Init+0x9c>)
 800098e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_ADC3_Init+0x98>)
 8000992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000996:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_ADC3_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <MX_ADC3_Init+0xa0>)
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009da:	f000 fdc1 	bl	8001560 <HAL_ADC_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80009e4:	f000 f944 	bl	8000c70 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80009e8:	2303      	movs	r3, #3
 80009ea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_ADC3_Init+0x98>)
 80009fa:	f000 fdf5 	bl	80015e8 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8000a04:	f000 f934 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000520 	.word	0x20000520
 8000a14:	40012200 	.word	0x40012200
 8000a18:	0f000001 	.word	0x0f000001

08000a1c <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <MX_CAN2_Init+0x64>)
 8000a24:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_CAN2_Init+0x60>)
 8000a6a:	f000 ffdb 	bl	8001a24 <HAL_CAN_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8000a74:	f000 f8fc 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200004f8 	.word	0x200004f8
 8000a80:	40006800 	.word	0x40006800

08000a84 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ab4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f003 f95d 	bl	8003d94 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000ae0:	f000 f8c6 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000568 	.word	0x20000568
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000af6:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <MX_USART3_UART_Init+0x50>)
 8000af8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b00:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_USART3_UART_Init+0x4c>)
 8000b28:	f003 f9bd 	bl	8003ea6 <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000b32:	f000 f89d 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000046c 	.word	0x2000046c
 8000b40:	40004800 	.word	0x40004800

08000b44 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a38      	ldr	r2, [pc, #224]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a31      	ldr	r2, [pc, #196]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a2a      	ldr	r2, [pc, #168]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_GPIO_Init+0x11c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_GPIO_Init+0x120>)
 8000bec:	f001 fac4 	bl	8002178 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MX_GPIO_Init+0x124>)
 8000bf6:	f001 fabf 	bl	8002178 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	211f      	movs	r1, #31
 8000bfe:	481b      	ldr	r0, [pc, #108]	; (8000c6c <MX_GPIO_Init+0x128>)
 8000c00:	f001 faba 	bl	8002178 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000c04:	2302      	movs	r3, #2
 8000c06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0x120>)
 8000c1c:	f001 f910 	bl	8001e40 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0x124>)
 8000c38:	f001 f902 	bl	8001e40 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000c3c:	231f      	movs	r3, #31
 8000c3e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_GPIO_Init+0x128>)
 8000c54:	f001 f8f4 	bl	8001e40 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <sendData8>:

uint8_t rx485[50] =
{ 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A' }; //12 bytes

void sendData8(UART_HandleTypeDef *huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

	while(HAL_UART_Receive(huart, rx485, 1, 1) != HAL_TIMEOUT)
 8000c84:	bf00      	nop
 8000c86:	2301      	movs	r3, #1
 8000c88:	2201      	movs	r2, #1
 8000c8a:	490f      	ldr	r1, [pc, #60]	; (8000cc8 <sendData8+0x4c>)
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f003 f9e9 	bl	8004064 <HAL_UART_Receive>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b03      	cmp	r3, #3
 8000c96:	d1f6      	bne.n	8000c86 <sendData8+0xa>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 9600 baud or 1.2KB/s --- 8 bytes takes ~10ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <sendData8+0x50>)
 8000c9e:	f001 fa6b 	bl	8002178 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f000 fc38 	bl	8001518 <HAL_Delay>

	//blocking transmit 15ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 15);
 8000ca8:	230f      	movs	r3, #15
 8000caa:	2208      	movs	r2, #8
 8000cac:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <sendData8+0x54>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f003 f946 	bl	8003f40 <HAL_UART_Transmit>
	//HAL_Delay(5);
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <sendData8+0x50>)
 8000cba:	f001 fa5d 	bl	8002178 <HAL_GPIO_WritePin>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <appendCRC8>:


void appendCRC8()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000cda:	2106      	movs	r1, #6
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <appendCRC8+0x38>)
 8000cde:	f000 f949 	bl	8000f74 <crc_chk_value>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000ce8:	1cbb      	adds	r3, r7, #2
 8000cea:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	781a      	ldrb	r2, [r3, #0]
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <appendCRC8+0x38>)
 8000cf2:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <appendCRC8+0x38>)
 8000d00:	71da      	strb	r2, [r3, #7]
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000

08000d10 <checkEcho8>:
//TODO
//Check to see if we need to receive 10 bytes or not

//returns 1 if fail, 0 if success
int checkEcho8(UART_HandleTypeDef *huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, rx485, 8, 50);
 8000d18:	2332      	movs	r3, #50	; 0x32
 8000d1a:	2208      	movs	r2, #8
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <checkEcho8+0x48>)
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f003 f9a0 	bl	8004064 <HAL_UART_Receive>
	for (int i = 0; i < 8; i++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	e00e      	b.n	8000d48 <checkEcho8+0x38>
	{
		if (wrMsg[i] != rx485[i])
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <checkEcho8+0x4c>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4909      	ldr	r1, [pc, #36]	; (8000d58 <checkEcho8+0x48>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	440b      	add	r3, r1
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d001      	beq.n	8000d42 <checkEcho8+0x32>
		{
			return 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e006      	b.n	8000d50 <checkEcho8+0x40>
	for (int i = 0; i < 8; i++)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	dded      	ble.n	8000d2a <checkEcho8+0x1a>
		}
	}
	return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000

08000d60 <rdStatusValue>:
//	//return rpmData;
//}

//statCode 1 = CRC check failed
int rdStatusValue(UART_HandleTypeDef *huart, uint8_t statusID, uint16_t *data)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	72fb      	strb	r3, [r7, #11]

	wrMsg[0] = 0x01;
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <rdStatusValue+0xb8>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <rdStatusValue+0xb8>)
 8000d76:	2203      	movs	r2, #3
 8000d78:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <rdStatusValue+0xb8>)
 8000d7c:	22d0      	movs	r2, #208	; 0xd0
 8000d7e:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = statusID;
 8000d80:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <rdStatusValue+0xb8>)
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	70d3      	strb	r3, [r2, #3]
	wrMsg[4] = 0x00;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <rdStatusValue+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <rdStatusValue+0xb8>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000d92:	4b21      	ldr	r3, [pc, #132]	; (8000e18 <rdStatusValue+0xb8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <rdStatusValue+0xb8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000d9e:	f7ff ff99 	bl	8000cd4 <appendCRC8>


	sendData8(huart);
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff ff6a 	bl	8000c7c <sendData8>

	//TODO check for rx errors
	//TODO dump buffer
	HAL_UART_Receive(huart, rx485, 7, 200);
 8000da8:	23c8      	movs	r3, #200	; 0xc8
 8000daa:	2207      	movs	r2, #7
 8000dac:	491b      	ldr	r1, [pc, #108]	; (8000e1c <rdStatusValue+0xbc>)
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f003 f958 	bl	8004064 <HAL_UART_Receive>

	uint16_t rxCRC = crc_chk_value(rx485, 5);
 8000db4:	2105      	movs	r1, #5
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <rdStatusValue+0xbc>)
 8000db8:	f000 f8dc 	bl	8000f74 <crc_chk_value>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	82fb      	strh	r3, [r7, #22]

	//kinda sus  R shift LSB????
	uint16_t packetCRC = rx485[6];
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <rdStatusValue+0xbc>)
 8000dc2:	799b      	ldrb	r3, [r3, #6]
 8000dc4:	82bb      	strh	r3, [r7, #20]
	packetCRC <<= 8;
 8000dc6:	8abb      	ldrh	r3, [r7, #20]
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	82bb      	strh	r3, [r7, #20]
	packetCRC |= rx485[5];
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <rdStatusValue+0xbc>)
 8000dce:	795b      	ldrb	r3, [r3, #5]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	8abb      	ldrh	r3, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	82bb      	strh	r3, [r7, #20]

	if (packetCRC != rxCRC)
 8000dd8:	8aba      	ldrh	r2, [r7, #20]
 8000dda:	8afb      	ldrh	r3, [r7, #22]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d001      	beq.n	8000de4 <rdStatusValue+0x84>
	{
		return 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e014      	b.n	8000e0e <rdStatusValue+0xae>
	}


	*data = rx485[3];
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <rdStatusValue+0xbc>)
 8000de6:	78db      	ldrb	r3, [r3, #3]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	801a      	strh	r2, [r3, #0]
	*data <<= 8;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	801a      	strh	r2, [r3, #0]
	*data |= rx485[4];
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <rdStatusValue+0xbc>)
 8000e00:	791b      	ldrb	r3, [r3, #4]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	801a      	strh	r2, [r3, #0]


	return 0;
 8000e0c:	2300      	movs	r3, #0

}   //end of rdStatusValue()
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000008 	.word	0x20000008

08000e20 <readRPM>:
#define VFD_PARAM_CODE_OUTPUT_I   0x01
#define VFD_PARAM_CODE_RPM   0x03


int readRPM(UART_HandleTypeDef *huart, uint16_t *data)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]

	int statCode = rdStatusValue(huart, VFD_PARAM_CODE_RPM, data);
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ff96 	bl	8000d60 <rdStatusValue>
 8000e34:	60f8      	str	r0, [r7, #12]

	return statCode;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <readI>:


int readI(UART_HandleTypeDef *huart, uint16_t *data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]

	int statCode = rdStatusValue(huart, VFD_PARAM_CODE_OUTPUT_I, data);
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff86 	bl	8000d60 <rdStatusValue>
 8000e54:	60f8      	str	r0, [r7, #12]

	return statCode;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <spindleFWD>:



//sends message to turn on spindle, returns 1 if success, 0 if failed
int spindleFWD(UART_HandleTypeDef *huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <spindleFWD+0x54>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <spindleFWD+0x54>)
 8000e70:	2206      	movs	r2, #6
 8000e72:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <spindleFWD+0x54>)
 8000e76:	2210      	movs	r2, #16
 8000e78:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <spindleFWD+0x54>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <spindleFWD+0x54>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <spindleFWD+0x54>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <spindleFWD+0x54>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <spindleFWD+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000e98:	f7ff ff1c 	bl	8000cd4 <appendCRC8>

	sendData8(huart);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff feed 	bl	8000c7c <sendData8>

	return checkEcho8(huart);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff34 	bl	8000d10 <checkEcho8>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <spindleOff>:

int spindleOff(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <spindleOff+0x54>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <spindleOff+0x54>)
 8000ec8:	2206      	movs	r2, #6
 8000eca:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <spindleOff+0x54>)
 8000ece:	2210      	movs	r2, #16
 8000ed0:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <spindleOff+0x54>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <spindleOff+0x54>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <spindleOff+0x54>)
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <spindleOff+0x54>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <spindleOff+0x54>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000ef0:	f7ff fef0 	bl	8000cd4 <appendCRC8>

	sendData8(huart);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fec1 	bl	8000c7c <sendData8>

	return checkEcho8(huart);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff08 	bl	8000d10 <checkEcho8>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000

08000f10 <setFreq>:

int setFreq(uint16_t freq, UART_HandleTypeDef *huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <setFreq+0x60>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <setFreq+0x60>)
 8000f24:	2206      	movs	r2, #6
 8000f26:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <setFreq+0x60>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <setFreq+0x60>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <setFreq+0x60>)
 8000f3e:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <setFreq+0x60>)
 8000f46:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <setFreq+0x60>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <setFreq+0x60>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000f54:	f7ff febe 	bl	8000cd4 <appendCRC8>

	sendData8(huart);
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f7ff fe8f 	bl	8000c7c <sendData8>

	return checkEcho8(huart);
 8000f5e:	6838      	ldr	r0, [r7, #0]
 8000f60:	f7ff fed6 	bl	8000d10 <checkEcho8>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000

08000f74 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f84:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8000f86:	e01f      	b.n	8000fc8 <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	4053      	eors	r3, r2
 8000f96:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e011      	b.n	8000fc2 <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	085b      	lsrs	r3, r3, #1
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <crc_chk_value+0x6c>)
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	81fb      	strh	r3, [r7, #14]
 8000fb4:	e002      	b.n	8000fbc <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	ddea      	ble.n	8000f9e <crc_chk_value+0x2a>
	while (length--)
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	70fa      	strb	r2, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1da      	bne.n	8000f88 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	ffffa001 	.word	0xffffa001

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <HAL_MspInit+0x4c>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_ADC_MspInit+0xd8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d128      	bne.n	80010a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 8001060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a25      	ldr	r2, [pc, #148]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800108e:	2306      	movs	r3, #6
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <HAL_ADC_MspInit+0xe0>)
 80010a2:	f000 fecd 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010a6:	e02c      	b.n	8001102 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_ADC_MspInit+0xe4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0xdc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010ea:	2308      	movs	r3, #8
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_ADC_MspInit+0xe0>)
 80010fe:	f000 fe9f 	bl	8001e40 <HAL_GPIO_Init>
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012100 	.word	0x40012100
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	40012200 	.word	0x40012200

0800111c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <HAL_CAN_MspInit+0xa0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d13a      	bne.n	80011b4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_CAN_MspInit+0xa4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001192:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011a4:	2309      	movs	r3, #9
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_CAN_MspInit+0xa8>)
 80011b0:	f000 fe46 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40006800 	.word	0x40006800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_SPI_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12b      	bne.n	8001242 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_SPI_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_SPI_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_SPI_MspInit+0x88>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23f0      	movs	r3, #240	; 0xf0
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_SPI_MspInit+0x8c>)
 800123e:	f000 fdff 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013000 	.word	0x40013000
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000

08001258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a19      	ldr	r2, [pc, #100]	; (80012dc <HAL_UART_MspInit+0x84>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d12c      	bne.n	80012d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <HAL_UART_MspInit+0x88>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_UART_MspInit+0x88>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_UART_MspInit+0x88>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012c4:	2307      	movs	r3, #7
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_UART_MspInit+0x8c>)
 80012d0:	f000 fdb6 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004800 	.word	0x40004800
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f8d0 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <OTG_FS_IRQHandler+0x10>)
 8001342:	f001 f882 	bl	800244a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20001a94 	.word	0x20001a94

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f006 fdf8 	bl	8007f74 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20020000 	.word	0x20020000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	2000023c 	.word	0x2000023c
 80013b8:	20001eb0 	.word	0x20001eb0

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800140a:	f7ff ffd7 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f006 fdb7 	bl	8007f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff f8a9 	bl	8000568 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001424:	08008b80 	.word	0x08008b80
  ldr r2, =_sbss
 8001428:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 800142c:	20001eac 	.word	0x20001eac

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 fcad 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fdbc 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fcc5 	bl	8001e26 <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 fc8d 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000003c 	.word	0x2000003c
 80014d0:	20000044 	.word	0x20000044
 80014d4:	20000040 	.word	0x20000040

080014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000044 	.word	0x20000044
 80014fc:	200005c0 	.word	0x200005c0

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200005c0 	.word	0x200005c0

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000044 	.word	0x20000044

08001560 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e033      	b.n	80015de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fd58 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	f043 0202 	orr.w	r2, r3, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f93a 	bl	800182c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	f043 0201 	orr.w	r2, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
 80015ce:	e001      	b.n	80015d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1c>
 8001600:	2302      	movs	r3, #2
 8001602:	e105      	b.n	8001810 <HAL_ADC_ConfigChannel+0x228>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b09      	cmp	r3, #9
 8001612:	d925      	bls.n	8001660 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	3b1e      	subs	r3, #30
 800162a:	2207      	movs	r2, #7
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43da      	mvns	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	400a      	ands	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68d9      	ldr	r1, [r3, #12]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	4603      	mov	r3, r0
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4403      	add	r3, r0
 8001652:	3b1e      	subs	r3, #30
 8001654:	409a      	lsls	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	e022      	b.n	80016a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	2207      	movs	r2, #7
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	400a      	ands	r2, r1
 8001682:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6919      	ldr	r1, [r3, #16]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	4603      	mov	r3, r0
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4403      	add	r3, r0
 800169c:	409a      	lsls	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d824      	bhi.n	80016f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b05      	subs	r3, #5
 80016c0:	221f      	movs	r2, #31
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b05      	subs	r3, #5
 80016ea:	fa00 f203 	lsl.w	r2, r0, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
 80016f6:	e04c      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d824      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	3b23      	subs	r3, #35	; 0x23
 8001712:	221f      	movs	r2, #31
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43da      	mvns	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	400a      	ands	r2, r1
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b23      	subs	r3, #35	; 0x23
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
 8001748:	e023      	b.n	8001792 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	3b41      	subs	r3, #65	; 0x41
 800175c:	221f      	movs	r2, #31
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	400a      	ands	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	3b41      	subs	r3, #65	; 0x41
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_ADC_ConfigChannel+0x234>)
 8001794:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a21      	ldr	r2, [pc, #132]	; (8001820 <HAL_ADC_ConfigChannel+0x238>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1cc>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	; (8001820 <HAL_ADC_ConfigChannel+0x238>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d123      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1e6>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b11      	cmp	r3, #17
 80017cc:	d11b      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d111      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_ADC_ConfigChannel+0x23c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_ADC_ConfigChannel+0x240>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	40012000 	.word	0x40012000
 8001824:	2000003c 	.word	0x2000003c
 8001828:	431bde83 	.word	0x431bde83

0800182c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001834:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <ADC_Init+0x1f0>)
 8001836:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	021a      	lsls	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <ADC_Init+0x1f4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d022      	beq.n	800190a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6899      	ldr	r1, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	430a      	orrs	r2, r1
 80018e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e00f      	b.n	800192a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001928:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0202 	bic.w	r2, r2, #2
 8001938:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6899      	ldr	r1, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	005a      	lsls	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001966:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001976:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6859      	ldr	r1, [r3, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
 8001984:	035a      	lsls	r2, r3, #13
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e007      	b.n	80019a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	051a      	lsls	r2, r3, #20
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e2:	025a      	lsls	r2, r3, #9
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6899      	ldr	r1, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	029a      	lsls	r2, r3, #10
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	0f000001 	.word	0x0f000001

08001a24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0ed      	b.n	8001c12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb6a 	bl	800111c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0202 	bic.w	r2, r2, #2
 8001a56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fd52 	bl	8001500 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a5e:	e012      	b.n	8001a86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a60:	f7ff fd4e 	bl	8001500 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b0a      	cmp	r3, #10
 8001a6c:	d90b      	bls.n	8001a86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0c5      	b.n	8001c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e5      	bne.n	8001a60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa4:	f7ff fd2c 	bl	8001500 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aaa:	e012      	b.n	8001ad2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aac:	f7ff fd28 	bl	8001500 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	d90b      	bls.n	8001ad2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2205      	movs	r2, #5
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e09f      	b.n	8001c12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0e5      	beq.n	8001aac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e1b      	ldrb	r3, [r3, #24]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e007      	b.n	8001b0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e5b      	ldrb	r3, [r3, #25]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e9b      	ldrb	r3, [r3, #26]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d108      	bne.n	8001b4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e007      	b.n	8001b5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0220 	bic.w	r2, r2, #32
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7edb      	ldrb	r3, [r3, #27]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d108      	bne.n	8001b78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e007      	b.n	8001b88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0210 	orr.w	r2, r2, #16
 8001b86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7f1b      	ldrb	r3, [r3, #28]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d108      	bne.n	8001ba2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0208 	orr.w	r2, r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e007      	b.n	8001bb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0208 	bic.w	r2, r2, #8
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7f5b      	ldrb	r3, [r3, #29]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0204 	orr.w	r2, r2, #4
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e007      	b.n	8001bdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0204 	bic.w	r2, r2, #4
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e16b      	b.n	8002134 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 815a 	bne.w	800212e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80b4 	beq.w	800212e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b60      	ldr	r3, [pc, #384]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a5f      	ldr	r2, [pc, #380]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_GPIO_Init+0x30c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	; (8002150 <HAL_GPIO_Init+0x310>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_GPIO_Init+0x314>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <HAL_GPIO_Init+0x226>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_GPIO_Init+0x318>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d025      	beq.n	8002062 <HAL_GPIO_Init+0x222>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_GPIO_Init+0x31c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <HAL_GPIO_Init+0x21e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	; (8002160 <HAL_GPIO_Init+0x320>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x21a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <HAL_GPIO_Init+0x324>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x216>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4d      	ldr	r2, [pc, #308]	; (8002168 <HAL_GPIO_Init+0x328>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x212>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4c      	ldr	r2, [pc, #304]	; (800216c <HAL_GPIO_Init+0x32c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x20e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_GPIO_Init+0x330>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x20a>
 8002046:	2307      	movs	r3, #7
 8002048:	e00e      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800204a:	2308      	movs	r3, #8
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800204e:	2306      	movs	r3, #6
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x228>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x228>
 8002066:	2300      	movs	r3, #0
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <HAL_GPIO_Init+0x310>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x334>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x334>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_GPIO_Init+0x334>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f67f ae90 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40021400 	.word	0x40021400
 800216c:	40021800 	.word	0x40021800
 8002170:	40021c00 	.word	0x40021c00
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ac:	b08f      	sub	sp, #60	; 0x3c
 80021ae:	af0a      	add	r7, sp, #40	; 0x28
 80021b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e10f      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f005 fbb4 	bl	8007944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fafb 	bl	80047f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	687e      	ldr	r6, [r7, #4]
 8002208:	466d      	mov	r5, sp
 800220a:	f106 0410 	add.w	r4, r6, #16
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221a:	e885 0003 	stmia.w	r5, {r0, r1}
 800221e:	1d33      	adds	r3, r6, #4
 8002220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	f002 f9d2 	bl	80045cc <USB_CoreInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0d0      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fae9 	bl	8004818 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e04a      	b.n	80022e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	333d      	adds	r3, #61	; 0x3d
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	333c      	adds	r3, #60	; 0x3c
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	b298      	uxth	r0, r3
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	3342      	adds	r3, #66	; 0x42
 8002288:	4602      	mov	r2, r0
 800228a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	333f      	adds	r3, #63	; 0x3f
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3344      	adds	r3, #68	; 0x44
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3348      	adds	r3, #72	; 0x48
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	3350      	adds	r3, #80	; 0x50
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	3301      	adds	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d3af      	bcc.n	800224c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e044      	b.n	800237c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	3301      	adds	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d3b5      	bcc.n	80022f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	687e      	ldr	r6, [r7, #4]
 800238e:	466d      	mov	r5, sp
 8002390:	f106 0410 	add.w	r4, r6, #16
 8002394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a4:	1d33      	adds	r3, r6, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	f002 fa5f 	bl	800486c <USB_DevInit>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e00d      	b.n	80023dc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f003 faa7 	bl	8005928 <USB_DevDisconnect>

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_Start+0x1c>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e020      	b.n	8002442 <HAL_PCD_Start+0x5e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	2b01      	cmp	r3, #1
 800240e:	d109      	bne.n	8002424 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 f9d3 	bl	80047d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fa57 	bl	80058e6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800244a:	b590      	push	{r4, r7, lr}
 800244c:	b08d      	sub	sp, #52	; 0x34
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fb15 	bl	8005a90 <USB_GetMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 839d 	bne.w	8002ba8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fa79 	bl	800596a <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8393 	beq.w	8002ba6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fa70 	bl	800596a <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	d107      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f002 0202 	and.w	r2, r2, #2
 80024a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 fa5e 	bl	800596a <USB_ReadInterrupts>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d161      	bne.n	800257c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0210 	bic.w	r2, r2, #16
 80024c6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	f003 020f 	and.w	r2, r3, #15
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	0c5b      	lsrs	r3, r3, #17
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d124      	bne.n	800253e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d035      	beq.n	800256c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800250a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6a38      	ldr	r0, [r7, #32]
 8002514:	f003 f8c4 	bl	80056a0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	091b      	lsrs	r3, r3, #4
 8002520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002524:	441a      	add	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002536:	441a      	add	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	e016      	b.n	800256c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	0c5b      	lsrs	r3, r3, #17
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	2b06      	cmp	r3, #6
 8002548:	d110      	bne.n	800256c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002550:	2208      	movs	r2, #8
 8002552:	4619      	mov	r1, r3
 8002554:	6a38      	ldr	r0, [r7, #32]
 8002556:	f003 f8a3 	bl	80056a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002566:	441a      	add	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0210 	orr.w	r2, r2, #16
 800257a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 f9f2 	bl	800596a <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002590:	d16e      	bne.n	8002670 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f9f8 	bl	8005990 <USB_ReadDevAllOutEpInterrupt>
 80025a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025a2:	e062      	b.n	800266a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d057      	beq.n	800265e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fa1d 	bl	80059f8 <USB_ReadDevOutEPInterrupt>
 80025be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2301      	movs	r3, #1
 80025da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fdb0 	bl	8003144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fa:	461a      	mov	r2, r3
 80025fc:	2308      	movs	r3, #8
 80025fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 feaa 	bl	800335c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800261e:	461a      	mov	r2, r3
 8002620:	2310      	movs	r3, #16
 8002622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800263a:	461a      	mov	r2, r3
 800263c:	2320      	movs	r3, #32
 800263e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	3301      	adds	r3, #1
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	085b      	lsrs	r3, r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	2b00      	cmp	r3, #0
 800266e:	d199      	bne.n	80025a4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 f978 	bl	800596a <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002684:	f040 80c0 	bne.w	8002808 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f999 	bl	80059c4 <USB_ReadDevAllInEpInterrupt>
 8002692:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002698:	e0b2      	b.n	8002800 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a7 	beq.w	80027f4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 f9bf 	bl	8005a34 <USB_ReadDevInEPInterrupt>
 80026b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d057      	beq.n	8002772 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	2201      	movs	r2, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69f9      	ldr	r1, [r7, #28]
 80026de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026e2:	4013      	ands	r3, r2
 80026e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f2:	461a      	mov	r2, r3
 80026f4:	2301      	movs	r3, #1
 80026f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d132      	bne.n	8002766 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3348      	adds	r3, #72	; 0x48
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4403      	add	r3, r0
 8002720:	3344      	adds	r3, #68	; 0x44
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4419      	add	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4403      	add	r3, r0
 8002734:	3348      	adds	r3, #72	; 0x48
 8002736:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	2b00      	cmp	r3, #0
 800273c:	d113      	bne.n	8002766 <HAL_PCD_IRQHandler+0x31c>
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3350      	adds	r3, #80	; 0x50
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d108      	bne.n	8002766 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800275e:	461a      	mov	r2, r3
 8002760:	2101      	movs	r1, #1
 8002762:	f003 f9c7 	bl	8005af4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f005 f96a 	bl	8007a46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002788:	461a      	mov	r2, r3
 800278a:	2308      	movs	r3, #8
 800278c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a4:	461a      	mov	r2, r3
 80027a6:	2310      	movs	r3, #16
 80027a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c0:	461a      	mov	r2, r3
 80027c2:	2340      	movs	r3, #64	; 0x40
 80027c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027dc:	461a      	mov	r2, r3
 80027de:	2302      	movs	r3, #2
 80027e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fc1b 	bl	800302a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	3301      	adds	r3, #1
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	085b      	lsrs	r3, r3, #1
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	2b00      	cmp	r3, #0
 8002804:	f47f af49 	bne.w	800269a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f003 f8ac 	bl	800596a <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281c:	d122      	bne.n	8002864 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002844:	2100      	movs	r1, #0
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fe26 	bl	8003498 <HAL_PCDEx_LPM_Callback>
 800284c:	e002      	b.n	8002854 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f005 f970 	bl	8007b34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 f87e 	bl	800596a <USB_ReadInterrupts>
 800286e:	4603      	mov	r3, r0
 8002870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002878:	d112      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d102      	bne.n	8002890 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f005 f92c 	bl	8007ae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800289e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f860 	bl	800596a <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b4:	f040 80c7 	bne.w	8002a46 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2110      	movs	r1, #16
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 f92e 	bl	8004b34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	2300      	movs	r3, #0
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028dc:	e056      	b.n	800298c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ea:	461a      	mov	r2, r3
 80028ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002902:	0151      	lsls	r1, r2, #5
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	440a      	add	r2, r1
 8002908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800290c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002910:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002922:	0151      	lsls	r1, r2, #5
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	440a      	add	r2, r1
 8002928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800292c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002930:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002944:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	440a      	add	r2, r1
 800295c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002976:	0151      	lsls	r1, r2, #5
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	440a      	add	r2, r1
 800297c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002980:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002984:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	3301      	adds	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002992:	429a      	cmp	r2, r3
 8002994:	d3a3      	bcc.n	80028de <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c2:	f043 030b 	orr.w	r3, r3, #11
 80029c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d8:	f043 030b 	orr.w	r3, r3, #11
 80029dc:	6453      	str	r3, [r2, #68]	; 0x44
 80029de:	e015      	b.n	8002a0c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a06:	f043 030b 	orr.w	r3, r3, #11
 8002a0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a30:	461a      	mov	r2, r3
 8002a32:	f003 f85f 	bl	8005af4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f002 ff8d 	bl	800596a <USB_ReadInterrupts>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	d124      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 f823 	bl	8005aac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 f8c3 	bl	8004bf6 <USB_GetDevSpeed>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681c      	ldr	r4, [r3, #0]
 8002a7c:	f001 f956 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8002a80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f001 fe00 	bl	8004690 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f005 f800 	bl	8007a96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 ff5d 	bl	800596a <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f004 ffdd 	bl	8007a7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f002 0208 	and.w	r2, r2, #8
 8002ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 ff48 	bl	800596a <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae4:	d10f      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f005 f83f 	bl	8007b74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 ff2d 	bl	800596a <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1a:	d10f      	bne.n	8002b3c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4619      	mov	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f005 f812 	bl	8007b50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 ff12 	bl	800596a <USB_ReadInterrupts>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d10a      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f005 f820 	bl	8007b98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 fefc 	bl	800596a <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d115      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f005 f810 	bl	8007bb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	e000      	b.n	8002ba8 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ba6:	bf00      	nop
    }
  }
}
 8002ba8:	3734      	adds	r7, #52	; 0x34
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}

08002bae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_PCD_SetAddress+0x1a>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e013      	b.n	8002bf0 <HAL_PCD_SetAddress+0x42>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 fe5a 	bl	800589a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	70fb      	strb	r3, [r7, #3]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	803b      	strh	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da0f      	bge.n	8002c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3338      	adds	r3, #56	; 0x38
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	705a      	strb	r2, [r3, #1]
 8002c3c:	e00f      	b.n	8002c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c6a:	883a      	ldrh	r2, [r7, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	78ba      	ldrb	r2, [r7, #2]
 8002c74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c88:	78bb      	ldrb	r3, [r7, #2]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d102      	bne.n	8002c94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_PCD_EP_Open+0xaa>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e00e      	b.n	8002cc0 <HAL_PCD_EP_Open+0xc8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 ffc5 	bl	8004c40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da0f      	bge.n	8002cfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3338      	adds	r3, #56	; 0x38
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	705a      	strb	r2, [r3, #1]
 8002cfa:	e00f      	b.n	8002d1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_PCD_EP_Close+0x6e>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e00e      	b.n	8002d54 <HAL_PCD_EP_Close+0x8c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 f803 	bl	8004d50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	f002 fade 	bl	8005390 <USB_EP0StartXfer>
 8002dd4:	e008      	b.n	8002de8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	6979      	ldr	r1, [r7, #20]
 8002de4:	f002 f890 	bl	8004f08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	f003 020f 	and.w	r2, r3, #15
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e14:	681b      	ldr	r3, [r3, #0]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	4613      	mov	r3, r2
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	3338      	adds	r3, #56	; 0x38
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	f002 fa7c 	bl	8005390 <USB_EP0StartXfer>
 8002e98:	e008      	b.n	8002eac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	f002 f82e 	bl	8004f08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d901      	bls.n	8002ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e050      	b.n	8002f76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da0f      	bge.n	8002efc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3338      	adds	r3, #56	; 0x38
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	705a      	strb	r2, [r3, #1]
 8002efa:	e00d      	b.n	8002f18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_PCD_EP_SetStall+0x82>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e01e      	b.n	8002f76 <HAL_PCD_EP_SetStall+0xc0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fbd3 	bl	80056f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	b2d9      	uxtb	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f66:	461a      	mov	r2, r3
 8002f68:	f002 fdc4 	bl	8005af4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b084      	sub	sp, #16
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d901      	bls.n	8002f9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e042      	b.n	8003022 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da0f      	bge.n	8002fc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	3338      	adds	r3, #56	; 0x38
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	705a      	strb	r2, [r3, #1]
 8002fc2:	e00f      	b.n	8002fe4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	f003 020f 	and.w	r2, r3, #15
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	3304      	adds	r3, #4
 8002fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_PCD_EP_ClrStall+0x86>
 8003000:	2302      	movs	r3, #2
 8003002:	e00e      	b.n	8003022 <HAL_PCD_EP_ClrStall+0xa4>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 fbdb 	bl	80057ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af02      	add	r7, sp, #8
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	3338      	adds	r3, #56	; 0x38
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	3304      	adds	r3, #4
 8003050:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	429a      	cmp	r2, r3
 800305c:	d901      	bls.n	8003062 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06c      	b.n	800313c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	429a      	cmp	r2, r3
 8003076:	d902      	bls.n	800307e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3303      	adds	r3, #3
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003086:	e02b      	b.n	80030e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	d902      	bls.n	80030a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3303      	adds	r3, #3
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4603      	mov	r3, r0
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f002 fab7 	bl	8005636 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	441a      	add	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d809      	bhi.n	800310a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030fe:	429a      	cmp	r2, r3
 8003100:	d203      	bcs.n	800310a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1be      	bne.n	8003088 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	429a      	cmp	r2, r3
 8003114:	d811      	bhi.n	800313a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2201      	movs	r2, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	43db      	mvns	r3, r3
 8003130:	6939      	ldr	r1, [r7, #16]
 8003132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003136:	4013      	ands	r3, r2
 8003138:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	333c      	adds	r3, #60	; 0x3c
 800315c:	3304      	adds	r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 80a0 	bne.w	80032bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d015      	beq.n	80031b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a72      	ldr	r2, [pc, #456]	; (8003354 <PCD_EP_OutXfrComplete_int+0x210>)
 800318a:	4293      	cmp	r3, r2
 800318c:	f240 80dd 	bls.w	800334a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80d7 	beq.w	800334a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	461a      	mov	r2, r3
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	6093      	str	r3, [r2, #8]
 80031b0:	e0cb      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	2320      	movs	r3, #32
 80031cc:	6093      	str	r3, [r2, #8]
 80031ce:	e0bc      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80b7 	bne.w	800334a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <PCD_EP_OutXfrComplete_int+0x210>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d90f      	bls.n	8003204 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fa:	461a      	mov	r2, r3
 80031fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003200:	6093      	str	r3, [r2, #8]
 8003202:	e0a2      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003216:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	440b      	add	r3, r1
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800322a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4403      	add	r3, r0
 800323a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800323e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003252:	6819      	ldr	r1, [r3, #0]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4403      	add	r3, r0
 8003262:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4419      	add	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4403      	add	r3, r0
 8003278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800327c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d114      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x16a>
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032a6:	461a      	mov	r2, r3
 80032a8:	2101      	movs	r1, #1
 80032aa:	f002 fc23 	bl	8005af4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 fbab 	bl	8007a10 <HAL_PCD_DataOutStageCallback>
 80032ba:	e046      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <PCD_EP_OutXfrComplete_int+0x214>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d124      	bne.n	800330e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e0:	6093      	str	r3, [r2, #8]
 80032e2:	e032      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	461a      	mov	r2, r3
 80032fc:	2320      	movs	r3, #32
 80032fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f004 fb82 	bl	8007a10 <HAL_PCD_DataOutStageCallback>
 800330c:	e01d      	b.n	800334a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d114      	bne.n	800333e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d108      	bne.n	800333e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003336:	461a      	mov	r2, r3
 8003338:	2100      	movs	r1, #0
 800333a:	f002 fbdb 	bl	8005af4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f004 fb63 	bl	8007a10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	4f54300a 	.word	0x4f54300a
 8003358:	4f54310a 	.word	0x4f54310a

0800335c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	333c      	adds	r3, #60	; 0x3c
 8003374:	3304      	adds	r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d90e      	bls.n	80033b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a8:	461a      	mov	r2, r3
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f004 fb1b 	bl	80079ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d90c      	bls.n	80033d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d108      	bne.n	80033d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d0:	461a      	mov	r2, r3
 80033d2:	2101      	movs	r1, #1
 80033d4:	f002 fb8e 	bl	8005af4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	4f54300a 	.word	0x4f54300a

080033e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
 80033f4:	4613      	mov	r3, r2
 80033f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003406:	883b      	ldrh	r3, [r7, #0]
 8003408:	0419      	lsls	r1, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	430a      	orrs	r2, r1
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
 8003414:	e028      	b.n	8003468 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4413      	add	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003424:	2300      	movs	r3, #0
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	e00d      	b.n	8003446 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	3340      	adds	r3, #64	; 0x40
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3301      	adds	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	3b01      	subs	r3, #1
 800344c:	429a      	cmp	r2, r3
 800344e:	d3ec      	bcc.n	800342a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003450:	883b      	ldrh	r3, [r7, #0]
 8003452:	0418      	lsls	r0, r3, #16
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	3b01      	subs	r3, #1
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	4302      	orrs	r2, r0
 8003460:	3340      	adds	r3, #64	; 0x40
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e264      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d075      	beq.n	80035ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	4ba3      	ldr	r3, [pc, #652]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b9d      	ldr	r3, [pc, #628]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x108>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d157      	bne.n	80035b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e23f      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x74>
 8003516:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a90      	ldr	r2, [pc, #576]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a8a      	ldr	r2, [pc, #552]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a87      	ldr	r2, [pc, #540]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a83      	ldr	r2, [pc, #524]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a80      	ldr	r2, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd ffca 	bl	8001500 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fd ffc6 	bl	8001500 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e204      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xc0>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fd ffb6 	bl	8001500 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7fd ffb2 	bl	8001500 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1f0      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0xe8>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b62      	ldr	r3, [pc, #392]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b5c      	ldr	r3, [pc, #368]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1c4      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b56      	ldr	r3, [pc, #344]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4952      	ldr	r1, [pc, #328]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd ff6b 	bl	8001500 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7fd ff67 	bl	8001500 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e1a5      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4940      	ldr	r1, [pc, #256]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd ff4a 	bl	8001500 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7fd ff46 	bl	8001500 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e184      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d030      	beq.n	80036fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd ff2a 	bl	8001500 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fd ff26 	bl	8001500 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e164      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x200>
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fd ff13 	bl	8001500 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036de:	f7fd ff0f 	bl	8001500 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e14d      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a0 	beq.w	800384a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fd fed5 	bl	8001500 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e011      	b.n	800377e <HAL_RCC_OscConfig+0x2ce>
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
 8003768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fec8 	bl	8001500 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e106      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCC_OscConfig+0x4e4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
 8003792:	4b81      	ldr	r3, [pc, #516]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037a8:	4b7b      	ldr	r3, [pc, #492]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b78      	ldr	r3, [pc, #480]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037c2:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b72      	ldr	r3, [pc, #456]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a71      	ldr	r2, [pc, #452]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fd fe8d 	bl	8001500 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd fe89 	bl	8001500 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0c5      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b65      	ldr	r3, [pc, #404]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x33a>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7fd fe77 	bl	8001500 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fd fe73 	bl	8001500 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0af      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b5a      	ldr	r3, [pc, #360]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a55      	ldr	r2, [pc, #340]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 809b 	beq.w	800398a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d05c      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d141      	bne.n	80038ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fe47 	bl	8001500 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7fd fe43 	bl	8001500 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e081      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	4937      	ldr	r1, [pc, #220]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fe1c 	bl	8001500 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd fe18 	bl	8001500 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e056      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b2e      	ldr	r3, [pc, #184]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x41c>
 80038ea:	e04e      	b.n	800398a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b2b      	ldr	r3, [pc, #172]	; (800399c <HAL_RCC_OscConfig+0x4ec>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fd fe05 	bl	8001500 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd fe01 	bl	8001500 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e03f      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x44a>
 8003918:	e037      	b.n	800398a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e032      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_RCC_OscConfig+0x4e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d028      	beq.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d121      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d11a      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d107      	bne.n	8003986 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40007000 	.word	0x40007000
 8003998:	40023800 	.word	0x40023800
 800399c:	42470060 	.word	0x42470060

080039a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0cc      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d90c      	bls.n	80039dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d044      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d119      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e06f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e067      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4934      	ldr	r1, [pc, #208]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a90:	f7fd fd36 	bl	8001500 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7fd fd32 	bl	8001500 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e04f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d20c      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	; (8003b60 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fc96 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	08008a24 	.word	0x08008a24
 8003b64:	2000003c 	.word	0x2000003c
 8003b68:	20000040 	.word	0x20000040

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b84:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d00d      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x40>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	f200 80bd 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9e:	e0b7      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ba2:	60bb      	str	r3, [r7, #8]
       break;
 8003ba4:	e0b7      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba6:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ba8:	60bb      	str	r3, [r7, #8]
      break;
 8003baa:	e0b4      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bac:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d04d      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	ea02 0800 	and.w	r8, r2, r0
 8003bda:	ea03 0901 	and.w	r9, r3, r1
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	014b      	lsls	r3, r1, #5
 8003bec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bf0:	0142      	lsls	r2, r0, #5
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	ebb0 0008 	subs.w	r0, r0, r8
 8003bfa:	eb61 0109 	sbc.w	r1, r1, r9
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c0c:	0182      	lsls	r2, r0, #6
 8003c0e:	1a12      	subs	r2, r2, r0
 8003c10:	eb63 0301 	sbc.w	r3, r3, r1
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	00d9      	lsls	r1, r3, #3
 8003c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c22:	00d0      	lsls	r0, r2, #3
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	eb12 0208 	adds.w	r2, r2, r8
 8003c2c:	eb43 0309 	adc.w	r3, r3, r9
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	f04f 0100 	mov.w	r1, #0
 8003c38:	0299      	lsls	r1, r3, #10
 8003c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c3e:	0290      	lsls	r0, r2, #10
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	f7fc fb0e 	bl	8000270 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e04a      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	099b      	lsrs	r3, r3, #6
 8003c64:	461a      	mov	r2, r3
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c6e:	f04f 0100 	mov.w	r1, #0
 8003c72:	ea02 0400 	and.w	r4, r2, r0
 8003c76:	ea03 0501 	and.w	r5, r3, r1
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	014b      	lsls	r3, r1, #5
 8003c88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c8c:	0142      	lsls	r2, r0, #5
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	1b00      	subs	r0, r0, r4
 8003c94:	eb61 0105 	sbc.w	r1, r1, r5
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ca6:	0182      	lsls	r2, r0, #6
 8003ca8:	1a12      	subs	r2, r2, r0
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	1912      	adds	r2, r2, r4
 8003cc4:	eb45 0303 	adc.w	r3, r5, r3
 8003cc8:	f04f 0000 	mov.w	r0, #0
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	0299      	lsls	r1, r3, #10
 8003cd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cd6:	0290      	lsls	r0, r2, #10
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	f7fc fac2 	bl	8000270 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	60bb      	str	r3, [r7, #8]
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d12:	60bb      	str	r3, [r7, #8]
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	68bb      	ldr	r3, [r7, #8]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000003c 	.word	0x2000003c

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d48:	f7ff fff0 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0a9b      	lsrs	r3, r3, #10
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	08008a34 	.word	0x08008a34

08003d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d70:	f7ff ffdc 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0b5b      	lsrs	r3, r3, #13
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	08008a34 	.word	0x08008a34

08003d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07b      	b.n	8003e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d009      	beq.n	8003dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
 8003dbe:	e005      	b.n	8003dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f9ee 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0104 	and.w	r1, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0210 	and.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e03f      	b.n	8003f38 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fd f9c3 	bl	8001258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9a6 	bl	800423c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003efe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d17c      	bne.n	800405a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Transmit+0x2c>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e075      	b.n	800405c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x3e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e06e      	b.n	800405c <HAL_UART_Transmit+0x11c>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2221      	movs	r2, #33	; 0x21
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f94:	f7fd fab4 	bl	8001500 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d108      	bne.n	8003fc2 <HAL_UART_Transmit+0x82>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e003      	b.n	8003fca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd2:	e02a      	b.n	800402a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2180      	movs	r1, #128	; 0x80
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f8e2 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e036      	b.n	800405c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004002:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	3302      	adds	r3, #2
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e007      	b.n	800401c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	781a      	ldrb	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3301      	adds	r3, #1
 800401a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1cf      	bne.n	8003fd4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2200      	movs	r2, #0
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f8b2 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e006      	b.n	800405c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 808c 	bne.w	800419e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_Receive+0x2e>
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e084      	b.n	80041a0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Receive+0x40>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e07d      	b.n	80041a0 <HAL_UART_Receive+0x13c>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2222      	movs	r2, #34	; 0x22
 80040b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c0:	f7fd fa1e 	bl	8001500 <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d108      	bne.n	80040ee <HAL_UART_Receive+0x8a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	e003      	b.n	80040f6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040fe:	e043      	b.n	8004188 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2200      	movs	r2, #0
 8004108:	2120      	movs	r1, #32
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f84c 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e042      	b.n	80041a0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412c:	b29a      	uxth	r2, r3
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3302      	adds	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e01f      	b.n	800417a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004142:	d007      	beq.n	8004154 <HAL_UART_Receive+0xf0>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_UART_Receive+0xfe>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d106      	bne.n	8004162 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e008      	b.n	8004174 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800416e:	b2da      	uxtb	r2, r3
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1b6      	bne.n	8004100 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	e02c      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d028      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c8:	f7fd f99a 	bl	8001500 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d21d      	bcs.n	8004214 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e00f      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	429a      	cmp	r2, r3
 8004230:	d0c3      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004240:	b09f      	sub	sp, #124	; 0x7c
 8004242:	af00      	add	r7, sp, #0
 8004244:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	ea40 0301 	orr.w	r3, r0, r1
 800425c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	431a      	orrs	r2, r3
 8004268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	431a      	orrs	r2, r3
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004280:	f021 010c 	bic.w	r1, r1, #12
 8004284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800428a:	430b      	orrs	r3, r1
 800428c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800428e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	6999      	ldr	r1, [r3, #24]
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	ea40 0301 	orr.w	r3, r0, r1
 80042a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4bc5      	ldr	r3, [pc, #788]	; (80045c0 <UART_SetConfig+0x384>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d004      	beq.n	80042ba <UART_SetConfig+0x7e>
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4bc3      	ldr	r3, [pc, #780]	; (80045c4 <UART_SetConfig+0x388>)
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d103      	bne.n	80042c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ba:	f7ff fd57 	bl	8003d6c <HAL_RCC_GetPCLK2Freq>
 80042be:	6778      	str	r0, [r7, #116]	; 0x74
 80042c0:	e002      	b.n	80042c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042c2:	f7ff fd3f 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 80042c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d0:	f040 80b6 	bne.w	8004440 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042d6:	461c      	mov	r4, r3
 80042d8:	f04f 0500 	mov.w	r5, #0
 80042dc:	4622      	mov	r2, r4
 80042de:	462b      	mov	r3, r5
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	6439      	str	r1, [r7, #64]	; 0x40
 80042e4:	415b      	adcs	r3, r3
 80042e6:	647b      	str	r3, [r7, #68]	; 0x44
 80042e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ec:	1912      	adds	r2, r2, r4
 80042ee:	eb45 0303 	adc.w	r3, r5, r3
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	00d9      	lsls	r1, r3, #3
 80042fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004300:	00d0      	lsls	r0, r2, #3
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	1911      	adds	r1, r2, r4
 8004308:	6639      	str	r1, [r7, #96]	; 0x60
 800430a:	416b      	adcs	r3, r5
 800430c:	667b      	str	r3, [r7, #100]	; 0x64
 800430e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	1891      	adds	r1, r2, r2
 800431a:	63b9      	str	r1, [r7, #56]	; 0x38
 800431c:	415b      	adcs	r3, r3
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004324:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004328:	f7fb ffa2 	bl	8000270 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4ba5      	ldr	r3, [pc, #660]	; (80045c8 <UART_SetConfig+0x38c>)
 8004332:	fba3 2302 	umull	r2, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	011e      	lsls	r6, r3, #4
 800433a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433c:	461c      	mov	r4, r3
 800433e:	f04f 0500 	mov.w	r5, #0
 8004342:	4622      	mov	r2, r4
 8004344:	462b      	mov	r3, r5
 8004346:	1891      	adds	r1, r2, r2
 8004348:	6339      	str	r1, [r7, #48]	; 0x30
 800434a:	415b      	adcs	r3, r3
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
 800434e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004352:	1912      	adds	r2, r2, r4
 8004354:	eb45 0303 	adc.w	r3, r5, r3
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	00d9      	lsls	r1, r3, #3
 8004362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004366:	00d0      	lsls	r0, r2, #3
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	1911      	adds	r1, r2, r4
 800436e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004370:	416b      	adcs	r3, r5
 8004372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	461a      	mov	r2, r3
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	1891      	adds	r1, r2, r2
 8004380:	62b9      	str	r1, [r7, #40]	; 0x28
 8004382:	415b      	adcs	r3, r3
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004386:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800438a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800438e:	f7fb ff6f 	bl	8000270 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b8c      	ldr	r3, [pc, #560]	; (80045c8 <UART_SetConfig+0x38c>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	; 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	3332      	adds	r3, #50	; 0x32
 80043aa:	4a87      	ldr	r2, [pc, #540]	; (80045c8 <UART_SetConfig+0x38c>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043b8:	441e      	add	r6, r3
 80043ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043bc:	4618      	mov	r0, r3
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	1894      	adds	r4, r2, r2
 80043c8:	623c      	str	r4, [r7, #32]
 80043ca:	415b      	adcs	r3, r3
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043d2:	1812      	adds	r2, r2, r0
 80043d4:	eb41 0303 	adc.w	r3, r1, r3
 80043d8:	f04f 0400 	mov.w	r4, #0
 80043dc:	f04f 0500 	mov.w	r5, #0
 80043e0:	00dd      	lsls	r5, r3, #3
 80043e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043e6:	00d4      	lsls	r4, r2, #3
 80043e8:	4622      	mov	r2, r4
 80043ea:	462b      	mov	r3, r5
 80043ec:	1814      	adds	r4, r2, r0
 80043ee:	653c      	str	r4, [r7, #80]	; 0x50
 80043f0:	414b      	adcs	r3, r1
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	1891      	adds	r1, r2, r2
 8004400:	61b9      	str	r1, [r7, #24]
 8004402:	415b      	adcs	r3, r3
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800440e:	f7fb ff2f 	bl	8000270 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <UART_SetConfig+0x38c>)
 8004418:	fba3 1302 	umull	r1, r3, r3, r2
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	2164      	movs	r1, #100	; 0x64
 8004420:	fb01 f303 	mul.w	r3, r1, r3
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	3332      	adds	r3, #50	; 0x32
 800442a:	4a67      	ldr	r2, [pc, #412]	; (80045c8 <UART_SetConfig+0x38c>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	095b      	lsrs	r3, r3, #5
 8004432:	f003 0207 	and.w	r2, r3, #7
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4432      	add	r2, r6
 800443c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800443e:	e0b9      	b.n	80045b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004442:	461c      	mov	r4, r3
 8004444:	f04f 0500 	mov.w	r5, #0
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1891      	adds	r1, r2, r2
 800444e:	6139      	str	r1, [r7, #16]
 8004450:	415b      	adcs	r3, r3
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004458:	1912      	adds	r2, r2, r4
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f04f 0000 	mov.w	r0, #0
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	00d9      	lsls	r1, r3, #3
 8004468:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800446c:	00d0      	lsls	r0, r2, #3
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	eb12 0804 	adds.w	r8, r2, r4
 8004476:	eb43 0905 	adc.w	r9, r3, r5
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4618      	mov	r0, r3
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004492:	0082      	lsls	r2, r0, #2
 8004494:	4640      	mov	r0, r8
 8004496:	4649      	mov	r1, r9
 8004498:	f7fb feea 	bl	8000270 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b49      	ldr	r3, [pc, #292]	; (80045c8 <UART_SetConfig+0x38c>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011e      	lsls	r6, r3, #4
 80044aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ac:	4618      	mov	r0, r3
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	1894      	adds	r4, r2, r2
 80044b8:	60bc      	str	r4, [r7, #8]
 80044ba:	415b      	adcs	r3, r3
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c2:	1812      	adds	r2, r2, r0
 80044c4:	eb41 0303 	adc.w	r3, r1, r3
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	00dd      	lsls	r5, r3, #3
 80044d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044d6:	00d4      	lsls	r4, r2, #3
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	1814      	adds	r4, r2, r0
 80044de:	64bc      	str	r4, [r7, #72]	; 0x48
 80044e0:	414b      	adcs	r3, r1
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	008b      	lsls	r3, r1, #2
 80044f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044fc:	0082      	lsls	r2, r0, #2
 80044fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004502:	f7fb feb5 	bl	8000270 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <UART_SetConfig+0x38c>)
 800450c:	fba3 1302 	umull	r1, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2164      	movs	r1, #100	; 0x64
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	3332      	adds	r3, #50	; 0x32
 800451e:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <UART_SetConfig+0x38c>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452a:	441e      	add	r6, r3
 800452c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452e:	4618      	mov	r0, r3
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	1894      	adds	r4, r2, r2
 800453a:	603c      	str	r4, [r7, #0]
 800453c:	415b      	adcs	r3, r3
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004544:	1812      	adds	r2, r2, r0
 8004546:	eb41 0303 	adc.w	r3, r1, r3
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	f04f 0500 	mov.w	r5, #0
 8004552:	00dd      	lsls	r5, r3, #3
 8004554:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004558:	00d4      	lsls	r4, r2, #3
 800455a:	4622      	mov	r2, r4
 800455c:	462b      	mov	r3, r5
 800455e:	eb12 0a00 	adds.w	sl, r2, r0
 8004562:	eb43 0b01 	adc.w	fp, r3, r1
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4618      	mov	r0, r3
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	008b      	lsls	r3, r1, #2
 800457a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800457e:	0082      	lsls	r2, r0, #2
 8004580:	4650      	mov	r0, sl
 8004582:	4659      	mov	r1, fp
 8004584:	f7fb fe74 	bl	8000270 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <UART_SetConfig+0x38c>)
 800458e:	fba3 1302 	umull	r1, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2164      	movs	r1, #100	; 0x64
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <UART_SetConfig+0x38c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 020f 	and.w	r2, r3, #15
 80045ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4432      	add	r2, r6
 80045b2:	609a      	str	r2, [r3, #8]
}
 80045b4:	bf00      	nop
 80045b6:	377c      	adds	r7, #124	; 0x7c
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f

080045cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045cc:	b084      	sub	sp, #16
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	f107 001c 	add.w	r0, r7, #28
 80045da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d122      	bne.n	800462a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 fac6 	bl	8005bb0 <USB_CoreReset>
 8004624:	4603      	mov	r3, r0
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e01a      	b.n	8004660 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f001 faba 	bl	8005bb0 <USB_CoreReset>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
 8004652:	e005      	b.n	8004660 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	2b01      	cmp	r3, #1
 8004664:	d10b      	bne.n	800467e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f043 0206 	orr.w	r2, r3, #6
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800468a:	b004      	add	sp, #16
 800468c:	4770      	bx	lr
	...

08004690 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d165      	bne.n	8004770 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4a41      	ldr	r2, [pc, #260]	; (80047ac <USB_SetTurnaroundTime+0x11c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d906      	bls.n	80046ba <USB_SetTurnaroundTime+0x2a>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a40      	ldr	r2, [pc, #256]	; (80047b0 <USB_SetTurnaroundTime+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d202      	bcs.n	80046ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046b4:	230f      	movs	r3, #15
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e062      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <USB_SetTurnaroundTime+0x120>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d306      	bcc.n	80046d0 <USB_SetTurnaroundTime+0x40>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4a3b      	ldr	r2, [pc, #236]	; (80047b4 <USB_SetTurnaroundTime+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d202      	bcs.n	80046d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046ca:	230e      	movs	r3, #14
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e057      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <USB_SetTurnaroundTime+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d306      	bcc.n	80046e6 <USB_SetTurnaroundTime+0x56>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4a37      	ldr	r2, [pc, #220]	; (80047b8 <USB_SetTurnaroundTime+0x128>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d202      	bcs.n	80046e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80046e0:	230d      	movs	r3, #13
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e04c      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4a33      	ldr	r2, [pc, #204]	; (80047b8 <USB_SetTurnaroundTime+0x128>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d306      	bcc.n	80046fc <USB_SetTurnaroundTime+0x6c>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a32      	ldr	r2, [pc, #200]	; (80047bc <USB_SetTurnaroundTime+0x12c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d802      	bhi.n	80046fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046f6:	230c      	movs	r3, #12
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e041      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <USB_SetTurnaroundTime+0x12c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d906      	bls.n	8004712 <USB_SetTurnaroundTime+0x82>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a2e      	ldr	r2, [pc, #184]	; (80047c0 <USB_SetTurnaroundTime+0x130>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d802      	bhi.n	8004712 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800470c:	230b      	movs	r3, #11
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e036      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <USB_SetTurnaroundTime+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d906      	bls.n	8004728 <USB_SetTurnaroundTime+0x98>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <USB_SetTurnaroundTime+0x134>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d802      	bhi.n	8004728 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004722:	230a      	movs	r3, #10
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e02b      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <USB_SetTurnaroundTime+0x134>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d906      	bls.n	800473e <USB_SetTurnaroundTime+0xae>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a25      	ldr	r2, [pc, #148]	; (80047c8 <USB_SetTurnaroundTime+0x138>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d202      	bcs.n	800473e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004738:	2309      	movs	r3, #9
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e020      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <USB_SetTurnaroundTime+0x138>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d306      	bcc.n	8004754 <USB_SetTurnaroundTime+0xc4>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <USB_SetTurnaroundTime+0x13c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d802      	bhi.n	8004754 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800474e:	2308      	movs	r3, #8
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e015      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <USB_SetTurnaroundTime+0x13c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d906      	bls.n	800476a <USB_SetTurnaroundTime+0xda>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <USB_SetTurnaroundTime+0x140>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d202      	bcs.n	800476a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004764:	2307      	movs	r3, #7
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e00a      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800476a:	2306      	movs	r3, #6
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e007      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004776:	2309      	movs	r3, #9
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e001      	b.n	8004780 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800477c:	2309      	movs	r3, #9
 800477e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	029b      	lsls	r3, r3, #10
 8004794:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	00d8acbf 	.word	0x00d8acbf
 80047b0:	00e4e1c0 	.word	0x00e4e1c0
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	01067380 	.word	0x01067380
 80047bc:	011a499f 	.word	0x011a499f
 80047c0:	01312cff 	.word	0x01312cff
 80047c4:	014ca43f 	.word	0x014ca43f
 80047c8:	016e3600 	.word	0x016e3600
 80047cc:	01a6ab1f 	.word	0x01a6ab1f
 80047d0:	01e84800 	.word	0x01e84800

080047d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d106      	bne.n	8004844 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e00b      	b.n	800485c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e001      	b.n	800485c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e003      	b.n	8004864 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800485c:	2032      	movs	r0, #50	; 0x32
 800485e:	f7fc fe5b 	bl	8001518 <HAL_Delay>

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800486c:	b084      	sub	sp, #16
 800486e:	b580      	push	{r7, lr}
 8004870:	b086      	sub	sp, #24
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800487a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e009      	b.n	80048a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3340      	adds	r3, #64	; 0x40
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	2b0e      	cmp	r3, #14
 80048a4:	d9f2      	bls.n	800488c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11c      	bne.n	80048e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ba:	f043 0302 	orr.w	r3, r3, #2
 80048be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
 80048e4:	e00b      	b.n	80048fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	4619      	mov	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004918:	461a      	mov	r2, r3
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10c      	bne.n	800493e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800492a:	2100      	movs	r1, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f949 	bl	8004bc4 <USB_SetDevSpeed>
 8004932:	e008      	b.n	8004946 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004934:	2101      	movs	r1, #1
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f944 	bl	8004bc4 <USB_SetDevSpeed>
 800493c:	e003      	b.n	8004946 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800493e:	2103      	movs	r1, #3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f93f 	bl	8004bc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004946:	2110      	movs	r1, #16
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8f3 	bl	8004b34 <USB_FlushTxFifo>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f911 	bl	8004b80 <USB_FlushRxFifo>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	461a      	mov	r2, r3
 800497c:	2300      	movs	r3, #0
 800497e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e043      	b.n	8004a1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a8:	d118      	bne.n	80049dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e013      	b.n	80049ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	461a      	mov	r2, r3
 80049d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e008      	b.n	80049ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	3301      	adds	r3, #1
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d3b7      	bcc.n	8004992 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	e043      	b.n	8004ab0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a3e:	d118      	bne.n	8004a72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	461a      	mov	r2, r3
 8004a54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e013      	b.n	8004a84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e008      	b.n	8004a84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3301      	adds	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d3b7      	bcc.n	8004a28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <USB_DevInit+0x2c4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b18:	f043 0304 	orr.w	r3, r3, #4
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b2c:	b004      	add	sp, #16
 8004b2e:	4770      	bx	lr
 8004b30:	803c3800 	.word	0x803c3800

08004b34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	f043 0220 	orr.w	r2, r3, #32
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3301      	adds	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <USB_FlushTxFifo+0x48>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e006      	b.n	8004b6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d0f0      	beq.n	8004b4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	00030d40 	.word	0x00030d40

08004b80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3301      	adds	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <USB_FlushRxFifo+0x40>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e006      	b.n	8004bb2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d0f0      	beq.n	8004b92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	00030d40 	.word	0x00030d40

08004bc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b087      	sub	sp, #28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0306 	and.w	r3, r3, #6
 8004c0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c16:	2300      	movs	r3, #0
 8004c18:	75fb      	strb	r3, [r7, #23]
 8004c1a:	e00a      	b.n	8004c32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d002      	beq.n	8004c28 <USB_GetDevSpeed+0x32>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b06      	cmp	r3, #6
 8004c26:	d102      	bne.n	8004c2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	75fb      	strb	r3, [r7, #23]
 8004c2c:	e001      	b.n	8004c32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c2e:	230f      	movs	r3, #15
 8004c30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d13a      	bne.n	8004cd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	68f9      	ldr	r1, [r7, #12]
 8004c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d155      	bne.n	8004d40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	78db      	ldrb	r3, [r3, #3]
 8004cae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	059b      	lsls	r3, r3, #22
 8004cb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	e036      	b.n	8004d40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	69da      	ldr	r2, [r3, #28]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d11a      	bne.n	8004d40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	78db      	ldrb	r3, [r3, #3]
 8004d24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d26:	430b      	orrs	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d161      	bne.n	8004e30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d82:	d11f      	bne.n	8004dc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de4:	4013      	ands	r3, r2
 8004de6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	4619      	mov	r1, r3
 8004e28:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <USB_DeactivateEndpoint+0x1b0>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	600b      	str	r3, [r1, #0]
 8004e2e:	e060      	b.n	8004ef2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e46:	d11f      	bne.n	8004e88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0159      	lsls	r1, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	4619      	mov	r1, r3
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <USB_DeactivateEndpoint+0x1b4>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	ec337800 	.word	0xec337800
 8004f04:	eff37800 	.word	0xeff37800

08004f08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	f040 815c 	bne.w	80051e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d132      	bne.n	8004f98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	0cdb      	lsrs	r3, r3, #19
 8004f92:	04db      	lsls	r3, r3, #19
 8004f94:	6113      	str	r3, [r2, #16]
 8004f96:	e074      	b.n	8005082 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	0cdb      	lsrs	r3, r3, #19
 8004fb4:	04db      	lsls	r3, r3, #19
 8004fb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6959      	ldr	r1, [r3, #20]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	440b      	add	r3, r1
 8004ff4:	1e59      	subs	r1, r3, #1
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ffe:	04d9      	lsls	r1, r3, #19
 8005000:	4b9d      	ldr	r3, [pc, #628]	; (8005278 <USB_EPStartXfer+0x370>)
 8005002:	400b      	ands	r3, r1
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	0148      	lsls	r0, r1, #5
 8005008:	69f9      	ldr	r1, [r7, #28]
 800500a:	4401      	add	r1, r0
 800500c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005010:	4313      	orrs	r3, r2
 8005012:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502a:	69b9      	ldr	r1, [r7, #24]
 800502c:	0148      	lsls	r0, r1, #5
 800502e:	69f9      	ldr	r1, [r7, #28]
 8005030:	4401      	add	r1, r0
 8005032:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005036:	4313      	orrs	r3, r2
 8005038:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d11f      	bne.n	8005082 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005060:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005080:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d14b      	bne.n	8005120 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	78db      	ldrb	r3, [r3, #3]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d128      	bne.n	80050fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e00f      	b.n	80050fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005118:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	e12f      	b.n	8005380 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d015      	beq.n	8005174 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8117 	beq.w	8005380 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	2101      	movs	r1, #1
 8005164:	fa01 f303 	lsl.w	r3, r1, r3
 8005168:	69f9      	ldr	r1, [r7, #28]
 800516a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516e:	4313      	orrs	r3, r2
 8005170:	634b      	str	r3, [r1, #52]	; 0x34
 8005172:	e105      	b.n	8005380 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d110      	bne.n	80051a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e00f      	b.n	80051c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68d9      	ldr	r1, [r3, #12]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	b298      	uxth	r0, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4603      	mov	r3, r0
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa2b 	bl	8005636 <USB_WritePacket>
 80051e0:	e0ce      	b.n	8005380 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fc:	0cdb      	lsrs	r3, r3, #19
 80051fe:	04db      	lsls	r3, r3, #19
 8005200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005224:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d126      	bne.n	800527c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	0148      	lsls	r0, r1, #5
 8005248:	69f9      	ldr	r1, [r7, #28]
 800524a:	4401      	add	r1, r0
 800524c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005250:	4313      	orrs	r3, r2
 8005252:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005272:	6113      	str	r3, [r2, #16]
 8005274:	e036      	b.n	80052e4 <USB_EPStartXfer+0x3dc>
 8005276:	bf00      	nop
 8005278:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4413      	add	r3, r2
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	8afb      	ldrh	r3, [r7, #22]
 80052a2:	04d9      	lsls	r1, r3, #19
 80052a4:	4b39      	ldr	r3, [pc, #228]	; (800538c <USB_EPStartXfer+0x484>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	0148      	lsls	r0, r1, #5
 80052ac:	69f9      	ldr	r1, [r7, #28]
 80052ae:	4401      	add	r1, r0
 80052b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	8af9      	ldrh	r1, [r7, #22]
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d4:	69b9      	ldr	r1, [r7, #24]
 80052d6:	0148      	lsls	r0, r1, #5
 80052d8:	69f9      	ldr	r1, [r7, #28]
 80052da:	4401      	add	r1, r0
 80052dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10d      	bne.n	8005306 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	68d9      	ldr	r1, [r3, #12]
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	460a      	mov	r2, r1
 8005304:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	78db      	ldrb	r3, [r3, #3]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d128      	bne.n	8005360 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d110      	bne.n	8005340 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005338:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e00f      	b.n	8005360 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800537e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	1ff80000 	.word	0x1ff80000

08005390 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 80cd 	bne.w	800554c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d132      	bne.n	8005420 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005418:	0cdb      	lsrs	r3, r3, #19
 800541a:	04db      	lsls	r3, r3, #19
 800541c:	6113      	str	r3, [r2, #16]
 800541e:	e04e      	b.n	80054be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	0cdb      	lsrs	r3, r3, #19
 800543c:	04db      	lsls	r3, r3, #19
 800543e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800545e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005462:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	695a      	ldr	r2, [r3, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	d903      	bls.n	8005478 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ae:	6939      	ldr	r1, [r7, #16]
 80054b0:	0148      	lsls	r0, r1, #5
 80054b2:	6979      	ldr	r1, [r7, #20]
 80054b4:	4401      	add	r1, r0
 80054b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d11e      	bne.n	8005502 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e092      	b.n	8005628 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005520:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d07e      	beq.n	8005628 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	2101      	movs	r1, #1
 800553c:	fa01 f303 	lsl.w	r3, r1, r3
 8005540:	6979      	ldr	r1, [r7, #20]
 8005542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005546:	4313      	orrs	r3, r2
 8005548:	634b      	str	r3, [r1, #52]	; 0x34
 800554a:	e06d      	b.n	8005628 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	0cdb      	lsrs	r3, r3, #19
 8005568:	04db      	lsls	r3, r3, #19
 800556a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005586:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800558a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800558e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055d6:	6939      	ldr	r1, [r7, #16]
 80055d8:	0148      	lsls	r0, r1, #5
 80055da:	6979      	ldr	r1, [r7, #20]
 80055dc:	4401      	add	r1, r0
 80055de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055e2:	4313      	orrs	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d10d      	bne.n	8005608 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68d9      	ldr	r1, [r3, #12]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	460a      	mov	r2, r1
 8005606:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005622:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005626:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005636:	b480      	push	{r7}
 8005638:	b089      	sub	sp, #36	; 0x24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	4611      	mov	r1, r2
 8005642:	461a      	mov	r2, r3
 8005644:	460b      	mov	r3, r1
 8005646:	71fb      	strb	r3, [r7, #7]
 8005648:	4613      	mov	r3, r2
 800564a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11a      	bne.n	8005692 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800565c:	88bb      	ldrh	r3, [r7, #4]
 800565e:	3303      	adds	r3, #3
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00f      	b.n	800568a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	031a      	lsls	r2, r3, #12
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005676:	461a      	mov	r2, r3
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3304      	adds	r3, #4
 8005682:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	3301      	adds	r3, #1
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3eb      	bcc.n	800566a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3724      	adds	r7, #36	; 0x24
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80056b6:	88fb      	ldrh	r3, [r7, #6]
 80056b8:	3303      	adds	r3, #3
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e00b      	b.n	80056dc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3304      	adds	r3, #4
 80056d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3301      	adds	r3, #1
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d3ef      	bcc.n	80056c4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80056e4:	69fb      	ldr	r3, [r7, #28]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3724      	adds	r7, #36	; 0x24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d12c      	bne.n	8005768 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	db12      	blt.n	8005746 <USB_EPSetStall+0x54>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005740:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005744:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e02b      	b.n	80057c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	db12      	blt.n	80057a0 <USB_EPSetStall+0xae>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800579e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d128      	bne.n	800583c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0151      	lsls	r1, r2, #5
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	440a      	add	r2, r1
 8005800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005804:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005808:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d003      	beq.n	800581a <USB_EPClearStall+0x4c>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d138      	bne.n	800588c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e027      	b.n	800588c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	440a      	add	r2, r1
 8005852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800585a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	78db      	ldrb	r3, [r3, #3]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d003      	beq.n	800586c <USB_EPClearStall+0x9e>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	78db      	ldrb	r3, [r3, #3]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d10f      	bne.n	800588c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058bc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005900:	f023 0303 	bic.w	r3, r3, #3
 8005904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005914:	f023 0302 	bic.w	r3, r3, #2
 8005918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005956:	f043 0302 	orr.w	r3, r3, #2
 800595a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800596a:	b480      	push	{r7}
 800596c:	b085      	sub	sp, #20
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4013      	ands	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	0c1b      	lsrs	r3, r3, #16
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	4013      	ands	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	b29b      	uxth	r3, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a26:	68bb      	ldr	r3, [r7, #8]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a82:	68bb      	ldr	r3, [r7, #8]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	460b      	mov	r3, r1
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	333c      	adds	r3, #60	; 0x3c
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4a26      	ldr	r2, [pc, #152]	; (8005bac <USB_EP0_OutStart+0xb8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d90a      	bls.n	8005b2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b28:	d101      	bne.n	8005b2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e037      	b.n	8005b9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5c:	f043 0318 	orr.w	r3, r3, #24
 8005b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10f      	bne.n	8005b9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	4f54300a 	.word	0x4f54300a

08005bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a13      	ldr	r2, [pc, #76]	; (8005c14 <USB_CoreReset+0x64>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e01b      	b.n	8005c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	daf2      	bge.n	8005bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <USB_CoreReset+0x64>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e006      	b.n	8005c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d0f0      	beq.n	8005be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	00030d40 	.word	0x00030d40

08005c18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c28:	f002 f95c 	bl	8007ee4 <USBD_static_malloc>
 8005c2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d105      	bne.n	8005c40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e066      	b.n	8005d0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	7c1b      	ldrb	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d119      	bne.n	8005c84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c54:	2202      	movs	r2, #2
 8005c56:	2181      	movs	r1, #129	; 0x81
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f002 f820 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c68:	2202      	movs	r2, #2
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f002 f816 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c82:	e016      	b.n	8005cb2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c84:	2340      	movs	r3, #64	; 0x40
 8005c86:	2202      	movs	r2, #2
 8005c88:	2181      	movs	r1, #129	; 0x81
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f002 f807 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	2202      	movs	r2, #2
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fffe 	bl	8007c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	2182      	movs	r1, #130	; 0x82
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fff0 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7c1b      	ldrb	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 f8c1 	bl	8007e7c <USBD_LL_PrepareReceive>
 8005cfa:	e007      	b.n	8005d0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d02:	2340      	movs	r3, #64	; 0x40
 8005d04:	2101      	movs	r1, #1
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f002 f8b8 	bl	8007e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b082      	sub	sp, #8
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d22:	2181      	movs	r1, #129	; 0x81
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 ffe0 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 ffd9 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d40:	2182      	movs	r1, #130	; 0x82
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 ffd1 	bl	8007cea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 f8c4 	bl	8007f00 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e0af      	b.n	8005f14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03f      	beq.n	8005e40 <USBD_CDC_Setup+0xb4>
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	f040 809f 	bne.w	8005f04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	88db      	ldrh	r3, [r3, #6]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d02e      	beq.n	8005e2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b25b      	sxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da16      	bge.n	8005e06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005de4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	88d2      	ldrh	r2, [r2, #6]
 8005dea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	88db      	ldrh	r3, [r3, #6]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	bf28      	it	cs
 8005df4:	2307      	movcs	r3, #7
 8005df6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	89fa      	ldrh	r2, [r7, #14]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fb19 	bl	8007436 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e04:	e085      	b.n	8005f12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	785a      	ldrb	r2, [r3, #1]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	88db      	ldrh	r3, [r3, #6]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e1c:	6939      	ldr	r1, [r7, #16]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	88db      	ldrh	r3, [r3, #6]
 8005e22:	461a      	mov	r2, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fb32 	bl	800748e <USBD_CtlPrepareRx>
      break;
 8005e2a:	e072      	b.n	8005f12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	7850      	ldrb	r0, [r2, #1]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	4798      	blx	r3
      break;
 8005e3e:	e068      	b.n	8005f12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b0b      	cmp	r3, #11
 8005e46:	d852      	bhi.n	8005eee <USBD_CDC_Setup+0x162>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <USBD_CDC_Setup+0xc4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e81 	.word	0x08005e81
 8005e54:	08005efd 	.word	0x08005efd
 8005e58:	08005eef 	.word	0x08005eef
 8005e5c:	08005eef 	.word	0x08005eef
 8005e60:	08005eef 	.word	0x08005eef
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005eef 	.word	0x08005eef
 8005e6c:	08005eef 	.word	0x08005eef
 8005e70:	08005eef 	.word	0x08005eef
 8005e74:	08005eef 	.word	0x08005eef
 8005e78:	08005eab 	.word	0x08005eab
 8005e7c:	08005ed5 	.word	0x08005ed5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d107      	bne.n	8005e9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e8c:	f107 030a 	add.w	r3, r7, #10
 8005e90:	2202      	movs	r2, #2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 face 	bl	8007436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e9a:	e032      	b.n	8005f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 fa58 	bl	8007354 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ea8:	e02b      	b.n	8005f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005eb6:	f107 030d 	add.w	r3, r7, #13
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f001 fab9 	bl	8007436 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec4:	e01d      	b.n	8005f02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fa43 	bl	8007354 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed2:	e016      	b.n	8005f02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d00f      	beq.n	8005f00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fa36 	bl	8007354 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005eec:	e008      	b.n	8005f00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fa2f 	bl	8007354 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8005efa:	e002      	b.n	8005f02 <USBD_CDC_Setup+0x176>
          break;
 8005efc:	bf00      	nop
 8005efe:	e008      	b.n	8005f12 <USBD_CDC_Setup+0x186>
          break;
 8005f00:	bf00      	nop
      }
      break;
 8005f02:	e006      	b.n	8005f12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fa24 	bl	8007354 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f10:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e04f      	b.n	8005fde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3318      	adds	r3, #24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d029      	beq.n	8005fb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3318      	adds	r3, #24
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	78f9      	ldrb	r1, [r7, #3]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	460b      	mov	r3, r1
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	1a5b      	subs	r3, r3, r1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4403      	add	r3, r0
 8005f7c:	3344      	adds	r3, #68	; 0x44
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f84:	fb03 f301 	mul.w	r3, r3, r1
 8005f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d110      	bne.n	8005fb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fa2:	78f9      	ldrb	r1, [r7, #3]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 ff46 	bl	8007e3a <USBD_LL_Transmit>
 8005fae:	e015      	b.n	8005fdc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	e015      	b.n	8006034 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 ff56 	bl	8007ebe <USBD_LL_GetRxDataSize>
 8006012:	4602      	mov	r2, r0
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800602e:	4611      	mov	r1, r2
 8006030:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006052:	2303      	movs	r3, #3
 8006054:	e01b      	b.n	800608e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x50>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d010      	beq.n	800608c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006078:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006080:	b292      	uxth	r2, r2
 8006082:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	; 0xff
 8006088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2243      	movs	r2, #67	; 0x43
 80060a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	200000d0 	.word	0x200000d0

080060b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2243      	movs	r2, #67	; 0x43
 80060c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80060c6:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	2000008c 	.word	0x2000008c

080060d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2243      	movs	r2, #67	; 0x43
 80060e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80060e6:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	20000114 	.word	0x20000114

080060f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	220a      	movs	r2, #10
 8006104:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006106:	4b03      	ldr	r3, [pc, #12]	; (8006114 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000048 	.word	0x20000048

08006118 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	e004      	b.n	8006136 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006142:	b480      	push	{r7}
 8006144:	b087      	sub	sp, #28
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006154:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e008      	b.n	8006172 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800618e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006196:	2303      	movs	r3, #3
 8006198:	e004      	b.n	80061a4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e01a      	b.n	8006208 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d114      	bne.n	8006206 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	2201      	movs	r2, #1
 80061e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061fa:	2181      	movs	r1, #129	; 0x81
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fe1c 	bl	8007e3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800621e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800622a:	2303      	movs	r3, #3
 800622c:	e016      	b.n	800625c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7c1b      	ldrb	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800623c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fe1a 	bl	8007e7c <USBD_LL_PrepareReceive>
 8006248:	e007      	b.n	800625a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	2101      	movs	r1, #1
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fe11 	bl	8007e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006278:	2303      	movs	r3, #3
 800627a:	e01f      	b.n	80062bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	79fa      	ldrb	r2, [r7, #7]
 80062ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fc8d 	bl	8007bd0 <USBD_LL_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	e016      	b.n	800630a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	f107 020e 	add.w	r2, r7, #14
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
 8006300:	4602      	mov	r2, r0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fca4 	bl	8007c68 <USBD_LL_Start>
 8006320:	4603      	mov	r3, r0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	4611      	mov	r1, r2
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	4611      	mov	r1, r2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
  }

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 ff90 	bl	80072e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d01a      	beq.n	800641a <USBD_LL_SetupStage+0x72>
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d822      	bhi.n	800642e <USBD_LL_SetupStage+0x86>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <USBD_LL_SetupStage+0x4a>
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d00a      	beq.n	8006406 <USBD_LL_SetupStage+0x5e>
 80063f0:	e01d      	b.n	800642e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa62 	bl	80068c4 <USBD_StdDevReq>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
      break;
 8006404:	e020      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fac6 	bl	80069a0 <USBD_StdItfReq>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
      break;
 8006418:	e016      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fb05 	bl	8006a32 <USBD_StdEPReq>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e00c      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fc73 	bl	8007d28 <USBD_LL_StallEP>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
      break;
 8006446:	bf00      	nop
  }

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	460b      	mov	r3, r1
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d138      	bne.n	80064d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800646c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006474:	2b03      	cmp	r3, #3
 8006476:	d14a      	bne.n	800650e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d913      	bls.n	80064ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	1ad2      	subs	r2, r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	4293      	cmp	r3, r2
 800649c:	bf28      	it	cs
 800649e:	4613      	movcs	r3, r2
 80064a0:	461a      	mov	r2, r3
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 f80f 	bl	80074c8 <USBD_CtlContinueRx>
 80064aa:	e030      	b.n	800650e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d10b      	bne.n	80064d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 f80a 	bl	80074ea <USBD_CtlSendStatus>
 80064d6:	e01a      	b.n	800650e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d114      	bne.n	800650e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	7afa      	ldrb	r2, [r7, #11]
 80064fa:	4611      	mov	r1, r2
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	e000      	b.n	8006510 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	460b      	mov	r3, r1
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006526:	7afb      	ldrb	r3, [r7, #11]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d16b      	bne.n	8006604 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3314      	adds	r3, #20
 8006530:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006538:	2b02      	cmp	r3, #2
 800653a:	d156      	bne.n	80065ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d914      	bls.n	8006572 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	461a      	mov	r2, r3
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 ff84 	bl	800746c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 fc86 	bl	8007e7c <USBD_LL_PrepareReceive>
 8006570:	e03b      	b.n	80065ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	d11c      	bne.n	80065b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006586:	429a      	cmp	r2, r3
 8006588:	d316      	bcc.n	80065b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006594:	429a      	cmp	r2, r3
 8006596:	d20f      	bcs.n	80065b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 ff65 	bl	800746c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065aa:	2300      	movs	r3, #0
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 fc63 	bl	8007e7c <USBD_LL_PrepareReceive>
 80065b6:	e018      	b.n	80065ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d10b      	bne.n	80065dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fba2 	bl	8007d28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 ff93 	bl	8007510 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d122      	bne.n	800663a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fe98 	bl	800632a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006602:	e01a      	b.n	800663a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b03      	cmp	r3, #3
 800660e:	d114      	bne.n	800663a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00e      	beq.n	800663a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	7afa      	ldrb	r2, [r7, #11]
 8006626:	4611      	mov	r1, r2
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	4798      	blx	r3
 800662c:	4603      	mov	r3, r0
 800662e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	e000      	b.n	800663c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	e02f      	b.n	80066d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00f      	beq.n	80066a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	4611      	mov	r1, r2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066a2:	2340      	movs	r3, #64	; 0x40
 80066a4:	2200      	movs	r2, #0
 80066a6:	2100      	movs	r1, #0
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 faf8 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2240      	movs	r2, #64	; 0x40
 80066ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066be:	2340      	movs	r3, #64	; 0x40
 80066c0:	2200      	movs	r2, #0
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 faea 	bl	8007c9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2240      	movs	r2, #64	; 0x40
 80066d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2204      	movs	r2, #4
 800671a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b04      	cmp	r3, #4
 800673e:	d106      	bne.n	800674e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006746:	b2da      	uxtb	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800676e:	2303      	movs	r3, #3
 8006770:	e012      	b.n	8006798 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d10b      	bne.n	8006796 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d005      	beq.n	8006796 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e014      	b.n	80067e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d10d      	bne.n	80067e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	4611      	mov	r1, r2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	e014      	b.n	8006830 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d10d      	bne.n	800682e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	4611      	mov	r1, r2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	4611      	mov	r1, r2
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
  }

  return USBD_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006886:	b480      	push	{r7}
 8006888:	b087      	sub	sp, #28
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3301      	adds	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068a4:	8a3b      	ldrh	r3, [r7, #16]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	b21a      	sxth	r2, r3
 80068aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	b21b      	sxth	r3, r3
 80068b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068b4:	89fb      	ldrh	r3, [r7, #14]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068da:	2b40      	cmp	r3, #64	; 0x40
 80068dc:	d005      	beq.n	80068ea <USBD_StdDevReq+0x26>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d853      	bhi.n	800698a <USBD_StdDevReq+0xc6>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <USBD_StdDevReq+0x3a>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d14f      	bne.n	800698a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]
      break;
 80068fc:	e04a      	b.n	8006994 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	785b      	ldrb	r3, [r3, #1]
 8006902:	2b09      	cmp	r3, #9
 8006904:	d83b      	bhi.n	800697e <USBD_StdDevReq+0xba>
 8006906:	a201      	add	r2, pc, #4	; (adr r2, 800690c <USBD_StdDevReq+0x48>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006961 	.word	0x08006961
 8006910:	08006975 	.word	0x08006975
 8006914:	0800697f 	.word	0x0800697f
 8006918:	0800696b 	.word	0x0800696b
 800691c:	0800697f 	.word	0x0800697f
 8006920:	0800693f 	.word	0x0800693f
 8006924:	08006935 	.word	0x08006935
 8006928:	0800697f 	.word	0x0800697f
 800692c:	08006957 	.word	0x08006957
 8006930:	08006949 	.word	0x08006949
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f9de 	bl	8006cf8 <USBD_GetDescriptor>
          break;
 800693c:	e024      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb43 	bl	8006fcc <USBD_SetAddress>
          break;
 8006946:	e01f      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb82 	bl	8007054 <USBD_SetConfig>
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]
          break;
 8006954:	e018      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fc21 	bl	80071a0 <USBD_GetConfig>
          break;
 800695e:	e013      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fc52 	bl	800720c <USBD_GetStatus>
          break;
 8006968:	e00e      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fc81 	bl	8007274 <USBD_SetFeature>
          break;
 8006972:	e009      	b.n	8006988 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fc90 	bl	800729c <USBD_ClrFeature>
          break;
 800697c:	e004      	b.n	8006988 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fce7 	bl	8007354 <USBD_CtlError>
          break;
 8006986:	bf00      	nop
      }
      break;
 8006988:	e004      	b.n	8006994 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fce1 	bl	8007354 <USBD_CtlError>
      break;
 8006992:	bf00      	nop
  }

  return ret;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop

080069a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d005      	beq.n	80069c6 <USBD_StdItfReq+0x26>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d82f      	bhi.n	8006a1e <USBD_StdItfReq+0x7e>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <USBD_StdItfReq+0x26>
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d12b      	bne.n	8006a1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d81d      	bhi.n	8006a10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	889b      	ldrh	r3, [r3, #4]
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d813      	bhi.n	8006a06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	88db      	ldrh	r3, [r3, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d110      	bne.n	8006a1a <USBD_StdItfReq+0x7a>
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10d      	bne.n	8006a1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fd73 	bl	80074ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a04:	e009      	b.n	8006a1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fca3 	bl	8007354 <USBD_CtlError>
          break;
 8006a0e:	e004      	b.n	8006a1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc9e 	bl	8007354 <USBD_CtlError>
          break;
 8006a18:	e000      	b.n	8006a1c <USBD_StdItfReq+0x7c>
          break;
 8006a1a:	bf00      	nop
      }
      break;
 8006a1c:	e004      	b.n	8006a28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc97 	bl	8007354 <USBD_CtlError>
      break;
 8006a26:	bf00      	nop
  }

  return ret;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	889b      	ldrh	r3, [r3, #4]
 8006a44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d007      	beq.n	8006a62 <USBD_StdEPReq+0x30>
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	f200 8145 	bhi.w	8006ce2 <USBD_StdEPReq+0x2b0>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00c      	beq.n	8006a76 <USBD_StdEPReq+0x44>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	f040 8140 	bne.w	8006ce2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
      break;
 8006a74:	e13a      	b.n	8006cec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d007      	beq.n	8006a8e <USBD_StdEPReq+0x5c>
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	f300 8129 	bgt.w	8006cd6 <USBD_StdEPReq+0x2a4>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d07f      	beq.n	8006b88 <USBD_StdEPReq+0x156>
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d03c      	beq.n	8006b06 <USBD_StdEPReq+0xd4>
 8006a8c:	e123      	b.n	8006cd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d002      	beq.n	8006aa0 <USBD_StdEPReq+0x6e>
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d016      	beq.n	8006acc <USBD_StdEPReq+0x9a>
 8006a9e:	e02c      	b.n	8006afa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <USBD_StdEPReq+0x90>
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d00a      	beq.n	8006ac2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f939 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 f935 	bl	8007d28 <USBD_LL_StallEP>
 8006abe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac0:	e020      	b.n	8006b04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fc45 	bl	8007354 <USBD_CtlError>
              break;
 8006aca:	e01b      	b.n	8006b04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	885b      	ldrh	r3, [r3, #2]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10e      	bne.n	8006af2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00b      	beq.n	8006af2 <USBD_StdEPReq+0xc0>
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d008      	beq.n	8006af2 <USBD_StdEPReq+0xc0>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	88db      	ldrh	r3, [r3, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f001 f91b 	bl	8007d28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fcf9 	bl	80074ea <USBD_CtlSendStatus>

              break;
 8006af8:	e004      	b.n	8006b04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc29 	bl	8007354 <USBD_CtlError>
              break;
 8006b02:	bf00      	nop
          }
          break;
 8006b04:	e0ec      	b.n	8006ce0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d002      	beq.n	8006b18 <USBD_StdEPReq+0xe6>
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d016      	beq.n	8006b44 <USBD_StdEPReq+0x112>
 8006b16:	e030      	b.n	8006b7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00d      	beq.n	8006b3a <USBD_StdEPReq+0x108>
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d00a      	beq.n	8006b3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 f8fd 	bl	8007d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f8f9 	bl	8007d28 <USBD_LL_StallEP>
 8006b36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b38:	e025      	b.n	8006b86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fc09 	bl	8007354 <USBD_CtlError>
              break;
 8006b42:	e020      	b.n	8006b86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	885b      	ldrh	r3, [r3, #2]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d11b      	bne.n	8006b84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f903 	bl	8007d66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fcc2 	bl	80074ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006b78:	e004      	b.n	8006b84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fbe9 	bl	8007354 <USBD_CtlError>
              break;
 8006b82:	e000      	b.n	8006b86 <USBD_StdEPReq+0x154>
              break;
 8006b84:	bf00      	nop
          }
          break;
 8006b86:	e0ab      	b.n	8006ce0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d002      	beq.n	8006b9a <USBD_StdEPReq+0x168>
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d032      	beq.n	8006bfe <USBD_StdEPReq+0x1cc>
 8006b98:	e097      	b.n	8006cca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d007      	beq.n	8006bb0 <USBD_StdEPReq+0x17e>
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d004      	beq.n	8006bb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fbd3 	bl	8007354 <USBD_CtlError>
                break;
 8006bae:	e091      	b.n	8006cd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da0b      	bge.n	8006bd0 <USBD_StdEPReq+0x19e>
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	3310      	adds	r3, #16
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	3304      	adds	r3, #4
 8006bce:	e00b      	b.n	8006be8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4413      	add	r3, r2
 8006be6:	3304      	adds	r3, #4
 8006be8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fc1d 	bl	8007436 <USBD_CtlSendData>
              break;
 8006bfc:	e06a      	b.n	8006cd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006bfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da11      	bge.n	8006c2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	f003 020f 	and.w	r2, r3, #15
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3324      	adds	r3, #36	; 0x24
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d117      	bne.n	8006c50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fb96 	bl	8007354 <USBD_CtlError>
                  break;
 8006c28:	e054      	b.n	8006cd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fb83 	bl	8007354 <USBD_CtlError>
                  break;
 8006c4e:	e041      	b.n	8006cd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da0b      	bge.n	8006c70 <USBD_StdEPReq+0x23e>
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	3310      	adds	r3, #16
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	e00b      	b.n	8006c88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	3304      	adds	r3, #4
 8006c88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <USBD_StdEPReq+0x264>
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d103      	bne.n	8006c9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	e00e      	b.n	8006cbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 f87e 	bl	8007da4 <USBD_LL_IsStallEP>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e002      	b.n	8006cbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fbb7 	bl	8007436 <USBD_CtlSendData>
              break;
 8006cc8:	e004      	b.n	8006cd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb41 	bl	8007354 <USBD_CtlError>
              break;
 8006cd2:	bf00      	nop
          }
          break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb3b 	bl	8007354 <USBD_CtlError>
          break;
 8006cde:	bf00      	nop
      }
      break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fb35 	bl	8007354 <USBD_CtlError>
      break;
 8006cea:	bf00      	nop
  }

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	885b      	ldrh	r3, [r3, #2]
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	f200 8128 	bhi.w	8006f6e <USBD_GetDescriptor+0x276>
 8006d1e:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <USBD_GetDescriptor+0x2c>)
 8006d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d24:	08006d41 	.word	0x08006d41
 8006d28:	08006d59 	.word	0x08006d59
 8006d2c:	08006d99 	.word	0x08006d99
 8006d30:	08006f6f 	.word	0x08006f6f
 8006d34:	08006f6f 	.word	0x08006f6f
 8006d38:	08006f0f 	.word	0x08006f0f
 8006d3c:	08006f3b 	.word	0x08006f3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
      break;
 8006d56:	e112      	b.n	8006f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7c1b      	ldrb	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10d      	bne.n	8006d7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f107 0208 	add.w	r2, r7, #8
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4798      	blx	r3
 8006d70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	2202      	movs	r2, #2
 8006d78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d7a:	e100      	b.n	8006f7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	f107 0208 	add.w	r2, r7, #8
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
 8006d8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3301      	adds	r3, #1
 8006d92:	2202      	movs	r2, #2
 8006d94:	701a      	strb	r2, [r3, #0]
      break;
 8006d96:	e0f2      	b.n	8006f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	f200 80ac 	bhi.w	8006efc <USBD_GetDescriptor+0x204>
 8006da4:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBD_GetDescriptor+0xb4>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dc5 	.word	0x08006dc5
 8006db0:	08006df9 	.word	0x08006df9
 8006db4:	08006e2d 	.word	0x08006e2d
 8006db8:	08006e61 	.word	0x08006e61
 8006dbc:	08006e95 	.word	0x08006e95
 8006dc0:	08006ec9 	.word	0x08006ec9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006de6:	e091      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fab2 	bl	8007354 <USBD_CtlError>
            err++;
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	3301      	adds	r3, #1
 8006df4:	72fb      	strb	r3, [r7, #11]
          break;
 8006df6:	e089      	b.n	8006f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7c12      	ldrb	r2, [r2, #16]
 8006e10:	f107 0108 	add.w	r1, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1a:	e077      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fa98 	bl	8007354 <USBD_CtlError>
            err++;
 8006e24:	7afb      	ldrb	r3, [r7, #11]
 8006e26:	3301      	adds	r3, #1
 8006e28:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2a:	e06f      	b.n	8006f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4e:	e05d      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa7e 	bl	8007354 <USBD_CtlError>
            err++;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5e:	e055      	b.n	8006f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e82:	e043      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fa64 	bl	8007354 <USBD_CtlError>
            err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
          break;
 8006e92:	e03b      	b.n	8006f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	f107 0108 	add.w	r1, r7, #8
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb6:	e029      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa4a 	bl	8007354 <USBD_CtlError>
            err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec6:	e021      	b.n	8006f0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e00f      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa30 	bl	8007354 <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e007      	b.n	8006f0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa28 	bl	8007354 <USBD_CtlError>
          err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f0a:	bf00      	nop
      }
      break;
 8006f0c:	e037      	b.n	8006f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7c1b      	ldrb	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	f107 0208 	add.w	r2, r7, #8
 8006f22:	4610      	mov	r0, r2
 8006f24:	4798      	blx	r3
 8006f26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f28:	e029      	b.n	8006f7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa11 	bl	8007354 <USBD_CtlError>
        err++;
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	3301      	adds	r3, #1
 8006f36:	72fb      	strb	r3, [r7, #11]
      break;
 8006f38:	e021      	b.n	8006f7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	7c1b      	ldrb	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10d      	bne.n	8006f5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f107 0208 	add.w	r2, r7, #8
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4798      	blx	r3
 8006f52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3301      	adds	r3, #1
 8006f58:	2207      	movs	r2, #7
 8006f5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f5c:	e00f      	b.n	8006f7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f9f7 	bl	8007354 <USBD_CtlError>
        err++;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f6c:	e007      	b.n	8006f7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f9ef 	bl	8007354 <USBD_CtlError>
      err++;
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f7c:	bf00      	nop
  }

  if (err != 0U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11e      	bne.n	8006fc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	88db      	ldrh	r3, [r3, #6]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d016      	beq.n	8006fba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f8c:	893b      	ldrh	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00e      	beq.n	8006fb0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	88da      	ldrh	r2, [r3, #6]
 8006f96:	893b      	ldrh	r3, [r7, #8]
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bf28      	it	cs
 8006f9c:	4613      	movcs	r3, r2
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fa2:	893b      	ldrh	r3, [r7, #8]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa44 	bl	8007436 <USBD_CtlSendData>
 8006fae:	e009      	b.n	8006fc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9ce 	bl	8007354 <USBD_CtlError>
 8006fb8:	e004      	b.n	8006fc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa95 	bl	80074ea <USBD_CtlSendStatus>
 8006fc0:	e000      	b.n	8006fc4 <USBD_GetDescriptor+0x2cc>
    return;
 8006fc2:	bf00      	nop
  }
}
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop

08006fcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d131      	bne.n	8007042 <USBD_SetAddress+0x76>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	88db      	ldrh	r3, [r3, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d12d      	bne.n	8007042 <USBD_SetAddress+0x76>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	2b7f      	cmp	r3, #127	; 0x7f
 8006fec:	d829      	bhi.n	8007042 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b03      	cmp	r3, #3
 8007004:	d104      	bne.n	8007010 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f9a3 	bl	8007354 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	e01d      	b.n	800704c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7bfa      	ldrb	r2, [r7, #15]
 8007014:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 feed 	bl	8007dfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa61 	bl	80074ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007036:	e009      	b.n	800704c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	e004      	b.n	800704c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f985 	bl	8007354 <USBD_CtlError>
  }
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	885b      	ldrh	r3, [r3, #2]
 8007066:	b2da      	uxtb	r2, r3
 8007068:	4b4c      	ldr	r3, [pc, #304]	; (800719c <USBD_SetConfig+0x148>)
 800706a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800706c:	4b4b      	ldr	r3, [pc, #300]	; (800719c <USBD_SetConfig+0x148>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d905      	bls.n	8007080 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f96c 	bl	8007354 <USBD_CtlError>
    return USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e088      	b.n	8007192 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d002      	beq.n	8007092 <USBD_SetConfig+0x3e>
 800708c:	2b03      	cmp	r3, #3
 800708e:	d025      	beq.n	80070dc <USBD_SetConfig+0x88>
 8007090:	e071      	b.n	8007176 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007092:	4b42      	ldr	r3, [pc, #264]	; (800719c <USBD_SetConfig+0x148>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d01c      	beq.n	80070d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800709a:	4b40      	ldr	r3, [pc, #256]	; (800719c <USBD_SetConfig+0x148>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a4:	4b3d      	ldr	r3, [pc, #244]	; (800719c <USBD_SetConfig+0x148>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff f948 	bl	8006340 <USBD_SetClassConfig>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f949 	bl	8007354 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070c2:	e065      	b.n	8007190 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fa10 	bl	80074ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2203      	movs	r2, #3
 80070ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070d2:	e05d      	b.n	8007190 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa08 	bl	80074ea <USBD_CtlSendStatus>
      break;
 80070da:	e059      	b.n	8007190 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80070dc:	4b2f      	ldr	r3, [pc, #188]	; (800719c <USBD_SetConfig+0x148>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d112      	bne.n	800710a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070ec:	4b2b      	ldr	r3, [pc, #172]	; (800719c <USBD_SetConfig+0x148>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f6:	4b29      	ldr	r3, [pc, #164]	; (800719c <USBD_SetConfig+0x148>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff f93b 	bl	8006378 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9f1 	bl	80074ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007108:	e042      	b.n	8007190 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <USBD_SetConfig+0x148>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d02a      	beq.n	800716e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f929 	bl	8006378 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007126:	4b1d      	ldr	r3, [pc, #116]	; (800719c <USBD_SetConfig+0x148>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007130:	4b1a      	ldr	r3, [pc, #104]	; (800719c <USBD_SetConfig+0x148>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f902 	bl	8006340 <USBD_SetClassConfig>
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00f      	beq.n	8007166 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f903 	bl	8007354 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff f90e 	bl	8006378 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007164:	e014      	b.n	8007190 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9bf 	bl	80074ea <USBD_CtlSendStatus>
      break;
 800716c:	e010      	b.n	8007190 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9bb 	bl	80074ea <USBD_CtlSendStatus>
      break;
 8007174:	e00c      	b.n	8007190 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8eb 	bl	8007354 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800717e:	4b07      	ldr	r3, [pc, #28]	; (800719c <USBD_SetConfig+0x148>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff f8f7 	bl	8006378 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800718a:	2303      	movs	r3, #3
 800718c:	73fb      	strb	r3, [r7, #15]
      break;
 800718e:	bf00      	nop
  }

  return ret;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000240 	.word	0x20000240

080071a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	88db      	ldrh	r3, [r3, #6]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d004      	beq.n	80071bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8cd 	bl	8007354 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071ba:	e023      	b.n	8007204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	dc02      	bgt.n	80071ce <USBD_GetConfig+0x2e>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	dc03      	bgt.n	80071d4 <USBD_GetConfig+0x34>
 80071cc:	e015      	b.n	80071fa <USBD_GetConfig+0x5a>
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d00b      	beq.n	80071ea <USBD_GetConfig+0x4a>
 80071d2:	e012      	b.n	80071fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3308      	adds	r3, #8
 80071de:	2201      	movs	r2, #1
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f927 	bl	8007436 <USBD_CtlSendData>
        break;
 80071e8:	e00c      	b.n	8007204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3304      	adds	r3, #4
 80071ee:	2201      	movs	r2, #1
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f91f 	bl	8007436 <USBD_CtlSendData>
        break;
 80071f8:	e004      	b.n	8007204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8a9 	bl	8007354 <USBD_CtlError>
        break;
 8007202:	bf00      	nop
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d81e      	bhi.n	8007262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	88db      	ldrh	r3, [r3, #6]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d004      	beq.n	8007236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f890 	bl	8007354 <USBD_CtlError>
        break;
 8007234:	e01a      	b.n	800726c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f043 0202 	orr.w	r2, r3, #2
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	330c      	adds	r3, #12
 8007256:	2202      	movs	r2, #2
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8eb 	bl	8007436 <USBD_CtlSendData>
      break;
 8007260:	e004      	b.n	800726c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f875 	bl	8007354 <USBD_CtlError>
      break;
 800726a:	bf00      	nop
  }
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	885b      	ldrh	r3, [r3, #2]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d106      	bne.n	8007294 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f92b 	bl	80074ea <USBD_CtlSendStatus>
  }
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d80b      	bhi.n	80072cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d10c      	bne.n	80072d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f910 	bl	80074ea <USBD_CtlSendStatus>
      }
      break;
 80072ca:	e004      	b.n	80072d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f840 	bl	8007354 <USBD_CtlError>
      break;
 80072d4:	e000      	b.n	80072d8 <USBD_ClrFeature+0x3c>
      break;
 80072d6:	bf00      	nop
  }
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	781a      	ldrb	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fabb 	bl	8006886 <SWAPBYTE>
 8007310:	4603      	mov	r3, r0
 8007312:	461a      	mov	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff faae 	bl	8006886 <SWAPBYTE>
 800732a:	4603      	mov	r3, r0
 800732c:	461a      	mov	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff faa1 	bl	8006886 <SWAPBYTE>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	80da      	strh	r2, [r3, #6]
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fce1 	bl	8007d28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007366:	2100      	movs	r1, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fcdd 	bl	8007d28 <USBD_LL_StallEP>
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d036      	beq.n	80073fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007390:	6938      	ldr	r0, [r7, #16]
 8007392:	f000 f836 	bl	8007402 <USBD_GetLen>
 8007396:	4603      	mov	r3, r0
 8007398:	3301      	adds	r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4413      	add	r3, r2
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	7812      	ldrb	r2, [r2, #0]
 80073ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
 80073b2:	3301      	adds	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4413      	add	r3, r2
 80073bc:	2203      	movs	r2, #3
 80073be:	701a      	strb	r2, [r3, #0]
  idx++;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	3301      	adds	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073c6:	e013      	b.n	80073f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	7812      	ldrb	r2, [r2, #0]
 80073d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3301      	adds	r3, #1
 80073d8:	613b      	str	r3, [r7, #16]
    idx++;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	3301      	adds	r3, #1
 80073de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4413      	add	r3, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	3301      	adds	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e7      	bne.n	80073c8 <USBD_GetString+0x52>
 80073f8:	e000      	b.n	80073fc <USBD_GetString+0x86>
    return;
 80073fa:	bf00      	nop
  }
}
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007412:	e005      	b.n	8007420 <USBD_GetLen+0x1e>
  {
    len++;
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	3301      	adds	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	3301      	adds	r3, #1
 800741e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f5      	bne.n	8007414 <USBD_GetLen+0x12>
  }

  return len;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2202      	movs	r2, #2
 8007446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fcec 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	2100      	movs	r1, #0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fcdb 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2203      	movs	r2, #3
 800749e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fcdf 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fcce 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2204      	movs	r2, #4
 80074f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074fa:	2300      	movs	r3, #0
 80074fc:	2200      	movs	r2, #0
 80074fe:	2100      	movs	r1, #0
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fc9a 	bl	8007e3a <USBD_LL_Transmit>

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2205      	movs	r2, #5
 800751c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007520:	2300      	movs	r3, #0
 8007522:	2200      	movs	r2, #0
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fca8 	bl	8007e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800753c:	2200      	movs	r2, #0
 800753e:	4912      	ldr	r1, [pc, #72]	; (8007588 <MX_USB_DEVICE_Init+0x50>)
 8007540:	4812      	ldr	r0, [pc, #72]	; (800758c <MX_USB_DEVICE_Init+0x54>)
 8007542:	f7fe fe8f 	bl	8006264 <USBD_Init>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800754c:	f7f9 fb90 	bl	8000c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007550:	490f      	ldr	r1, [pc, #60]	; (8007590 <MX_USB_DEVICE_Init+0x58>)
 8007552:	480e      	ldr	r0, [pc, #56]	; (800758c <MX_USB_DEVICE_Init+0x54>)
 8007554:	f7fe feb6 	bl	80062c4 <USBD_RegisterClass>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800755e:	f7f9 fb87 	bl	8000c70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007562:	490c      	ldr	r1, [pc, #48]	; (8007594 <MX_USB_DEVICE_Init+0x5c>)
 8007564:	4809      	ldr	r0, [pc, #36]	; (800758c <MX_USB_DEVICE_Init+0x54>)
 8007566:	f7fe fdd7 	bl	8006118 <USBD_CDC_RegisterInterface>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007570:	f7f9 fb7e 	bl	8000c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007574:	4805      	ldr	r0, [pc, #20]	; (800758c <MX_USB_DEVICE_Init+0x54>)
 8007576:	f7fe fecc 	bl	8006312 <USBD_Start>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007580:	f7f9 fb76 	bl	8000c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}
 8007588:	2000016c 	.word	0x2000016c
 800758c:	200005c4 	.word	0x200005c4
 8007590:	20000054 	.word	0x20000054
 8007594:	20000158 	.word	0x20000158

08007598 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800759c:	2200      	movs	r2, #0
 800759e:	4905      	ldr	r1, [pc, #20]	; (80075b4 <CDC_Init_FS+0x1c>)
 80075a0:	4805      	ldr	r0, [pc, #20]	; (80075b8 <CDC_Init_FS+0x20>)
 80075a2:	f7fe fdce 	bl	8006142 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075a6:	4905      	ldr	r1, [pc, #20]	; (80075bc <CDC_Init_FS+0x24>)
 80075a8:	4803      	ldr	r0, [pc, #12]	; (80075b8 <CDC_Init_FS+0x20>)
 80075aa:	f7fe fde8 	bl	800617e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20001094 	.word	0x20001094
 80075b8:	200005c4 	.word	0x200005c4
 80075bc:	20000894 	.word	0x20000894

080075c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075c0:	b480      	push	{r7}
 80075c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
 80075dc:	4613      	mov	r3, r2
 80075de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b23      	cmp	r3, #35	; 0x23
 80075e4:	d84a      	bhi.n	800767c <CDC_Control_FS+0xac>
 80075e6:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <CDC_Control_FS+0x1c>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	0800767d 	.word	0x0800767d
 80075f0:	0800767d 	.word	0x0800767d
 80075f4:	0800767d 	.word	0x0800767d
 80075f8:	0800767d 	.word	0x0800767d
 80075fc:	0800767d 	.word	0x0800767d
 8007600:	0800767d 	.word	0x0800767d
 8007604:	0800767d 	.word	0x0800767d
 8007608:	0800767d 	.word	0x0800767d
 800760c:	0800767d 	.word	0x0800767d
 8007610:	0800767d 	.word	0x0800767d
 8007614:	0800767d 	.word	0x0800767d
 8007618:	0800767d 	.word	0x0800767d
 800761c:	0800767d 	.word	0x0800767d
 8007620:	0800767d 	.word	0x0800767d
 8007624:	0800767d 	.word	0x0800767d
 8007628:	0800767d 	.word	0x0800767d
 800762c:	0800767d 	.word	0x0800767d
 8007630:	0800767d 	.word	0x0800767d
 8007634:	0800767d 	.word	0x0800767d
 8007638:	0800767d 	.word	0x0800767d
 800763c:	0800767d 	.word	0x0800767d
 8007640:	0800767d 	.word	0x0800767d
 8007644:	0800767d 	.word	0x0800767d
 8007648:	0800767d 	.word	0x0800767d
 800764c:	0800767d 	.word	0x0800767d
 8007650:	0800767d 	.word	0x0800767d
 8007654:	0800767d 	.word	0x0800767d
 8007658:	0800767d 	.word	0x0800767d
 800765c:	0800767d 	.word	0x0800767d
 8007660:	0800767d 	.word	0x0800767d
 8007664:	0800767d 	.word	0x0800767d
 8007668:	0800767d 	.word	0x0800767d
 800766c:	0800767d 	.word	0x0800767d
 8007670:	0800767d 	.word	0x0800767d
 8007674:	0800767d 	.word	0x0800767d
 8007678:	0800767d 	.word	0x0800767d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800767c:	bf00      	nop
  }

  return (USBD_OK);
 800767e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4805      	ldr	r0, [pc, #20]	; (80076b0 <CDC_Receive_FS+0x24>)
 800769a:	f7fe fd70 	bl	800617e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800769e:	4804      	ldr	r0, [pc, #16]	; (80076b0 <CDC_Receive_FS+0x24>)
 80076a0:	f7fe fdb6 	bl	8006210 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	200005c4 	.word	0x200005c4

080076b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <CDC_Transmit_FS+0x48>)
 80076c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e00b      	b.n	80076f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076da:	887b      	ldrh	r3, [r7, #2]
 80076dc:	461a      	mov	r2, r3
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	4806      	ldr	r0, [pc, #24]	; (80076fc <CDC_Transmit_FS+0x48>)
 80076e2:	f7fe fd2e 	bl	8006142 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076e6:	4805      	ldr	r0, [pc, #20]	; (80076fc <CDC_Transmit_FS+0x48>)
 80076e8:	f7fe fd62 	bl	80061b0 <USBD_CDC_TransmitPacket>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200005c4 	.word	0x200005c4

08007700 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	4613      	mov	r3, r2
 800770c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2212      	movs	r2, #18
 8007734:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000188 	.word	0x20000188

08007748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2204      	movs	r2, #4
 8007758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800775a:	4b03      	ldr	r3, [pc, #12]	; (8007768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	2000019c 	.word	0x2000019c

0800776c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4907      	ldr	r1, [pc, #28]	; (80077a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007782:	4808      	ldr	r0, [pc, #32]	; (80077a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007784:	f7ff fdf7 	bl	8007376 <USBD_GetString>
 8007788:	e004      	b.n	8007794 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4904      	ldr	r1, [pc, #16]	; (80077a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800778e:	4805      	ldr	r0, [pc, #20]	; (80077a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007790:	f7ff fdf1 	bl	8007376 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20001894 	.word	0x20001894
 80077a4:	080089dc 	.word	0x080089dc

080077a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	6039      	str	r1, [r7, #0]
 80077b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	4904      	ldr	r1, [pc, #16]	; (80077c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077b8:	4804      	ldr	r0, [pc, #16]	; (80077cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077ba:	f7ff fddc 	bl	8007376 <USBD_GetString>
  return USBD_StrDesc;
 80077be:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	20001894 	.word	0x20001894
 80077cc:	080089f4 	.word	0x080089f4

080077d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	221a      	movs	r2, #26
 80077e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077e2:	f000 f843 	bl	800786c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077e6:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200001a0 	.word	0x200001a0

080077f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d105      	bne.n	8007812 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4907      	ldr	r1, [pc, #28]	; (8007828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800780a:	4808      	ldr	r0, [pc, #32]	; (800782c <USBD_FS_ConfigStrDescriptor+0x38>)
 800780c:	f7ff fdb3 	bl	8007376 <USBD_GetString>
 8007810:	e004      	b.n	800781c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	4904      	ldr	r1, [pc, #16]	; (8007828 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007816:	4805      	ldr	r0, [pc, #20]	; (800782c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007818:	f7ff fdad 	bl	8007376 <USBD_GetString>
  }
  return USBD_StrDesc;
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20001894 	.word	0x20001894
 800782c:	08008a08 	.word	0x08008a08

08007830 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	6039      	str	r1, [r7, #0]
 800783a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007842:	683a      	ldr	r2, [r7, #0]
 8007844:	4907      	ldr	r1, [pc, #28]	; (8007864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007848:	f7ff fd95 	bl	8007376 <USBD_GetString>
 800784c:	e004      	b.n	8007858 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4904      	ldr	r1, [pc, #16]	; (8007864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007852:	4805      	ldr	r0, [pc, #20]	; (8007868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007854:	f7ff fd8f 	bl	8007376 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20001894 	.word	0x20001894
 8007868:	08008a14 	.word	0x08008a14

0800786c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <Get_SerialNum+0x44>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <Get_SerialNum+0x48>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800787e:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <Get_SerialNum+0x4c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d009      	beq.n	80078a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007892:	2208      	movs	r2, #8
 8007894:	4909      	ldr	r1, [pc, #36]	; (80078bc <Get_SerialNum+0x50>)
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f814 	bl	80078c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800789c:	2204      	movs	r2, #4
 800789e:	4908      	ldr	r1, [pc, #32]	; (80078c0 <Get_SerialNum+0x54>)
 80078a0:	68b8      	ldr	r0, [r7, #8]
 80078a2:	f000 f80f 	bl	80078c4 <IntToUnicode>
  }
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	1fff7a10 	.word	0x1fff7a10
 80078b4:	1fff7a14 	.word	0x1fff7a14
 80078b8:	1fff7a18 	.word	0x1fff7a18
 80078bc:	200001a2 	.word	0x200001a2
 80078c0:	200001b2 	.word	0x200001b2

080078c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	75fb      	strb	r3, [r7, #23]
 80078da:	e027      	b.n	800792c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	0f1b      	lsrs	r3, r3, #28
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d80b      	bhi.n	80078fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	0f1b      	lsrs	r3, r3, #28
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	4619      	mov	r1, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	440b      	add	r3, r1
 80078f4:	3230      	adds	r2, #48	; 0x30
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e00a      	b.n	8007912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	0f1b      	lsrs	r3, r3, #28
 8007900:	b2da      	uxtb	r2, r3
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4619      	mov	r1, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	440b      	add	r3, r1
 800790c:	3237      	adds	r2, #55	; 0x37
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	3301      	adds	r3, #1
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	3301      	adds	r3, #1
 800792a:	75fb      	strb	r3, [r7, #23]
 800792c:	7dfa      	ldrb	r2, [r7, #23]
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d3d3      	bcc.n	80078dc <IntToUnicode+0x18>
  }
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007964:	d13a      	bne.n	80079dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 8007970:	f043 0301 	orr.w	r3, r3, #1
 8007974:	6313      	str	r3, [r2, #48]	; 0x30
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007988:	2302      	movs	r3, #2
 800798a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798c:	2300      	movs	r3, #0
 800798e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007990:	2303      	movs	r3, #3
 8007992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007994:	230a      	movs	r3, #10
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007998:	f107 0314 	add.w	r3, r7, #20
 800799c:	4619      	mov	r1, r3
 800799e:	4812      	ldr	r0, [pc, #72]	; (80079e8 <HAL_PCD_MspInit+0xa4>)
 80079a0:	f7fa fa4e 	bl	8001e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 80079aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ae:	6353      	str	r3, [r2, #52]	; 0x34
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	4a0a      	ldr	r2, [pc, #40]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 80079ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079be:	6453      	str	r3, [r2, #68]	; 0x44
 80079c0:	4b08      	ldr	r3, [pc, #32]	; (80079e4 <HAL_PCD_MspInit+0xa0>)
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80079cc:	2200      	movs	r2, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	2043      	movs	r0, #67	; 0x43
 80079d2:	f7fa f9fe 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80079d6:	2043      	movs	r0, #67	; 0x43
 80079d8:	f7fa fa17 	bl	8001e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80079dc:	bf00      	nop
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40023800 	.word	0x40023800
 80079e8:	40020000 	.word	0x40020000

080079ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fcd0 	bl	80063a8 <USBD_LL_SetupStage>
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f7fe fd0a 	bl	8006452 <USBD_LL_DataOutStage>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	3348      	adds	r3, #72	; 0x48
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7fe fd53 	bl	8006518 <USBD_LL_DataInStage>
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe fe67 	bl	800675c <USBD_LL_SOF>
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d102      	bne.n	8007ab0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	e008      	b.n	8007ac2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d102      	bne.n	8007abe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
 8007abc:	e001      	b.n	8007ac2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007abe:	f7f9 f8d7 	bl	8000c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ac8:	7bfa      	ldrb	r2, [r7, #15]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fe07 	bl	80066e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe fdb3 	bl	8006644 <USBD_LL_Reset>
}
 8007ade:	bf00      	nop
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fe02 	bl	8006700 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <HAL_PCD_SuspendCallback+0x48>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	4a03      	ldr	r2, [pc, #12]	; (8007b30 <HAL_PCD_SuspendCallback+0x48>)
 8007b22:	f043 0306 	orr.w	r3, r3, #6
 8007b26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	e000ed00 	.word	0xe000ed00

08007b34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fdf2 	bl	800672c <USBD_LL_Resume>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	4611      	mov	r1, r2
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fe40 	bl	80067ec <USBD_LL_IsoOUTIncomplete>
}
 8007b6c:	bf00      	nop
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	4611      	mov	r1, r2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fe08 	bl	80067a0 <USBD_LL_IsoINIncomplete>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fe46 	bl	8006838 <USBD_LL_DevConnected>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fe fe43 	bl	800684e <USBD_LL_DevDisconnected>
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d13c      	bne.n	8007c5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007be0:	4a20      	ldr	r2, [pc, #128]	; (8007c64 <USBD_LL_Init+0x94>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bf0:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <USBD_LL_Init+0x94>)
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bfe:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c00:	2202      	movs	r2, #2
 8007c02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c10:	4b14      	ldr	r3, [pc, #80]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c22:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c28:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c2e:	480d      	ldr	r0, [pc, #52]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c30:	f7fa fabb 	bl	80021aa <HAL_PCD_Init>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007c3a:	f7f9 f819 	bl	8000c70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007c3e:	2180      	movs	r1, #128	; 0x80
 8007c40:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c42:	f7fb fc18 	bl	8003476 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4806      	ldr	r0, [pc, #24]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c4c:	f7fb fbcc 	bl	80033e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c50:	2280      	movs	r2, #128	; 0x80
 8007c52:	2101      	movs	r1, #1
 8007c54:	4803      	ldr	r0, [pc, #12]	; (8007c64 <USBD_LL_Init+0x94>)
 8007c56:	f7fb fbc7 	bl	80033e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20001a94 	.word	0x20001a94

08007c68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fa fbb0 	bl	80023e4 <HAL_PCD_Start>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f942 	bl	8007f14 <USBD_Get_USB_Status>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	461a      	mov	r2, r3
 8007cac:	4603      	mov	r3, r0
 8007cae:	70fb      	strb	r3, [r7, #3]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70bb      	strb	r3, [r7, #2]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cc6:	78bb      	ldrb	r3, [r7, #2]
 8007cc8:	883a      	ldrh	r2, [r7, #0]
 8007cca:	78f9      	ldrb	r1, [r7, #3]
 8007ccc:	f7fa ff94 	bl	8002bf8 <HAL_PCD_EP_Open>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f91c 	bl	8007f14 <USBD_Get_USB_Status>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4611      	mov	r1, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fa ffdd 	bl	8002cc8 <HAL_PCD_EP_Close>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f8fd 	bl	8007f14 <USBD_Get_USB_Status>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fb f8b5 	bl	8002eb6 <HAL_PCD_EP_SetStall>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f8de 	bl	8007f14 <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fb f8fa 	bl	8002f7e <HAL_PCD_EP_ClrStall>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f8bf 	bl	8007f14 <USBD_Get_USB_Status>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da0b      	bge.n	8007dd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dc6:	68f9      	ldr	r1, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	333e      	adds	r3, #62	; 0x3e
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	e00b      	b.n	8007df0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dde:	68f9      	ldr	r1, [r7, #12]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e16:	78fa      	ldrb	r2, [r7, #3]
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fa fec7 	bl	8002bae <HAL_PCD_SetAddress>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f874 	bl	8007f14 <USBD_Get_USB_Status>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b086      	sub	sp, #24
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	460b      	mov	r3, r1
 8007e48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e58:	7af9      	ldrb	r1, [r7, #11]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f7fa ffe0 	bl	8002e22 <HAL_PCD_EP_Transmit>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f000 f853 	bl	8007f14 <USBD_Get_USB_Status>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e9a:	7af9      	ldrb	r1, [r7, #11]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	f7fa ff5c 	bl	8002d5c <HAL_PCD_EP_Receive>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f832 	bl	8007f14 <USBD_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fa ff8c 	bl	8002df2 <HAL_PCD_EP_GetRxCount>
 8007eda:	4603      	mov	r3, r0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <USBD_static_malloc+0x18>)
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000244 	.word	0x20000244

08007f00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d817      	bhi.n	8007f58 <USBD_Get_USB_Status+0x44>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <USBD_Get_USB_Status+0x1c>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f47 	.word	0x08007f47
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f53 	.word	0x08007f53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
    break;
 8007f44:	e00b      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	73fb      	strb	r3, [r7, #15]
    break;
 8007f4a:	e008      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f50:	e005      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f52:	2303      	movs	r3, #3
 8007f54:	73fb      	strb	r3, [r7, #15]
    break;
 8007f56:	e002      	b.n	8007f5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f5c:	bf00      	nop
  }
  return usb_status;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <atoi>:
 8007f6c:	220a      	movs	r2, #10
 8007f6e:	2100      	movs	r1, #0
 8007f70:	f000 b8d6 	b.w	8008120 <strtol>

08007f74 <__errno>:
 8007f74:	4b01      	ldr	r3, [pc, #4]	; (8007f7c <__errno+0x8>)
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	200001bc 	.word	0x200001bc

08007f80 <__libc_init_array>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	4d0d      	ldr	r5, [pc, #52]	; (8007fb8 <__libc_init_array+0x38>)
 8007f84:	4c0d      	ldr	r4, [pc, #52]	; (8007fbc <__libc_init_array+0x3c>)
 8007f86:	1b64      	subs	r4, r4, r5
 8007f88:	10a4      	asrs	r4, r4, #2
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	42a6      	cmp	r6, r4
 8007f8e:	d109      	bne.n	8007fa4 <__libc_init_array+0x24>
 8007f90:	4d0b      	ldr	r5, [pc, #44]	; (8007fc0 <__libc_init_array+0x40>)
 8007f92:	4c0c      	ldr	r4, [pc, #48]	; (8007fc4 <__libc_init_array+0x44>)
 8007f94:	f000 fcdc 	bl	8008950 <_init>
 8007f98:	1b64      	subs	r4, r4, r5
 8007f9a:	10a4      	asrs	r4, r4, #2
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	42a6      	cmp	r6, r4
 8007fa0:	d105      	bne.n	8007fae <__libc_init_array+0x2e>
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa8:	4798      	blx	r3
 8007faa:	3601      	adds	r6, #1
 8007fac:	e7ee      	b.n	8007f8c <__libc_init_array+0xc>
 8007fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb2:	4798      	blx	r3
 8007fb4:	3601      	adds	r6, #1
 8007fb6:	e7f2      	b.n	8007f9e <__libc_init_array+0x1e>
 8007fb8:	08008b78 	.word	0x08008b78
 8007fbc:	08008b78 	.word	0x08008b78
 8007fc0:	08008b78 	.word	0x08008b78
 8007fc4:	08008b7c 	.word	0x08008b7c

08007fc8 <memset>:
 8007fc8:	4402      	add	r2, r0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <memset+0xa>
 8007fd0:	4770      	bx	lr
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	e7f9      	b.n	8007fcc <memset+0x4>

08007fd8 <siprintf>:
 8007fd8:	b40e      	push	{r1, r2, r3}
 8007fda:	b500      	push	{lr}
 8007fdc:	b09c      	sub	sp, #112	; 0x70
 8007fde:	ab1d      	add	r3, sp, #116	; 0x74
 8007fe0:	9002      	str	r0, [sp, #8]
 8007fe2:	9006      	str	r0, [sp, #24]
 8007fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fe8:	4809      	ldr	r0, [pc, #36]	; (8008010 <siprintf+0x38>)
 8007fea:	9107      	str	r1, [sp, #28]
 8007fec:	9104      	str	r1, [sp, #16]
 8007fee:	4909      	ldr	r1, [pc, #36]	; (8008014 <siprintf+0x3c>)
 8007ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff4:	9105      	str	r1, [sp, #20]
 8007ff6:	6800      	ldr	r0, [r0, #0]
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	a902      	add	r1, sp, #8
 8007ffc:	f000 f8f6 	bl	80081ec <_svfiprintf_r>
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
 8008006:	b01c      	add	sp, #112	; 0x70
 8008008:	f85d eb04 	ldr.w	lr, [sp], #4
 800800c:	b003      	add	sp, #12
 800800e:	4770      	bx	lr
 8008010:	200001bc 	.word	0x200001bc
 8008014:	ffff0208 	.word	0xffff0208

08008018 <_strtol_l.isra.0>:
 8008018:	2b01      	cmp	r3, #1
 800801a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801e:	d001      	beq.n	8008024 <_strtol_l.isra.0+0xc>
 8008020:	2b24      	cmp	r3, #36	; 0x24
 8008022:	d906      	bls.n	8008032 <_strtol_l.isra.0+0x1a>
 8008024:	f7ff ffa6 	bl	8007f74 <__errno>
 8008028:	2316      	movs	r3, #22
 800802a:	6003      	str	r3, [r0, #0]
 800802c:	2000      	movs	r0, #0
 800802e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008032:	4f3a      	ldr	r7, [pc, #232]	; (800811c <_strtol_l.isra.0+0x104>)
 8008034:	468e      	mov	lr, r1
 8008036:	4676      	mov	r6, lr
 8008038:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800803c:	5de5      	ldrb	r5, [r4, r7]
 800803e:	f015 0508 	ands.w	r5, r5, #8
 8008042:	d1f8      	bne.n	8008036 <_strtol_l.isra.0+0x1e>
 8008044:	2c2d      	cmp	r4, #45	; 0x2d
 8008046:	d134      	bne.n	80080b2 <_strtol_l.isra.0+0x9a>
 8008048:	f89e 4000 	ldrb.w	r4, [lr]
 800804c:	f04f 0801 	mov.w	r8, #1
 8008050:	f106 0e02 	add.w	lr, r6, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d05c      	beq.n	8008112 <_strtol_l.isra.0+0xfa>
 8008058:	2b10      	cmp	r3, #16
 800805a:	d10c      	bne.n	8008076 <_strtol_l.isra.0+0x5e>
 800805c:	2c30      	cmp	r4, #48	; 0x30
 800805e:	d10a      	bne.n	8008076 <_strtol_l.isra.0+0x5e>
 8008060:	f89e 4000 	ldrb.w	r4, [lr]
 8008064:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008068:	2c58      	cmp	r4, #88	; 0x58
 800806a:	d14d      	bne.n	8008108 <_strtol_l.isra.0+0xf0>
 800806c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008070:	2310      	movs	r3, #16
 8008072:	f10e 0e02 	add.w	lr, lr, #2
 8008076:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800807a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800807e:	2600      	movs	r6, #0
 8008080:	fbbc f9f3 	udiv	r9, ip, r3
 8008084:	4635      	mov	r5, r6
 8008086:	fb03 ca19 	mls	sl, r3, r9, ip
 800808a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800808e:	2f09      	cmp	r7, #9
 8008090:	d818      	bhi.n	80080c4 <_strtol_l.isra.0+0xac>
 8008092:	463c      	mov	r4, r7
 8008094:	42a3      	cmp	r3, r4
 8008096:	dd24      	ble.n	80080e2 <_strtol_l.isra.0+0xca>
 8008098:	2e00      	cmp	r6, #0
 800809a:	db1f      	blt.n	80080dc <_strtol_l.isra.0+0xc4>
 800809c:	45a9      	cmp	r9, r5
 800809e:	d31d      	bcc.n	80080dc <_strtol_l.isra.0+0xc4>
 80080a0:	d101      	bne.n	80080a6 <_strtol_l.isra.0+0x8e>
 80080a2:	45a2      	cmp	sl, r4
 80080a4:	db1a      	blt.n	80080dc <_strtol_l.isra.0+0xc4>
 80080a6:	fb05 4503 	mla	r5, r5, r3, r4
 80080aa:	2601      	movs	r6, #1
 80080ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80080b0:	e7eb      	b.n	800808a <_strtol_l.isra.0+0x72>
 80080b2:	2c2b      	cmp	r4, #43	; 0x2b
 80080b4:	bf08      	it	eq
 80080b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80080ba:	46a8      	mov	r8, r5
 80080bc:	bf08      	it	eq
 80080be:	f106 0e02 	addeq.w	lr, r6, #2
 80080c2:	e7c7      	b.n	8008054 <_strtol_l.isra.0+0x3c>
 80080c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80080c8:	2f19      	cmp	r7, #25
 80080ca:	d801      	bhi.n	80080d0 <_strtol_l.isra.0+0xb8>
 80080cc:	3c37      	subs	r4, #55	; 0x37
 80080ce:	e7e1      	b.n	8008094 <_strtol_l.isra.0+0x7c>
 80080d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80080d4:	2f19      	cmp	r7, #25
 80080d6:	d804      	bhi.n	80080e2 <_strtol_l.isra.0+0xca>
 80080d8:	3c57      	subs	r4, #87	; 0x57
 80080da:	e7db      	b.n	8008094 <_strtol_l.isra.0+0x7c>
 80080dc:	f04f 36ff 	mov.w	r6, #4294967295
 80080e0:	e7e4      	b.n	80080ac <_strtol_l.isra.0+0x94>
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	da05      	bge.n	80080f2 <_strtol_l.isra.0+0xda>
 80080e6:	2322      	movs	r3, #34	; 0x22
 80080e8:	6003      	str	r3, [r0, #0]
 80080ea:	4665      	mov	r5, ip
 80080ec:	b942      	cbnz	r2, 8008100 <_strtol_l.isra.0+0xe8>
 80080ee:	4628      	mov	r0, r5
 80080f0:	e79d      	b.n	800802e <_strtol_l.isra.0+0x16>
 80080f2:	f1b8 0f00 	cmp.w	r8, #0
 80080f6:	d000      	beq.n	80080fa <_strtol_l.isra.0+0xe2>
 80080f8:	426d      	negs	r5, r5
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	d0f7      	beq.n	80080ee <_strtol_l.isra.0+0xd6>
 80080fe:	b10e      	cbz	r6, 8008104 <_strtol_l.isra.0+0xec>
 8008100:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	e7f2      	b.n	80080ee <_strtol_l.isra.0+0xd6>
 8008108:	2430      	movs	r4, #48	; 0x30
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1b3      	bne.n	8008076 <_strtol_l.isra.0+0x5e>
 800810e:	2308      	movs	r3, #8
 8008110:	e7b1      	b.n	8008076 <_strtol_l.isra.0+0x5e>
 8008112:	2c30      	cmp	r4, #48	; 0x30
 8008114:	d0a4      	beq.n	8008060 <_strtol_l.isra.0+0x48>
 8008116:	230a      	movs	r3, #10
 8008118:	e7ad      	b.n	8008076 <_strtol_l.isra.0+0x5e>
 800811a:	bf00      	nop
 800811c:	08008a3d 	.word	0x08008a3d

08008120 <strtol>:
 8008120:	4613      	mov	r3, r2
 8008122:	460a      	mov	r2, r1
 8008124:	4601      	mov	r1, r0
 8008126:	4802      	ldr	r0, [pc, #8]	; (8008130 <strtol+0x10>)
 8008128:	6800      	ldr	r0, [r0, #0]
 800812a:	f7ff bf75 	b.w	8008018 <_strtol_l.isra.0>
 800812e:	bf00      	nop
 8008130:	200001bc 	.word	0x200001bc

08008134 <__ssputs_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	688e      	ldr	r6, [r1, #8]
 800813a:	429e      	cmp	r6, r3
 800813c:	4682      	mov	sl, r0
 800813e:	460c      	mov	r4, r1
 8008140:	4690      	mov	r8, r2
 8008142:	461f      	mov	r7, r3
 8008144:	d838      	bhi.n	80081b8 <__ssputs_r+0x84>
 8008146:	898a      	ldrh	r2, [r1, #12]
 8008148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800814c:	d032      	beq.n	80081b4 <__ssputs_r+0x80>
 800814e:	6825      	ldr	r5, [r4, #0]
 8008150:	6909      	ldr	r1, [r1, #16]
 8008152:	eba5 0901 	sub.w	r9, r5, r1
 8008156:	6965      	ldr	r5, [r4, #20]
 8008158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800815c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008160:	3301      	adds	r3, #1
 8008162:	444b      	add	r3, r9
 8008164:	106d      	asrs	r5, r5, #1
 8008166:	429d      	cmp	r5, r3
 8008168:	bf38      	it	cc
 800816a:	461d      	movcc	r5, r3
 800816c:	0553      	lsls	r3, r2, #21
 800816e:	d531      	bpl.n	80081d4 <__ssputs_r+0xa0>
 8008170:	4629      	mov	r1, r5
 8008172:	f000 fb47 	bl	8008804 <_malloc_r>
 8008176:	4606      	mov	r6, r0
 8008178:	b950      	cbnz	r0, 8008190 <__ssputs_r+0x5c>
 800817a:	230c      	movs	r3, #12
 800817c:	f8ca 3000 	str.w	r3, [sl]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	6921      	ldr	r1, [r4, #16]
 8008192:	464a      	mov	r2, r9
 8008194:	f000 fabe 	bl	8008714 <memcpy>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800819e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	6126      	str	r6, [r4, #16]
 80081a6:	6165      	str	r5, [r4, #20]
 80081a8:	444e      	add	r6, r9
 80081aa:	eba5 0509 	sub.w	r5, r5, r9
 80081ae:	6026      	str	r6, [r4, #0]
 80081b0:	60a5      	str	r5, [r4, #8]
 80081b2:	463e      	mov	r6, r7
 80081b4:	42be      	cmp	r6, r7
 80081b6:	d900      	bls.n	80081ba <__ssputs_r+0x86>
 80081b8:	463e      	mov	r6, r7
 80081ba:	4632      	mov	r2, r6
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	4641      	mov	r1, r8
 80081c0:	f000 fab6 	bl	8008730 <memmove>
 80081c4:	68a3      	ldr	r3, [r4, #8]
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	4432      	add	r2, r6
 80081cc:	60a3      	str	r3, [r4, #8]
 80081ce:	6022      	str	r2, [r4, #0]
 80081d0:	2000      	movs	r0, #0
 80081d2:	e7db      	b.n	800818c <__ssputs_r+0x58>
 80081d4:	462a      	mov	r2, r5
 80081d6:	f000 fb6f 	bl	80088b8 <_realloc_r>
 80081da:	4606      	mov	r6, r0
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1e1      	bne.n	80081a4 <__ssputs_r+0x70>
 80081e0:	6921      	ldr	r1, [r4, #16]
 80081e2:	4650      	mov	r0, sl
 80081e4:	f000 fabe 	bl	8008764 <_free_r>
 80081e8:	e7c7      	b.n	800817a <__ssputs_r+0x46>
	...

080081ec <_svfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	4698      	mov	r8, r3
 80081f2:	898b      	ldrh	r3, [r1, #12]
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	b09d      	sub	sp, #116	; 0x74
 80081f8:	4607      	mov	r7, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	d50e      	bpl.n	800821e <_svfiprintf_r+0x32>
 8008200:	690b      	ldr	r3, [r1, #16]
 8008202:	b963      	cbnz	r3, 800821e <_svfiprintf_r+0x32>
 8008204:	2140      	movs	r1, #64	; 0x40
 8008206:	f000 fafd 	bl	8008804 <_malloc_r>
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	6128      	str	r0, [r5, #16]
 800820e:	b920      	cbnz	r0, 800821a <_svfiprintf_r+0x2e>
 8008210:	230c      	movs	r3, #12
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e0d1      	b.n	80083be <_svfiprintf_r+0x1d2>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	616b      	str	r3, [r5, #20]
 800821e:	2300      	movs	r3, #0
 8008220:	9309      	str	r3, [sp, #36]	; 0x24
 8008222:	2320      	movs	r3, #32
 8008224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008228:	f8cd 800c 	str.w	r8, [sp, #12]
 800822c:	2330      	movs	r3, #48	; 0x30
 800822e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d8 <_svfiprintf_r+0x1ec>
 8008232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008236:	f04f 0901 	mov.w	r9, #1
 800823a:	4623      	mov	r3, r4
 800823c:	469a      	mov	sl, r3
 800823e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008242:	b10a      	cbz	r2, 8008248 <_svfiprintf_r+0x5c>
 8008244:	2a25      	cmp	r2, #37	; 0x25
 8008246:	d1f9      	bne.n	800823c <_svfiprintf_r+0x50>
 8008248:	ebba 0b04 	subs.w	fp, sl, r4
 800824c:	d00b      	beq.n	8008266 <_svfiprintf_r+0x7a>
 800824e:	465b      	mov	r3, fp
 8008250:	4622      	mov	r2, r4
 8008252:	4629      	mov	r1, r5
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff ff6d 	bl	8008134 <__ssputs_r>
 800825a:	3001      	adds	r0, #1
 800825c:	f000 80aa 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008262:	445a      	add	r2, fp
 8008264:	9209      	str	r2, [sp, #36]	; 0x24
 8008266:	f89a 3000 	ldrb.w	r3, [sl]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 80a2 	beq.w	80083b4 <_svfiprintf_r+0x1c8>
 8008270:	2300      	movs	r3, #0
 8008272:	f04f 32ff 	mov.w	r2, #4294967295
 8008276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827a:	f10a 0a01 	add.w	sl, sl, #1
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008286:	931a      	str	r3, [sp, #104]	; 0x68
 8008288:	4654      	mov	r4, sl
 800828a:	2205      	movs	r2, #5
 800828c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008290:	4851      	ldr	r0, [pc, #324]	; (80083d8 <_svfiprintf_r+0x1ec>)
 8008292:	f7f7 ff9d 	bl	80001d0 <memchr>
 8008296:	9a04      	ldr	r2, [sp, #16]
 8008298:	b9d8      	cbnz	r0, 80082d2 <_svfiprintf_r+0xe6>
 800829a:	06d0      	lsls	r0, r2, #27
 800829c:	bf44      	itt	mi
 800829e:	2320      	movmi	r3, #32
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	0711      	lsls	r1, r2, #28
 80082a6:	bf44      	itt	mi
 80082a8:	232b      	movmi	r3, #43	; 0x2b
 80082aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ae:	f89a 3000 	ldrb.w	r3, [sl]
 80082b2:	2b2a      	cmp	r3, #42	; 0x2a
 80082b4:	d015      	beq.n	80082e2 <_svfiprintf_r+0xf6>
 80082b6:	9a07      	ldr	r2, [sp, #28]
 80082b8:	4654      	mov	r4, sl
 80082ba:	2000      	movs	r0, #0
 80082bc:	f04f 0c0a 	mov.w	ip, #10
 80082c0:	4621      	mov	r1, r4
 80082c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c6:	3b30      	subs	r3, #48	; 0x30
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d94e      	bls.n	800836a <_svfiprintf_r+0x17e>
 80082cc:	b1b0      	cbz	r0, 80082fc <_svfiprintf_r+0x110>
 80082ce:	9207      	str	r2, [sp, #28]
 80082d0:	e014      	b.n	80082fc <_svfiprintf_r+0x110>
 80082d2:	eba0 0308 	sub.w	r3, r0, r8
 80082d6:	fa09 f303 	lsl.w	r3, r9, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	46a2      	mov	sl, r4
 80082e0:	e7d2      	b.n	8008288 <_svfiprintf_r+0x9c>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d19      	adds	r1, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9103      	str	r1, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbb      	ittet	lt
 80082ee:	425b      	neglt	r3, r3
 80082f0:	f042 0202 	orrlt.w	r2, r2, #2
 80082f4:	9307      	strge	r3, [sp, #28]
 80082f6:	9307      	strlt	r3, [sp, #28]
 80082f8:	bfb8      	it	lt
 80082fa:	9204      	strlt	r2, [sp, #16]
 80082fc:	7823      	ldrb	r3, [r4, #0]
 80082fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008300:	d10c      	bne.n	800831c <_svfiprintf_r+0x130>
 8008302:	7863      	ldrb	r3, [r4, #1]
 8008304:	2b2a      	cmp	r3, #42	; 0x2a
 8008306:	d135      	bne.n	8008374 <_svfiprintf_r+0x188>
 8008308:	9b03      	ldr	r3, [sp, #12]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	9203      	str	r2, [sp, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfb8      	it	lt
 8008314:	f04f 33ff 	movlt.w	r3, #4294967295
 8008318:	3402      	adds	r4, #2
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e8 <_svfiprintf_r+0x1fc>
 8008320:	7821      	ldrb	r1, [r4, #0]
 8008322:	2203      	movs	r2, #3
 8008324:	4650      	mov	r0, sl
 8008326:	f7f7 ff53 	bl	80001d0 <memchr>
 800832a:	b140      	cbz	r0, 800833e <_svfiprintf_r+0x152>
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	eba0 000a 	sub.w	r0, r0, sl
 8008332:	fa03 f000 	lsl.w	r0, r3, r0
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	4303      	orrs	r3, r0
 800833a:	3401      	adds	r4, #1
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4826      	ldr	r0, [pc, #152]	; (80083dc <_svfiprintf_r+0x1f0>)
 8008344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008348:	2206      	movs	r2, #6
 800834a:	f7f7 ff41 	bl	80001d0 <memchr>
 800834e:	2800      	cmp	r0, #0
 8008350:	d038      	beq.n	80083c4 <_svfiprintf_r+0x1d8>
 8008352:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <_svfiprintf_r+0x1f4>)
 8008354:	bb1b      	cbnz	r3, 800839e <_svfiprintf_r+0x1b2>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	3307      	adds	r3, #7
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	3308      	adds	r3, #8
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008364:	4433      	add	r3, r6
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	e767      	b.n	800823a <_svfiprintf_r+0x4e>
 800836a:	fb0c 3202 	mla	r2, ip, r2, r3
 800836e:	460c      	mov	r4, r1
 8008370:	2001      	movs	r0, #1
 8008372:	e7a5      	b.n	80082c0 <_svfiprintf_r+0xd4>
 8008374:	2300      	movs	r3, #0
 8008376:	3401      	adds	r4, #1
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	4619      	mov	r1, r3
 800837c:	f04f 0c0a 	mov.w	ip, #10
 8008380:	4620      	mov	r0, r4
 8008382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008386:	3a30      	subs	r2, #48	; 0x30
 8008388:	2a09      	cmp	r2, #9
 800838a:	d903      	bls.n	8008394 <_svfiprintf_r+0x1a8>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0c5      	beq.n	800831c <_svfiprintf_r+0x130>
 8008390:	9105      	str	r1, [sp, #20]
 8008392:	e7c3      	b.n	800831c <_svfiprintf_r+0x130>
 8008394:	fb0c 2101 	mla	r1, ip, r1, r2
 8008398:	4604      	mov	r4, r0
 800839a:	2301      	movs	r3, #1
 800839c:	e7f0      	b.n	8008380 <_svfiprintf_r+0x194>
 800839e:	ab03      	add	r3, sp, #12
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	462a      	mov	r2, r5
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083a6:	a904      	add	r1, sp, #16
 80083a8:	4638      	mov	r0, r7
 80083aa:	f3af 8000 	nop.w
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	4606      	mov	r6, r0
 80083b2:	d1d6      	bne.n	8008362 <_svfiprintf_r+0x176>
 80083b4:	89ab      	ldrh	r3, [r5, #12]
 80083b6:	065b      	lsls	r3, r3, #25
 80083b8:	f53f af2c 	bmi.w	8008214 <_svfiprintf_r+0x28>
 80083bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083be:	b01d      	add	sp, #116	; 0x74
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	ab03      	add	r3, sp, #12
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	462a      	mov	r2, r5
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <_svfiprintf_r+0x1f8>)
 80083cc:	a904      	add	r1, sp, #16
 80083ce:	4638      	mov	r0, r7
 80083d0:	f000 f87a 	bl	80084c8 <_printf_i>
 80083d4:	e7eb      	b.n	80083ae <_svfiprintf_r+0x1c2>
 80083d6:	bf00      	nop
 80083d8:	08008b3d 	.word	0x08008b3d
 80083dc:	08008b47 	.word	0x08008b47
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008135 	.word	0x08008135
 80083e8:	08008b43 	.word	0x08008b43

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4699      	mov	r9, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008438:	1e13      	subs	r3, r2, #0
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008448:	4649      	mov	r1, r9
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	68e5      	ldr	r5, [r4, #12]
 8008456:	6832      	ldr	r2, [r6, #0]
 8008458:	f003 0306 	and.w	r3, r3, #6
 800845c:	2b04      	cmp	r3, #4
 800845e:	bf08      	it	eq
 8008460:	1aad      	subeq	r5, r5, r2
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	6922      	ldr	r2, [r4, #16]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4649      	mov	r1, r9
 8008488:	4638      	mov	r0, r7
 800848a:	47c0      	blx	r8
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	; 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4649      	mov	r1, r9
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	460c      	mov	r4, r1
 80084ce:	4691      	mov	r9, r2
 80084d0:	7e27      	ldrb	r7, [r4, #24]
 80084d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084d4:	2f78      	cmp	r7, #120	; 0x78
 80084d6:	4680      	mov	r8, r0
 80084d8:	469a      	mov	sl, r3
 80084da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	; 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d8 	beq.w	800869a <_printf_i+0x1d2>
 80084ea:	2f58      	cmp	r7, #88	; 0x58
 80084ec:	f000 80a3 	beq.w	8008636 <_printf_i+0x16e>
 80084f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a001      	add	r0, pc, #4	; (adr r0, 8008508 <_printf_i+0x40>)
 8008504:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008681 	.word	0x08008681
 8008538:	080085a5 	.word	0x080085a5
 800853c:	08008663 	.word	0x08008663
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	080086a3 	.word	0x080086a3
 800854c:	080084f1 	.word	0x080084f1
 8008550:	080085a5 	.word	0x080085a5
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	0800866b 	.word	0x0800866b
 8008560:	680b      	ldr	r3, [r1, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	600a      	str	r2, [r1, #0]
 8008568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e0a3      	b.n	80086bc <_printf_i+0x1f4>
 8008574:	6825      	ldr	r5, [r4, #0]
 8008576:	6808      	ldr	r0, [r1, #0]
 8008578:	062e      	lsls	r6, r5, #24
 800857a:	f100 0304 	add.w	r3, r0, #4
 800857e:	d50a      	bpl.n	8008596 <_printf_i+0xce>
 8008580:	6805      	ldr	r5, [r0, #0]
 8008582:	600b      	str	r3, [r1, #0]
 8008584:	2d00      	cmp	r5, #0
 8008586:	da03      	bge.n	8008590 <_printf_i+0xc8>
 8008588:	232d      	movs	r3, #45	; 0x2d
 800858a:	426d      	negs	r5, r5
 800858c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008590:	485e      	ldr	r0, [pc, #376]	; (800870c <_printf_i+0x244>)
 8008592:	230a      	movs	r3, #10
 8008594:	e019      	b.n	80085ca <_printf_i+0x102>
 8008596:	f015 0f40 	tst.w	r5, #64	; 0x40
 800859a:	6805      	ldr	r5, [r0, #0]
 800859c:	600b      	str	r3, [r1, #0]
 800859e:	bf18      	it	ne
 80085a0:	b22d      	sxthne	r5, r5
 80085a2:	e7ef      	b.n	8008584 <_printf_i+0xbc>
 80085a4:	680b      	ldr	r3, [r1, #0]
 80085a6:	6825      	ldr	r5, [r4, #0]
 80085a8:	1d18      	adds	r0, r3, #4
 80085aa:	6008      	str	r0, [r1, #0]
 80085ac:	0628      	lsls	r0, r5, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xec>
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	e002      	b.n	80085ba <_printf_i+0xf2>
 80085b4:	0669      	lsls	r1, r5, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xe8>
 80085b8:	881d      	ldrh	r5, [r3, #0]
 80085ba:	4854      	ldr	r0, [pc, #336]	; (800870c <_printf_i+0x244>)
 80085bc:	2f6f      	cmp	r7, #111	; 0x6f
 80085be:	bf0c      	ite	eq
 80085c0:	2308      	moveq	r3, #8
 80085c2:	230a      	movne	r3, #10
 80085c4:	2100      	movs	r1, #0
 80085c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ca:	6866      	ldr	r6, [r4, #4]
 80085cc:	60a6      	str	r6, [r4, #8]
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	bfa2      	ittt	ge
 80085d2:	6821      	ldrge	r1, [r4, #0]
 80085d4:	f021 0104 	bicge.w	r1, r1, #4
 80085d8:	6021      	strge	r1, [r4, #0]
 80085da:	b90d      	cbnz	r5, 80085e0 <_printf_i+0x118>
 80085dc:	2e00      	cmp	r6, #0
 80085de:	d04d      	beq.n	800867c <_printf_i+0x1b4>
 80085e0:	4616      	mov	r6, r2
 80085e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80085e6:	fb03 5711 	mls	r7, r3, r1, r5
 80085ea:	5dc7      	ldrb	r7, [r0, r7]
 80085ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085f0:	462f      	mov	r7, r5
 80085f2:	42bb      	cmp	r3, r7
 80085f4:	460d      	mov	r5, r1
 80085f6:	d9f4      	bls.n	80085e2 <_printf_i+0x11a>
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d10b      	bne.n	8008614 <_printf_i+0x14c>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07df      	lsls	r7, r3, #31
 8008600:	d508      	bpl.n	8008614 <_printf_i+0x14c>
 8008602:	6923      	ldr	r3, [r4, #16]
 8008604:	6861      	ldr	r1, [r4, #4]
 8008606:	4299      	cmp	r1, r3
 8008608:	bfde      	ittt	le
 800860a:	2330      	movle	r3, #48	; 0x30
 800860c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008610:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008614:	1b92      	subs	r2, r2, r6
 8008616:	6122      	str	r2, [r4, #16]
 8008618:	f8cd a000 	str.w	sl, [sp]
 800861c:	464b      	mov	r3, r9
 800861e:	aa03      	add	r2, sp, #12
 8008620:	4621      	mov	r1, r4
 8008622:	4640      	mov	r0, r8
 8008624:	f7ff fee2 	bl	80083ec <_printf_common>
 8008628:	3001      	adds	r0, #1
 800862a:	d14c      	bne.n	80086c6 <_printf_i+0x1fe>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b004      	add	sp, #16
 8008632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008636:	4835      	ldr	r0, [pc, #212]	; (800870c <_printf_i+0x244>)
 8008638:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	680e      	ldr	r6, [r1, #0]
 8008640:	061f      	lsls	r7, r3, #24
 8008642:	f856 5b04 	ldr.w	r5, [r6], #4
 8008646:	600e      	str	r6, [r1, #0]
 8008648:	d514      	bpl.n	8008674 <_printf_i+0x1ac>
 800864a:	07d9      	lsls	r1, r3, #31
 800864c:	bf44      	itt	mi
 800864e:	f043 0320 	orrmi.w	r3, r3, #32
 8008652:	6023      	strmi	r3, [r4, #0]
 8008654:	b91d      	cbnz	r5, 800865e <_printf_i+0x196>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f023 0320 	bic.w	r3, r3, #32
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	2310      	movs	r3, #16
 8008660:	e7b0      	b.n	80085c4 <_printf_i+0xfc>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	f043 0320 	orr.w	r3, r3, #32
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	2378      	movs	r3, #120	; 0x78
 800866c:	4828      	ldr	r0, [pc, #160]	; (8008710 <_printf_i+0x248>)
 800866e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008672:	e7e3      	b.n	800863c <_printf_i+0x174>
 8008674:	065e      	lsls	r6, r3, #25
 8008676:	bf48      	it	mi
 8008678:	b2ad      	uxthmi	r5, r5
 800867a:	e7e6      	b.n	800864a <_printf_i+0x182>
 800867c:	4616      	mov	r6, r2
 800867e:	e7bb      	b.n	80085f8 <_printf_i+0x130>
 8008680:	680b      	ldr	r3, [r1, #0]
 8008682:	6826      	ldr	r6, [r4, #0]
 8008684:	6960      	ldr	r0, [r4, #20]
 8008686:	1d1d      	adds	r5, r3, #4
 8008688:	600d      	str	r5, [r1, #0]
 800868a:	0635      	lsls	r5, r6, #24
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	d501      	bpl.n	8008694 <_printf_i+0x1cc>
 8008690:	6018      	str	r0, [r3, #0]
 8008692:	e002      	b.n	800869a <_printf_i+0x1d2>
 8008694:	0671      	lsls	r1, r6, #25
 8008696:	d5fb      	bpl.n	8008690 <_printf_i+0x1c8>
 8008698:	8018      	strh	r0, [r3, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	4616      	mov	r6, r2
 80086a0:	e7ba      	b.n	8008618 <_printf_i+0x150>
 80086a2:	680b      	ldr	r3, [r1, #0]
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	600a      	str	r2, [r1, #0]
 80086a8:	681e      	ldr	r6, [r3, #0]
 80086aa:	6862      	ldr	r2, [r4, #4]
 80086ac:	2100      	movs	r1, #0
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7f7 fd8e 	bl	80001d0 <memchr>
 80086b4:	b108      	cbz	r0, 80086ba <_printf_i+0x1f2>
 80086b6:	1b80      	subs	r0, r0, r6
 80086b8:	6060      	str	r0, [r4, #4]
 80086ba:	6863      	ldr	r3, [r4, #4]
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	2300      	movs	r3, #0
 80086c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c4:	e7a8      	b.n	8008618 <_printf_i+0x150>
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	4632      	mov	r2, r6
 80086ca:	4649      	mov	r1, r9
 80086cc:	4640      	mov	r0, r8
 80086ce:	47d0      	blx	sl
 80086d0:	3001      	adds	r0, #1
 80086d2:	d0ab      	beq.n	800862c <_printf_i+0x164>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	079b      	lsls	r3, r3, #30
 80086d8:	d413      	bmi.n	8008702 <_printf_i+0x23a>
 80086da:	68e0      	ldr	r0, [r4, #12]
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	4298      	cmp	r0, r3
 80086e0:	bfb8      	it	lt
 80086e2:	4618      	movlt	r0, r3
 80086e4:	e7a4      	b.n	8008630 <_printf_i+0x168>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4632      	mov	r2, r6
 80086ea:	4649      	mov	r1, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	47d0      	blx	sl
 80086f0:	3001      	adds	r0, #1
 80086f2:	d09b      	beq.n	800862c <_printf_i+0x164>
 80086f4:	3501      	adds	r5, #1
 80086f6:	68e3      	ldr	r3, [r4, #12]
 80086f8:	9903      	ldr	r1, [sp, #12]
 80086fa:	1a5b      	subs	r3, r3, r1
 80086fc:	42ab      	cmp	r3, r5
 80086fe:	dcf2      	bgt.n	80086e6 <_printf_i+0x21e>
 8008700:	e7eb      	b.n	80086da <_printf_i+0x212>
 8008702:	2500      	movs	r5, #0
 8008704:	f104 0619 	add.w	r6, r4, #25
 8008708:	e7f5      	b.n	80086f6 <_printf_i+0x22e>
 800870a:	bf00      	nop
 800870c:	08008b4e 	.word	0x08008b4e
 8008710:	08008b5f 	.word	0x08008b5f

08008714 <memcpy>:
 8008714:	440a      	add	r2, r1
 8008716:	4291      	cmp	r1, r2
 8008718:	f100 33ff 	add.w	r3, r0, #4294967295
 800871c:	d100      	bne.n	8008720 <memcpy+0xc>
 800871e:	4770      	bx	lr
 8008720:	b510      	push	{r4, lr}
 8008722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800872a:	4291      	cmp	r1, r2
 800872c:	d1f9      	bne.n	8008722 <memcpy+0xe>
 800872e:	bd10      	pop	{r4, pc}

08008730 <memmove>:
 8008730:	4288      	cmp	r0, r1
 8008732:	b510      	push	{r4, lr}
 8008734:	eb01 0402 	add.w	r4, r1, r2
 8008738:	d902      	bls.n	8008740 <memmove+0x10>
 800873a:	4284      	cmp	r4, r0
 800873c:	4623      	mov	r3, r4
 800873e:	d807      	bhi.n	8008750 <memmove+0x20>
 8008740:	1e43      	subs	r3, r0, #1
 8008742:	42a1      	cmp	r1, r4
 8008744:	d008      	beq.n	8008758 <memmove+0x28>
 8008746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800874e:	e7f8      	b.n	8008742 <memmove+0x12>
 8008750:	4402      	add	r2, r0
 8008752:	4601      	mov	r1, r0
 8008754:	428a      	cmp	r2, r1
 8008756:	d100      	bne.n	800875a <memmove+0x2a>
 8008758:	bd10      	pop	{r4, pc}
 800875a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800875e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008762:	e7f7      	b.n	8008754 <memmove+0x24>

08008764 <_free_r>:
 8008764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008766:	2900      	cmp	r1, #0
 8008768:	d048      	beq.n	80087fc <_free_r+0x98>
 800876a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800876e:	9001      	str	r0, [sp, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	f1a1 0404 	sub.w	r4, r1, #4
 8008776:	bfb8      	it	lt
 8008778:	18e4      	addlt	r4, r4, r3
 800877a:	f000 f8d3 	bl	8008924 <__malloc_lock>
 800877e:	4a20      	ldr	r2, [pc, #128]	; (8008800 <_free_r+0x9c>)
 8008780:	9801      	ldr	r0, [sp, #4]
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	4615      	mov	r5, r2
 8008786:	b933      	cbnz	r3, 8008796 <_free_r+0x32>
 8008788:	6063      	str	r3, [r4, #4]
 800878a:	6014      	str	r4, [r2, #0]
 800878c:	b003      	add	sp, #12
 800878e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008792:	f000 b8cd 	b.w	8008930 <__malloc_unlock>
 8008796:	42a3      	cmp	r3, r4
 8008798:	d90b      	bls.n	80087b2 <_free_r+0x4e>
 800879a:	6821      	ldr	r1, [r4, #0]
 800879c:	1862      	adds	r2, r4, r1
 800879e:	4293      	cmp	r3, r2
 80087a0:	bf04      	itt	eq
 80087a2:	681a      	ldreq	r2, [r3, #0]
 80087a4:	685b      	ldreq	r3, [r3, #4]
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	bf04      	itt	eq
 80087aa:	1852      	addeq	r2, r2, r1
 80087ac:	6022      	streq	r2, [r4, #0]
 80087ae:	602c      	str	r4, [r5, #0]
 80087b0:	e7ec      	b.n	800878c <_free_r+0x28>
 80087b2:	461a      	mov	r2, r3
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	b10b      	cbz	r3, 80087bc <_free_r+0x58>
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	d9fa      	bls.n	80087b2 <_free_r+0x4e>
 80087bc:	6811      	ldr	r1, [r2, #0]
 80087be:	1855      	adds	r5, r2, r1
 80087c0:	42a5      	cmp	r5, r4
 80087c2:	d10b      	bne.n	80087dc <_free_r+0x78>
 80087c4:	6824      	ldr	r4, [r4, #0]
 80087c6:	4421      	add	r1, r4
 80087c8:	1854      	adds	r4, r2, r1
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	6011      	str	r1, [r2, #0]
 80087ce:	d1dd      	bne.n	800878c <_free_r+0x28>
 80087d0:	681c      	ldr	r4, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	6053      	str	r3, [r2, #4]
 80087d6:	4421      	add	r1, r4
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	e7d7      	b.n	800878c <_free_r+0x28>
 80087dc:	d902      	bls.n	80087e4 <_free_r+0x80>
 80087de:	230c      	movs	r3, #12
 80087e0:	6003      	str	r3, [r0, #0]
 80087e2:	e7d3      	b.n	800878c <_free_r+0x28>
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	1961      	adds	r1, r4, r5
 80087e8:	428b      	cmp	r3, r1
 80087ea:	bf04      	itt	eq
 80087ec:	6819      	ldreq	r1, [r3, #0]
 80087ee:	685b      	ldreq	r3, [r3, #4]
 80087f0:	6063      	str	r3, [r4, #4]
 80087f2:	bf04      	itt	eq
 80087f4:	1949      	addeq	r1, r1, r5
 80087f6:	6021      	streq	r1, [r4, #0]
 80087f8:	6054      	str	r4, [r2, #4]
 80087fa:	e7c7      	b.n	800878c <_free_r+0x28>
 80087fc:	b003      	add	sp, #12
 80087fe:	bd30      	pop	{r4, r5, pc}
 8008800:	20000464 	.word	0x20000464

08008804 <_malloc_r>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	1ccd      	adds	r5, r1, #3
 8008808:	f025 0503 	bic.w	r5, r5, #3
 800880c:	3508      	adds	r5, #8
 800880e:	2d0c      	cmp	r5, #12
 8008810:	bf38      	it	cc
 8008812:	250c      	movcc	r5, #12
 8008814:	2d00      	cmp	r5, #0
 8008816:	4606      	mov	r6, r0
 8008818:	db01      	blt.n	800881e <_malloc_r+0x1a>
 800881a:	42a9      	cmp	r1, r5
 800881c:	d903      	bls.n	8008826 <_malloc_r+0x22>
 800881e:	230c      	movs	r3, #12
 8008820:	6033      	str	r3, [r6, #0]
 8008822:	2000      	movs	r0, #0
 8008824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008826:	f000 f87d 	bl	8008924 <__malloc_lock>
 800882a:	4921      	ldr	r1, [pc, #132]	; (80088b0 <_malloc_r+0xac>)
 800882c:	680a      	ldr	r2, [r1, #0]
 800882e:	4614      	mov	r4, r2
 8008830:	b99c      	cbnz	r4, 800885a <_malloc_r+0x56>
 8008832:	4f20      	ldr	r7, [pc, #128]	; (80088b4 <_malloc_r+0xb0>)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	b923      	cbnz	r3, 8008842 <_malloc_r+0x3e>
 8008838:	4621      	mov	r1, r4
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f862 	bl	8008904 <_sbrk_r>
 8008840:	6038      	str	r0, [r7, #0]
 8008842:	4629      	mov	r1, r5
 8008844:	4630      	mov	r0, r6
 8008846:	f000 f85d 	bl	8008904 <_sbrk_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d123      	bne.n	8008896 <_malloc_r+0x92>
 800884e:	230c      	movs	r3, #12
 8008850:	6033      	str	r3, [r6, #0]
 8008852:	4630      	mov	r0, r6
 8008854:	f000 f86c 	bl	8008930 <__malloc_unlock>
 8008858:	e7e3      	b.n	8008822 <_malloc_r+0x1e>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	1b5b      	subs	r3, r3, r5
 800885e:	d417      	bmi.n	8008890 <_malloc_r+0x8c>
 8008860:	2b0b      	cmp	r3, #11
 8008862:	d903      	bls.n	800886c <_malloc_r+0x68>
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	441c      	add	r4, r3
 8008868:	6025      	str	r5, [r4, #0]
 800886a:	e004      	b.n	8008876 <_malloc_r+0x72>
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	42a2      	cmp	r2, r4
 8008870:	bf0c      	ite	eq
 8008872:	600b      	streq	r3, [r1, #0]
 8008874:	6053      	strne	r3, [r2, #4]
 8008876:	4630      	mov	r0, r6
 8008878:	f000 f85a 	bl	8008930 <__malloc_unlock>
 800887c:	f104 000b 	add.w	r0, r4, #11
 8008880:	1d23      	adds	r3, r4, #4
 8008882:	f020 0007 	bic.w	r0, r0, #7
 8008886:	1ac2      	subs	r2, r0, r3
 8008888:	d0cc      	beq.n	8008824 <_malloc_r+0x20>
 800888a:	1a1b      	subs	r3, r3, r0
 800888c:	50a3      	str	r3, [r4, r2]
 800888e:	e7c9      	b.n	8008824 <_malloc_r+0x20>
 8008890:	4622      	mov	r2, r4
 8008892:	6864      	ldr	r4, [r4, #4]
 8008894:	e7cc      	b.n	8008830 <_malloc_r+0x2c>
 8008896:	1cc4      	adds	r4, r0, #3
 8008898:	f024 0403 	bic.w	r4, r4, #3
 800889c:	42a0      	cmp	r0, r4
 800889e:	d0e3      	beq.n	8008868 <_malloc_r+0x64>
 80088a0:	1a21      	subs	r1, r4, r0
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 f82e 	bl	8008904 <_sbrk_r>
 80088a8:	3001      	adds	r0, #1
 80088aa:	d1dd      	bne.n	8008868 <_malloc_r+0x64>
 80088ac:	e7cf      	b.n	800884e <_malloc_r+0x4a>
 80088ae:	bf00      	nop
 80088b0:	20000464 	.word	0x20000464
 80088b4:	20000468 	.word	0x20000468

080088b8 <_realloc_r>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	4607      	mov	r7, r0
 80088bc:	4614      	mov	r4, r2
 80088be:	460e      	mov	r6, r1
 80088c0:	b921      	cbnz	r1, 80088cc <_realloc_r+0x14>
 80088c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088c6:	4611      	mov	r1, r2
 80088c8:	f7ff bf9c 	b.w	8008804 <_malloc_r>
 80088cc:	b922      	cbnz	r2, 80088d8 <_realloc_r+0x20>
 80088ce:	f7ff ff49 	bl	8008764 <_free_r>
 80088d2:	4625      	mov	r5, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d8:	f000 f830 	bl	800893c <_malloc_usable_size_r>
 80088dc:	42a0      	cmp	r0, r4
 80088de:	d20f      	bcs.n	8008900 <_realloc_r+0x48>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff ff8e 	bl	8008804 <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0f2      	beq.n	80088d4 <_realloc_r+0x1c>
 80088ee:	4631      	mov	r1, r6
 80088f0:	4622      	mov	r2, r4
 80088f2:	f7ff ff0f 	bl	8008714 <memcpy>
 80088f6:	4631      	mov	r1, r6
 80088f8:	4638      	mov	r0, r7
 80088fa:	f7ff ff33 	bl	8008764 <_free_r>
 80088fe:	e7e9      	b.n	80088d4 <_realloc_r+0x1c>
 8008900:	4635      	mov	r5, r6
 8008902:	e7e7      	b.n	80088d4 <_realloc_r+0x1c>

08008904 <_sbrk_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d06      	ldr	r5, [pc, #24]	; (8008920 <_sbrk_r+0x1c>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	f7f8 fd1e 	bl	8001350 <_sbrk>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_sbrk_r+0x1a>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_sbrk_r+0x1a>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20001e9c 	.word	0x20001e9c

08008924 <__malloc_lock>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__malloc_lock+0x8>)
 8008926:	f000 b811 	b.w	800894c <__retarget_lock_acquire_recursive>
 800892a:	bf00      	nop
 800892c:	20001ea4 	.word	0x20001ea4

08008930 <__malloc_unlock>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__malloc_unlock+0x8>)
 8008932:	f000 b80c 	b.w	800894e <__retarget_lock_release_recursive>
 8008936:	bf00      	nop
 8008938:	20001ea4 	.word	0x20001ea4

0800893c <_malloc_usable_size_r>:
 800893c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008940:	1f18      	subs	r0, r3, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	bfbc      	itt	lt
 8008946:	580b      	ldrlt	r3, [r1, r0]
 8008948:	18c0      	addlt	r0, r0, r3
 800894a:	4770      	bx	lr

0800894c <__retarget_lock_acquire_recursive>:
 800894c:	4770      	bx	lr

0800894e <__retarget_lock_release_recursive>:
 800894e:	4770      	bx	lr

08008950 <_init>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr

0800895c <_fini>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	bf00      	nop
 8008960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008962:	bc08      	pop	{r3}
 8008964:	469e      	mov	lr, r3
 8008966:	4770      	bx	lr
