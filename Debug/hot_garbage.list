
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08009870  08009870  00019870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a74  08009a74  00020420  2**0
                  CONTENTS
  4 .ARM          00000008  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a7c  08009a7c  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a7c  08009a7c  00019a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  08009a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  20000420  08009ea4  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020b0  08009ea4  000220b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001679f  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  00036bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026140  00000000  00000000  0003cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b47  00000000  00000000  00062cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d73ce  00000000  00000000  0007a83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151c0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  00151c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000420 	.word	0x20000420
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009858 	.word	0x08009858

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000424 	.word	0x20000424
 80001cc:	08009858 	.word	0x08009858

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <H100spindleFWD>:
{
	DEVICE_ADDRESS = 0x01, TIMEOUT = 1000, NUM_RETRIES = 3
};

int H100spindleFWD(UART_HandleTypeDef *uart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x01, TIMEOUT, NUM_RETRIES);

	//TODO see if 0x8000 works
	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x01, TIMEOUT, NUM_RETRIES);
 8000db8:	2303      	movs	r3, #3
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f248 1222 	movw	r2, #33058	; 0x8122
 8000dc8:	2101      	movs	r1, #1
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8ba 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <H100spindleOFF>:

int H100spindleOFF(UART_HandleTypeDef *uart)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af02      	add	r7, sp, #8
 8000de0:	6078      	str	r0, [r7, #4]
	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x10, TIMEOUT, NUM_RETRIES);

	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x10, TIMEOUT, NUM_RETRIES);
 8000de2:	2303      	movs	r3, #3
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2310      	movs	r3, #16
 8000dee:	f248 1222 	movw	r2, #33058	; 0x8122
 8000df2:	2101      	movs	r1, #1
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f8a5 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <H100SetRPM>:

int H100SetRPM(UART_HandleTypeDef *uart, int RPM)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]

	/*
	 * The data field controls the % of max frequency
	 * For example, 0x9C40 = 40,000 = 40% = 160Hz for a 400Hz motor and 320Hz for a 800Hz motor
	 */
	float percentRPM = RPM / 24000.0; //max RPM = 24000
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f7ff fb7e 	bl	8000514 <__aeabi_i2d>
 8000e18:	a316      	add	r3, pc, #88	; (adr r3, 8000e74 <H100SetRPM+0x6c>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fd0d 	bl	800083c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fdef 	bl	8000a0c <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60fb      	str	r3, [r7, #12]
	uint16_t RPM_data= (int)(percentRPM * 100000); //convert to H100 format
 8000e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e36:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000e70 <H100SetRPM+0x68>
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	817b      	strh	r3, [r7, #10]

	//uint8_t testBuff[5];
	//testBuff[0] = RPM_data >> 8;..
	//CDC_Transmit_FS(testBuff, 2);

	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8121, RPM_data, TIMEOUT, NUM_RETRIES);
 8000e48:	897b      	ldrh	r3, [r7, #10]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	f248 1221 	movw	r2, #33057	; 0x8121
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f872 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	47c35000 	.word	0x47c35000
 8000e74:	00000000 	.word	0x00000000
 8000e78:	40d77000 	.word	0x40d77000

08000e7c <crc16>:

static uint8_t modbusCRC[2] =
{ 0 };

static void crc16(unsigned char *buffer, unsigned short buffer_length)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
	unsigned char crc_hi = 0xFF; /* high CRC byte initialized */
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	73fb      	strb	r3, [r7, #15]
	unsigned char crc_lo = 0xFF; /* low CRC byte initialized */
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	73bb      	strb	r3, [r7, #14]
	unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (buffer_length--)
 8000e90:	e013      	b.n	8000eba <crc16+0x3e>
	{
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	4053      	eors	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	60bb      	str	r3, [r7, #8]
		crc_hi = crc_lo ^ table_crc_hi[i];
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <crc16+0x60>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	4053      	eors	r3, r2
 8000eae:	73fb      	strb	r3, [r7, #15]
		crc_lo = table_crc_lo[i];
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <crc16+0x64>)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	73bb      	strb	r3, [r7, #14]
	while (buffer_length--)
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	807a      	strh	r2, [r7, #2]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e6      	bne.n	8000e92 <crc16+0x16>
	}
//
//	modbusCRC[1] = crc_hi;
//	modbusCRC[0] = crc_lo;

	modbusCRC[0] = crc_hi;
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <crc16+0x68>)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	7013      	strb	r3, [r2, #0]
	modbusCRC[1] = crc_lo;
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <crc16+0x68>)
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	7053      	strb	r3, [r2, #1]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000100 	.word	0x20000100
 8000ee4:	2000043c 	.word	0x2000043c

08000ee8 <modBusTransmit>:

int modBusTransmit(UART_HandleTypeDef *uart, uint8_t *data, uint32_t timeout)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09e      	sub	sp, #120	; 0x78
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	uint8_t uselessData[100];
	while (HAL_UART_Receive(uart, uselessData, 1, 1) != HAL_TIMEOUT)
 8000ef4:	bf00      	nop
 8000ef6:	f107 0114 	add.w	r1, r7, #20
 8000efa:	2301      	movs	r3, #1
 8000efc:	2201      	movs	r2, #1
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f003 ff4a 	bl	8004d98 <HAL_UART_Receive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d1f5      	bne.n	8000ef6 <modBusTransmit+0xe>
	{
		//dump serial rx buffer of any leftover/unexpected data
	}

	//VFD runs at 19200 baud or 1.2KB/s --- 8 bytes takes ~5ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <modBusTransmit+0x58>)
 8000f10:	f001 ffa8 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 f95b 	bl	80021d0 <HAL_Delay>
	//blocking transmit 15ms timeout
	HAL_UART_Transmit(uart, data, 8, 15);
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f003 fea7 	bl	8004c74 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <modBusTransmit+0x58>)
 8000f2c:	f001 ff9a 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f001 f94d 	bl	80021d0 <HAL_Delay>
	return 0;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3778      	adds	r7, #120	; 0x78
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020400 	.word	0x40020400

08000f44 <modBusWrSingle>:

 */
int modBusWrSingle(UART_HandleTypeDef *uart, uint8_t deviceAddr,
		uint16_t registerAddr, uint16_t data, uint32_t timeout,
		uint8_t maxRetries)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	72fb      	strb	r3, [r7, #11]
 8000f56:	460b      	mov	r3, r1
 8000f58:	813b      	strh	r3, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	// Create a buffer to hold the Modbus message
	uint8_t message[8];

	// Set the Modbus function code for a single register write
	message[0] = deviceAddr;
 8000f5e:	7afb      	ldrb	r3, [r7, #11]
 8000f60:	763b      	strb	r3, [r7, #24]
	message[1] = 0x06;
 8000f62:	2306      	movs	r3, #6
 8000f64:	767b      	strb	r3, [r7, #25]

	// Encode the register address and data in big-endian format
	message[2] = (registerAddr >> 8) & 0xFF;
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	76bb      	strb	r3, [r7, #26]
	message[3] = registerAddr & 0xFF;
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	76fb      	strb	r3, [r7, #27]
	message[4] = (data >> 8) & 0xFF;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	773b      	strb	r3, [r7, #28]
	message[5] = data & 0xFF;
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	777b      	strb	r3, [r7, #29]

	uint16_t crc = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	847b      	strh	r3, [r7, #34]	; 0x22
	//might be broken
	//message[7] = (crc >> 8) & 0xFF;
	//message[6] = crc & 0xFF;

	// Calculate the 16-bit Modbus RTU CRC for the message
	crc16(message, 6);
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2106      	movs	r1, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff73 	bl	8000e7c <crc16>
	//might be broken
	//message[7] = (crc >> 8) & 0xFF;
	//message[6] = crc & 0xFF;

	//Lut version
	message[6] = modbusCRC[0];
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <modBusWrSingle+0xdc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	77bb      	strb	r3, [r7, #30]
	message[7] = modbusCRC[1];
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <modBusWrSingle+0xdc>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	77fb      	strb	r3, [r7, #31]
//		{
//			return MODBUS_TIMEOUT;
//		}
//	} while (!success || numTries <= maxRetries);

	int messageCorrupt = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < maxRetries; ++i)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000faa:	e02e      	b.n	800100a <modBusWrSingle+0xc6>
	{
		modBusTransmit(uart, message, MODBUS_TX_TIMEOUT);
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	2232      	movs	r2, #50	; 0x32
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff ff97 	bl	8000ee8 <modBusTransmit>
		HAL_UART_Receive(uart, rxMsg, 8, MODBUS_RX_TIMEOUT);
 8000fba:	f107 0110 	add.w	r1, r7, #16
 8000fbe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f003 fee7 	bl	8004d98 <HAL_UART_Receive>

		for (int j = 0; j < 8; ++j)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	e011      	b.n	8000ff4 <modBusWrSingle+0xb0>
		{
			if (message[j] != rxMsg[j])
 8000fd0:	f107 0218 	add.w	r2, r7, #24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	f107 0110 	add.w	r1, r7, #16
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	440b      	add	r3, r1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d002      	beq.n	8000fee <modBusWrSingle+0xaa>
			{
				//Error!
				messageCorrupt = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 8000fec:	e005      	b.n	8000ffa <modBusWrSingle+0xb6>
		for (int j = 0; j < 8; ++j)
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	ddea      	ble.n	8000fd0 <modBusWrSingle+0x8c>
			}
		}

		if (!messageCorrupt) {
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <modBusWrSingle+0xc0>
			return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e008      	b.n	8001016 <modBusWrSingle+0xd2>
	for (int i = 0; i < maxRetries; ++i)
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	3301      	adds	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
 800100a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800100e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001010:	429a      	cmp	r2, r3
 8001012:	dbcb      	blt.n	8000fac <modBusWrSingle+0x68>
		}

	}

	return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000043c 	.word	0x2000043c

08001024 <set_headboard_solenoid_state>:
	SPINDLE_DRAWBAR_REGISTER_ADDR = 0x00,
	COOLANT_REGISTER_ADDR = 0x02
};

int set_headboard_solenoid_state(UART_HandleTypeDef *uart, uint16_t registerAddr, uint8_t state)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
	modBusWrSingle(uart, DEVICE_ADDRESS, registerAddr, state, TIMEOUT, NUM_RETRIES);
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	b29b      	uxth	r3, r3
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	2103      	movs	r1, #3
 800103c:	9101      	str	r1, [sp, #4]
 800103e:	21c8      	movs	r1, #200	; 0xc8
 8001040:	9100      	str	r1, [sp, #0]
 8001042:	2102      	movs	r1, #2
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff7d 	bl	8000f44 <modBusWrSingle>
	return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <unlock_Z_axis>:

int unlock_Z_axis(UART_HandleTypeDef *uart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af02      	add	r7, sp, #8
 800105a:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 800105c:	2303      	movs	r3, #3
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	23c8      	movs	r3, #200	; 0xc8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	2102      	movs	r1, #2
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff6a 	bl	8000f44 <modBusWrSingle>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <lock_Z_axis>:

int lock_Z_axis(UART_HandleTypeDef *uart)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af02      	add	r7, sp, #8
 8001080:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 8001082:	2303      	movs	r3, #3
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	23c8      	movs	r3, #200	; 0xc8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	2203      	movs	r2, #3
 800108e:	2102      	movs	r1, #2
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff57 	bl	8000f44 <modBusWrSingle>
 8001096:	4603      	mov	r3, r0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <clamp_tool>:

int clamp_tool(UART_HandleTypeDef *uart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, SPINDLE_DRAWBAR_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 80010a8:	2303      	movs	r3, #3
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	23c8      	movs	r3, #200	; 0xc8
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	2200      	movs	r2, #0
 80010b4:	2102      	movs	r1, #2
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ff44 	bl	8000f44 <modBusWrSingle>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <release_tool>:

int release_tool(UART_HandleTypeDef *uart)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, SPINDLE_DRAWBAR_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 80010ce:	2303      	movs	r3, #3
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	23c8      	movs	r3, #200	; 0xc8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	2102      	movs	r1, #2
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff31 	bl	8000f44 <modBusWrSingle>
 80010e2:	4603      	mov	r3, r0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <coolant_on>:

int coolant_on(UART_HandleTypeDef *uart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, COOLANT_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 80010f4:	2303      	movs	r3, #3
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	23c8      	movs	r3, #200	; 0xc8
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2202      	movs	r2, #2
 8001100:	2102      	movs	r1, #2
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff1e 	bl	8000f44 <modBusWrSingle>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <coolant_off>:

int coolant_off(UART_HandleTypeDef *uart)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af02      	add	r7, sp, #8
 8001118:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, COOLANT_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 800111a:	2303      	movs	r3, #3
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	23c8      	movs	r3, #200	; 0xc8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	2202      	movs	r2, #2
 8001126:	2102      	movs	r1, #2
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff0b 	bl	8000f44 <modBusWrSingle>
 800112e:	4603      	mov	r3, r0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b0bc      	sub	sp, #240	; 0xf0
 800113c:	af00      	add	r7, sp, #0
	int status = NO_ERROR;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001144:	f000 ffd2 	bl	80020ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001148:	f000 fa1e 	bl	8001588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800114c:	f000 fbbe 	bl	80018cc <MX_GPIO_Init>
	MX_ADC2_Init();
 8001150:	f000 fa84 	bl	800165c <MX_ADC2_Init>
	MX_ADC3_Init();
 8001154:	f000 fad4 	bl	8001700 <MX_ADC3_Init>
	MX_CAN2_Init();
 8001158:	f000 fb24 	bl	80017a4 <MX_CAN2_Init>
	MX_SPI1_Init();
 800115c:	f000 fb56 	bl	800180c <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001160:	f000 fb8a 	bl	8001878 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8001164:	f007 f92e 	bl	80083c4 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t onStat[3] =
 8001168:	4ac6      	ldr	r2, [pc, #792]	; (8001484 <main+0x34c>)
 800116a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	4611      	mov	r1, r2
 8001172:	8019      	strh	r1, [r3, #0]
 8001174:	3302      	adds	r3, #2
 8001176:	0c12      	lsrs	r2, r2, #16
 8001178:	701a      	strb	r2, [r3, #0]
	{ 'M', '3', '\n' };
	uint8_t offStat[3] =
 800117a:	4ac3      	ldr	r2, [pc, #780]	; (8001488 <main+0x350>)
 800117c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	4611      	mov	r1, r2
 8001184:	8019      	strh	r1, [r3, #0]
 8001186:	3302      	adds	r3, #2
 8001188:	0c12      	lsrs	r2, r2, #16
 800118a:	701a      	strb	r2, [r3, #0]
	{ 'M', '5', '\n' };
	uint8_t ssStat[3] =
 800118c:	4abf      	ldr	r2, [pc, #764]	; (800148c <main+0x354>)
 800118e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	4611      	mov	r1, r2
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	0c12      	lsrs	r2, r2, #16
 800119c:	701a      	strb	r2, [r3, #0]
	{ 'S', 'S', '\n' };
	uint8_t ack[3] =
 800119e:	4abc      	ldr	r2, [pc, #752]	; (8001490 <main+0x358>)
 80011a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	4611      	mov	r1, r2
 80011a8:	8019      	strh	r1, [r3, #0]
 80011aa:	3302      	adds	r3, #2
 80011ac:	0c12      	lsrs	r2, r2, #16
 80011ae:	701a      	strb	r2, [r3, #0]
	{ 'A', 'C', '\n' };
	uint8_t errorMsg[3] =
 80011b0:	4ab8      	ldr	r2, [pc, #736]	; (8001494 <main+0x35c>)
 80011b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4611      	mov	r1, r2
 80011ba:	8019      	strh	r1, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	0c12      	lsrs	r2, r2, #16
 80011c0:	701a      	strb	r2, [r3, #0]
	{ 'E', 'R', '\n' };
	uint8_t soStat[3] =
 80011c2:	4ab5      	ldr	r2, [pc, #724]	; (8001498 <main+0x360>)
 80011c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4611      	mov	r1, r2
 80011cc:	8019      	strh	r1, [r3, #0]
 80011ce:	3302      	adds	r3, #2
 80011d0:	0c12      	lsrs	r2, r2, #16
 80011d2:	701a      	strb	r2, [r3, #0]
	{ 'H', 'H', '\n' };

	char initTx[] = "11111111111111111111"; //twenty 1s
 80011d4:	4bb1      	ldr	r3, [pc, #708]	; (800149c <main+0x364>)
 80011d6:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80011da:	461d      	mov	r5, r3
 80011dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e4:	6020      	str	r0, [r4, #0]
 80011e6:	3404      	adds	r4, #4
 80011e8:	7021      	strb	r1, [r4, #0]

	char *initTxPtr = initTx;
 80011ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	uint8_t CDCtx[50] =
 80011f2:	4aab      	ldr	r2, [pc, #684]	; (80014a0 <main+0x368>)
 80011f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fa:	c303      	stmia	r3!, {r0, r1}
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	f107 0379 	add.w	r3, r7, #121	; 0x79
 8001202:	2229      	movs	r2, #41	; 0x29
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f007 fe24 	bl	8008e54 <memset>
	{ 'A', '2', '3', '4', '5', '6', '7', '\n' };

	char CDCrx[100];

	CDCrx[0] = 'a';
 800120c:	2361      	movs	r3, #97	; 0x61
 800120e:	733b      	strb	r3, [r7, #12]

	char *CDCrxPtr1 = &CDCrx[2];
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	3302      	adds	r3, #2
 8001216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	uint32_t x = -99;
 800121a:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800121e:	60bb      	str	r3, [r7, #8]
	int rpm = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	int spindleRunning = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 800122c:	e00a      	b.n	8001244 <main+0x10c>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS((uint8_t*) CDCrx, &x);
 800122e:	f107 0208 	add.w	r2, r7, #8
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f007 f96d 	bl	8008518 <CDC_Receive_FS>
		HAL_Delay(10);
 800123e:	200a      	movs	r0, #10
 8001240:	f000 ffc6 	bl	80021d0 <HAL_Delay>
	while (CDCrx[0] != 'i')
 8001244:	7b3b      	ldrb	r3, [r7, #12]
 8001246:	2b69      	cmp	r3, #105	; 0x69
 8001248:	d1f1      	bne.n	800122e <main+0xf6>
	}
	CDC_Transmit_FS((uint8_t*) initTxPtr, 18);
 800124a:	2112      	movs	r1, #18
 800124c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8001250:	f007 f976 	bl	8008540 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		for (int i = 0; i < 16; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800125a:	e00b      	b.n	8001274 <main+0x13c>
		{
			CDCrx[i] = 'a';
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001264:	4413      	add	r3, r2
 8001266:	2261      	movs	r2, #97	; 0x61
 8001268:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 16; i++)
 800126a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800126e:	3301      	adds	r3, #1
 8001270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001278:	2b0f      	cmp	r3, #15
 800127a:	ddef      	ble.n	800125c <main+0x124>
		}

		CDC_Receive_FS(CDCrx, &x);
 800127c:	f107 0208 	add.w	r2, r7, #8
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f007 f946 	bl	8008518 <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	2102      	movs	r1, #2
 8001290:	4884      	ldr	r0, [pc, #528]	; (80014a4 <main+0x36c>)
 8001292:	f001 fde7 	bl	8002e64 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8001296:	2028      	movs	r0, #40	; 0x28
 8001298:	f000 ff9a 	bl	80021d0 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2102      	movs	r1, #2
 80012a0:	4880      	ldr	r0, [pc, #512]	; (80014a4 <main+0x36c>)
 80012a2:	f001 fddf 	bl	8002e64 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f000 ff92 	bl	80021d0 <HAL_Delay>

		if (CDCrx[0] == 'M')
 80012ac:	7b3b      	ldrb	r3, [r7, #12]
 80012ae:	2b4d      	cmp	r3, #77	; 0x4d
 80012b0:	d148      	bne.n	8001344 <main+0x20c>
		{
			if (CDCrx[1] == '3')
 80012b2:	7b7b      	ldrb	r3, [r7, #13]
 80012b4:	2b33      	cmp	r3, #51	; 0x33
 80012b6:	d122      	bne.n	80012fe <main+0x1c6>
			{
				//send message so LCNC knows the board got the command
				CDC_Transmit_FS(ack, 3);
 80012b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012bc:	2103      	movs	r1, #3
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 f93e 	bl	8008540 <CDC_Transmit_FS>

				//send the cmd to turn on the spindle
				status = H100spindleFWD(&huart3);
 80012c4:	4878      	ldr	r0, [pc, #480]	; (80014a8 <main+0x370>)
 80012c6:	f7ff fd73 	bl	8000db0 <H100spindleFWD>
 80012ca:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

				//turn on blue led in headstock to lock the drawbar
				//set_headboard_solenoid_state(&huart3, 0x05, 1);

				if (status != NO_ERROR)
 80012ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <main+0x1ac>
				{
					CDC_Transmit_FS(errorMsg, 3);
 80012d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012da:	2103      	movs	r1, #3
 80012dc:	4618      	mov	r0, r3
 80012de:	f007 f92f 	bl	8008540 <CDC_Transmit_FS>
 80012e2:	e008      	b.n	80012f6 <main+0x1be>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 80012e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012e8:	2103      	movs	r1, #3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f007 f928 	bl	8008540 <CDC_Transmit_FS>
					spindleRunning = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}

				HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f000 ff6a 	bl	80021d0 <HAL_Delay>
 80012fc:	e7aa      	b.n	8001254 <main+0x11c>

			}
			else if (CDCrx[1] == '5')
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	2b35      	cmp	r3, #53	; 0x35
 8001302:	d1a7      	bne.n	8001254 <main+0x11c>
			{
				CDC_Transmit_FS(ack, 3);
 8001304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001308:	2103      	movs	r1, #3
 800130a:	4618      	mov	r0, r3
 800130c:	f007 f918 	bl	8008540 <CDC_Transmit_FS>

				if (H100spindleOFF(&huart3) != NO_ERROR)
 8001310:	4865      	ldr	r0, [pc, #404]	; (80014a8 <main+0x370>)
 8001312:	f7ff fd62 	bl	8000dda <H100spindleOFF>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <main+0x1f2>
				{
					CDC_Transmit_FS(errorMsg, 3);
 800131c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001320:	2103      	movs	r1, #3
 8001322:	4618      	mov	r0, r3
 8001324:	f007 f90c 	bl	8008540 <CDC_Transmit_FS>
 8001328:	e008      	b.n	800133c <main+0x204>
					//turn off blue led in headstock to lock the drawbar
					//set_headboard_solenoid_state(&huart3, 0x05, 0);
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 800132a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800132e:	2103      	movs	r1, #3
 8001330:	4618      	mov	r0, r3
 8001332:	f007 f905 	bl	8008540 <CDC_Transmit_FS>
					spindleRunning = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}
				HAL_Delay(10);
 800133c:	200a      	movs	r0, #10
 800133e:	f000 ff47 	bl	80021d0 <HAL_Delay>
 8001342:	e787      	b.n	8001254 <main+0x11c>

			}

		}
		else if (CDCrx[0] == 'S')
 8001344:	7b3b      	ldrb	r3, [r7, #12]
 8001346:	2b53      	cmp	r3, #83	; 0x53
 8001348:	d123      	bne.n	8001392 <main+0x25a>
		{

			//expected format is S024000 for 24000 rpm or S005000 for 5000rpm

			//send acknowledged to let linux know we got the command
			CDC_Transmit_FS(ack, 3);
 800134a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800134e:	2103      	movs	r1, #3
 8001350:	4618      	mov	r0, r3
 8001352:	f007 f8f5 	bl	8008540 <CDC_Transmit_FS>

			CDCrx[7] = 'a';
 8001356:	2361      	movs	r3, #97	; 0x61
 8001358:	74fb      	strb	r3, [r7, #19]

			//rounddown ok
			rpm = atoi(CDCrxPtr1);
 800135a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800135e:	f007 fd4b 	bl	8008df8 <atoi>
 8001362:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

			//H100SetRPM(&huart3, rpm);
			//CDC_Transmit_FS(CDCrx, 8);

			//if message fails, send error message
			if (H100SetRPM(&huart3, rpm) != 0)
 8001366:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800136a:	484f      	ldr	r0, [pc, #316]	; (80014a8 <main+0x370>)
 800136c:	f7ff fd4c 	bl	8000e08 <H100SetRPM>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <main+0x24c>
			{
				CDC_Transmit_FS(errorMsg, 3);
 8001376:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800137a:	2103      	movs	r1, #3
 800137c:	4618      	mov	r0, r3
 800137e:	f007 f8df 	bl	8008540 <CDC_Transmit_FS>
 8001382:	e767      	b.n	8001254 <main+0x11c>
			}
			else
			{
				CDC_Transmit_FS(ssStat, 3);
 8001384:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001388:	2103      	movs	r1, #3
 800138a:	4618      	mov	r0, r3
 800138c:	f007 f8d8 	bl	8008540 <CDC_Transmit_FS>
 8001390:	e760      	b.n	8001254 <main+0x11c>
			}

		}
		else if (CDCrx[0] == 'R')
 8001392:	7b3b      	ldrb	r3, [r7, #12]
 8001394:	2b52      	cmp	r3, #82	; 0x52
 8001396:	d14b      	bne.n	8001430 <main+0x2f8>
		{
			CDC_Transmit_FS(ack, 3);
 8001398:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800139c:	2103      	movs	r1, #3
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 f8ce 	bl	8008540 <CDC_Transmit_FS>
			uint16_t spindleI;
			uint16_t spindleRPM;

			//if no errrors set vars

			switch (masterRd(&huart3, &spindle0))
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	483f      	ldr	r0, [pc, #252]	; (80014a8 <main+0x370>)
 80013aa:	f000 fbad 	bl	8001b08 <masterRd>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d01a      	beq.n	80013ea <main+0x2b2>
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	dc22      	bgt.n	80013fe <main+0x2c6>
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <main+0x28a>
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d00b      	beq.n	80013d8 <main+0x2a0>
 80013c0:	e01d      	b.n	80013fe <main+0x2c6>
			{
			case 0:
//				spindleI   = spindle0.current;
//				spindleRPM = spindle0.rpm;

				spindleI = altGetI();
 80013c2:	f000 fc47 	bl	8001c54 <altGetI>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
				spindleRPM = altGetRPM();
 80013cc:	f000 fc4e 	bl	8001c6c <altGetRPM>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				break;
 80013d6:	e01b      	b.n	8001410 <main+0x2d8>
			case 3:
				//HAL_TIMEOUT
				spindleI = 777;
 80013d8:	f240 3309 	movw	r3, #777	; 0x309
 80013dc:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
				spindleRPM = 44666;
 80013e0:	f64a 637a 	movw	r3, #44666	; 0xae7a
 80013e4:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				break;
 80013e8:	e012      	b.n	8001410 <main+0x2d8>
			case 4:
				//CRC failed
				spindleI = 888;
 80013ea:	f44f 735e 	mov.w	r3, #888	; 0x378
 80013ee:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
				spindleRPM = getRxCRC();
 80013f2:	f000 fc47 	bl	8001c84 <getRxCRC>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				break;
 80013fc:	e008      	b.n	8001410 <main+0x2d8>
			default:
				spindleI = 999;
 80013fe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001402:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
				spindleRPM = 44444;
 8001406:	f64a 539c 	movw	r3, #44444	; 0xad9c
 800140a:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
				break;
 800140e:	bf00      	nop
			}

			//11 bytes long
			sprintf(CDCtx, "R%05d,%03d\n", spindleRPM, spindleI);
 8001410:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8001414:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	; 0xea
 8001418:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800141c:	4923      	ldr	r1, [pc, #140]	; (80014ac <main+0x374>)
 800141e:	f007 fd21 	bl	8008e64 <siprintf>

			CDC_Transmit_FS(CDCtx, 11);
 8001422:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001426:	210b      	movs	r1, #11
 8001428:	4618      	mov	r0, r3
 800142a:	f007 f889 	bl	8008540 <CDC_Transmit_FS>
 800142e:	e711      	b.n	8001254 <main+0x11c>
			//delay needed since CDC tx is non blocking and OS is weird
			//HAL_Delay(20);
			//CDC_Transmit_FS(getCheck(), 11);
		}
		//this section does not transmit ACK
		else if (CDCrx[0] == 'H')
 8001430:	7b3b      	ldrb	r3, [r7, #12]
 8001432:	2b48      	cmp	r3, #72	; 0x48
 8001434:	f040 809f 	bne.w	8001576 <main+0x43e>
		{
			//drawbar
			if (CDCrx[1] == '0')
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	2b30      	cmp	r3, #48	; 0x30
 800143c:	d138      	bne.n	80014b0 <main+0x378>
			{
				if (CDCrx[2] == '1')
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	2b31      	cmp	r3, #49	; 0x31
 8001442:	d10d      	bne.n	8001460 <main+0x328>
				{
					if (release_tool(&huart3) == NO_ERROR)
 8001444:	4818      	ldr	r0, [pc, #96]	; (80014a8 <main+0x370>)
 8001446:	f7ff fe3e 	bl	80010c6 <release_tool>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f af01 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 8001452:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001456:	2103      	movs	r1, #3
 8001458:	4618      	mov	r0, r3
 800145a:	f007 f871 	bl	8008540 <CDC_Transmit_FS>
 800145e:	e6f9      	b.n	8001254 <main+0x11c>

					}

				}
				else if (CDCrx[2] == '0')
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b30      	cmp	r3, #48	; 0x30
 8001464:	f47f aef6 	bne.w	8001254 <main+0x11c>
				{
					if (clamp_tool(&huart3) == NO_ERROR)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <main+0x370>)
 800146a:	f7ff fe19 	bl	80010a0 <clamp_tool>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f aeef 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 8001476:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800147a:	2103      	movs	r1, #3
 800147c:	4618      	mov	r0, r3
 800147e:	f007 f85f 	bl	8008540 <CDC_Transmit_FS>
 8001482:	e6e7      	b.n	8001254 <main+0x11c>
 8001484:	0800987c 	.word	0x0800987c
 8001488:	08009880 	.word	0x08009880
 800148c:	08009884 	.word	0x08009884
 8001490:	08009888 	.word	0x08009888
 8001494:	0800988c 	.word	0x0800988c
 8001498:	08009890 	.word	0x08009890
 800149c:	08009894 	.word	0x08009894
 80014a0:	080098ac 	.word	0x080098ac
 80014a4:	40020800 	.word	0x40020800
 80014a8:	20000550 	.word	0x20000550
 80014ac:	08009870 	.word	0x08009870
					}
				}
			}
			else if (CDCrx[1] == '2')
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	2b32      	cmp	r3, #50	; 0x32
 80014b4:	d122      	bne.n	80014fc <main+0x3c4>
			{
				if (CDCrx[2] == '1')
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b31      	cmp	r3, #49	; 0x31
 80014ba:	d10d      	bne.n	80014d8 <main+0x3a0>
				{
					if (coolant_on(&huart3) == NO_ERROR)
 80014bc:	4831      	ldr	r0, [pc, #196]	; (8001584 <main+0x44c>)
 80014be:	f7ff fe15 	bl	80010ec <coolant_on>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f aec5 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 80014ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014ce:	2103      	movs	r1, #3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 f835 	bl	8008540 <CDC_Transmit_FS>
 80014d6:	e6bd      	b.n	8001254 <main+0x11c>
					}
				}
				else if (CDCrx[2] == '0')
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	2b30      	cmp	r3, #48	; 0x30
 80014dc:	f47f aeba 	bne.w	8001254 <main+0x11c>
				{
					if (coolant_off(&huart3) == NO_ERROR)
 80014e0:	4828      	ldr	r0, [pc, #160]	; (8001584 <main+0x44c>)
 80014e2:	f7ff fe16 	bl	8001112 <coolant_off>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f aeb3 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 80014ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014f2:	2103      	movs	r1, #3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 f823 	bl	8008540 <CDC_Transmit_FS>
 80014fa:	e6ab      	b.n	8001254 <main+0x11c>
					}
				}
			}
			else if (CDCrx[1] == '3')
 80014fc:	7b7b      	ldrb	r3, [r7, #13]
 80014fe:	2b33      	cmp	r3, #51	; 0x33
 8001500:	d122      	bne.n	8001548 <main+0x410>
			{
				if (CDCrx[2] == '1')
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	2b31      	cmp	r3, #49	; 0x31
 8001506:	d10d      	bne.n	8001524 <main+0x3ec>
				{
					if (unlock_Z_axis(&huart3) == NO_ERROR)
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <main+0x44c>)
 800150a:	f7ff fda3 	bl	8001054 <unlock_Z_axis>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	f47f ae9f 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 8001516:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800151a:	2103      	movs	r1, #3
 800151c:	4618      	mov	r0, r3
 800151e:	f007 f80f 	bl	8008540 <CDC_Transmit_FS>
 8001522:	e697      	b.n	8001254 <main+0x11c>
					}
				}
				else if (CDCrx[2] == '0')
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	2b30      	cmp	r3, #48	; 0x30
 8001528:	f47f ae94 	bne.w	8001254 <main+0x11c>
				{
					if (lock_Z_axis(&huart3) == NO_ERROR)
 800152c:	4815      	ldr	r0, [pc, #84]	; (8001584 <main+0x44c>)
 800152e:	f7ff fda4 	bl	800107a <lock_Z_axis>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f47f ae8d 	bne.w	8001254 <main+0x11c>
					{
						CDC_Transmit_FS(soStat, 3);
 800153a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800153e:	2103      	movs	r1, #3
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fffd 	bl	8008540 <CDC_Transmit_FS>
 8001546:	e685      	b.n	8001254 <main+0x11c>
				}

			}
			//turn on/off blue LED
			//does not send ACK or HH
			else if (CDCrx[1] == '5')
 8001548:	7b7b      	ldrb	r3, [r7, #13]
 800154a:	2b35      	cmp	r3, #53	; 0x35
 800154c:	f47f ae82 	bne.w	8001254 <main+0x11c>
			{
				if (CDCrx[2] == '1')
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	2b31      	cmp	r3, #49	; 0x31
 8001554:	d105      	bne.n	8001562 <main+0x42a>
				{
					set_headboard_solenoid_state(&huart3, 0x05, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	2105      	movs	r1, #5
 800155a:	480a      	ldr	r0, [pc, #40]	; (8001584 <main+0x44c>)
 800155c:	f7ff fd62 	bl	8001024 <set_headboard_solenoid_state>
 8001560:	e678      	b.n	8001254 <main+0x11c>
				}
				else if (CDCrx[2] == '0')
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	2b30      	cmp	r3, #48	; 0x30
 8001566:	f47f ae75 	bne.w	8001254 <main+0x11c>
				{
					set_headboard_solenoid_state(&huart3, 0x05, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2105      	movs	r1, #5
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <main+0x44c>)
 8001570:	f7ff fd58 	bl	8001024 <set_headboard_solenoid_state>
 8001574:	e66e      	b.n	8001254 <main+0x11c>
				}

			}

		}
		else if (CDCrx[0] == 'q')
 8001576:	7b3b      	ldrb	r3, [r7, #12]
 8001578:	2b71      	cmp	r3, #113	; 0x71
 800157a:	f47f ae6b 	bne.w	8001254 <main+0x11c>
		{
			//reboot
			HAL_NVIC_SystemReset();
 800157e:	f001 fac4 	bl	8002b0a <HAL_NVIC_SystemReset>
		for (int i = 0; i < 16; i++)
 8001582:	e667      	b.n	8001254 <main+0x11c>
 8001584:	20000550 	.word	0x20000550

08001588 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	; 0x50
 800158c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	; 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fc5c 	bl	8008e54 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <SystemClock_Config+0xcc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a27      	ldr	r2, [pc, #156]	; (8001654 <SystemClock_Config+0xcc>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <SystemClock_Config+0xd0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemClock_Config+0xd0>)
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80015f8:	2308      	movs	r3, #8
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80015fc:	23a8      	movs	r3, #168	; 0xa8
 80015fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001604:	2307      	movs	r3, #7
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fdc5 	bl	800419c <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001618:	f000 f9ee 	bl	80019f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800162c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001632:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2105      	movs	r1, #5
 800163a:	4618      	mov	r0, r3
 800163c:	f003 f826 	bl	800468c <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001646:	f000 f9d7 	bl	80019f8 <Error_Handler>
	}
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_ADC2_Init+0x9c>)
 8001672:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800167a:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_ADC2_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_ADC2_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_ADC2_Init+0x98>)
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <MX_ADC2_Init+0xa0>)
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016be:	f000 fdab 	bl	8002218 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 80016c8:	f000 f996 	bl	80019f8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016de:	f000 fddf 	bl	80022a0 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 80016e8:	f000 f986 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000440 	.word	0x20000440
 80016f8:	40012100 	.word	0x40012100
 80016fc:	0f000001 	.word	0x0f000001

08001700 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_ADC3_Init+0x98>)
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <MX_ADC3_Init+0x9c>)
 8001716:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001718:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_ADC3_Init+0x98>)
 800171a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_ADC3_Init+0x98>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_ADC3_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_ADC3_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_ADC3_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_ADC3_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_ADC3_Init+0x98>)
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <MX_ADC3_Init+0xa0>)
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_ADC3_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_ADC3_Init+0x98>)
 800174e:	2201      	movs	r2, #1
 8001750:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_ADC3_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_ADC3_Init+0x98>)
 800175c:	2201      	movs	r2, #1
 800175e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_ADC3_Init+0x98>)
 8001762:	f000 fd59 	bl	8002218 <HAL_ADC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800176c:	f000 f944 	bl	80019f8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001770:	2303      	movs	r3, #3
 8001772:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_ADC3_Init+0x98>)
 8001782:	f000 fd8d 	bl	80022a0 <HAL_ADC_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800178c:	f000 f934 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000488 	.word	0x20000488
 800179c:	40012200 	.word	0x40012200
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_CAN2_Init+0x60>)
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <MX_CAN2_Init+0x64>)
 80017ac:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_CAN2_Init+0x60>)
 80017b0:	2210      	movs	r2, #16
 80017b2:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_CAN2_Init+0x60>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_CAN2_Init+0x60>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_CAN2_Init+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_CAN2_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <MX_CAN2_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_CAN2_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <MX_CAN2_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_CAN2_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_CAN2_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_CAN2_Init+0x60>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_CAN2_Init+0x60>)
 80017f2:	f000 ff73 	bl	80026dc <HAL_CAN_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 80017fc:	f000 f8fc 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200004d0 	.word	0x200004d0
 8001808:	40006800 	.word	0x40006800

0800180c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_SPI1_Init+0x64>)
 8001812:	4a18      	ldr	r2, [pc, #96]	; (8001874 <MX_SPI1_Init+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <MX_SPI1_Init+0x64>)
 8001818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800181c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_SPI1_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_SPI1_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_SPI1_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_SPI1_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_SPI1_Init+0x64>)
 8001838:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800183c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_SPI1_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_SPI1_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_SPI1_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_SPI1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_SPI1_Init+0x64>)
 8001858:	220a      	movs	r2, #10
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_SPI1_Init+0x64>)
 800185e:	f003 f933 	bl	8004ac8 <HAL_SPI_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8001868:	f000 f8c6 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200004f8 	.word	0x200004f8
 8001874:	40013000 	.word	0x40013000

08001878 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <MX_USART3_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 19200;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001884:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001888:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018b0:	f003 f993 	bl	8004bda <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80018ba:	f000 f89d 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000550 	.word	0x20000550
 80018c8:	40004800 	.word	0x40004800

080018cc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a38      	ldr	r2, [pc, #224]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <MX_GPIO_Init+0x11c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <MX_GPIO_Init+0x11c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a2a      	ldr	r2, [pc, #168]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <MX_GPIO_Init+0x11c>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	481e      	ldr	r0, [pc, #120]	; (80019ec <MX_GPIO_Init+0x120>)
 8001974:	f001 fa76 	bl	8002e64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2102      	movs	r1, #2
 800197c:	481c      	ldr	r0, [pc, #112]	; (80019f0 <MX_GPIO_Init+0x124>)
 800197e:	f001 fa71 	bl	8002e64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001982:	2200      	movs	r2, #0
 8001984:	211f      	movs	r1, #31
 8001986:	481b      	ldr	r0, [pc, #108]	; (80019f4 <MX_GPIO_Init+0x128>)
 8001988:	f001 fa6c 	bl	8002e64 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 800198c:	2302      	movs	r3, #2
 800198e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_GPIO_Init+0x120>)
 80019a4:	f001 f8c2 	bl	8002b2c <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 80019a8:	2302      	movs	r3, #2
 80019aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <MX_GPIO_Init+0x124>)
 80019c0:	f001 f8b4 	bl	8002b2c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 80019c4:	231f      	movs	r3, #31
 80019c6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_GPIO_Init+0x128>)
 80019dc:	f001 f8a6 	bl	8002b2c <HAL_GPIO_Init>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020400 	.word	0x40020400
 80019f4:	40020c00 	.word	0x40020c00

080019f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <sendData8>:

uint16_t packetCRC;
uint16_t rxCRC;

void sendData8(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

	while(HAL_UART_Receive(huart, rx485, 1, 1) != HAL_TIMEOUT)
 8001a0c:	bf00      	nop
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2201      	movs	r2, #1
 8001a12:	490f      	ldr	r1, [pc, #60]	; (8001a50 <sendData8+0x4c>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f003 f9bf 	bl	8004d98 <HAL_UART_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d1f6      	bne.n	8001a0e <sendData8+0xa>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 9600 baud or 1.2KB/s --- 8 bytes takes ~10ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2102      	movs	r1, #2
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <sendData8+0x50>)
 8001a26:	f001 fa1d 	bl	8002e64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f000 fbd0 	bl	80021d0 <HAL_Delay>

	//blocking transmit 15ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 15);
 8001a30:	230f      	movs	r3, #15
 8001a32:	2208      	movs	r2, #8
 8001a34:	4908      	ldr	r1, [pc, #32]	; (8001a58 <sendData8+0x54>)
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f003 f91c 	bl	8004c74 <HAL_UART_Transmit>
	//HAL_Delay(5);
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2102      	movs	r1, #2
 8001a40:	4804      	ldr	r0, [pc, #16]	; (8001a54 <sendData8+0x50>)
 8001a42:	f001 fa0f 	bl	8002e64 <HAL_GPIO_WritePin>

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000208 	.word	0x20000208
 8001a54:	40020400 	.word	0x40020400
 8001a58:	20000200 	.word	0x20000200

08001a5c <appendCRC8>:


void appendCRC8()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8001a62:	2106      	movs	r1, #6
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <appendCRC8+0x38>)
 8001a66:	f000 f817 	bl	8001a98 <crc_chk_value>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <appendCRC8+0x38>)
 8001a7a:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <appendCRC8+0x38>)
 8001a88:	71da      	strb	r2, [r3, #7]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000200 	.word	0x20000200

08001a98 <crc_chk_value>:

	return checkEcho8(huart);
}

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8001aaa:	e01f      	b.n	8001aec <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	89fb      	ldrh	r3, [r7, #14]
 8001ab8:	4053      	eors	r3, r2
 8001aba:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	e011      	b.n	8001ae6 <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8001ac2:	89fb      	ldrh	r3, [r7, #14]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <crc_chk_value+0x6c>)
 8001ad4:	4053      	eors	r3, r2
 8001ad6:	81fb      	strh	r3, [r7, #14]
 8001ad8:	e002      	b.n	8001ae0 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8001ada:	89fb      	ldrh	r3, [r7, #14]
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	ddea      	ble.n	8001ac2 <crc_chk_value+0x2a>
	while (length--)
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	70fa      	strb	r2, [r7, #3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1da      	bne.n	8001aac <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8001af6:	89fb      	ldrh	r3, [r7, #14]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	ffffa001 	.word	0xffffa001

08001b08 <masterRd>:
{
	return wrMsg;
}

int masterRd(UART_HandleTypeDef *huart, struct SpindleData *spindle0)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]

	wrMsg[0] = 0x01;
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <masterRd+0x134>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <masterRd+0x134>)
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <masterRd+0x134>)
 8001b20:	22d0      	movs	r2, #208	; 0xd0
 8001b22:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8001b24:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <masterRd+0x134>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <masterRd+0x134>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <masterRd+0x134>)
 8001b32:	2203      	movs	r2, #3
 8001b34:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <masterRd+0x134>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <masterRd+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8001b42:	f7ff ff8b 	bl	8001a5c <appendCRC8>


	sendData8(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff5c 	bl	8001a04 <sendData8>

	//TODO check for rx errors
	if(HAL_UART_Receive(huart, rx485, 11, 200) == HAL_TIMEOUT)
 8001b4c:	23c8      	movs	r3, #200	; 0xc8
 8001b4e:	220b      	movs	r2, #11
 8001b50:	493b      	ldr	r1, [pc, #236]	; (8001c40 <masterRd+0x138>)
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f003 f920 	bl	8004d98 <HAL_UART_Receive>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d101      	bne.n	8001b62 <masterRd+0x5a>
	{
		return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e068      	b.n	8001c34 <masterRd+0x12c>
	}

	rxCRC = crc_chk_value(rx485, 9);
 8001b62:	2109      	movs	r1, #9
 8001b64:	4836      	ldr	r0, [pc, #216]	; (8001c40 <masterRd+0x138>)
 8001b66:	f7ff ff97 	bl	8001a98 <crc_chk_value>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <masterRd+0x13c>)
 8001b70:	801a      	strh	r2, [r3, #0]


	//lmao its midnight and i realized endinenness is fuc ked
	packetCRC = (rx485[10] << 8) | rx485[9];
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <masterRd+0x138>)
 8001b74:	7a9b      	ldrb	r3, [r3, #10]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <masterRd+0x138>)
 8001b7c:	7a5b      	ldrb	r3, [r3, #9]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <masterRd+0x140>)
 8001b88:	801a      	strh	r2, [r3, #0]


	if (packetCRC != rxCRC)
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <masterRd+0x140>)
 8001b8c:	881a      	ldrh	r2, [r3, #0]
 8001b8e:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <masterRd+0x13c>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d001      	beq.n	8001b9a <masterRd+0x92>
	{
		//error code 4 - CRC failed
		return 4;
 8001b96:	2304      	movs	r3, #4
 8001b98:	e04c      	b.n	8001c34 <masterRd+0x12c>

//	spindle0->current = rx485[3];
//	spindle0->current <<= 8;
//	spindle0->current |= rx485[4];

	spindle0->current = (rx485[3] << 8) | rx485[4];
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <masterRd+0x138>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <masterRd+0x138>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	801a      	strh	r2, [r3, #0]

	//TODO delete whichever method doesnt work
	altI = (rx485[3] << 8) | rx485[4];
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <masterRd+0x138>)
 8001bb4:	78db      	ldrb	r3, [r3, #3]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <masterRd+0x138>)
 8001bbc:	791b      	ldrb	r3, [r3, #4]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <masterRd+0x144>)
 8001bc8:	801a      	strh	r2, [r3, #0]

	spindle0->voltage = rx485[5];
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <masterRd+0x138>)
 8001bcc:	795b      	ldrb	r3, [r3, #5]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	805a      	strh	r2, [r3, #2]
	spindle0->voltage <<= 8;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	885b      	ldrh	r3, [r3, #2]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	805a      	strh	r2, [r3, #2]
	spindle0->voltage |= rx485[6];
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	885a      	ldrh	r2, [r3, #2]
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <masterRd+0x138>)
 8001be6:	799b      	ldrb	r3, [r3, #6]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4313      	orrs	r3, r2
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	805a      	strh	r2, [r3, #2]

	spindle0->rpm = rx485[7];
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <masterRd+0x138>)
 8001bf4:	79db      	ldrb	r3, [r3, #7]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	809a      	strh	r2, [r3, #4]
	spindle0->rpm <<= 8;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	809a      	strh	r2, [r3, #4]
	spindle0->rpm |= rx485[8];
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	889a      	ldrh	r2, [r3, #4]
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <masterRd+0x138>)
 8001c0e:	7a1b      	ldrb	r3, [r3, #8]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	809a      	strh	r2, [r3, #4]

	//TODO delete whichever method doesnt work
	altRPM = (rx485[7] << 8) | rx485[8];
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <masterRd+0x138>)
 8001c1c:	79db      	ldrb	r3, [r3, #7]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	b21a      	sxth	r2, r3
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <masterRd+0x138>)
 8001c24:	7a1b      	ldrb	r3, [r3, #8]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <masterRd+0x148>)
 8001c30:	801a      	strh	r2, [r3, #0]
	return 0;
 8001c32:	2300      	movs	r3, #0

}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000200 	.word	0x20000200
 8001c40:	20000208 	.word	0x20000208
 8001c44:	2000059a 	.word	0x2000059a
 8001c48:	20000598 	.word	0x20000598
 8001c4c:	20000596 	.word	0x20000596
 8001c50:	20000594 	.word	0x20000594

08001c54 <altGetI>:


uint16_t altGetI()
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	return altI;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <altGetI+0x14>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000596 	.word	0x20000596

08001c6c <altGetRPM>:
uint16_t altGetRPM()
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return altRPM;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <altGetRPM+0x14>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000594 	.word	0x20000594

08001c84 <getRxCRC>:
{
	return packetCRC;
}

uint16_t getRxCRC()
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	return rxCRC;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <getRxCRC+0x14>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2000059a 	.word	0x2000059a

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_ADC_MspInit+0xd8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d128      	bne.n	8001d60 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a2c      	ldr	r2, [pc, #176]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001d46:	2306      	movs	r3, #6
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	4619      	mov	r1, r3
 8001d58:	481c      	ldr	r0, [pc, #112]	; (8001dcc <HAL_ADC_MspInit+0xe0>)
 8001d5a:	f000 fee7 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d5e:	e02c      	b.n	8001dba <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_ADC_MspInit+0xe4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d127      	bne.n	8001dba <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_ADC_MspInit+0xdc>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001da2:	2308      	movs	r3, #8
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_ADC_MspInit+0xe0>)
 8001db6:	f000 feb9 	bl	8002b2c <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40012100 	.word	0x40012100
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40012200 	.word	0x40012200

08001dd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_CAN_MspInit+0xa0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13a      	bne.n	8001e6c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_CAN_MspInit+0xa4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e5c:	2309      	movs	r3, #9
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_CAN_MspInit+0xa8>)
 8001e68:	f000 fe60 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40006800 	.word	0x40006800
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_SPI_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_SPI_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eda:	23f0      	movs	r3, #240	; 0xf0
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eea:	2305      	movs	r3, #5
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HAL_SPI_MspInit+0x8c>)
 8001ef6:	f000 fe19 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013000 	.word	0x40013000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <HAL_UART_MspInit+0x84>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d12c      	bne.n	8001f8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a17      	ldr	r2, [pc, #92]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <HAL_UART_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <HAL_UART_MspInit+0x8c>)
 8001f88:	f000 fdd0 	bl	8002b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 f8d0 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <OTG_FS_IRQHandler+0x10>)
 8001ffa:	f001 f89c 	bl	8003136 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20001a78 	.word	0x20001a78

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f006 fee2 	bl	8008e00 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20020000 	.word	0x20020000
 8002068:	00000400 	.word	0x00000400
 800206c:	2000059c 	.word	0x2000059c
 8002070:	200020b0 	.word	0x200020b0

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b4:	4c0b      	ldr	r4, [pc, #44]	; (80020e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020c2:	f7ff ffd7 	bl	8002074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c6:	f006 fea1 	bl	8008e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7ff f835 	bl	8001138 <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 80020dc:	08009a84 	.word	0x08009a84
  ldr r2, =_sbss
 80020e0:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 80020e4:	200020b0 	.word	0x200020b0

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 fcc3 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fdbc 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fcdf 	bl	8002b12 <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 fca3 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000023c 	.word	0x2000023c
 8002188:	20000244 	.word	0x20000244
 800218c:	20000240 	.word	0x20000240

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000244 	.word	0x20000244
 80021b4:	200005a0 	.word	0x200005a0

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200005a0 	.word	0x200005a0

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000244 	.word	0x20000244

08002218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e033      	b.n	8002296 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fd58 	bl	8001cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800225e:	f023 0302 	bic.w	r3, r3, #2
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f93a 	bl	80024e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
 8002286:	e001      	b.n	800228c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1c>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e105      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x228>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d925      	bls.n	8002318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	3b1e      	subs	r3, #30
 80022e2:	2207      	movs	r2, #7
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43da      	mvns	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	400a      	ands	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68d9      	ldr	r1, [r3, #12]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4618      	mov	r0, r3
 8002304:	4603      	mov	r3, r0
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4403      	add	r3, r0
 800230a:	3b1e      	subs	r3, #30
 800230c:	409a      	lsls	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	e022      	b.n	800235e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6919      	ldr	r1, [r3, #16]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	2207      	movs	r2, #7
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	4603      	mov	r3, r0
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4403      	add	r3, r0
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b06      	cmp	r3, #6
 8002364:	d824      	bhi.n	80023b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3b05      	subs	r3, #5
 8002378:	221f      	movs	r2, #31
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3b05      	subs	r3, #5
 80023a2:	fa00 f203 	lsl.w	r2, r0, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
 80023ae:	e04c      	b.n	800244a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d824      	bhi.n	8002402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b23      	subs	r3, #35	; 0x23
 80023ca:	221f      	movs	r2, #31
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b23      	subs	r3, #35	; 0x23
 80023f4:	fa00 f203 	lsl.w	r2, r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002400:	e023      	b.n	800244a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b41      	subs	r3, #65	; 0x41
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b41      	subs	r3, #65	; 0x41
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <HAL_ADC_ConfigChannel+0x234>)
 800244c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_ADC_ConfigChannel+0x238>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d109      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1cc>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b12      	cmp	r3, #18
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_ADC_ConfigChannel+0x238>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d123      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d003      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x1e6>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b11      	cmp	r3, #17
 8002484:	d11b      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d111      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_ADC_ConfigChannel+0x23c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_ADC_ConfigChannel+0x240>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9a      	lsrs	r2, r3, #18
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012300 	.word	0x40012300
 80024d8:	40012000 	.word	0x40012000
 80024dc:	2000023c 	.word	0x2000023c
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <ADC_Init+0x1f0>)
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <ADC_Init+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e00f      	b.n	80025e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0202 	bic.w	r2, r2, #2
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800262e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	035a      	lsls	r2, r3, #13
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e007      	b.n	8002658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	3b01      	subs	r3, #1
 8002674:	051a      	lsls	r2, r3, #20
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269a:	025a      	lsls	r2, r3, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	029a      	lsls	r2, r3, #10
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40012300 	.word	0x40012300
 80026d8:	0f000001 	.word	0x0f000001

080026dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0ed      	b.n	80028ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fb6a 	bl	8001dd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0202 	bic.w	r2, r2, #2
 800270e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002710:	f7ff fd52 	bl	80021b8 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002716:	e012      	b.n	800273e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002718:	f7ff fd4e 	bl	80021b8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b0a      	cmp	r3, #10
 8002724:	d90b      	bls.n	800273e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2205      	movs	r2, #5
 8002736:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0c5      	b.n	80028ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e5      	bne.n	8002718 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275c:	f7ff fd2c 	bl	80021b8 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002762:	e012      	b.n	800278a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002764:	f7ff fd28 	bl	80021b8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b0a      	cmp	r3, #10
 8002770:	d90b      	bls.n	800278a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2205      	movs	r2, #5
 8002782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e09f      	b.n	80028ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0e5      	beq.n	8002764 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7e1b      	ldrb	r3, [r3, #24]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7e5b      	ldrb	r3, [r3, #25]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e007      	b.n	80027ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7e9b      	ldrb	r3, [r3, #26]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0220 	orr.w	r2, r2, #32
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e007      	b.n	8002816 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0220 	bic.w	r2, r2, #32
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7edb      	ldrb	r3, [r3, #27]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0210 	bic.w	r2, r2, #16
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e007      	b.n	8002840 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0210 	orr.w	r2, r2, #16
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7f1b      	ldrb	r3, [r3, #28]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d108      	bne.n	800285a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e007      	b.n	800286a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7f5b      	ldrb	r3, [r3, #29]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d108      	bne.n	8002884 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0204 	orr.w	r2, r2, #4
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e007      	b.n	8002894 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	1e5a      	subs	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a34:	f3bf 8f4f 	dsb	sy
}
 8002a38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <__NVIC_SystemReset+0x24>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002a42:	4904      	ldr	r1, [pc, #16]	; (8002a54 <__NVIC_SystemReset+0x24>)
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_SystemReset+0x28>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a4a:	f3bf 8f4f 	dsb	sy
}
 8002a4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <__NVIC_SystemReset+0x20>
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	05fa0004 	.word	0x05fa0004

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff78 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff13 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff28 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff78 	bl	80029c8 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff47 	bl	8002974 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff1b 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002b0e:	f7ff ff8f 	bl	8002a30 <__NVIC_SystemReset>

08002b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff9e 	bl	8002a5c <SysTick_Config>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e16b      	b.n	8002e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f040 815a 	bne.w	8002e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d005      	beq.n	8002b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d130      	bne.n	8002be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0201 	and.w	r2, r3, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d017      	beq.n	8002c1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d123      	bne.n	8002c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	08da      	lsrs	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3208      	adds	r2, #8
 8002c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	220f      	movs	r2, #15
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	08da      	lsrs	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3208      	adds	r2, #8
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b4 	beq.w	8002e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a5f      	ldr	r2, [pc, #380]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <HAL_GPIO_Init+0x30c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cce:	4a5b      	ldr	r2, [pc, #364]	; (8002e3c <HAL_GPIO_Init+0x310>)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x314>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a51      	ldr	r2, [pc, #324]	; (8002e44 <HAL_GPIO_Init+0x318>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a50      	ldr	r2, [pc, #320]	; (8002e48 <HAL_GPIO_Init+0x31c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4f      	ldr	r2, [pc, #316]	; (8002e4c <HAL_GPIO_Init+0x320>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x21a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <HAL_GPIO_Init+0x324>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <HAL_GPIO_Init+0x328>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x212>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <HAL_GPIO_Init+0x32c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_GPIO_Init+0x330>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x20a>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e00e      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d36:	2308      	movs	r3, #8
 8002d38:	e00c      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e00a      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e008      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e006      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e004      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e002      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_GPIO_Init+0x228>
 8002d52:	2300      	movs	r3, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	f002 0203 	and.w	r2, r2, #3
 8002d5a:	0092      	lsls	r2, r2, #2
 8002d5c:	4093      	lsls	r3, r2
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d64:	4935      	ldr	r1, [pc, #212]	; (8002e3c <HAL_GPIO_Init+0x310>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d9c:	4b30      	ldr	r3, [pc, #192]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc0:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b0f      	cmp	r3, #15
 8002e24:	f67f ae90 	bls.w	8002b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40020400 	.word	0x40020400
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40021400 	.word	0x40021400
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021c00 	.word	0x40021c00
 8002e60:	40013c00 	.word	0x40013c00

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e98:	b08f      	sub	sp, #60	; 0x3c
 8002e9a:	af0a      	add	r7, sp, #40	; 0x28
 8002e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e10f      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f005 fc84 	bl	80087d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 fbcb 	bl	8005682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	687e      	ldr	r6, [r7, #4]
 8002ef4:	466d      	mov	r5, sp
 8002ef6:	f106 0410 	add.w	r4, r6, #16
 8002efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002efc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f06:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f0a:	1d33      	adds	r3, r6, #4
 8002f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f002 faa2 	bl	8005458 <USB_CoreInit>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0d0      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fbb9 	bl	80056a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e04a      	b.n	8002fce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	333d      	adds	r3, #61	; 0x3d
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	b298      	uxth	r0, r3
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3342      	adds	r3, #66	; 0x42
 8002f74:	4602      	mov	r2, r0
 8002f76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	333f      	adds	r3, #63	; 0x3f
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	; 0x44
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3348      	adds	r3, #72	; 0x48
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3350      	adds	r3, #80	; 0x50
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3af      	bcc.n	8002f38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e044      	b.n	8003068 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800300a:	7bfa      	ldrb	r2, [r7, #15]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003036:	7bfa      	ldrb	r2, [r7, #15]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	3301      	adds	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d3b5      	bcc.n	8002fde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	687e      	ldr	r6, [r7, #4]
 800307a:	466d      	mov	r5, sp
 800307c:	f106 0410 	add.w	r4, r6, #16
 8003080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800308c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003090:	1d33      	adds	r3, r6, #4
 8003092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003094:	6838      	ldr	r0, [r7, #0]
 8003096:	f002 fb2f 	bl	80056f8 <USB_DevInit>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00d      	b.n	80030c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fb77 	bl	80067b4 <USB_DevDisconnect>

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_PCD_Start+0x1c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e020      	b.n	800312e <HAL_PCD_Start+0x5e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d109      	bne.n	8003110 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003100:	2b01      	cmp	r3, #1
 8003102:	d005      	beq.n	8003110 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 faa3 	bl	8005660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fb27 	bl	8006772 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b08d      	sub	sp, #52	; 0x34
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f003 fbe5 	bl	800691c <USB_GetMode>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 839d 	bne.w	8003894 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fb49 	bl	80067f6 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8393 	beq.w	8003892 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fb40 	bl	80067f6 <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d107      	bne.n	8003190 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f002 0202 	and.w	r2, r2, #2
 800318e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fb2e 	bl	80067f6 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d161      	bne.n	8003268 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	0c5b      	lsrs	r3, r3, #17
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d124      	bne.n	800322a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d035      	beq.n	8003258 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	6a38      	ldr	r0, [r7, #32]
 8003200:	f003 f994 	bl	800652c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003210:	441a      	add	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003222:	441a      	add	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	619a      	str	r2, [r3, #24]
 8003228:	e016      	b.n	8003258 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	0c5b      	lsrs	r3, r3, #17
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	2b06      	cmp	r3, #6
 8003234:	d110      	bne.n	8003258 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800323c:	2208      	movs	r2, #8
 800323e:	4619      	mov	r1, r3
 8003240:	6a38      	ldr	r0, [r7, #32]
 8003242:	f003 f973 	bl	800652c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003252:	441a      	add	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0210 	orr.w	r2, r2, #16
 8003266:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fac2 	bl	80067f6 <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003278:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800327c:	d16e      	bne.n	800335c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fac8 	bl	800681c <USB_ReadDevAllOutEpInterrupt>
 800328c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800328e:	e062      	b.n	8003356 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d057      	beq.n	800334a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 faed 	bl	8006884 <USB_ReadDevOutEPInterrupt>
 80032aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	2301      	movs	r3, #1
 80032c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fdb0 	bl	8003e30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e6:	461a      	mov	r2, r3
 80032e8:	2308      	movs	r3, #8
 80032ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 feaa 	bl	8004048 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330a:	461a      	mov	r2, r3
 800330c:	2310      	movs	r3, #16
 800330e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003326:	461a      	mov	r2, r3
 8003328:	2320      	movs	r3, #32
 800332a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003348:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d199      	bne.n	8003290 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 fa48 	bl	80067f6 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003370:	f040 80c0 	bne.w	80034f4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fa69 	bl	8006850 <USB_ReadDevAllInEpInterrupt>
 800337e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003384:	e0b2      	b.n	80034ec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a7 	beq.w	80034e0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f003 fa8f 	bl	80068c0 <USB_ReadDevInEPInterrupt>
 80033a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d057      	beq.n	800345e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	2201      	movs	r2, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69f9      	ldr	r1, [r7, #28]
 80033ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ce:	4013      	ands	r3, r2
 80033d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033de:	461a      	mov	r2, r3
 80033e0:	2301      	movs	r3, #1
 80033e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d132      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3348      	adds	r3, #72	; 0x48
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4403      	add	r3, r0
 800340c:	3344      	adds	r3, #68	; 0x44
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4419      	add	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4403      	add	r3, r0
 8003420:	3348      	adds	r3, #72	; 0x48
 8003422:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3350      	adds	r3, #80	; 0x50
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d108      	bne.n	8003452 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800344a:	461a      	mov	r2, r3
 800344c:	2101      	movs	r1, #1
 800344e:	f003 fa97 	bl	8006980 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f005 fa3a 	bl	80088d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	461a      	mov	r2, r3
 8003476:	2308      	movs	r3, #8
 8003478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003490:	461a      	mov	r2, r3
 8003492:	2310      	movs	r3, #16
 8003494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	461a      	mov	r2, r3
 80034ae:	2340      	movs	r3, #64	; 0x40
 80034b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c8:	461a      	mov	r2, r3
 80034ca:	2302      	movs	r3, #2
 80034cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fc1b 	bl	8003d16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f47f af49 	bne.w	8003386 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 f97c 	bl	80067f6 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003508:	d122      	bne.n	8003550 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003530:	2100      	movs	r1, #0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fe26 	bl	8004184 <HAL_PCDEx_LPM_Callback>
 8003538:	e002      	b.n	8003540 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f005 fa40 	bl	80089c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800354e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f003 f94e 	bl	80067f6 <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003564:	d112      	bne.n	800358c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f005 f9fc 	bl	8008974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800358a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f003 f930 	bl	80067f6 <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	f040 80c7 	bne.w	8003732 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2110      	movs	r1, #16
 80035be:	4618      	mov	r0, r3
 80035c0:	f002 f9fe 	bl	80059c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035c8:	e056      	b.n	8003678 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ee:	0151      	lsls	r1, r2, #5
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	440a      	add	r2, r1
 80035f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035fc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360e:	0151      	lsls	r1, r2, #5
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	440a      	add	r2, r1
 8003614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800361c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	4413      	add	r3, r2
 8003626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362a:	461a      	mov	r2, r3
 800362c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003630:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003650:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	440a      	add	r2, r1
 8003668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003670:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	3301      	adds	r3, #1
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367e:	429a      	cmp	r2, r3
 8003680:	d3a3      	bcc.n	80035ca <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003694:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 030b 	orr.w	r3, r3, #11
 80036b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c4:	f043 030b 	orr.w	r3, r3, #11
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	e015      	b.n	80036f8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036de:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f2:	f043 030b 	orr.w	r3, r3, #11
 80036f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800370a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800371c:	461a      	mov	r2, r3
 800371e:	f003 f92f 	bl	8006980 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 f85d 	bl	80067f6 <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d124      	bne.n	8003792 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 f8f3 	bl	8006938 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f002 f993 	bl	8005a82 <USB_GetDevSpeed>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681c      	ldr	r4, [r3, #0]
 8003768:	f001 f97a 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 800376c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	4620      	mov	r0, r4
 8003778:	f001 fed0 	bl	800551c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f005 f8d0 	bl	8008922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003790:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f003 f82d 	bl	80067f6 <USB_ReadInterrupts>
 800379c:	4603      	mov	r3, r0
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d10a      	bne.n	80037bc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f005 f8ad 	bl	8008906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f002 0208 	and.w	r2, r2, #8
 80037ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 f818 	bl	80067f6 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d0:	d10f      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f005 f90f 	bl	8008a00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 fffd 	bl	80067f6 <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d10f      	bne.n	8003828 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f005 f8e2 	bl	80089dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f002 ffe2 	bl	80067f6 <USB_ReadInterrupts>
 8003832:	4603      	mov	r3, r0
 8003834:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d10a      	bne.n	8003854 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f005 f8f0 	bl	8008a24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f002 ffcc 	bl	80067f6 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b04      	cmp	r3, #4
 8003866:	d115      	bne.n	8003894 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f005 f8e0 	bl	8008a40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	e000      	b.n	8003894 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003892:	bf00      	nop
    }
  }
}
 8003894:	3734      	adds	r7, #52	; 0x34
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}

0800389a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_PCD_SetAddress+0x1a>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e013      	b.n	80038dc <HAL_PCD_SetAddress+0x42>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f002 ff2a 	bl	8006726 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	70fb      	strb	r3, [r7, #3]
 80038f6:	460b      	mov	r3, r1
 80038f8:	803b      	strh	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003906:	2b00      	cmp	r3, #0
 8003908:	da0f      	bge.n	800392a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 020f 	and.w	r2, r3, #15
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	3338      	adds	r3, #56	; 0x38
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	705a      	strb	r2, [r3, #1]
 8003928:	e00f      	b.n	800394a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392a:	78fb      	ldrb	r3, [r7, #3]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003956:	883a      	ldrh	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	78ba      	ldrb	r2, [r7, #2]
 8003960:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	785b      	ldrb	r3, [r3, #1]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003974:	78bb      	ldrb	r3, [r7, #2]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d102      	bne.n	8003980 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_PCD_EP_Open+0xaa>
 800398a:	2302      	movs	r3, #2
 800398c:	e00e      	b.n	80039ac <HAL_PCD_EP_Open+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	f002 f895 	bl	8005acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039aa:	7afb      	ldrb	r3, [r7, #11]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da0f      	bge.n	80039e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3338      	adds	r3, #56	; 0x38
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
 80039e6:	e00f      	b.n	8003a08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f003 020f 	and.w	r2, r3, #15
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	3304      	adds	r3, #4
 8003a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_PCD_EP_Close+0x6e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e00e      	b.n	8003a40 <HAL_PCD_EP_Close+0x8c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 f8d3 	bl	8005bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3304      	adds	r3, #4
 8003a70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2200      	movs	r2, #0
 8003a88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6979      	ldr	r1, [r7, #20]
 8003abc:	f002 fbae 	bl	800621c <USB_EP0StartXfer>
 8003ac0:	e008      	b.n	8003ad4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f002 f960 	bl	8005d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b00:	681b      	ldr	r3, [r3, #0]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2200      	movs	r2, #0
 8003b46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b68:	7afb      	ldrb	r3, [r7, #11]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	f002 fb4c 	bl	800621c <USB_EP0StartXfer>
 8003b84:	e008      	b.n	8003b98 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	f002 f8fe 	bl	8005d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	f003 020f 	and.w	r2, r3, #15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d901      	bls.n	8003bc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e050      	b.n	8003c62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	da0f      	bge.n	8003be8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 020f 	and.w	r2, r3, #15
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	3338      	adds	r3, #56	; 0x38
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	705a      	strb	r2, [r3, #1]
 8003be6:	e00d      	b.n	8003c04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_SetStall+0x82>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e01e      	b.n	8003c62 <HAL_PCD_EP_SetStall+0xc0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f002 fca3 	bl	800657e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	b2d9      	uxtb	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c52:	461a      	mov	r2, r3
 8003c54:	f002 fe94 	bl	8006980 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d901      	bls.n	8003c88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e042      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da0f      	bge.n	8003cb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	3338      	adds	r3, #56	; 0x38
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	705a      	strb	r2, [r3, #1]
 8003cae:	e00f      	b.n	8003cd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_EP_ClrStall+0x86>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e00e      	b.n	8003d0e <HAL_PCD_EP_ClrStall+0xa4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68f9      	ldr	r1, [r7, #12]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 fcab 	bl	800665a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b08a      	sub	sp, #40	; 0x28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3338      	adds	r3, #56	; 0x38
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d901      	bls.n	8003d4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06c      	b.n	8003e28 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d72:	e02b      	b.n	8003dcc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3303      	adds	r3, #3
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4603      	mov	r3, r0
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f002 fb87 	bl	80064c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	441a      	add	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d809      	bhi.n	8003df6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d203      	bcs.n	8003df6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1be      	bne.n	8003d74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d811      	bhi.n	8003e26 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	6939      	ldr	r1, [r7, #16]
 8003e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e22:	4013      	ands	r3, r2
 8003e24:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	f040 80a0 	bne.w	8003fa8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a72      	ldr	r2, [pc, #456]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f240 80dd 	bls.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80d7 	beq.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	461a      	mov	r2, r3
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	e0cb      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	e0bc      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80b7 	bne.w	8004036 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a5d      	ldr	r2, [pc, #372]	; (8004040 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d90f      	bls.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e0a2      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	0159      	lsls	r1, r3, #5
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4403      	add	r3, r0
 8003f26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4419      	add	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d114      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f92:	461a      	mov	r2, r3
 8003f94:	2101      	movs	r1, #1
 8003f96:	f002 fcf3 	bl	8006980 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f004 fc7b 	bl	800889c <HAL_PCD_DataOutStageCallback>
 8003fa6:	e046      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d124      	bne.n	8003ffa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e032      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2320      	movs	r3, #32
 8003fea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f004 fc52 	bl	800889c <HAL_PCD_DataOutStageCallback>
 8003ff8:	e01d      	b.n	8004036 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d114      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004022:	461a      	mov	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f002 fcab 	bl	8006980 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f004 fc33 	bl	800889c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	4f54300a 	.word	0x4f54300a
 8004044:	4f54310a 	.word	0x4f54310a

08004048 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	333c      	adds	r3, #60	; 0x3c
 8004060:	3304      	adds	r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d90e      	bls.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f004 fbeb 	bl	8008878 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d90c      	bls.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d108      	bne.n	80040c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040bc:	461a      	mov	r2, r3
 80040be:	2101      	movs	r1, #1
 80040c0:	f002 fc5e 	bl	8006980 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	4f54300a 	.word	0x4f54300a

080040d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	70fb      	strb	r3, [r7, #3]
 80040e0:	4613      	mov	r3, r2
 80040e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	0419      	lsls	r1, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004100:	e028      	b.n	8004154 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
 8004114:	e00d      	b.n	8004132 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	3340      	adds	r3, #64	; 0x40
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	3301      	adds	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	3b01      	subs	r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	d3ec      	bcc.n	8004116 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800413c:	883b      	ldrh	r3, [r7, #0]
 800413e:	0418      	lsls	r0, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	3b01      	subs	r3, #1
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	4302      	orrs	r2, r0
 800414c:	3340      	adds	r3, #64	; 0x40
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e267      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d075      	beq.n	80042a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ba:	4b88      	ldr	r3, [pc, #544]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4b85      	ldr	r3, [pc, #532]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d112      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b82      	ldr	r3, [pc, #520]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	4b7e      	ldr	r3, [pc, #504]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d05b      	beq.n	80042a4 <HAL_RCC_OscConfig+0x108>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d157      	bne.n	80042a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e242      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x74>
 8004202:	4b76      	ldr	r3, [pc, #472]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a75      	ldr	r2, [pc, #468]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b70      	ldr	r3, [pc, #448]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a6f      	ldr	r2, [pc, #444]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6c      	ldr	r2, [pc, #432]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xb0>
 8004234:	4b69      	ldr	r3, [pc, #420]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a68      	ldr	r2, [pc, #416]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b66      	ldr	r3, [pc, #408]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a65      	ldr	r2, [pc, #404]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fd ffb0 	bl	80021b8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800425c:	f7fd ffac 	bl	80021b8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e207      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b5b      	ldr	r3, [pc, #364]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xc0>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd ff9c 	bl	80021b8 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd ff98 	bl	80021b8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1f3      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b51      	ldr	r3, [pc, #324]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0xe8>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b2:	4b4a      	ldr	r3, [pc, #296]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b44      	ldr	r3, [pc, #272]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1c7      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b3b      	ldr	r3, [pc, #236]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4937      	ldr	r1, [pc, #220]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCC_OscConfig+0x244>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fd ff51 	bl	80021b8 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431a:	f7fd ff4d 	bl	80021b8 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1a8      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b28      	ldr	r3, [pc, #160]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4925      	ldr	r1, [pc, #148]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_OscConfig+0x244>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd ff30 	bl	80021b8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800435c:	f7fd ff2c 	bl	80021b8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e187      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d036      	beq.n	80043f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b15      	ldr	r3, [pc, #84]	; (80043e4 <HAL_RCC_OscConfig+0x248>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fd ff10 	bl	80021b8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fd ff0c 	bl	80021b8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e167      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_OscConfig+0x240>)
 80043b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x200>
 80043ba:	e01b      	b.n	80043f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <HAL_RCC_OscConfig+0x248>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c2:	f7fd fef9 	bl	80021b8 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e00e      	b.n	80043e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fd fef5 	bl	80021b8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d907      	bls.n	80043e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e150      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
 80043dc:	40023800 	.word	0x40023800
 80043e0:	42470000 	.word	0x42470000
 80043e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e8:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80043ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ea      	bne.n	80043ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8097 	beq.w	8004530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004406:	4b81      	ldr	r3, [pc, #516]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	4b7d      	ldr	r3, [pc, #500]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a7c      	ldr	r2, [pc, #496]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b7a      	ldr	r3, [pc, #488]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004432:	4b77      	ldr	r3, [pc, #476]	; (8004610 <HAL_RCC_OscConfig+0x474>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443e:	4b74      	ldr	r3, [pc, #464]	; (8004610 <HAL_RCC_OscConfig+0x474>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a73      	ldr	r2, [pc, #460]	; (8004610 <HAL_RCC_OscConfig+0x474>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444a:	f7fd feb5 	bl	80021b8 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fd feb1 	bl	80021b8 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e10c      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_RCC_OscConfig+0x474>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x2ea>
 8004478:	4b64      	ldr	r3, [pc, #400]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a63      	ldr	r2, [pc, #396]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	e01c      	b.n	80044c0 <HAL_RCC_OscConfig+0x324>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b05      	cmp	r3, #5
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x30c>
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a5e      	ldr	r2, [pc, #376]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	4b5c      	ldr	r3, [pc, #368]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a5b      	ldr	r2, [pc, #364]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	e00b      	b.n	80044c0 <HAL_RCC_OscConfig+0x324>
 80044a8:	4b58      	ldr	r3, [pc, #352]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a57      	ldr	r2, [pc, #348]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	4b55      	ldr	r3, [pc, #340]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a54      	ldr	r2, [pc, #336]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044ba:	f023 0304 	bic.w	r3, r3, #4
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd fe76 	bl	80021b8 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd fe72 	bl	80021b8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0cb      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	4b49      	ldr	r3, [pc, #292]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <HAL_RCC_OscConfig+0x334>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f4:	f7fd fe60 	bl	80021b8 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd fe5c 	bl	80021b8 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e0b5      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004512:	4b3e      	ldr	r3, [pc, #248]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ee      	bne.n	80044fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004524:	4b39      	ldr	r3, [pc, #228]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	4a38      	ldr	r2, [pc, #224]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800452a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a1 	beq.w	800467c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453a:	4b34      	ldr	r3, [pc, #208]	; (800460c <HAL_RCC_OscConfig+0x470>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b08      	cmp	r3, #8
 8004544:	d05c      	beq.n	8004600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d141      	bne.n	80045d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fd fe30 	bl	80021b8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fe2c 	bl	80021b8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e087      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	041b      	lsls	r3, r3, #16
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	491b      	ldr	r1, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x478>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fe05 	bl	80021b8 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b2:	f7fd fe01 	bl	80021b8 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e05c      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x416>
 80045d0:	e054      	b.n	800467c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCC_OscConfig+0x478>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fd fdee 	bl	80021b8 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd fdea 	bl	80021b8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e045      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCC_OscConfig+0x470>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x444>
 80045fe:	e03d      	b.n	800467c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e038      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
 800460c:	40023800 	.word	0x40023800
 8004610:	40007000 	.word	0x40007000
 8004614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004618:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <HAL_RCC_OscConfig+0x4ec>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d028      	beq.n	8004678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d121      	bne.n	8004678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d11a      	bne.n	8004678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004650:	4293      	cmp	r3, r2
 8004652:	d111      	bne.n	8004678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cc      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d90c      	bls.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	4b63      	ldr	r3, [pc, #396]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d001      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0b8      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e0:	4b59      	ldr	r3, [pc, #356]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f8:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004704:	4b50      	ldr	r3, [pc, #320]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	494d      	ldr	r1, [pc, #308]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d044      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d107      	bne.n	800473a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472a:	4b47      	ldr	r3, [pc, #284]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d119      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e07f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d003      	beq.n	800474a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	2b03      	cmp	r3, #3
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e067      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4934      	ldr	r1, [pc, #208]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7fd fd1c 	bl	80021b8 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fd fd18 	bl	80021b8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e04f      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d20c      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e032      	b.n	800483a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4916      	ldr	r1, [pc, #88]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	490e      	ldr	r1, [pc, #56]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004812:	f000 f821 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	490a      	ldr	r1, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	5ccb      	ldrb	r3, [r1, r3]
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a09      	ldr	r2, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482e:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fc7c 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00
 8004848:	40023800 	.word	0x40023800
 800484c:	08009928 	.word	0x08009928
 8004850:	2000023c 	.word	0x2000023c
 8004854:	20000240 	.word	0x20000240

08004858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485c:	b094      	sub	sp, #80	; 0x50
 800485e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
 8004864:	2300      	movs	r3, #0
 8004866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004868:	2300      	movs	r3, #0
 800486a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004870:	4b79      	ldr	r3, [pc, #484]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b08      	cmp	r3, #8
 800487a:	d00d      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x40>
 800487c:	2b08      	cmp	r3, #8
 800487e:	f200 80e1 	bhi.w	8004a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_RCC_GetSysClockFreq+0x34>
 8004886:	2b04      	cmp	r3, #4
 8004888:	d003      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x3a>
 800488a:	e0db      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004890:	e0db      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004892:	4b72      	ldr	r3, [pc, #456]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004896:	e0d8      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004898:	4b6f      	ldr	r3, [pc, #444]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a2:	4b6d      	ldr	r3, [pc, #436]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d063      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ae:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	2200      	movs	r2, #0
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	2300      	movs	r3, #0
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
 80048c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ca:	4622      	mov	r2, r4
 80048cc:	462b      	mov	r3, r5
 80048ce:	f04f 0000 	mov.w	r0, #0
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	0159      	lsls	r1, r3, #5
 80048d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048dc:	0150      	lsls	r0, r2, #5
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4621      	mov	r1, r4
 80048e4:	1a51      	subs	r1, r2, r1
 80048e6:	6139      	str	r1, [r7, #16]
 80048e8:	4629      	mov	r1, r5
 80048ea:	eb63 0301 	sbc.w	r3, r3, r1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048fc:	4659      	mov	r1, fp
 80048fe:	018b      	lsls	r3, r1, #6
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004906:	4651      	mov	r1, sl
 8004908:	018a      	lsls	r2, r1, #6
 800490a:	4651      	mov	r1, sl
 800490c:	ebb2 0801 	subs.w	r8, r2, r1
 8004910:	4659      	mov	r1, fp
 8004912:	eb63 0901 	sbc.w	r9, r3, r1
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492a:	4690      	mov	r8, r2
 800492c:	4699      	mov	r9, r3
 800492e:	4623      	mov	r3, r4
 8004930:	eb18 0303 	adds.w	r3, r8, r3
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	462b      	mov	r3, r5
 8004938:	eb49 0303 	adc.w	r3, r9, r3
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800494a:	4629      	mov	r1, r5
 800494c:	028b      	lsls	r3, r1, #10
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004954:	4621      	mov	r1, r4
 8004956:	028a      	lsls	r2, r1, #10
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	2200      	movs	r2, #0
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
 8004962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004968:	f7fc f8a0 	bl	8000aac <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	e058      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004976:	4b38      	ldr	r3, [pc, #224]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	099b      	lsrs	r3, r3, #6
 800497c:	2200      	movs	r2, #0
 800497e:	4618      	mov	r0, r3
 8004980:	4611      	mov	r1, r2
 8004982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004986:	623b      	str	r3, [r7, #32]
 8004988:	2300      	movs	r3, #0
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	0159      	lsls	r1, r3, #5
 800499e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a2:	0150      	lsls	r0, r2, #5
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4641      	mov	r1, r8
 80049aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ae:	4649      	mov	r1, r9
 80049b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c8:	ebb2 040a 	subs.w	r4, r2, sl
 80049cc:	eb63 050b 	sbc.w	r5, r3, fp
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	00eb      	lsls	r3, r5, #3
 80049da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049de:	00e2      	lsls	r2, r4, #3
 80049e0:	4614      	mov	r4, r2
 80049e2:	461d      	mov	r5, r3
 80049e4:	4643      	mov	r3, r8
 80049e6:	18e3      	adds	r3, r4, r3
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	464b      	mov	r3, r9
 80049ec:	eb45 0303 	adc.w	r3, r5, r3
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049fe:	4629      	mov	r1, r5
 8004a00:	028b      	lsls	r3, r1, #10
 8004a02:	4621      	mov	r1, r4
 8004a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a08:	4621      	mov	r1, r4
 8004a0a:	028a      	lsls	r2, r1, #10
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	61fa      	str	r2, [r7, #28]
 8004a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a1c:	f7fc f846 	bl	8000aac <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	3301      	adds	r3, #1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a44:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3750      	adds	r7, #80	; 0x50
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	00f42400 	.word	0x00f42400

08004a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	2000023c 	.word	0x2000023c

08004a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	08009938 	.word	0x08009938

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa4:	f7ff ffdc 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0b5b      	lsrs	r3, r3, #13
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	08009938 	.word	0x08009938

08004ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e07b      	b.n	8004bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d108      	bne.n	8004af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aea:	d009      	beq.n	8004b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	61da      	str	r2, [r3, #28]
 8004af2:	e005      	b.n	8004b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd f9b0 	bl	8001e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b84:	ea42 0103 	orr.w	r1, r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f003 0104 	and.w	r1, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f003 0210 	and.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e03f      	b.n	8004c6c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7fd f985 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2224      	movs	r2, #36	; 0x24
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f9a6 	bl	8004f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d17c      	bne.n	8004d8e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <HAL_UART_Transmit+0x2c>
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e075      	b.n	8004d90 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Transmit+0x3e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e06e      	b.n	8004d90 <HAL_UART_Transmit+0x11c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2221      	movs	r2, #33	; 0x21
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd fa76 	bl	80021b8 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	88fa      	ldrh	r2, [r7, #6]
 8004cd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d108      	bne.n	8004cf6 <HAL_UART_Transmit+0x82>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]
 8004cf4:	e003      	b.n	8004cfe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d06:	e02a      	b.n	8004d5e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2180      	movs	r1, #128	; 0x80
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f8e2 	bl	8004edc <UART_WaitOnFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e036      	b.n	8004d90 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10b      	bne.n	8004d40 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d36:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e007      	b.n	8004d50 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1cf      	bne.n	8004d08 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2140      	movs	r1, #64	; 0x40
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f8b2 	bl	8004edc <UART_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e006      	b.n	8004d90 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d8e:	2302      	movs	r3, #2
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	f040 808c 	bne.w	8004ed2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_UART_Receive+0x2e>
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e084      	b.n	8004ed4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UART_Receive+0x40>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e07d      	b.n	8004ed4 <HAL_UART_Receive+0x13c>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2222      	movs	r2, #34	; 0x22
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df4:	f7fd f9e0 	bl	80021b8 <HAL_GetTick>
 8004df8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	88fa      	ldrh	r2, [r7, #6]
 8004e04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	d108      	bne.n	8004e22 <HAL_UART_Receive+0x8a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e003      	b.n	8004e2a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e32:	e043      	b.n	8004ebc <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f84c 	bl	8004edc <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e042      	b.n	8004ed4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10c      	bne.n	8004e6e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	3302      	adds	r3, #2
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e01f      	b.n	8004eae <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e76:	d007      	beq.n	8004e88 <HAL_UART_Receive+0xf0>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_UART_Receive+0xfe>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	e008      	b.n	8004ea8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1b6      	bne.n	8004e34 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
  }
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eec:	e02c      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d028      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8004efc:	f7fd f95c 	bl	80021b8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d21d      	bcs.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e00f      	b.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d0c3      	beq.n	8004eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b0c0      	sub	sp, #256	; 0x100
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	68d9      	ldr	r1, [r3, #12]
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	ea40 0301 	orr.w	r3, r0, r1
 8004f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fc8:	f021 010c 	bic.w	r1, r1, #12
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fea:	6999      	ldr	r1, [r3, #24]
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	ea40 0301 	orr.w	r3, r0, r1
 8004ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b8f      	ldr	r3, [pc, #572]	; (800523c <UART_SetConfig+0x2cc>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d005      	beq.n	8005010 <UART_SetConfig+0xa0>
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b8d      	ldr	r3, [pc, #564]	; (8005240 <UART_SetConfig+0x2d0>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d104      	bne.n	800501a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7ff fd46 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8005014:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005018:	e003      	b.n	8005022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7ff fd2d 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 800501e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502c:	f040 810c 	bne.w	8005248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800503a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800503e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	1891      	adds	r1, r2, r2
 8005048:	65b9      	str	r1, [r7, #88]	; 0x58
 800504a:	415b      	adcs	r3, r3
 800504c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800504e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005052:	4621      	mov	r1, r4
 8005054:	eb12 0801 	adds.w	r8, r2, r1
 8005058:	4629      	mov	r1, r5
 800505a:	eb43 0901 	adc.w	r9, r3, r1
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800506a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800506e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005072:	4690      	mov	r8, r2
 8005074:	4699      	mov	r9, r3
 8005076:	4623      	mov	r3, r4
 8005078:	eb18 0303 	adds.w	r3, r8, r3
 800507c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005080:	462b      	mov	r3, r5
 8005082:	eb49 0303 	adc.w	r3, r9, r3
 8005086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005096:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800509a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800509e:	460b      	mov	r3, r1
 80050a0:	18db      	adds	r3, r3, r3
 80050a2:	653b      	str	r3, [r7, #80]	; 0x50
 80050a4:	4613      	mov	r3, r2
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	657b      	str	r3, [r7, #84]	; 0x54
 80050ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050b4:	f7fb fcfa 	bl	8000aac <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b61      	ldr	r3, [pc, #388]	; (8005244 <UART_SetConfig+0x2d4>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	011c      	lsls	r4, r3, #4
 80050c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	64b9      	str	r1, [r7, #72]	; 0x48
 80050e0:	415b      	adcs	r3, r3
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050e8:	4641      	mov	r1, r8
 80050ea:	eb12 0a01 	adds.w	sl, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb43 0b01 	adc.w	fp, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005108:	4692      	mov	sl, r2
 800510a:	469b      	mov	fp, r3
 800510c:	4643      	mov	r3, r8
 800510e:	eb1a 0303 	adds.w	r3, sl, r3
 8005112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005116:	464b      	mov	r3, r9
 8005118:	eb4b 0303 	adc.w	r3, fp, r3
 800511c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005134:	460b      	mov	r3, r1
 8005136:	18db      	adds	r3, r3, r3
 8005138:	643b      	str	r3, [r7, #64]	; 0x40
 800513a:	4613      	mov	r3, r2
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
 8005142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800514a:	f7fb fcaf 	bl	8000aac <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4611      	mov	r1, r2
 8005154:	4b3b      	ldr	r3, [pc, #236]	; (8005244 <UART_SetConfig+0x2d4>)
 8005156:	fba3 2301 	umull	r2, r3, r3, r1
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2264      	movs	r2, #100	; 0x64
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800516a:	4b36      	ldr	r3, [pc, #216]	; (8005244 <UART_SetConfig+0x2d4>)
 800516c:	fba3 2302 	umull	r2, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005184:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	1891      	adds	r1, r2, r2
 8005192:	63b9      	str	r1, [r7, #56]	; 0x38
 8005194:	415b      	adcs	r3, r3
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800519c:	4641      	mov	r1, r8
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	6339      	str	r1, [r7, #48]	; 0x30
 80051a2:	4649      	mov	r1, r9
 80051a4:	414b      	adcs	r3, r1
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051b4:	4659      	mov	r1, fp
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4651      	mov	r1, sl
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4642      	mov	r2, r8
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051d0:	464b      	mov	r3, r9
 80051d2:	460a      	mov	r2, r1
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051f0:	460b      	mov	r3, r1
 80051f2:	18db      	adds	r3, r3, r3
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f6:	4613      	mov	r3, r2
 80051f8:	eb42 0303 	adc.w	r3, r2, r3
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005206:	f7fb fc51 	bl	8000aac <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <UART_SetConfig+0x2d4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	; 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	3332      	adds	r3, #50	; 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <UART_SetConfig+0x2d4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 0207 	and.w	r2, r3, #7
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005238:	e105      	b.n	8005446 <UART_SetConfig+0x4d6>
 800523a:	bf00      	nop
 800523c:	40011000 	.word	0x40011000
 8005240:	40011400 	.word	0x40011400
 8005244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800525a:	4642      	mov	r2, r8
 800525c:	464b      	mov	r3, r9
 800525e:	1891      	adds	r1, r2, r2
 8005260:	6239      	str	r1, [r7, #32]
 8005262:	415b      	adcs	r3, r3
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800526a:	4641      	mov	r1, r8
 800526c:	1854      	adds	r4, r2, r1
 800526e:	4649      	mov	r1, r9
 8005270:	eb43 0501 	adc.w	r5, r3, r1
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	00eb      	lsls	r3, r5, #3
 800527e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005282:	00e2      	lsls	r2, r4, #3
 8005284:	4614      	mov	r4, r2
 8005286:	461d      	mov	r5, r3
 8005288:	4643      	mov	r3, r8
 800528a:	18e3      	adds	r3, r4, r3
 800528c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005290:	464b      	mov	r3, r9
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052b6:	4629      	mov	r1, r5
 80052b8:	008b      	lsls	r3, r1, #2
 80052ba:	4621      	mov	r1, r4
 80052bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c0:	4621      	mov	r1, r4
 80052c2:	008a      	lsls	r2, r1, #2
 80052c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052c8:	f7fb fbf0 	bl	8000aac <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4b60      	ldr	r3, [pc, #384]	; (8005454 <UART_SetConfig+0x4e4>)
 80052d2:	fba3 2302 	umull	r2, r3, r3, r2
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	011c      	lsls	r4, r3, #4
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	61b9      	str	r1, [r7, #24]
 80052f4:	415b      	adcs	r3, r3
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6139      	str	r1, [r7, #16]
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005330:	464b      	mov	r3, r9
 8005332:	460a      	mov	r2, r1
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	67bb      	str	r3, [r7, #120]	; 0x78
 8005346:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005354:	4649      	mov	r1, r9
 8005356:	008b      	lsls	r3, r1, #2
 8005358:	4641      	mov	r1, r8
 800535a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535e:	4641      	mov	r1, r8
 8005360:	008a      	lsls	r2, r1, #2
 8005362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005366:	f7fb fba1 	bl	8000aac <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4b39      	ldr	r3, [pc, #228]	; (8005454 <UART_SetConfig+0x4e4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a34      	ldr	r2, [pc, #208]	; (8005454 <UART_SetConfig+0x4e4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	441c      	add	r4, r3
 8005390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005394:	2200      	movs	r2, #0
 8005396:	673b      	str	r3, [r7, #112]	; 0x70
 8005398:	677a      	str	r2, [r7, #116]	; 0x74
 800539a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800539e:	4642      	mov	r2, r8
 80053a0:	464b      	mov	r3, r9
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053ae:	4641      	mov	r1, r8
 80053b0:	1851      	adds	r1, r2, r1
 80053b2:	6039      	str	r1, [r7, #0]
 80053b4:	4649      	mov	r1, r9
 80053b6:	414b      	adcs	r3, r1
 80053b8:	607b      	str	r3, [r7, #4]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053c6:	4659      	mov	r1, fp
 80053c8:	00cb      	lsls	r3, r1, #3
 80053ca:	4651      	mov	r1, sl
 80053cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d0:	4651      	mov	r1, sl
 80053d2:	00ca      	lsls	r2, r1, #3
 80053d4:	4610      	mov	r0, r2
 80053d6:	4619      	mov	r1, r3
 80053d8:	4603      	mov	r3, r0
 80053da:	4642      	mov	r2, r8
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e0:	464b      	mov	r3, r9
 80053e2:	460a      	mov	r2, r1
 80053e4:	eb42 0303 	adc.w	r3, r2, r3
 80053e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	663b      	str	r3, [r7, #96]	; 0x60
 80053f4:	667a      	str	r2, [r7, #100]	; 0x64
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005402:	4649      	mov	r1, r9
 8005404:	008b      	lsls	r3, r1, #2
 8005406:	4641      	mov	r1, r8
 8005408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540c:	4641      	mov	r1, r8
 800540e:	008a      	lsls	r2, r1, #2
 8005410:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005414:	f7fb fb4a 	bl	8000aac <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4b0d      	ldr	r3, [pc, #52]	; (8005454 <UART_SetConfig+0x4e4>)
 800541e:	fba3 1302 	umull	r1, r3, r3, r2
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	2164      	movs	r1, #100	; 0x64
 8005426:	fb01 f303 	mul.w	r3, r1, r3
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	3332      	adds	r3, #50	; 0x32
 8005430:	4a08      	ldr	r2, [pc, #32]	; (8005454 <UART_SetConfig+0x4e4>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4422      	add	r2, r4
 8005444:	609a      	str	r2, [r3, #8]
}
 8005446:	bf00      	nop
 8005448:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800544c:	46bd      	mov	sp, r7
 800544e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005452:	bf00      	nop
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005458:	b084      	sub	sp, #16
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	f107 001c 	add.w	r0, r7, #28
 8005466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	2b01      	cmp	r3, #1
 800546e:	d122      	bne.n	80054b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 fac6 	bl	8006a3c <USB_CoreReset>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	e01a      	b.n	80054ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 faba 	bl	8006a3c <USB_CoreReset>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
 80054de:	e005      	b.n	80054ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d10b      	bne.n	800550a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f043 0206 	orr.w	r2, r3, #6
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005516:	b004      	add	sp, #16
 8005518:	4770      	bx	lr
	...

0800551c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d165      	bne.n	80055fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4a41      	ldr	r2, [pc, #260]	; (8005638 <USB_SetTurnaroundTime+0x11c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d906      	bls.n	8005546 <USB_SetTurnaroundTime+0x2a>
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a40      	ldr	r2, [pc, #256]	; (800563c <USB_SetTurnaroundTime+0x120>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d202      	bcs.n	8005546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005540:	230f      	movs	r3, #15
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e062      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4a3c      	ldr	r2, [pc, #240]	; (800563c <USB_SetTurnaroundTime+0x120>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d306      	bcc.n	800555c <USB_SetTurnaroundTime+0x40>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <USB_SetTurnaroundTime+0x124>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d202      	bcs.n	800555c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005556:	230e      	movs	r3, #14
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e057      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a38      	ldr	r2, [pc, #224]	; (8005640 <USB_SetTurnaroundTime+0x124>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d306      	bcc.n	8005572 <USB_SetTurnaroundTime+0x56>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <USB_SetTurnaroundTime+0x128>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d202      	bcs.n	8005572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800556c:	230d      	movs	r3, #13
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e04c      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4a33      	ldr	r2, [pc, #204]	; (8005644 <USB_SetTurnaroundTime+0x128>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d306      	bcc.n	8005588 <USB_SetTurnaroundTime+0x6c>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a32      	ldr	r2, [pc, #200]	; (8005648 <USB_SetTurnaroundTime+0x12c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d802      	bhi.n	8005588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005582:	230c      	movs	r3, #12
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e041      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <USB_SetTurnaroundTime+0x12c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d906      	bls.n	800559e <USB_SetTurnaroundTime+0x82>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a2e      	ldr	r2, [pc, #184]	; (800564c <USB_SetTurnaroundTime+0x130>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d802      	bhi.n	800559e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005598:	230b      	movs	r3, #11
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	e036      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4a2a      	ldr	r2, [pc, #168]	; (800564c <USB_SetTurnaroundTime+0x130>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d906      	bls.n	80055b4 <USB_SetTurnaroundTime+0x98>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a29      	ldr	r2, [pc, #164]	; (8005650 <USB_SetTurnaroundTime+0x134>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d802      	bhi.n	80055b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055ae:	230a      	movs	r3, #10
 80055b0:	617b      	str	r3, [r7, #20]
 80055b2:	e02b      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4a26      	ldr	r2, [pc, #152]	; (8005650 <USB_SetTurnaroundTime+0x134>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d906      	bls.n	80055ca <USB_SetTurnaroundTime+0xae>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a25      	ldr	r2, [pc, #148]	; (8005654 <USB_SetTurnaroundTime+0x138>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d202      	bcs.n	80055ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055c4:	2309      	movs	r3, #9
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e020      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <USB_SetTurnaroundTime+0x138>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d306      	bcc.n	80055e0 <USB_SetTurnaroundTime+0xc4>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <USB_SetTurnaroundTime+0x13c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d802      	bhi.n	80055e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055da:	2308      	movs	r3, #8
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e015      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <USB_SetTurnaroundTime+0x13c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d906      	bls.n	80055f6 <USB_SetTurnaroundTime+0xda>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	; (800565c <USB_SetTurnaroundTime+0x140>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d202      	bcs.n	80055f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055f0:	2307      	movs	r3, #7
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e00a      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055f6:	2306      	movs	r3, #6
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e007      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005602:	2309      	movs	r3, #9
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	e001      	b.n	800560c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005608:	2309      	movs	r3, #9
 800560a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	029b      	lsls	r3, r3, #10
 8005620:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	00d8acbf 	.word	0x00d8acbf
 800563c:	00e4e1c0 	.word	0x00e4e1c0
 8005640:	00f42400 	.word	0x00f42400
 8005644:	01067380 	.word	0x01067380
 8005648:	011a499f 	.word	0x011a499f
 800564c:	01312cff 	.word	0x01312cff
 8005650:	014ca43f 	.word	0x014ca43f
 8005654:	016e3600 	.word	0x016e3600
 8005658:	01a6ab1f 	.word	0x01a6ab1f
 800565c:	01e84800 	.word	0x01e84800

08005660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f043 0201 	orr.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f023 0201 	bic.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d106      	bne.n	80056d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	e00b      	b.n	80056e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	e001      	b.n	80056e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e003      	b.n	80056f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056e8:	2032      	movs	r0, #50	; 0x32
 80056ea:	f7fc fd71 	bl	80021d0 <HAL_Delay>

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e009      	b.n	800572c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3340      	adds	r3, #64	; 0x40
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	2200      	movs	r2, #0
 8005724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0e      	cmp	r3, #14
 8005730:	d9f2      	bls.n	8005718 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11c      	bne.n	8005772 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005746:	f043 0302 	orr.w	r3, r3, #2
 800574a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	639a      	str	r2, [r3, #56]	; 0x38
 8005770:	e00b      	b.n	800578a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005790:	461a      	mov	r2, r3
 8005792:	2300      	movs	r3, #0
 8005794:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579c:	4619      	mov	r1, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	461a      	mov	r2, r3
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10c      	bne.n	80057ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057b6:	2100      	movs	r1, #0
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f949 	bl	8005a50 <USB_SetDevSpeed>
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057c0:	2101      	movs	r1, #1
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f944 	bl	8005a50 <USB_SetDevSpeed>
 80057c8:	e003      	b.n	80057d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057ca:	2103      	movs	r1, #3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f93f 	bl	8005a50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057d2:	2110      	movs	r1, #16
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8f3 	bl	80059c0 <USB_FlushTxFifo>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f911 	bl	8005a0c <USB_FlushRxFifo>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	e043      	b.n	80058a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005834:	d118      	bne.n	8005868 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e013      	b.n	800587a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e008      	b.n	800587a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800589e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	3301      	adds	r3, #1
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d3b7      	bcc.n	800581e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e043      	b.n	800593c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ca:	d118      	bne.n	80058fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	461a      	mov	r2, r3
 80058e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e013      	b.n	8005910 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	461a      	mov	r2, r3
 80058f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e008      	b.n	8005910 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005934:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3301      	adds	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3b7      	bcc.n	80058b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 0210 	orr.w	r2, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <USB_DevInit+0x2c4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f043 0208 	orr.w	r2, r3, #8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d107      	bne.n	80059ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a4:	f043 0304 	orr.w	r3, r3, #4
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b8:	b004      	add	sp, #16
 80059ba:	4770      	bx	lr
 80059bc:	803c3800 	.word	0x803c3800

080059c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3301      	adds	r3, #1
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_FlushTxFifo+0x48>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d0f0      	beq.n	80059da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <USB_FlushRxFifo+0x40>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d0f0      	beq.n	8005a1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a70:	4313      	orrs	r3, r2
 8005a72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]
 8005aa6:	e00a      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d002      	beq.n	8005ab4 <USB_GetDevSpeed+0x32>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d102      	bne.n	8005aba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	75fb      	strb	r3, [r7, #23]
 8005ab8:	e001      	b.n	8005abe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aba:	230f      	movs	r3, #15
 8005abc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d13a      	bne.n	8005b5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2101      	movs	r1, #1
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d155      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	78db      	ldrb	r3, [r3, #3]
 8005b3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	059b      	lsls	r3, r3, #22
 8005b42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4313      	orrs	r3, r2
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e036      	b.n	8005bcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11a      	bne.n	8005bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d161      	bne.n	8005cbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0e:	d11f      	bne.n	8005c50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c70:	4013      	ands	r3, r2
 8005c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	2101      	movs	r1, #1
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4013      	ands	r3, r2
 8005c96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	0159      	lsls	r1, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <USB_DeactivateEndpoint+0x1b0>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	e060      	b.n	8005d7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd2:	d11f      	bne.n	8005d14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	2101      	movs	r1, #1
 8005d26:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d34:	4013      	ands	r3, r2
 8005d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	43db      	mvns	r3, r3
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d58:	4013      	ands	r3, r2
 8005d5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	0159      	lsls	r1, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	4619      	mov	r1, r3
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <USB_DeactivateEndpoint+0x1b4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	ec337800 	.word	0xec337800
 8005d90:	eff37800 	.word	0xeff37800

08005d94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	f040 815c 	bne.w	800606e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d132      	bne.n	8005e24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	0cdb      	lsrs	r3, r3, #19
 8005e1e:	04db      	lsls	r3, r3, #19
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	e074      	b.n	8005f0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	0cdb      	lsrs	r3, r3, #19
 8005e40:	04db      	lsls	r3, r3, #19
 8005e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	440b      	add	r3, r1
 8005e80:	1e59      	subs	r1, r3, #1
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e8a:	04d9      	lsls	r1, r3, #19
 8005e8c:	4b9d      	ldr	r3, [pc, #628]	; (8006104 <USB_EPStartXfer+0x370>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	0148      	lsls	r0, r1, #5
 8005e94:	69f9      	ldr	r1, [r7, #28]
 8005e96:	4401      	add	r1, r0
 8005e98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	0148      	lsls	r0, r1, #5
 8005eba:	69f9      	ldr	r1, [r7, #28]
 8005ebc:	4401      	add	r1, r0
 8005ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	78db      	ldrb	r3, [r3, #3]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d11f      	bne.n	8005f0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005eec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d14b      	bne.n	8005fac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d128      	bne.n	8005f8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d110      	bne.n	8005f6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	e00f      	b.n	8005f8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e12f      	b.n	800620c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	78db      	ldrb	r3, [r3, #3]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d015      	beq.n	8006000 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8117 	beq.w	800620c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	2101      	movs	r1, #1
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	69f9      	ldr	r1, [r7, #28]
 8005ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	634b      	str	r3, [r1, #52]	; 0x34
 8005ffe:	e105      	b.n	800620c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d110      	bne.n	8006032 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e00f      	b.n	8006052 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006050:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	68d9      	ldr	r1, [r3, #12]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	b298      	uxth	r0, r3
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4603      	mov	r3, r0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa2b 	bl	80064c2 <USB_WritePacket>
 800606c:	e0ce      	b.n	800620c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006088:	0cdb      	lsrs	r3, r3, #19
 800608a:	04db      	lsls	r3, r3, #19
 800608c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d126      	bne.n	8006108 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	0148      	lsls	r0, r1, #5
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	4401      	add	r1, r0
 80060d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060fe:	6113      	str	r3, [r2, #16]
 8006100:	e036      	b.n	8006170 <USB_EPStartXfer+0x3dc>
 8006102:	bf00      	nop
 8006104:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4413      	add	r3, r2
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	8afb      	ldrh	r3, [r7, #22]
 800612e:	04d9      	lsls	r1, r3, #19
 8006130:	4b39      	ldr	r3, [pc, #228]	; (8006218 <USB_EPStartXfer+0x484>)
 8006132:	400b      	ands	r3, r1
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	0148      	lsls	r0, r1, #5
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	4401      	add	r1, r0
 800613c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006140:	4313      	orrs	r3, r2
 8006142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	8af9      	ldrh	r1, [r7, #22]
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006160:	69b9      	ldr	r1, [r7, #24]
 8006162:	0148      	lsls	r0, r1, #5
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	4401      	add	r1, r0
 8006168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800616c:	4313      	orrs	r3, r2
 800616e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d10d      	bne.n	8006192 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	68d9      	ldr	r1, [r3, #12]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	460a      	mov	r2, r1
 8006190:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	78db      	ldrb	r3, [r3, #3]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d128      	bne.n	80061ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d110      	bne.n	80061cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00f      	b.n	80061ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800620a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	1ff80000 	.word	0x1ff80000

0800621c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b01      	cmp	r3, #1
 800623a:	f040 80cd 	bne.w	80063d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d132      	bne.n	80062ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	0cdb      	lsrs	r3, r3, #19
 80062a6:	04db      	lsls	r3, r3, #19
 80062a8:	6113      	str	r3, [r2, #16]
 80062aa:	e04e      	b.n	800634a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	0151      	lsls	r1, r2, #5
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	440a      	add	r2, r1
 80062c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c6:	0cdb      	lsrs	r3, r3, #19
 80062c8:	04db      	lsls	r3, r3, #19
 80062ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d903      	bls.n	8006304 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	0148      	lsls	r0, r1, #5
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	4401      	add	r1, r0
 8006342:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d11e      	bne.n	800638e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e092      	b.n	80064b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d07e      	beq.n	80064b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	6979      	ldr	r1, [r7, #20]
 80063ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d2:	4313      	orrs	r3, r2
 80063d4:	634b      	str	r3, [r1, #52]	; 0x34
 80063d6:	e06d      	b.n	80064b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f2:	0cdb      	lsrs	r3, r3, #19
 80063f4:	04db      	lsls	r3, r3, #19
 80063f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800641a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800644a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	0148      	lsls	r0, r1, #5
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	4401      	add	r1, r0
 800646a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800646e:	4313      	orrs	r3, r2
 8006470:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10d      	bne.n	8006494 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68d9      	ldr	r1, [r3, #12]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	460a      	mov	r2, r1
 8006492:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b089      	sub	sp, #36	; 0x24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	4611      	mov	r1, r2
 80064ce:	461a      	mov	r2, r3
 80064d0:	460b      	mov	r3, r1
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80064e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d11a      	bne.n	800651e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064e8:	88bb      	ldrh	r3, [r7, #4]
 80064ea:	3303      	adds	r3, #3
 80064ec:	089b      	lsrs	r3, r3, #2
 80064ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	e00f      	b.n	8006516 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	031a      	lsls	r2, r3, #12
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	461a      	mov	r2, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6013      	str	r3, [r2, #0]
      pSrc++;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	3304      	adds	r3, #4
 800650e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	3301      	adds	r3, #1
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d3eb      	bcc.n	80064f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3724      	adds	r7, #36	; 0x24
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	; 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	3303      	adds	r3, #3
 8006546:	089b      	lsrs	r3, r3, #2
 8006548:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e00b      	b.n	8006568 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	601a      	str	r2, [r3, #0]
    pDest++;
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	3304      	adds	r3, #4
 8006560:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	3301      	adds	r3, #1
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d3ef      	bcc.n	8006550 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006570:	69fb      	ldr	r3, [r7, #28]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3724      	adds	r7, #36	; 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d12c      	bne.n	80065f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	db12      	blt.n	80065d2 <USB_EPSetStall+0x54>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00f      	beq.n	80065d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e02b      	b.n	800664c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	db12      	blt.n	800662c <USB_EPSetStall+0xae>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00f      	beq.n	800662c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	440a      	add	r2, r1
 8006622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800662a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800664a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d128      	bne.n	80066c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006694:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	78db      	ldrb	r3, [r3, #3]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d003      	beq.n	80066a6 <USB_EPClearStall+0x4c>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	78db      	ldrb	r3, [r3, #3]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d138      	bne.n	8006718 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e027      	b.n	8006718 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	78db      	ldrb	r3, [r3, #3]
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d003      	beq.n	80066f8 <USB_EPClearStall+0x9e>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d10f      	bne.n	8006718 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006716:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006744:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006748:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800678c:	f023 0303 	bic.w	r3, r3, #3
 8006790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067a0:	f023 0302 	bic.w	r3, r3, #2
 80067a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e2:	f043 0302 	orr.w	r3, r3, #2
 80067e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b085      	sub	sp, #20
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4013      	ands	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800680e:	68fb      	ldr	r3, [r7, #12]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	0c1b      	lsrs	r3, r3, #16
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	b29b      	uxth	r3, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	4013      	ands	r3, r2
 80068b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068b2:	68bb      	ldr	r3, [r7, #8]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	f003 030f 	and.w	r3, r3, #15
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	01db      	lsls	r3, r3, #7
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4013      	ands	r3, r2
 800690c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800690e:	68bb      	ldr	r3, [r7, #8]
}
 8006910:	4618      	mov	r0, r3
 8006912:	371c      	adds	r7, #28
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	f003 0301 	and.w	r3, r3, #1
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800696a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	460b      	mov	r3, r1
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	333c      	adds	r3, #60	; 0x3c
 8006996:	3304      	adds	r3, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <USB_EP0_OutStart+0xb8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d90a      	bls.n	80069ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b4:	d101      	bne.n	80069ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e037      	b.n	8006a2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	2300      	movs	r3, #0
 80069c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e8:	f043 0318 	orr.w	r3, r3, #24
 80069ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d10f      	bne.n	8006a28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	4f54300a 	.word	0x4f54300a

08006a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <USB_CoreReset+0x64>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e01b      	b.n	8006a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	daf2      	bge.n	8006a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f043 0201 	orr.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <USB_CoreReset+0x64>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e006      	b.n	8006a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d0f0      	beq.n	8006a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	00030d40 	.word	0x00030d40

08006aa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ab0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ab4:	f002 f95c 	bl	8008d70 <USBD_static_malloc>
 8006ab8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e066      	b.n	8006b9a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7c1b      	ldrb	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d119      	bne.n	8006b10 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	2181      	movs	r1, #129	; 0x81
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 f820 	bl	8008b2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af4:	2202      	movs	r2, #2
 8006af6:	2101      	movs	r1, #1
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 f816 	bl	8008b2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2210      	movs	r2, #16
 8006b0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b0e:	e016      	b.n	8006b3e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b10:	2340      	movs	r3, #64	; 0x40
 8006b12:	2202      	movs	r2, #2
 8006b14:	2181      	movs	r1, #129	; 0x81
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f002 f807 	bl	8008b2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	2202      	movs	r2, #2
 8006b26:	2101      	movs	r1, #1
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 fffe 	bl	8008b2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2210      	movs	r2, #16
 8006b3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b3e:	2308      	movs	r3, #8
 8006b40:	2203      	movs	r2, #3
 8006b42:	2182      	movs	r1, #130	; 0x82
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fff0 	bl	8008b2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7c1b      	ldrb	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b7e:	2101      	movs	r1, #1
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f002 f8c1 	bl	8008d08 <USBD_LL_PrepareReceive>
 8006b86:	e007      	b.n	8006b98 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b8e:	2340      	movs	r3, #64	; 0x40
 8006b90:	2101      	movs	r1, #1
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 f8b8 	bl	8008d08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bae:	2181      	movs	r1, #129	; 0x81
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 ffe0 	bl	8008b76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 ffd9 	bl	8008b76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bcc:	2182      	movs	r1, #130	; 0x82
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 ffd1 	bl	8008b76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00e      	beq.n	8006c0c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f8c4 	bl	8008d8c <USBD_static_free>
    pdev->pClassData = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e0af      	b.n	8006da0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d03f      	beq.n	8006ccc <USBD_CDC_Setup+0xb4>
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	f040 809f 	bne.w	8006d90 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d02e      	beq.n	8006cb8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da16      	bge.n	8006c92 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006c70:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	88d2      	ldrh	r2, [r2, #6]
 8006c76:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88db      	ldrh	r3, [r3, #6]
 8006c7c:	2b07      	cmp	r3, #7
 8006c7e:	bf28      	it	cs
 8006c80:	2307      	movcs	r3, #7
 8006c82:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	89fa      	ldrh	r2, [r7, #14]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fb19 	bl	80082c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006c90:	e085      	b.n	8006d9e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	785a      	ldrb	r2, [r3, #1]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ca8:	6939      	ldr	r1, [r7, #16]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fb32 	bl	800831a <USBD_CtlPrepareRx>
      break;
 8006cb6:	e072      	b.n	8006d9e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	7850      	ldrb	r0, [r2, #1]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	4798      	blx	r3
      break;
 8006cca:	e068      	b.n	8006d9e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b0b      	cmp	r3, #11
 8006cd2:	d852      	bhi.n	8006d7a <USBD_CDC_Setup+0x162>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <USBD_CDC_Setup+0xc4>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d0d 	.word	0x08006d0d
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006d7b 	.word	0x08006d7b
 8006ce8:	08006d7b 	.word	0x08006d7b
 8006cec:	08006d7b 	.word	0x08006d7b
 8006cf0:	08006d7b 	.word	0x08006d7b
 8006cf4:	08006d7b 	.word	0x08006d7b
 8006cf8:	08006d7b 	.word	0x08006d7b
 8006cfc:	08006d7b 	.word	0x08006d7b
 8006d00:	08006d7b 	.word	0x08006d7b
 8006d04:	08006d37 	.word	0x08006d37
 8006d08:	08006d61 	.word	0x08006d61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d107      	bne.n	8006d28 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d18:	f107 030a 	add.w	r3, r7, #10
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 face 	bl	80082c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d26:	e032      	b.n	8006d8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fa58 	bl	80081e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d30:	2303      	movs	r3, #3
 8006d32:	75fb      	strb	r3, [r7, #23]
          break;
 8006d34:	e02b      	b.n	8006d8e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d107      	bne.n	8006d52 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d42:	f107 030d 	add.w	r3, r7, #13
 8006d46:	2201      	movs	r2, #1
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fab9 	bl	80082c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d50:	e01d      	b.n	8006d8e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fa43 	bl	80081e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5e:	e016      	b.n	8006d8e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d00f      	beq.n	8006d8c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fa36 	bl	80081e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d78:	e008      	b.n	8006d8c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fa2f 	bl	80081e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d82:	2303      	movs	r3, #3
 8006d84:	75fb      	strb	r3, [r7, #23]
          break;
 8006d86:	e002      	b.n	8006d8e <USBD_CDC_Setup+0x176>
          break;
 8006d88:	bf00      	nop
 8006d8a:	e008      	b.n	8006d9e <USBD_CDC_Setup+0x186>
          break;
 8006d8c:	bf00      	nop
      }
      break;
 8006d8e:	e006      	b.n	8006d9e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006d90:	6839      	ldr	r1, [r7, #0]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 fa24 	bl	80081e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e04f      	b.n	8006e6a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	3318      	adds	r3, #24
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d029      	beq.n	8006e3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3318      	adds	r3, #24
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	78f9      	ldrb	r1, [r7, #3]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	1a5b      	subs	r3, r3, r1
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4403      	add	r3, r0
 8006e08:	3344      	adds	r3, #68	; 0x44
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d110      	bne.n	8006e3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3318      	adds	r3, #24
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e2e:	78f9      	ldrb	r1, [r7, #3]
 8006e30:	2300      	movs	r3, #0
 8006e32:	2200      	movs	r2, #0
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 ff46 	bl	8008cc6 <USBD_LL_Transmit>
 8006e3a:	e015      	b.n	8006e68 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e015      	b.n	8006ec0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 ff56 	bl	8008d4a <USBD_LL_GetRxDataSize>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006eba:	4611      	mov	r1, r2
 8006ebc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e01b      	b.n	8006f1a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d015      	beq.n	8006f18 <USBD_CDC_EP0_RxReady+0x50>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ef2:	2bff      	cmp	r3, #255	; 0xff
 8006ef4:	d010      	beq.n	8006f18 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	22ff      	movs	r2, #255	; 0xff
 8006f14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2243      	movs	r2, #67	; 0x43
 8006f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	200002d0 	.word	0x200002d0

08006f44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2243      	movs	r2, #67	; 0x43
 8006f50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f52:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	2000028c 	.word	0x2000028c

08006f64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2243      	movs	r2, #67	; 0x43
 8006f70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f72:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	20000314 	.word	0x20000314

08006f84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000248 	.word	0x20000248

08006fa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e004      	b.n	8006fc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b087      	sub	sp, #28
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e008      	b.n	8006ffe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	e004      	b.n	8007030 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800704a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800705a:	2303      	movs	r3, #3
 800705c:	e01a      	b.n	8007094 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007064:	2b00      	cmp	r3, #0
 8007066:	d114      	bne.n	8007092 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2201      	movs	r2, #1
 800706c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007086:	2181      	movs	r1, #129	; 0x81
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fe1c 	bl	8008cc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e016      	b.n	80070e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	7c1b      	ldrb	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070cc:	2101      	movs	r1, #1
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fe1a 	bl	8008d08 <USBD_LL_PrepareReceive>
 80070d4:	e007      	b.n	80070e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070dc:	2340      	movs	r3, #64	; 0x40
 80070de:	2101      	movs	r1, #1
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fe11 	bl	8008d08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007104:	2303      	movs	r3, #3
 8007106:	e01f      	b.n	8007148 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	79fa      	ldrb	r2, [r7, #7]
 800713a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f001 fc8d 	bl	8008a5c <USBD_LL_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	e016      	b.n	8007196 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f107 020e 	add.w	r2, r7, #14
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	4602      	mov	r2, r0
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 fca4 	bl	8008af4 <USBD_LL_Start>
 80071ac:	4603      	mov	r3, r0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
  }

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 ff90 	bl	800816c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b02      	cmp	r3, #2
 800726e:	d01a      	beq.n	80072a6 <USBD_LL_SetupStage+0x72>
 8007270:	2b02      	cmp	r3, #2
 8007272:	d822      	bhi.n	80072ba <USBD_LL_SetupStage+0x86>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <USBD_LL_SetupStage+0x4a>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d00a      	beq.n	8007292 <USBD_LL_SetupStage+0x5e>
 800727c:	e01d      	b.n	80072ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa62 	bl	8007750 <USBD_StdDevReq>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
      break;
 8007290:	e020      	b.n	80072d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fac6 	bl	800782c <USBD_StdItfReq>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
      break;
 80072a4:	e016      	b.n	80072d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fb05 	bl	80078be <USBD_StdEPReq>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
      break;
 80072b8:	e00c      	b.n	80072d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fc73 	bl	8008bb4 <USBD_LL_StallEP>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
      break;
 80072d2:	bf00      	nop
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	460b      	mov	r3, r1
 80072e8:	607a      	str	r2, [r7, #4]
 80072ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d138      	bne.n	8007364 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007300:	2b03      	cmp	r3, #3
 8007302:	d14a      	bne.n	800739a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d913      	bls.n	8007338 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	1ad2      	subs	r2, r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	4293      	cmp	r3, r2
 8007328:	bf28      	it	cs
 800732a:	4613      	movcs	r3, r2
 800732c:	461a      	mov	r2, r3
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f001 f80f 	bl	8008354 <USBD_CtlContinueRx>
 8007336:	e030      	b.n	800739a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b03      	cmp	r3, #3
 8007342:	d10b      	bne.n	800735c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d005      	beq.n	800735c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f001 f80a 	bl	8008376 <USBD_CtlSendStatus>
 8007362:	e01a      	b.n	800739a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d114      	bne.n	800739a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	7afa      	ldrb	r2, [r7, #11]
 8007386:	4611      	mov	r1, r2
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	4798      	blx	r3
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d001      	beq.n	800739a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	e000      	b.n	800739c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	460b      	mov	r3, r1
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d16b      	bne.n	8007490 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3314      	adds	r3, #20
 80073bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d156      	bne.n	8007476 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d914      	bls.n	80073fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	1ad2      	subs	r2, r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 ff84 	bl	80082f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f0:	2300      	movs	r3, #0
 80073f2:	2200      	movs	r2, #0
 80073f4:	2100      	movs	r1, #0
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f001 fc86 	bl	8008d08 <USBD_LL_PrepareReceive>
 80073fc:	e03b      	b.n	8007476 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	429a      	cmp	r2, r3
 8007408:	d11c      	bne.n	8007444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007412:	429a      	cmp	r2, r3
 8007414:	d316      	bcc.n	8007444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007420:	429a      	cmp	r2, r3
 8007422:	d20f      	bcs.n	8007444 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007424:	2200      	movs	r2, #0
 8007426:	2100      	movs	r1, #0
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 ff65 	bl	80082f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007436:	2300      	movs	r3, #0
 8007438:	2200      	movs	r2, #0
 800743a:	2100      	movs	r1, #0
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f001 fc63 	bl	8008d08 <USBD_LL_PrepareReceive>
 8007442:	e018      	b.n	8007476 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b03      	cmp	r3, #3
 800744e:	d10b      	bne.n	8007468 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007468:	2180      	movs	r1, #128	; 0x80
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f001 fba2 	bl	8008bb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 ff93 	bl	800839c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d122      	bne.n	80074c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fe98 	bl	80071b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800748e:	e01a      	b.n	80074c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b03      	cmp	r3, #3
 800749a:	d114      	bne.n	80074c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00e      	beq.n	80074c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	7afa      	ldrb	r2, [r7, #11]
 80074b2:	4611      	mov	r1, r2
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	e000      	b.n	80074c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007500:	2303      	movs	r3, #3
 8007502:	e02f      	b.n	8007564 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6852      	ldr	r2, [r2, #4]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	4611      	mov	r1, r2
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752e:	2340      	movs	r3, #64	; 0x40
 8007530:	2200      	movs	r2, #0
 8007532:	2100      	movs	r1, #0
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 faf8 	bl	8008b2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2240      	movs	r2, #64	; 0x40
 8007546:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	2200      	movs	r2, #0
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 faea 	bl	8008b2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759a:	b2da      	uxtb	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2204      	movs	r2, #4
 80075a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d106      	bne.n	80075da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e012      	b.n	8007624 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b03      	cmp	r3, #3
 8007608:	d10b      	bne.n	8007622 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007642:	2303      	movs	r3, #3
 8007644:	e014      	b.n	8007670 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b03      	cmp	r3, #3
 8007650:	d10d      	bne.n	800766e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	78fa      	ldrb	r2, [r7, #3]
 8007668:	4611      	mov	r1, r2
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	e014      	b.n	80076bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d10d      	bne.n	80076ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	4611      	mov	r1, r2
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6852      	ldr	r2, [r2, #4]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	4611      	mov	r1, r2
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
  }

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007712:	b480      	push	{r7}
 8007714:	b087      	sub	sp, #28
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	3301      	adds	r3, #1
 8007728:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007730:	8a3b      	ldrh	r3, [r7, #16]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	b21a      	sxth	r2, r3
 8007736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800773a:	4313      	orrs	r3, r2
 800773c:	b21b      	sxth	r3, r3
 800773e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007740:	89fb      	ldrh	r3, [r7, #14]
}
 8007742:	4618      	mov	r0, r3
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d005      	beq.n	8007776 <USBD_StdDevReq+0x26>
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d853      	bhi.n	8007816 <USBD_StdDevReq+0xc6>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <USBD_StdDevReq+0x3a>
 8007772:	2b20      	cmp	r3, #32
 8007774:	d14f      	bne.n	8007816 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]
      break;
 8007788:	e04a      	b.n	8007820 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b09      	cmp	r3, #9
 8007790:	d83b      	bhi.n	800780a <USBD_StdDevReq+0xba>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_StdDevReq+0x48>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007801 	.word	0x08007801
 80077a0:	0800780b 	.word	0x0800780b
 80077a4:	080077f7 	.word	0x080077f7
 80077a8:	0800780b 	.word	0x0800780b
 80077ac:	080077cb 	.word	0x080077cb
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	0800780b 	.word	0x0800780b
 80077b8:	080077e3 	.word	0x080077e3
 80077bc:	080077d5 	.word	0x080077d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9de 	bl	8007b84 <USBD_GetDescriptor>
          break;
 80077c8:	e024      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fb43 	bl	8007e58 <USBD_SetAddress>
          break;
 80077d2:	e01f      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fb82 	bl	8007ee0 <USBD_SetConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
          break;
 80077e0:	e018      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc21 	bl	800802c <USBD_GetConfig>
          break;
 80077ea:	e013      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fc52 	bl	8008098 <USBD_GetStatus>
          break;
 80077f4:	e00e      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fc81 	bl	8008100 <USBD_SetFeature>
          break;
 80077fe:	e009      	b.n	8007814 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fc90 	bl	8008128 <USBD_ClrFeature>
          break;
 8007808:	e004      	b.n	8007814 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fce7 	bl	80081e0 <USBD_CtlError>
          break;
 8007812:	bf00      	nop
      }
      break;
 8007814:	e004      	b.n	8007820 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fce1 	bl	80081e0 <USBD_CtlError>
      break;
 800781e:	bf00      	nop
  }

  return ret;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop

0800782c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d005      	beq.n	8007852 <USBD_StdItfReq+0x26>
 8007846:	2b40      	cmp	r3, #64	; 0x40
 8007848:	d82f      	bhi.n	80078aa <USBD_StdItfReq+0x7e>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <USBD_StdItfReq+0x26>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d12b      	bne.n	80078aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	2b02      	cmp	r3, #2
 800785e:	d81d      	bhi.n	800789c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	889b      	ldrh	r3, [r3, #4]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d813      	bhi.n	8007892 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
 8007878:	4603      	mov	r3, r0
 800787a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	88db      	ldrh	r3, [r3, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d110      	bne.n	80078a6 <USBD_StdItfReq+0x7a>
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fd73 	bl	8008376 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007890:	e009      	b.n	80078a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fca3 	bl	80081e0 <USBD_CtlError>
          break;
 800789a:	e004      	b.n	80078a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc9e 	bl	80081e0 <USBD_CtlError>
          break;
 80078a4:	e000      	b.n	80078a8 <USBD_StdItfReq+0x7c>
          break;
 80078a6:	bf00      	nop
      }
      break;
 80078a8:	e004      	b.n	80078b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fc97 	bl	80081e0 <USBD_CtlError>
      break;
 80078b2:	bf00      	nop
  }

  return ret;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	889b      	ldrh	r3, [r3, #4]
 80078d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d007      	beq.n	80078ee <USBD_StdEPReq+0x30>
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	f200 8145 	bhi.w	8007b6e <USBD_StdEPReq+0x2b0>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00c      	beq.n	8007902 <USBD_StdEPReq+0x44>
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	f040 8140 	bne.w	8007b6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007900:	e13a      	b.n	8007b78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d007      	beq.n	800791a <USBD_StdEPReq+0x5c>
 800790a:	2b03      	cmp	r3, #3
 800790c:	f300 8129 	bgt.w	8007b62 <USBD_StdEPReq+0x2a4>
 8007910:	2b00      	cmp	r3, #0
 8007912:	d07f      	beq.n	8007a14 <USBD_StdEPReq+0x156>
 8007914:	2b01      	cmp	r3, #1
 8007916:	d03c      	beq.n	8007992 <USBD_StdEPReq+0xd4>
 8007918:	e123      	b.n	8007b62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d002      	beq.n	800792c <USBD_StdEPReq+0x6e>
 8007926:	2b03      	cmp	r3, #3
 8007928:	d016      	beq.n	8007958 <USBD_StdEPReq+0x9a>
 800792a:	e02c      	b.n	8007986 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00d      	beq.n	800794e <USBD_StdEPReq+0x90>
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d00a      	beq.n	800794e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 f939 	bl	8008bb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007942:	2180      	movs	r1, #128	; 0x80
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 f935 	bl	8008bb4 <USBD_LL_StallEP>
 800794a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800794c:	e020      	b.n	8007990 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc45 	bl	80081e0 <USBD_CtlError>
              break;
 8007956:	e01b      	b.n	8007990 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	885b      	ldrh	r3, [r3, #2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10e      	bne.n	800797e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00b      	beq.n	800797e <USBD_StdEPReq+0xc0>
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d008      	beq.n	800797e <USBD_StdEPReq+0xc0>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f91b 	bl	8008bb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcf9 	bl	8008376 <USBD_CtlSendStatus>

              break;
 8007984:	e004      	b.n	8007990 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc29 	bl	80081e0 <USBD_CtlError>
              break;
 800798e:	bf00      	nop
          }
          break;
 8007990:	e0ec      	b.n	8007b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d002      	beq.n	80079a4 <USBD_StdEPReq+0xe6>
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d016      	beq.n	80079d0 <USBD_StdEPReq+0x112>
 80079a2:	e030      	b.n	8007a06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00d      	beq.n	80079c6 <USBD_StdEPReq+0x108>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d00a      	beq.n	80079c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f8fd 	bl	8008bb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f8f9 	bl	8008bb4 <USBD_LL_StallEP>
 80079c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c4:	e025      	b.n	8007a12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fc09 	bl	80081e0 <USBD_CtlError>
              break;
 80079ce:	e020      	b.n	8007a12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11b      	bne.n	8007a10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 f903 	bl	8008bf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fcc2 	bl	8008376 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fbe9 	bl	80081e0 <USBD_CtlError>
              break;
 8007a0e:	e000      	b.n	8007a12 <USBD_StdEPReq+0x154>
              break;
 8007a10:	bf00      	nop
          }
          break;
 8007a12:	e0ab      	b.n	8007b6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d002      	beq.n	8007a26 <USBD_StdEPReq+0x168>
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d032      	beq.n	8007a8a <USBD_StdEPReq+0x1cc>
 8007a24:	e097      	b.n	8007b56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d007      	beq.n	8007a3c <USBD_StdEPReq+0x17e>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d004      	beq.n	8007a3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fbd3 	bl	80081e0 <USBD_CtlError>
                break;
 8007a3a:	e091      	b.n	8007b60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	da0b      	bge.n	8007a5c <USBD_StdEPReq+0x19e>
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	3310      	adds	r3, #16
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	3304      	adds	r3, #4
 8007a5a:	e00b      	b.n	8007a74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	3304      	adds	r3, #4
 8007a74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc1d 	bl	80082c2 <USBD_CtlSendData>
              break;
 8007a88:	e06a      	b.n	8007b60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da11      	bge.n	8007ab6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d117      	bne.n	8007adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fb96 	bl	80081e0 <USBD_CtlError>
                  break;
 8007ab4:	e054      	b.n	8007b60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	f003 020f 	and.w	r2, r3, #15
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb83 	bl	80081e0 <USBD_CtlError>
                  break;
 8007ada:	e041      	b.n	8007b60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da0b      	bge.n	8007afc <USBD_StdEPReq+0x23e>
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	3310      	adds	r3, #16
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	3304      	adds	r3, #4
 8007afa:	e00b      	b.n	8007b14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	3304      	adds	r3, #4
 8007b14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <USBD_StdEPReq+0x264>
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b80      	cmp	r3, #128	; 0x80
 8007b20:	d103      	bne.n	8007b2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e00e      	b.n	8007b48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 f87e 	bl	8008c30 <USBD_LL_IsStallEP>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e002      	b.n	8007b48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fbb7 	bl	80082c2 <USBD_CtlSendData>
              break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb41 	bl	80081e0 <USBD_CtlError>
              break;
 8007b5e:	bf00      	nop
          }
          break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb3b 	bl	80081e0 <USBD_CtlError>
          break;
 8007b6a:	bf00      	nop
      }
      break;
 8007b6c:	e004      	b.n	8007b78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb35 	bl	80081e0 <USBD_CtlError>
      break;
 8007b76:	bf00      	nop
  }

  return ret;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	885b      	ldrh	r3, [r3, #2]
 8007b9e:	0a1b      	lsrs	r3, r3, #8
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	2b06      	cmp	r3, #6
 8007ba6:	f200 8128 	bhi.w	8007dfa <USBD_GetDescriptor+0x276>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <USBD_GetDescriptor+0x2c>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bcd 	.word	0x08007bcd
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007c25 	.word	0x08007c25
 8007bbc:	08007dfb 	.word	0x08007dfb
 8007bc0:	08007dfb 	.word	0x08007dfb
 8007bc4:	08007d9b 	.word	0x08007d9b
 8007bc8:	08007dc7 	.word	0x08007dc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	7c12      	ldrb	r2, [r2, #16]
 8007bd8:	f107 0108 	add.w	r1, r7, #8
 8007bdc:	4610      	mov	r0, r2
 8007bde:	4798      	blx	r3
 8007be0:	60f8      	str	r0, [r7, #12]
      break;
 8007be2:	e112      	b.n	8007e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7c1b      	ldrb	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10d      	bne.n	8007c08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	f107 0208 	add.w	r2, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	2202      	movs	r2, #2
 8007c04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c06:	e100      	b.n	8007e0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f107 0208 	add.w	r2, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	2202      	movs	r2, #2
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e0f2      	b.n	8007e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	885b      	ldrh	r3, [r3, #2]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	f200 80ac 	bhi.w	8007d88 <USBD_GetDescriptor+0x204>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_GetDescriptor+0xb4>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c51 	.word	0x08007c51
 8007c3c:	08007c85 	.word	0x08007c85
 8007c40:	08007cb9 	.word	0x08007cb9
 8007c44:	08007ced 	.word	0x08007ced
 8007c48:	08007d21 	.word	0x08007d21
 8007c4c:	08007d55 	.word	0x08007d55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e091      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fab2 	bl	80081e0 <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e089      	b.n	8007d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e077      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa98 	bl	80081e0 <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e06f      	b.n	8007d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cda:	e05d      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa7e 	bl	80081e0 <USBD_CtlError>
            err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cea:	e055      	b.n	8007d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0e:	e043      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa64 	bl	80081e0 <USBD_CtlError>
            err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1e:	e03b      	b.n	8007d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d42:	e029      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa4a 	bl	80081e0 <USBD_CtlError>
            err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
          break;
 8007d52:	e021      	b.n	8007d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	f107 0108 	add.w	r1, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d76:	e00f      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa30 	bl	80081e0 <USBD_CtlError>
            err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
          break;
 8007d86:	e007      	b.n	8007d98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa28 	bl	80081e0 <USBD_CtlError>
          err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d96:	bf00      	nop
      }
      break;
 8007d98:	e037      	b.n	8007e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7c1b      	ldrb	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	f107 0208 	add.w	r2, r7, #8
 8007dae:	4610      	mov	r0, r2
 8007db0:	4798      	blx	r3
 8007db2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db4:	e029      	b.n	8007e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fa11 	bl	80081e0 <USBD_CtlError>
        err++;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc4:	e021      	b.n	8007e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7c1b      	ldrb	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10d      	bne.n	8007dea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	f107 0208 	add.w	r2, r7, #8
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4798      	blx	r3
 8007dde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3301      	adds	r3, #1
 8007de4:	2207      	movs	r2, #7
 8007de6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de8:	e00f      	b.n	8007e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f9f7 	bl	80081e0 <USBD_CtlError>
        err++;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	3301      	adds	r3, #1
 8007df6:	72fb      	strb	r3, [r7, #11]
      break;
 8007df8:	e007      	b.n	8007e0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9ef 	bl	80081e0 <USBD_CtlError>
      err++;
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	3301      	adds	r3, #1
 8007e06:	72fb      	strb	r3, [r7, #11]
      break;
 8007e08:	bf00      	nop
  }

  if (err != 0U)
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d11e      	bne.n	8007e4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	88db      	ldrh	r3, [r3, #6]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d016      	beq.n	8007e46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e18:	893b      	ldrh	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88da      	ldrh	r2, [r3, #6]
 8007e22:	893b      	ldrh	r3, [r7, #8]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bf28      	it	cs
 8007e28:	4613      	movcs	r3, r2
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e2e:	893b      	ldrh	r3, [r7, #8]
 8007e30:	461a      	mov	r2, r3
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa44 	bl	80082c2 <USBD_CtlSendData>
 8007e3a:	e009      	b.n	8007e50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9ce 	bl	80081e0 <USBD_CtlError>
 8007e44:	e004      	b.n	8007e50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa95 	bl	8008376 <USBD_CtlSendStatus>
 8007e4c:	e000      	b.n	8007e50 <USBD_GetDescriptor+0x2cc>
    return;
 8007e4e:	bf00      	nop
  }
}
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	889b      	ldrh	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d131      	bne.n	8007ece <USBD_SetAddress+0x76>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88db      	ldrh	r3, [r3, #6]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d12d      	bne.n	8007ece <USBD_SetAddress+0x76>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	2b7f      	cmp	r3, #127	; 0x7f
 8007e78:	d829      	bhi.n	8007ece <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	885b      	ldrh	r3, [r3, #2]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d104      	bne.n	8007e9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9a3 	bl	80081e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9a:	e01d      	b.n	8007ed8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7bfa      	ldrb	r2, [r7, #15]
 8007ea0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 feed 	bl	8008c88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa61 	bl	8008376 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	e009      	b.n	8007ed8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ecc:	e004      	b.n	8007ed8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f985 	bl	80081e0 <USBD_CtlError>
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	4b4c      	ldr	r3, [pc, #304]	; (8008028 <USBD_SetConfig+0x148>)
 8007ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	; (8008028 <USBD_SetConfig+0x148>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d905      	bls.n	8007f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f96c 	bl	80081e0 <USBD_CtlError>
    return USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e088      	b.n	800801e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d002      	beq.n	8007f1e <USBD_SetConfig+0x3e>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d025      	beq.n	8007f68 <USBD_SetConfig+0x88>
 8007f1c:	e071      	b.n	8008002 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f1e:	4b42      	ldr	r3, [pc, #264]	; (8008028 <USBD_SetConfig+0x148>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01c      	beq.n	8007f60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007f26:	4b40      	ldr	r3, [pc, #256]	; (8008028 <USBD_SetConfig+0x148>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f30:	4b3d      	ldr	r3, [pc, #244]	; (8008028 <USBD_SetConfig+0x148>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff f948 	bl	80071cc <USBD_SetClassConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f949 	bl	80081e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f4e:	e065      	b.n	800801c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fa10 	bl	8008376 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2203      	movs	r2, #3
 8007f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f5e:	e05d      	b.n	800801c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fa08 	bl	8008376 <USBD_CtlSendStatus>
      break;
 8007f66:	e059      	b.n	800801c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f68:	4b2f      	ldr	r3, [pc, #188]	; (8008028 <USBD_SetConfig+0x148>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d112      	bne.n	8007f96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <USBD_SetConfig+0x148>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f82:	4b29      	ldr	r3, [pc, #164]	; (8008028 <USBD_SetConfig+0x148>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff f93b 	bl	8007204 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9f1 	bl	8008376 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f94:	e042      	b.n	800801c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f96:	4b24      	ldr	r3, [pc, #144]	; (8008028 <USBD_SetConfig+0x148>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d02a      	beq.n	8007ffa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff f929 	bl	8007204 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fb2:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <USBD_SetConfig+0x148>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <USBD_SetConfig+0x148>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff f902 	bl	80071cc <USBD_SetClassConfig>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00f      	beq.n	8007ff2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f903 	bl	80081e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff f90e 	bl	8007204 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ff0:	e014      	b.n	800801c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f9bf 	bl	8008376 <USBD_CtlSendStatus>
      break;
 8007ff8:	e010      	b.n	800801c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f9bb 	bl	8008376 <USBD_CtlSendStatus>
      break;
 8008000:	e00c      	b.n	800801c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8eb 	bl	80081e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800800a:	4b07      	ldr	r3, [pc, #28]	; (8008028 <USBD_SetConfig+0x148>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff f8f7 	bl	8007204 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	73fb      	strb	r3, [r7, #15]
      break;
 800801a:	bf00      	nop
  }

  return ret;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	200005a4 	.word	0x200005a4

0800802c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	88db      	ldrh	r3, [r3, #6]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d004      	beq.n	8008048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8cd 	bl	80081e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008046:	e023      	b.n	8008090 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	dc02      	bgt.n	800805a <USBD_GetConfig+0x2e>
 8008054:	2b00      	cmp	r3, #0
 8008056:	dc03      	bgt.n	8008060 <USBD_GetConfig+0x34>
 8008058:	e015      	b.n	8008086 <USBD_GetConfig+0x5a>
 800805a:	2b03      	cmp	r3, #3
 800805c:	d00b      	beq.n	8008076 <USBD_GetConfig+0x4a>
 800805e:	e012      	b.n	8008086 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3308      	adds	r3, #8
 800806a:	2201      	movs	r2, #1
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f927 	bl	80082c2 <USBD_CtlSendData>
        break;
 8008074:	e00c      	b.n	8008090 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3304      	adds	r3, #4
 800807a:	2201      	movs	r2, #1
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f91f 	bl	80082c2 <USBD_CtlSendData>
        break;
 8008084:	e004      	b.n	8008090 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f8a9 	bl	80081e0 <USBD_CtlError>
        break;
 800808e:	bf00      	nop
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d81e      	bhi.n	80080ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	88db      	ldrh	r3, [r3, #6]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d004      	beq.n	80080c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f890 	bl	80081e0 <USBD_CtlError>
        break;
 80080c0:	e01a      	b.n	80080f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f043 0202 	orr.w	r2, r3, #2
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	330c      	adds	r3, #12
 80080e2:	2202      	movs	r2, #2
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f8eb 	bl	80082c2 <USBD_CtlSendData>
      break;
 80080ec:	e004      	b.n	80080f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f875 	bl	80081e0 <USBD_CtlError>
      break;
 80080f6:	bf00      	nop
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	885b      	ldrh	r3, [r3, #2]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d106      	bne.n	8008120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f92b 	bl	8008376 <USBD_CtlSendStatus>
  }
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	3b01      	subs	r3, #1
 800813c:	2b02      	cmp	r3, #2
 800813e:	d80b      	bhi.n	8008158 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d10c      	bne.n	8008162 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f910 	bl	8008376 <USBD_CtlSendStatus>
      }
      break;
 8008156:	e004      	b.n	8008162 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f840 	bl	80081e0 <USBD_CtlError>
      break;
 8008160:	e000      	b.n	8008164 <USBD_ClrFeature+0x3c>
      break;
 8008162:	bf00      	nop
  }
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	781a      	ldrb	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fabb 	bl	8007712 <SWAPBYTE>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff faae 	bl	8007712 <SWAPBYTE>
 80081b6:	4603      	mov	r3, r0
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3301      	adds	r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff faa1 	bl	8007712 <SWAPBYTE>
 80081d0:	4603      	mov	r3, r0
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	80da      	strh	r2, [r3, #6]
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081ea:	2180      	movs	r1, #128	; 0x80
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fce1 	bl	8008bb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081f2:	2100      	movs	r1, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fcdd 	bl	8008bb4 <USBD_LL_StallEP>
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d036      	beq.n	8008286 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800821c:	6938      	ldr	r0, [r7, #16]
 800821e:	f000 f836 	bl	800828e <USBD_GetLen>
 8008222:	4603      	mov	r3, r0
 8008224:	3301      	adds	r3, #1
 8008226:	b29b      	uxth	r3, r3
 8008228:	005b      	lsls	r3, r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	4413      	add	r3, r2
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	701a      	strb	r2, [r3, #0]
  idx++;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	3301      	adds	r3, #1
 8008240:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4413      	add	r3, r2
 8008248:	2203      	movs	r2, #3
 800824a:	701a      	strb	r2, [r3, #0]
  idx++;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	3301      	adds	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008252:	e013      	b.n	800827c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	3301      	adds	r3, #1
 8008264:	613b      	str	r3, [r7, #16]
    idx++;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	3301      	adds	r3, #1
 800826a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	4413      	add	r3, r2
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
    idx++;
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	3301      	adds	r3, #1
 800827a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e7      	bne.n	8008254 <USBD_GetString+0x52>
 8008284:	e000      	b.n	8008288 <USBD_GetString+0x86>
    return;
 8008286:	bf00      	nop
  }
}
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800828e:	b480      	push	{r7}
 8008290:	b085      	sub	sp, #20
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800829e:	e005      	b.n	80082ac <USBD_GetLen+0x1e>
  {
    len++;
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	3301      	adds	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	3301      	adds	r3, #1
 80082aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f5      	bne.n	80082a0 <USBD_GetLen+0x12>
  }

  return len;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	60f8      	str	r0, [r7, #12]
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2202      	movs	r2, #2
 80082d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	2100      	movs	r1, #0
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 fcec 	bl	8008cc6 <USBD_LL_Transmit>

  return USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	2100      	movs	r1, #0
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fcdb 	bl	8008cc6 <USBD_LL_Transmit>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2203      	movs	r2, #3
 800832a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	2100      	movs	r1, #0
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f000 fcdf 	bl	8008d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	2100      	movs	r1, #0
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 fcce 	bl	8008d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2204      	movs	r2, #4
 8008382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008386:	2300      	movs	r3, #0
 8008388:	2200      	movs	r2, #0
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fc9a 	bl	8008cc6 <USBD_LL_Transmit>

  return USBD_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2205      	movs	r2, #5
 80083a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ac:	2300      	movs	r3, #0
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fca8 	bl	8008d08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083c8:	2200      	movs	r2, #0
 80083ca:	4912      	ldr	r1, [pc, #72]	; (8008414 <MX_USB_DEVICE_Init+0x50>)
 80083cc:	4812      	ldr	r0, [pc, #72]	; (8008418 <MX_USB_DEVICE_Init+0x54>)
 80083ce:	f7fe fe8f 	bl	80070f0 <USBD_Init>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083d8:	f7f9 fb0e 	bl	80019f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083dc:	490f      	ldr	r1, [pc, #60]	; (800841c <MX_USB_DEVICE_Init+0x58>)
 80083de:	480e      	ldr	r0, [pc, #56]	; (8008418 <MX_USB_DEVICE_Init+0x54>)
 80083e0:	f7fe feb6 	bl	8007150 <USBD_RegisterClass>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083ea:	f7f9 fb05 	bl	80019f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083ee:	490c      	ldr	r1, [pc, #48]	; (8008420 <MX_USB_DEVICE_Init+0x5c>)
 80083f0:	4809      	ldr	r0, [pc, #36]	; (8008418 <MX_USB_DEVICE_Init+0x54>)
 80083f2:	f7fe fdd7 	bl	8006fa4 <USBD_CDC_RegisterInterface>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083fc:	f7f9 fafc 	bl	80019f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008400:	4805      	ldr	r0, [pc, #20]	; (8008418 <MX_USB_DEVICE_Init+0x54>)
 8008402:	f7fe fecc 	bl	800719e <USBD_Start>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d001      	beq.n	8008410 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800840c:	f7f9 faf4 	bl	80019f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008410:	bf00      	nop
 8008412:	bd80      	pop	{r7, pc}
 8008414:	2000036c 	.word	0x2000036c
 8008418:	200005a8 	.word	0x200005a8
 800841c:	20000254 	.word	0x20000254
 8008420:	20000358 	.word	0x20000358

08008424 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008428:	2200      	movs	r2, #0
 800842a:	4905      	ldr	r1, [pc, #20]	; (8008440 <CDC_Init_FS+0x1c>)
 800842c:	4805      	ldr	r0, [pc, #20]	; (8008444 <CDC_Init_FS+0x20>)
 800842e:	f7fe fdce 	bl	8006fce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008432:	4905      	ldr	r1, [pc, #20]	; (8008448 <CDC_Init_FS+0x24>)
 8008434:	4803      	ldr	r0, [pc, #12]	; (8008444 <CDC_Init_FS+0x20>)
 8008436:	f7fe fde8 	bl	800700a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800843a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800843c:	4618      	mov	r0, r3
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20001078 	.word	0x20001078
 8008444:	200005a8 	.word	0x200005a8
 8008448:	20000878 	.word	0x20000878

0800844c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008450:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008452:	4618      	mov	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
 8008468:	4613      	mov	r3, r2
 800846a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b23      	cmp	r3, #35	; 0x23
 8008470:	d84a      	bhi.n	8008508 <CDC_Control_FS+0xac>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <CDC_Control_FS+0x1c>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008509 	.word	0x08008509
 800847c:	08008509 	.word	0x08008509
 8008480:	08008509 	.word	0x08008509
 8008484:	08008509 	.word	0x08008509
 8008488:	08008509 	.word	0x08008509
 800848c:	08008509 	.word	0x08008509
 8008490:	08008509 	.word	0x08008509
 8008494:	08008509 	.word	0x08008509
 8008498:	08008509 	.word	0x08008509
 800849c:	08008509 	.word	0x08008509
 80084a0:	08008509 	.word	0x08008509
 80084a4:	08008509 	.word	0x08008509
 80084a8:	08008509 	.word	0x08008509
 80084ac:	08008509 	.word	0x08008509
 80084b0:	08008509 	.word	0x08008509
 80084b4:	08008509 	.word	0x08008509
 80084b8:	08008509 	.word	0x08008509
 80084bc:	08008509 	.word	0x08008509
 80084c0:	08008509 	.word	0x08008509
 80084c4:	08008509 	.word	0x08008509
 80084c8:	08008509 	.word	0x08008509
 80084cc:	08008509 	.word	0x08008509
 80084d0:	08008509 	.word	0x08008509
 80084d4:	08008509 	.word	0x08008509
 80084d8:	08008509 	.word	0x08008509
 80084dc:	08008509 	.word	0x08008509
 80084e0:	08008509 	.word	0x08008509
 80084e4:	08008509 	.word	0x08008509
 80084e8:	08008509 	.word	0x08008509
 80084ec:	08008509 	.word	0x08008509
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008509 	.word	0x08008509
 80084f8:	08008509 	.word	0x08008509
 80084fc:	08008509 	.word	0x08008509
 8008500:	08008509 	.word	0x08008509
 8008504:	08008509 	.word	0x08008509
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008508:	bf00      	nop
  }

  return (USBD_OK);
 800850a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	4805      	ldr	r0, [pc, #20]	; (800853c <CDC_Receive_FS+0x24>)
 8008526:	f7fe fd70 	bl	800700a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800852a:	4804      	ldr	r0, [pc, #16]	; (800853c <CDC_Receive_FS+0x24>)
 800852c:	f7fe fdb6 	bl	800709c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008530:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	200005a8 	.word	0x200005a8

08008540 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <CDC_Transmit_FS+0x48>)
 8008552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008556:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008562:	2301      	movs	r3, #1
 8008564:	e00b      	b.n	800857e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008566:	887b      	ldrh	r3, [r7, #2]
 8008568:	461a      	mov	r2, r3
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	4806      	ldr	r0, [pc, #24]	; (8008588 <CDC_Transmit_FS+0x48>)
 800856e:	f7fe fd2e 	bl	8006fce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008572:	4805      	ldr	r0, [pc, #20]	; (8008588 <CDC_Transmit_FS+0x48>)
 8008574:	f7fe fd62 	bl	800703c <USBD_CDC_TransmitPacket>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	200005a8 	.word	0x200005a8

0800858c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800859e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2212      	movs	r2, #18
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000388 	.word	0x20000388

080085d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	6039      	str	r1, [r7, #0]
 80085de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2204      	movs	r2, #4
 80085e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	2000039c 	.word	0x2000039c

080085f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4907      	ldr	r1, [pc, #28]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800860e:	4808      	ldr	r0, [pc, #32]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 8008610:	f7ff fdf7 	bl	8008202 <USBD_GetString>
 8008614:	e004      	b.n	8008620 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	4904      	ldr	r1, [pc, #16]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
 800861a:	4805      	ldr	r0, [pc, #20]	; (8008630 <USBD_FS_ProductStrDescriptor+0x38>)
 800861c:	f7ff fdf1 	bl	8008202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008620:	4b02      	ldr	r3, [pc, #8]	; (800862c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20001878 	.word	0x20001878
 8008630:	080098e0 	.word	0x080098e0

08008634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008644:	4804      	ldr	r0, [pc, #16]	; (8008658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008646:	f7ff fddc 	bl	8008202 <USBD_GetString>
  return USBD_StrDesc;
 800864a:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	20001878 	.word	0x20001878
 8008658:	080098f8 	.word	0x080098f8

0800865c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	221a      	movs	r2, #26
 800866c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800866e:	f000 f843 	bl	80086f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008672:	4b02      	ldr	r3, [pc, #8]	; (800867c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200003a0 	.word	0x200003a0

08008680 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	6039      	str	r1, [r7, #0]
 800868a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	4907      	ldr	r1, [pc, #28]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008696:	4808      	ldr	r0, [pc, #32]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008698:	f7ff fdb3 	bl	8008202 <USBD_GetString>
 800869c:	e004      	b.n	80086a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086a4:	f7ff fdad 	bl	8008202 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20001878 	.word	0x20001878
 80086b8:	0800990c 	.word	0x0800990c

080086bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4907      	ldr	r1, [pc, #28]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086d2:	4808      	ldr	r0, [pc, #32]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086d4:	f7ff fd95 	bl	8008202 <USBD_GetString>
 80086d8:	e004      	b.n	80086e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4904      	ldr	r1, [pc, #16]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086e0:	f7ff fd8f 	bl	8008202 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086e4:	4b02      	ldr	r3, [pc, #8]	; (80086f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001878 	.word	0x20001878
 80086f4:	08009918 	.word	0x08009918

080086f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <Get_SerialNum+0x44>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008704:	4b0e      	ldr	r3, [pc, #56]	; (8008740 <Get_SerialNum+0x48>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <Get_SerialNum+0x4c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800871e:	2208      	movs	r2, #8
 8008720:	4909      	ldr	r1, [pc, #36]	; (8008748 <Get_SerialNum+0x50>)
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 f814 	bl	8008750 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008728:	2204      	movs	r2, #4
 800872a:	4908      	ldr	r1, [pc, #32]	; (800874c <Get_SerialNum+0x54>)
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f000 f80f 	bl	8008750 <IntToUnicode>
  }
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	1fff7a10 	.word	0x1fff7a10
 8008740:	1fff7a14 	.word	0x1fff7a14
 8008744:	1fff7a18 	.word	0x1fff7a18
 8008748:	200003a2 	.word	0x200003a2
 800874c:	200003b2 	.word	0x200003b2

08008750 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008762:	2300      	movs	r3, #0
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e027      	b.n	80087b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	0f1b      	lsrs	r3, r3, #28
 800876c:	2b09      	cmp	r3, #9
 800876e:	d80b      	bhi.n	8008788 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	0f1b      	lsrs	r3, r3, #28
 8008774:	b2da      	uxtb	r2, r3
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	005b      	lsls	r3, r3, #1
 800877a:	4619      	mov	r1, r3
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	440b      	add	r3, r1
 8008780:	3230      	adds	r2, #48	; 0x30
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	e00a      	b.n	800879e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3237      	adds	r2, #55	; 0x37
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	011b      	lsls	r3, r3, #4
 80087a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	3301      	adds	r3, #1
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
 80087b4:	3301      	adds	r3, #1
 80087b6:	75fb      	strb	r3, [r7, #23]
 80087b8:	7dfa      	ldrb	r2, [r7, #23]
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3d3      	bcc.n	8008768 <IntToUnicode+0x18>
  }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08a      	sub	sp, #40	; 0x28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	605a      	str	r2, [r3, #4]
 80087e2:	609a      	str	r2, [r3, #8]
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80087f0:	d13a      	bne.n	8008868 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	4b1e      	ldr	r3, [pc, #120]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4a1d      	ldr	r2, [pc, #116]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	6313      	str	r3, [r2, #48]	; 0x30
 8008802:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	613b      	str	r3, [r7, #16]
 800880c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800880e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008814:	2302      	movs	r3, #2
 8008816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008818:	2300      	movs	r3, #0
 800881a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800881c:	2303      	movs	r3, #3
 800881e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008820:	230a      	movs	r3, #10
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	4619      	mov	r1, r3
 800882a:	4812      	ldr	r0, [pc, #72]	; (8008874 <HAL_PCD_MspInit+0xa4>)
 800882c:	f7fa f97e 	bl	8002b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 8008832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008834:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	6353      	str	r3, [r2, #52]	; 0x34
 800883c:	2300      	movs	r3, #0
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 8008842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008844:	4a0a      	ldr	r2, [pc, #40]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 8008846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800884a:	6453      	str	r3, [r2, #68]	; 0x44
 800884c:	4b08      	ldr	r3, [pc, #32]	; (8008870 <HAL_PCD_MspInit+0xa0>)
 800884e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008858:	2200      	movs	r2, #0
 800885a:	2100      	movs	r1, #0
 800885c:	2043      	movs	r0, #67	; 0x43
 800885e:	f7fa f92a 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008862:	2043      	movs	r0, #67	; 0x43
 8008864:	f7fa f943 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008868:	bf00      	nop
 800886a:	3728      	adds	r7, #40	; 0x28
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	40023800 	.word	0x40023800
 8008874:	40020000 	.word	0x40020000

08008878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f7fe fcd0 	bl	8007234 <USBD_LL_SetupStage>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	4619      	mov	r1, r3
 80088c6:	f7fe fd0a 	bl	80072de <USBD_LL_DataOutStage>
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	4613      	mov	r3, r2
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	1a9b      	subs	r3, r3, r2
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	440b      	add	r3, r1
 80088f2:	3348      	adds	r3, #72	; 0x48
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	4619      	mov	r1, r3
 80088fa:	f7fe fd53 	bl	80073a4 <USBD_LL_DataInStage>
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b082      	sub	sp, #8
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fe67 	bl	80075e8 <USBD_LL_SOF>
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
 800893a:	e008      	b.n	800894e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d102      	bne.n	800894a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	e001      	b.n	800894e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800894a:	f7f9 f855 	bl	80019f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	4611      	mov	r1, r2
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fe07 	bl	800756c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe fdb3 	bl	80074d0 <USBD_LL_Reset>
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe fe02 	bl	800758c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089a8:	4b04      	ldr	r3, [pc, #16]	; (80089bc <HAL_PCD_SuspendCallback+0x48>)
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	4a03      	ldr	r2, [pc, #12]	; (80089bc <HAL_PCD_SuspendCallback+0x48>)
 80089ae:	f043 0306 	orr.w	r3, r3, #6
 80089b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	e000ed00 	.word	0xe000ed00

080089c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fdf2 	bl	80075b8 <USBD_LL_Resume>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fe40 	bl	8007678 <USBD_LL_IsoOUTIncomplete>
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fe08 	bl	800762c <USBD_LL_IsoINIncomplete>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fe46 	bl	80076c4 <USBD_LL_DevConnected>
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fe43 	bl	80076da <USBD_LL_DevDisconnected>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d13c      	bne.n	8008ae6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a6c:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1e      	ldr	r2, [pc, #120]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a7c:	4b1c      	ldr	r3, [pc, #112]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a84:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a86:	2204      	movs	r2, #4
 8008a88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a90:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a96:	4b16      	ldr	r3, [pc, #88]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a98:	2202      	movs	r2, #2
 8008a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a9c:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <USBD_LL_Init+0x94>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008aa2:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <USBD_LL_Init+0x94>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <USBD_LL_Init+0x94>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008aae:	4b10      	ldr	r3, [pc, #64]	; (8008af0 <USBD_LL_Init+0x94>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ab4:	4b0e      	ldr	r3, [pc, #56]	; (8008af0 <USBD_LL_Init+0x94>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008aba:	480d      	ldr	r0, [pc, #52]	; (8008af0 <USBD_LL_Init+0x94>)
 8008abc:	f7fa f9eb 	bl	8002e96 <HAL_PCD_Init>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ac6:	f7f8 ff97 	bl	80019f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008aca:	2180      	movs	r1, #128	; 0x80
 8008acc:	4808      	ldr	r0, [pc, #32]	; (8008af0 <USBD_LL_Init+0x94>)
 8008ace:	f7fb fb48 	bl	8004162 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ad2:	2240      	movs	r2, #64	; 0x40
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4806      	ldr	r0, [pc, #24]	; (8008af0 <USBD_LL_Init+0x94>)
 8008ad8:	f7fb fafc 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008adc:	2280      	movs	r2, #128	; 0x80
 8008ade:	2101      	movs	r1, #1
 8008ae0:	4803      	ldr	r0, [pc, #12]	; (8008af0 <USBD_LL_Init+0x94>)
 8008ae2:	f7fb faf7 	bl	80040d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20001a78 	.word	0x20001a78

08008af4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fa fae0 	bl	80030d0 <HAL_PCD_Start>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 f942 	bl	8008da0 <USBD_Get_USB_Status>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	4608      	mov	r0, r1
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	4603      	mov	r3, r0
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70bb      	strb	r3, [r7, #2]
 8008b40:	4613      	mov	r3, r2
 8008b42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008b52:	78bb      	ldrb	r3, [r7, #2]
 8008b54:	883a      	ldrh	r2, [r7, #0]
 8008b56:	78f9      	ldrb	r1, [r7, #3]
 8008b58:	f7fa fec4 	bl	80038e4 <HAL_PCD_EP_Open>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f91c 	bl	8008da0 <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fa ff0d 	bl	80039b4 <HAL_PCD_EP_Close>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f8fd 	bl	8008da0 <USBD_Get_USB_Status>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fa ffe5 	bl	8003ba2 <HAL_PCD_EP_SetStall>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f8de 	bl	8008da0 <USBD_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fb f82a 	bl	8003c6a <HAL_PCD_EP_ClrStall>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f8bf 	bl	8008da0 <USBD_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	da0b      	bge.n	8008c64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c52:	68f9      	ldr	r1, [r7, #12]
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	333e      	adds	r3, #62	; 0x3e
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	e00b      	b.n	8008c7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ca2:	78fa      	ldrb	r2, [r7, #3]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fa fdf7 	bl	800389a <HAL_PCD_SetAddress>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f874 	bl	8008da0 <USBD_Get_USB_Status>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ce4:	7af9      	ldrb	r1, [r7, #11]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	f7fa ff10 	bl	8003b0e <HAL_PCD_EP_Transmit>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f853 	bl	8008da0 <USBD_Get_USB_Status>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	460b      	mov	r3, r1
 8008d16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d26:	7af9      	ldrb	r1, [r7, #11]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	f7fa fe8c 	bl	8003a48 <HAL_PCD_EP_Receive>
 8008d30:	4603      	mov	r3, r0
 8008d32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f832 	bl	8008da0 <USBD_Get_USB_Status>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d40:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	460b      	mov	r3, r1
 8008d54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d5c:	78fa      	ldrb	r2, [r7, #3]
 8008d5e:	4611      	mov	r1, r2
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fa febc 	bl	8003ade <HAL_PCD_EP_GetRxCount>
 8008d66:	4603      	mov	r3, r0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d78:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <USBD_static_malloc+0x18>)
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20001e80 	.word	0x20001e80

08008d8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]

}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d817      	bhi.n	8008de4 <USBD_Get_USB_Status+0x44>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <USBD_Get_USB_Status+0x1c>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008dd3 	.word	0x08008dd3
 8008dc4:	08008dd9 	.word	0x08008dd9
 8008dc8:	08008ddf 	.word	0x08008ddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e00b      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e008      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	e005      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	73fb      	strb	r3, [r7, #15]
    break;
 8008de2:	e002      	b.n	8008dea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008de4:	2303      	movs	r3, #3
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	bf00      	nop
  }
  return usb_status;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <atoi>:
 8008df8:	220a      	movs	r2, #10
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	f000 b8d4 	b.w	8008fa8 <strtol>

08008e00 <__errno>:
 8008e00:	4b01      	ldr	r3, [pc, #4]	; (8008e08 <__errno+0x8>)
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	200003bc 	.word	0x200003bc

08008e0c <__libc_init_array>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	4d0d      	ldr	r5, [pc, #52]	; (8008e44 <__libc_init_array+0x38>)
 8008e10:	4c0d      	ldr	r4, [pc, #52]	; (8008e48 <__libc_init_array+0x3c>)
 8008e12:	1b64      	subs	r4, r4, r5
 8008e14:	10a4      	asrs	r4, r4, #2
 8008e16:	2600      	movs	r6, #0
 8008e18:	42a6      	cmp	r6, r4
 8008e1a:	d109      	bne.n	8008e30 <__libc_init_array+0x24>
 8008e1c:	4d0b      	ldr	r5, [pc, #44]	; (8008e4c <__libc_init_array+0x40>)
 8008e1e:	4c0c      	ldr	r4, [pc, #48]	; (8008e50 <__libc_init_array+0x44>)
 8008e20:	f000 fd1a 	bl	8009858 <_init>
 8008e24:	1b64      	subs	r4, r4, r5
 8008e26:	10a4      	asrs	r4, r4, #2
 8008e28:	2600      	movs	r6, #0
 8008e2a:	42a6      	cmp	r6, r4
 8008e2c:	d105      	bne.n	8008e3a <__libc_init_array+0x2e>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e34:	4798      	blx	r3
 8008e36:	3601      	adds	r6, #1
 8008e38:	e7ee      	b.n	8008e18 <__libc_init_array+0xc>
 8008e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3e:	4798      	blx	r3
 8008e40:	3601      	adds	r6, #1
 8008e42:	e7f2      	b.n	8008e2a <__libc_init_array+0x1e>
 8008e44:	08009a7c 	.word	0x08009a7c
 8008e48:	08009a7c 	.word	0x08009a7c
 8008e4c:	08009a7c 	.word	0x08009a7c
 8008e50:	08009a80 	.word	0x08009a80

08008e54 <memset>:
 8008e54:	4402      	add	r2, r0
 8008e56:	4603      	mov	r3, r0
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d100      	bne.n	8008e5e <memset+0xa>
 8008e5c:	4770      	bx	lr
 8008e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e62:	e7f9      	b.n	8008e58 <memset+0x4>

08008e64 <siprintf>:
 8008e64:	b40e      	push	{r1, r2, r3}
 8008e66:	b500      	push	{lr}
 8008e68:	b09c      	sub	sp, #112	; 0x70
 8008e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	9006      	str	r0, [sp, #24]
 8008e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e74:	4809      	ldr	r0, [pc, #36]	; (8008e9c <siprintf+0x38>)
 8008e76:	9107      	str	r1, [sp, #28]
 8008e78:	9104      	str	r1, [sp, #16]
 8008e7a:	4909      	ldr	r1, [pc, #36]	; (8008ea0 <siprintf+0x3c>)
 8008e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e80:	9105      	str	r1, [sp, #20]
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	a902      	add	r1, sp, #8
 8008e88:	f000 f8f4 	bl	8009074 <_svfiprintf_r>
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	701a      	strb	r2, [r3, #0]
 8008e92:	b01c      	add	sp, #112	; 0x70
 8008e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e98:	b003      	add	sp, #12
 8008e9a:	4770      	bx	lr
 8008e9c:	200003bc 	.word	0x200003bc
 8008ea0:	ffff0208 	.word	0xffff0208

08008ea4 <_strtol_l.constprop.0>:
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eaa:	d001      	beq.n	8008eb0 <_strtol_l.constprop.0+0xc>
 8008eac:	2b24      	cmp	r3, #36	; 0x24
 8008eae:	d906      	bls.n	8008ebe <_strtol_l.constprop.0+0x1a>
 8008eb0:	f7ff ffa6 	bl	8008e00 <__errno>
 8008eb4:	2316      	movs	r3, #22
 8008eb6:	6003      	str	r3, [r0, #0]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008fa4 <_strtol_l.constprop.0+0x100>
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	462e      	mov	r6, r5
 8008ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eca:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008ece:	f017 0708 	ands.w	r7, r7, #8
 8008ed2:	d1f7      	bne.n	8008ec4 <_strtol_l.constprop.0+0x20>
 8008ed4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ed6:	d132      	bne.n	8008f3e <_strtol_l.constprop.0+0x9a>
 8008ed8:	782c      	ldrb	r4, [r5, #0]
 8008eda:	2701      	movs	r7, #1
 8008edc:	1cb5      	adds	r5, r6, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d05b      	beq.n	8008f9a <_strtol_l.constprop.0+0xf6>
 8008ee2:	2b10      	cmp	r3, #16
 8008ee4:	d109      	bne.n	8008efa <_strtol_l.constprop.0+0x56>
 8008ee6:	2c30      	cmp	r4, #48	; 0x30
 8008ee8:	d107      	bne.n	8008efa <_strtol_l.constprop.0+0x56>
 8008eea:	782c      	ldrb	r4, [r5, #0]
 8008eec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ef0:	2c58      	cmp	r4, #88	; 0x58
 8008ef2:	d14d      	bne.n	8008f90 <_strtol_l.constprop.0+0xec>
 8008ef4:	786c      	ldrb	r4, [r5, #1]
 8008ef6:	2310      	movs	r3, #16
 8008ef8:	3502      	adds	r5, #2
 8008efa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008efe:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f02:	f04f 0c00 	mov.w	ip, #0
 8008f06:	fbb8 f9f3 	udiv	r9, r8, r3
 8008f0a:	4666      	mov	r6, ip
 8008f0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008f10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008f14:	f1be 0f09 	cmp.w	lr, #9
 8008f18:	d816      	bhi.n	8008f48 <_strtol_l.constprop.0+0xa4>
 8008f1a:	4674      	mov	r4, lr
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	dd24      	ble.n	8008f6a <_strtol_l.constprop.0+0xc6>
 8008f20:	f1bc 0f00 	cmp.w	ip, #0
 8008f24:	db1e      	blt.n	8008f64 <_strtol_l.constprop.0+0xc0>
 8008f26:	45b1      	cmp	r9, r6
 8008f28:	d31c      	bcc.n	8008f64 <_strtol_l.constprop.0+0xc0>
 8008f2a:	d101      	bne.n	8008f30 <_strtol_l.constprop.0+0x8c>
 8008f2c:	45a2      	cmp	sl, r4
 8008f2e:	db19      	blt.n	8008f64 <_strtol_l.constprop.0+0xc0>
 8008f30:	fb06 4603 	mla	r6, r6, r3, r4
 8008f34:	f04f 0c01 	mov.w	ip, #1
 8008f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f3c:	e7e8      	b.n	8008f10 <_strtol_l.constprop.0+0x6c>
 8008f3e:	2c2b      	cmp	r4, #43	; 0x2b
 8008f40:	bf04      	itt	eq
 8008f42:	782c      	ldrbeq	r4, [r5, #0]
 8008f44:	1cb5      	addeq	r5, r6, #2
 8008f46:	e7ca      	b.n	8008ede <_strtol_l.constprop.0+0x3a>
 8008f48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008f4c:	f1be 0f19 	cmp.w	lr, #25
 8008f50:	d801      	bhi.n	8008f56 <_strtol_l.constprop.0+0xb2>
 8008f52:	3c37      	subs	r4, #55	; 0x37
 8008f54:	e7e2      	b.n	8008f1c <_strtol_l.constprop.0+0x78>
 8008f56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f5a:	f1be 0f19 	cmp.w	lr, #25
 8008f5e:	d804      	bhi.n	8008f6a <_strtol_l.constprop.0+0xc6>
 8008f60:	3c57      	subs	r4, #87	; 0x57
 8008f62:	e7db      	b.n	8008f1c <_strtol_l.constprop.0+0x78>
 8008f64:	f04f 3cff 	mov.w	ip, #4294967295
 8008f68:	e7e6      	b.n	8008f38 <_strtol_l.constprop.0+0x94>
 8008f6a:	f1bc 0f00 	cmp.w	ip, #0
 8008f6e:	da05      	bge.n	8008f7c <_strtol_l.constprop.0+0xd8>
 8008f70:	2322      	movs	r3, #34	; 0x22
 8008f72:	6003      	str	r3, [r0, #0]
 8008f74:	4646      	mov	r6, r8
 8008f76:	b942      	cbnz	r2, 8008f8a <_strtol_l.constprop.0+0xe6>
 8008f78:	4630      	mov	r0, r6
 8008f7a:	e79e      	b.n	8008eba <_strtol_l.constprop.0+0x16>
 8008f7c:	b107      	cbz	r7, 8008f80 <_strtol_l.constprop.0+0xdc>
 8008f7e:	4276      	negs	r6, r6
 8008f80:	2a00      	cmp	r2, #0
 8008f82:	d0f9      	beq.n	8008f78 <_strtol_l.constprop.0+0xd4>
 8008f84:	f1bc 0f00 	cmp.w	ip, #0
 8008f88:	d000      	beq.n	8008f8c <_strtol_l.constprop.0+0xe8>
 8008f8a:	1e69      	subs	r1, r5, #1
 8008f8c:	6011      	str	r1, [r2, #0]
 8008f8e:	e7f3      	b.n	8008f78 <_strtol_l.constprop.0+0xd4>
 8008f90:	2430      	movs	r4, #48	; 0x30
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1b1      	bne.n	8008efa <_strtol_l.constprop.0+0x56>
 8008f96:	2308      	movs	r3, #8
 8008f98:	e7af      	b.n	8008efa <_strtol_l.constprop.0+0x56>
 8008f9a:	2c30      	cmp	r4, #48	; 0x30
 8008f9c:	d0a5      	beq.n	8008eea <_strtol_l.constprop.0+0x46>
 8008f9e:	230a      	movs	r3, #10
 8008fa0:	e7ab      	b.n	8008efa <_strtol_l.constprop.0+0x56>
 8008fa2:	bf00      	nop
 8008fa4:	08009941 	.word	0x08009941

08008fa8 <strtol>:
 8008fa8:	4613      	mov	r3, r2
 8008faa:	460a      	mov	r2, r1
 8008fac:	4601      	mov	r1, r0
 8008fae:	4802      	ldr	r0, [pc, #8]	; (8008fb8 <strtol+0x10>)
 8008fb0:	6800      	ldr	r0, [r0, #0]
 8008fb2:	f7ff bf77 	b.w	8008ea4 <_strtol_l.constprop.0>
 8008fb6:	bf00      	nop
 8008fb8:	200003bc 	.word	0x200003bc

08008fbc <__ssputs_r>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	688e      	ldr	r6, [r1, #8]
 8008fc2:	429e      	cmp	r6, r3
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	4690      	mov	r8, r2
 8008fca:	461f      	mov	r7, r3
 8008fcc:	d838      	bhi.n	8009040 <__ssputs_r+0x84>
 8008fce:	898a      	ldrh	r2, [r1, #12]
 8008fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fd4:	d032      	beq.n	800903c <__ssputs_r+0x80>
 8008fd6:	6825      	ldr	r5, [r4, #0]
 8008fd8:	6909      	ldr	r1, [r1, #16]
 8008fda:	eba5 0901 	sub.w	r9, r5, r1
 8008fde:	6965      	ldr	r5, [r4, #20]
 8008fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fe8:	3301      	adds	r3, #1
 8008fea:	444b      	add	r3, r9
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	429d      	cmp	r5, r3
 8008ff0:	bf38      	it	cc
 8008ff2:	461d      	movcc	r5, r3
 8008ff4:	0553      	lsls	r3, r2, #21
 8008ff6:	d531      	bpl.n	800905c <__ssputs_r+0xa0>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f000 fb63 	bl	80096c4 <_malloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	b950      	cbnz	r0, 8009018 <__ssputs_r+0x5c>
 8009002:	230c      	movs	r3, #12
 8009004:	f8ca 3000 	str.w	r3, [sl]
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	6921      	ldr	r1, [r4, #16]
 800901a:	464a      	mov	r2, r9
 800901c:	f000 fabe 	bl	800959c <memcpy>
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902a:	81a3      	strh	r3, [r4, #12]
 800902c:	6126      	str	r6, [r4, #16]
 800902e:	6165      	str	r5, [r4, #20]
 8009030:	444e      	add	r6, r9
 8009032:	eba5 0509 	sub.w	r5, r5, r9
 8009036:	6026      	str	r6, [r4, #0]
 8009038:	60a5      	str	r5, [r4, #8]
 800903a:	463e      	mov	r6, r7
 800903c:	42be      	cmp	r6, r7
 800903e:	d900      	bls.n	8009042 <__ssputs_r+0x86>
 8009040:	463e      	mov	r6, r7
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	4632      	mov	r2, r6
 8009046:	4641      	mov	r1, r8
 8009048:	f000 fab6 	bl	80095b8 <memmove>
 800904c:	68a3      	ldr	r3, [r4, #8]
 800904e:	1b9b      	subs	r3, r3, r6
 8009050:	60a3      	str	r3, [r4, #8]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	4433      	add	r3, r6
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	2000      	movs	r0, #0
 800905a:	e7db      	b.n	8009014 <__ssputs_r+0x58>
 800905c:	462a      	mov	r2, r5
 800905e:	f000 fba5 	bl	80097ac <_realloc_r>
 8009062:	4606      	mov	r6, r0
 8009064:	2800      	cmp	r0, #0
 8009066:	d1e1      	bne.n	800902c <__ssputs_r+0x70>
 8009068:	6921      	ldr	r1, [r4, #16]
 800906a:	4650      	mov	r0, sl
 800906c:	f000 fabe 	bl	80095ec <_free_r>
 8009070:	e7c7      	b.n	8009002 <__ssputs_r+0x46>
	...

08009074 <_svfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4698      	mov	r8, r3
 800907a:	898b      	ldrh	r3, [r1, #12]
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	b09d      	sub	sp, #116	; 0x74
 8009080:	4607      	mov	r7, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4614      	mov	r4, r2
 8009086:	d50e      	bpl.n	80090a6 <_svfiprintf_r+0x32>
 8009088:	690b      	ldr	r3, [r1, #16]
 800908a:	b963      	cbnz	r3, 80090a6 <_svfiprintf_r+0x32>
 800908c:	2140      	movs	r1, #64	; 0x40
 800908e:	f000 fb19 	bl	80096c4 <_malloc_r>
 8009092:	6028      	str	r0, [r5, #0]
 8009094:	6128      	str	r0, [r5, #16]
 8009096:	b920      	cbnz	r0, 80090a2 <_svfiprintf_r+0x2e>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e0d1      	b.n	8009246 <_svfiprintf_r+0x1d2>
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	616b      	str	r3, [r5, #20]
 80090a6:	2300      	movs	r3, #0
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	2320      	movs	r3, #32
 80090ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b4:	2330      	movs	r3, #48	; 0x30
 80090b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009260 <_svfiprintf_r+0x1ec>
 80090ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090be:	f04f 0901 	mov.w	r9, #1
 80090c2:	4623      	mov	r3, r4
 80090c4:	469a      	mov	sl, r3
 80090c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ca:	b10a      	cbz	r2, 80090d0 <_svfiprintf_r+0x5c>
 80090cc:	2a25      	cmp	r2, #37	; 0x25
 80090ce:	d1f9      	bne.n	80090c4 <_svfiprintf_r+0x50>
 80090d0:	ebba 0b04 	subs.w	fp, sl, r4
 80090d4:	d00b      	beq.n	80090ee <_svfiprintf_r+0x7a>
 80090d6:	465b      	mov	r3, fp
 80090d8:	4622      	mov	r2, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	4638      	mov	r0, r7
 80090de:	f7ff ff6d 	bl	8008fbc <__ssputs_r>
 80090e2:	3001      	adds	r0, #1
 80090e4:	f000 80aa 	beq.w	800923c <_svfiprintf_r+0x1c8>
 80090e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ea:	445a      	add	r2, fp
 80090ec:	9209      	str	r2, [sp, #36]	; 0x24
 80090ee:	f89a 3000 	ldrb.w	r3, [sl]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80a2 	beq.w	800923c <_svfiprintf_r+0x1c8>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f04f 32ff 	mov.w	r2, #4294967295
 80090fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009102:	f10a 0a01 	add.w	sl, sl, #1
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	9307      	str	r3, [sp, #28]
 800910a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800910e:	931a      	str	r3, [sp, #104]	; 0x68
 8009110:	4654      	mov	r4, sl
 8009112:	2205      	movs	r2, #5
 8009114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009118:	4851      	ldr	r0, [pc, #324]	; (8009260 <_svfiprintf_r+0x1ec>)
 800911a:	f7f7 f859 	bl	80001d0 <memchr>
 800911e:	9a04      	ldr	r2, [sp, #16]
 8009120:	b9d8      	cbnz	r0, 800915a <_svfiprintf_r+0xe6>
 8009122:	06d0      	lsls	r0, r2, #27
 8009124:	bf44      	itt	mi
 8009126:	2320      	movmi	r3, #32
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912c:	0711      	lsls	r1, r2, #28
 800912e:	bf44      	itt	mi
 8009130:	232b      	movmi	r3, #43	; 0x2b
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	f89a 3000 	ldrb.w	r3, [sl]
 800913a:	2b2a      	cmp	r3, #42	; 0x2a
 800913c:	d015      	beq.n	800916a <_svfiprintf_r+0xf6>
 800913e:	9a07      	ldr	r2, [sp, #28]
 8009140:	4654      	mov	r4, sl
 8009142:	2000      	movs	r0, #0
 8009144:	f04f 0c0a 	mov.w	ip, #10
 8009148:	4621      	mov	r1, r4
 800914a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	2b09      	cmp	r3, #9
 8009152:	d94e      	bls.n	80091f2 <_svfiprintf_r+0x17e>
 8009154:	b1b0      	cbz	r0, 8009184 <_svfiprintf_r+0x110>
 8009156:	9207      	str	r2, [sp, #28]
 8009158:	e014      	b.n	8009184 <_svfiprintf_r+0x110>
 800915a:	eba0 0308 	sub.w	r3, r0, r8
 800915e:	fa09 f303 	lsl.w	r3, r9, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	46a2      	mov	sl, r4
 8009168:	e7d2      	b.n	8009110 <_svfiprintf_r+0x9c>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	1d19      	adds	r1, r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	9103      	str	r1, [sp, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfbb      	ittet	lt
 8009176:	425b      	neglt	r3, r3
 8009178:	f042 0202 	orrlt.w	r2, r2, #2
 800917c:	9307      	strge	r3, [sp, #28]
 800917e:	9307      	strlt	r3, [sp, #28]
 8009180:	bfb8      	it	lt
 8009182:	9204      	strlt	r2, [sp, #16]
 8009184:	7823      	ldrb	r3, [r4, #0]
 8009186:	2b2e      	cmp	r3, #46	; 0x2e
 8009188:	d10c      	bne.n	80091a4 <_svfiprintf_r+0x130>
 800918a:	7863      	ldrb	r3, [r4, #1]
 800918c:	2b2a      	cmp	r3, #42	; 0x2a
 800918e:	d135      	bne.n	80091fc <_svfiprintf_r+0x188>
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9203      	str	r2, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfb8      	it	lt
 800919c:	f04f 33ff 	movlt.w	r3, #4294967295
 80091a0:	3402      	adds	r4, #2
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009270 <_svfiprintf_r+0x1fc>
 80091a8:	7821      	ldrb	r1, [r4, #0]
 80091aa:	2203      	movs	r2, #3
 80091ac:	4650      	mov	r0, sl
 80091ae:	f7f7 f80f 	bl	80001d0 <memchr>
 80091b2:	b140      	cbz	r0, 80091c6 <_svfiprintf_r+0x152>
 80091b4:	2340      	movs	r3, #64	; 0x40
 80091b6:	eba0 000a 	sub.w	r0, r0, sl
 80091ba:	fa03 f000 	lsl.w	r0, r3, r0
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	4303      	orrs	r3, r0
 80091c2:	3401      	adds	r4, #1
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	4826      	ldr	r0, [pc, #152]	; (8009264 <_svfiprintf_r+0x1f0>)
 80091cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091d0:	2206      	movs	r2, #6
 80091d2:	f7f6 fffd 	bl	80001d0 <memchr>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d038      	beq.n	800924c <_svfiprintf_r+0x1d8>
 80091da:	4b23      	ldr	r3, [pc, #140]	; (8009268 <_svfiprintf_r+0x1f4>)
 80091dc:	bb1b      	cbnz	r3, 8009226 <_svfiprintf_r+0x1b2>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	3307      	adds	r3, #7
 80091e2:	f023 0307 	bic.w	r3, r3, #7
 80091e6:	3308      	adds	r3, #8
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ec:	4433      	add	r3, r6
 80091ee:	9309      	str	r3, [sp, #36]	; 0x24
 80091f0:	e767      	b.n	80090c2 <_svfiprintf_r+0x4e>
 80091f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091f6:	460c      	mov	r4, r1
 80091f8:	2001      	movs	r0, #1
 80091fa:	e7a5      	b.n	8009148 <_svfiprintf_r+0xd4>
 80091fc:	2300      	movs	r3, #0
 80091fe:	3401      	adds	r4, #1
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	4619      	mov	r1, r3
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	4620      	mov	r0, r4
 800920a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800920e:	3a30      	subs	r2, #48	; 0x30
 8009210:	2a09      	cmp	r2, #9
 8009212:	d903      	bls.n	800921c <_svfiprintf_r+0x1a8>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d0c5      	beq.n	80091a4 <_svfiprintf_r+0x130>
 8009218:	9105      	str	r1, [sp, #20]
 800921a:	e7c3      	b.n	80091a4 <_svfiprintf_r+0x130>
 800921c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009220:	4604      	mov	r4, r0
 8009222:	2301      	movs	r3, #1
 8009224:	e7f0      	b.n	8009208 <_svfiprintf_r+0x194>
 8009226:	ab03      	add	r3, sp, #12
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	462a      	mov	r2, r5
 800922c:	4b0f      	ldr	r3, [pc, #60]	; (800926c <_svfiprintf_r+0x1f8>)
 800922e:	a904      	add	r1, sp, #16
 8009230:	4638      	mov	r0, r7
 8009232:	f3af 8000 	nop.w
 8009236:	1c42      	adds	r2, r0, #1
 8009238:	4606      	mov	r6, r0
 800923a:	d1d6      	bne.n	80091ea <_svfiprintf_r+0x176>
 800923c:	89ab      	ldrh	r3, [r5, #12]
 800923e:	065b      	lsls	r3, r3, #25
 8009240:	f53f af2c 	bmi.w	800909c <_svfiprintf_r+0x28>
 8009244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009246:	b01d      	add	sp, #116	; 0x74
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	462a      	mov	r2, r5
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <_svfiprintf_r+0x1f8>)
 8009254:	a904      	add	r1, sp, #16
 8009256:	4638      	mov	r0, r7
 8009258:	f000 f87a 	bl	8009350 <_printf_i>
 800925c:	e7eb      	b.n	8009236 <_svfiprintf_r+0x1c2>
 800925e:	bf00      	nop
 8009260:	08009a41 	.word	0x08009a41
 8009264:	08009a4b 	.word	0x08009a4b
 8009268:	00000000 	.word	0x00000000
 800926c:	08008fbd 	.word	0x08008fbd
 8009270:	08009a47 	.word	0x08009a47

08009274 <_printf_common>:
 8009274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	4616      	mov	r6, r2
 800927a:	4699      	mov	r9, r3
 800927c:	688a      	ldr	r2, [r1, #8]
 800927e:	690b      	ldr	r3, [r1, #16]
 8009280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009284:	4293      	cmp	r3, r2
 8009286:	bfb8      	it	lt
 8009288:	4613      	movlt	r3, r2
 800928a:	6033      	str	r3, [r6, #0]
 800928c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009290:	4607      	mov	r7, r0
 8009292:	460c      	mov	r4, r1
 8009294:	b10a      	cbz	r2, 800929a <_printf_common+0x26>
 8009296:	3301      	adds	r3, #1
 8009298:	6033      	str	r3, [r6, #0]
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	0699      	lsls	r1, r3, #26
 800929e:	bf42      	ittt	mi
 80092a0:	6833      	ldrmi	r3, [r6, #0]
 80092a2:	3302      	addmi	r3, #2
 80092a4:	6033      	strmi	r3, [r6, #0]
 80092a6:	6825      	ldr	r5, [r4, #0]
 80092a8:	f015 0506 	ands.w	r5, r5, #6
 80092ac:	d106      	bne.n	80092bc <_printf_common+0x48>
 80092ae:	f104 0a19 	add.w	sl, r4, #25
 80092b2:	68e3      	ldr	r3, [r4, #12]
 80092b4:	6832      	ldr	r2, [r6, #0]
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dc26      	bgt.n	800930a <_printf_common+0x96>
 80092bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092c0:	1e13      	subs	r3, r2, #0
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	bf18      	it	ne
 80092c6:	2301      	movne	r3, #1
 80092c8:	0692      	lsls	r2, r2, #26
 80092ca:	d42b      	bmi.n	8009324 <_printf_common+0xb0>
 80092cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092d0:	4649      	mov	r1, r9
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c0      	blx	r8
 80092d6:	3001      	adds	r0, #1
 80092d8:	d01e      	beq.n	8009318 <_printf_common+0xa4>
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	68e5      	ldr	r5, [r4, #12]
 80092de:	6832      	ldr	r2, [r6, #0]
 80092e0:	f003 0306 	and.w	r3, r3, #6
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	bf08      	it	eq
 80092e8:	1aad      	subeq	r5, r5, r2
 80092ea:	68a3      	ldr	r3, [r4, #8]
 80092ec:	6922      	ldr	r2, [r4, #16]
 80092ee:	bf0c      	ite	eq
 80092f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f4:	2500      	movne	r5, #0
 80092f6:	4293      	cmp	r3, r2
 80092f8:	bfc4      	itt	gt
 80092fa:	1a9b      	subgt	r3, r3, r2
 80092fc:	18ed      	addgt	r5, r5, r3
 80092fe:	2600      	movs	r6, #0
 8009300:	341a      	adds	r4, #26
 8009302:	42b5      	cmp	r5, r6
 8009304:	d11a      	bne.n	800933c <_printf_common+0xc8>
 8009306:	2000      	movs	r0, #0
 8009308:	e008      	b.n	800931c <_printf_common+0xa8>
 800930a:	2301      	movs	r3, #1
 800930c:	4652      	mov	r2, sl
 800930e:	4649      	mov	r1, r9
 8009310:	4638      	mov	r0, r7
 8009312:	47c0      	blx	r8
 8009314:	3001      	adds	r0, #1
 8009316:	d103      	bne.n	8009320 <_printf_common+0xac>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009320:	3501      	adds	r5, #1
 8009322:	e7c6      	b.n	80092b2 <_printf_common+0x3e>
 8009324:	18e1      	adds	r1, r4, r3
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	2030      	movs	r0, #48	; 0x30
 800932a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800932e:	4422      	add	r2, r4
 8009330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009338:	3302      	adds	r3, #2
 800933a:	e7c7      	b.n	80092cc <_printf_common+0x58>
 800933c:	2301      	movs	r3, #1
 800933e:	4622      	mov	r2, r4
 8009340:	4649      	mov	r1, r9
 8009342:	4638      	mov	r0, r7
 8009344:	47c0      	blx	r8
 8009346:	3001      	adds	r0, #1
 8009348:	d0e6      	beq.n	8009318 <_printf_common+0xa4>
 800934a:	3601      	adds	r6, #1
 800934c:	e7d9      	b.n	8009302 <_printf_common+0x8e>
	...

08009350 <_printf_i>:
 8009350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	7e0f      	ldrb	r7, [r1, #24]
 8009356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009358:	2f78      	cmp	r7, #120	; 0x78
 800935a:	4691      	mov	r9, r2
 800935c:	4680      	mov	r8, r0
 800935e:	460c      	mov	r4, r1
 8009360:	469a      	mov	sl, r3
 8009362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009366:	d807      	bhi.n	8009378 <_printf_i+0x28>
 8009368:	2f62      	cmp	r7, #98	; 0x62
 800936a:	d80a      	bhi.n	8009382 <_printf_i+0x32>
 800936c:	2f00      	cmp	r7, #0
 800936e:	f000 80d8 	beq.w	8009522 <_printf_i+0x1d2>
 8009372:	2f58      	cmp	r7, #88	; 0x58
 8009374:	f000 80a3 	beq.w	80094be <_printf_i+0x16e>
 8009378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800937c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009380:	e03a      	b.n	80093f8 <_printf_i+0xa8>
 8009382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009386:	2b15      	cmp	r3, #21
 8009388:	d8f6      	bhi.n	8009378 <_printf_i+0x28>
 800938a:	a101      	add	r1, pc, #4	; (adr r1, 8009390 <_printf_i+0x40>)
 800938c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009390:	080093e9 	.word	0x080093e9
 8009394:	080093fd 	.word	0x080093fd
 8009398:	08009379 	.word	0x08009379
 800939c:	08009379 	.word	0x08009379
 80093a0:	08009379 	.word	0x08009379
 80093a4:	08009379 	.word	0x08009379
 80093a8:	080093fd 	.word	0x080093fd
 80093ac:	08009379 	.word	0x08009379
 80093b0:	08009379 	.word	0x08009379
 80093b4:	08009379 	.word	0x08009379
 80093b8:	08009379 	.word	0x08009379
 80093bc:	08009509 	.word	0x08009509
 80093c0:	0800942d 	.word	0x0800942d
 80093c4:	080094eb 	.word	0x080094eb
 80093c8:	08009379 	.word	0x08009379
 80093cc:	08009379 	.word	0x08009379
 80093d0:	0800952b 	.word	0x0800952b
 80093d4:	08009379 	.word	0x08009379
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	08009379 	.word	0x08009379
 80093e0:	08009379 	.word	0x08009379
 80093e4:	080094f3 	.word	0x080094f3
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	1d1a      	adds	r2, r3, #4
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	602a      	str	r2, [r5, #0]
 80093f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093f8:	2301      	movs	r3, #1
 80093fa:	e0a3      	b.n	8009544 <_printf_i+0x1f4>
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	6829      	ldr	r1, [r5, #0]
 8009400:	0606      	lsls	r6, r0, #24
 8009402:	f101 0304 	add.w	r3, r1, #4
 8009406:	d50a      	bpl.n	800941e <_printf_i+0xce>
 8009408:	680e      	ldr	r6, [r1, #0]
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	2e00      	cmp	r6, #0
 800940e:	da03      	bge.n	8009418 <_printf_i+0xc8>
 8009410:	232d      	movs	r3, #45	; 0x2d
 8009412:	4276      	negs	r6, r6
 8009414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009418:	485e      	ldr	r0, [pc, #376]	; (8009594 <_printf_i+0x244>)
 800941a:	230a      	movs	r3, #10
 800941c:	e019      	b.n	8009452 <_printf_i+0x102>
 800941e:	680e      	ldr	r6, [r1, #0]
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009426:	bf18      	it	ne
 8009428:	b236      	sxthne	r6, r6
 800942a:	e7ef      	b.n	800940c <_printf_i+0xbc>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	1d19      	adds	r1, r3, #4
 8009432:	6029      	str	r1, [r5, #0]
 8009434:	0601      	lsls	r1, r0, #24
 8009436:	d501      	bpl.n	800943c <_printf_i+0xec>
 8009438:	681e      	ldr	r6, [r3, #0]
 800943a:	e002      	b.n	8009442 <_printf_i+0xf2>
 800943c:	0646      	lsls	r6, r0, #25
 800943e:	d5fb      	bpl.n	8009438 <_printf_i+0xe8>
 8009440:	881e      	ldrh	r6, [r3, #0]
 8009442:	4854      	ldr	r0, [pc, #336]	; (8009594 <_printf_i+0x244>)
 8009444:	2f6f      	cmp	r7, #111	; 0x6f
 8009446:	bf0c      	ite	eq
 8009448:	2308      	moveq	r3, #8
 800944a:	230a      	movne	r3, #10
 800944c:	2100      	movs	r1, #0
 800944e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009452:	6865      	ldr	r5, [r4, #4]
 8009454:	60a5      	str	r5, [r4, #8]
 8009456:	2d00      	cmp	r5, #0
 8009458:	bfa2      	ittt	ge
 800945a:	6821      	ldrge	r1, [r4, #0]
 800945c:	f021 0104 	bicge.w	r1, r1, #4
 8009460:	6021      	strge	r1, [r4, #0]
 8009462:	b90e      	cbnz	r6, 8009468 <_printf_i+0x118>
 8009464:	2d00      	cmp	r5, #0
 8009466:	d04d      	beq.n	8009504 <_printf_i+0x1b4>
 8009468:	4615      	mov	r5, r2
 800946a:	fbb6 f1f3 	udiv	r1, r6, r3
 800946e:	fb03 6711 	mls	r7, r3, r1, r6
 8009472:	5dc7      	ldrb	r7, [r0, r7]
 8009474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009478:	4637      	mov	r7, r6
 800947a:	42bb      	cmp	r3, r7
 800947c:	460e      	mov	r6, r1
 800947e:	d9f4      	bls.n	800946a <_printf_i+0x11a>
 8009480:	2b08      	cmp	r3, #8
 8009482:	d10b      	bne.n	800949c <_printf_i+0x14c>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	07de      	lsls	r6, r3, #31
 8009488:	d508      	bpl.n	800949c <_printf_i+0x14c>
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	4299      	cmp	r1, r3
 8009490:	bfde      	ittt	le
 8009492:	2330      	movle	r3, #48	; 0x30
 8009494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800949c:	1b52      	subs	r2, r2, r5
 800949e:	6122      	str	r2, [r4, #16]
 80094a0:	f8cd a000 	str.w	sl, [sp]
 80094a4:	464b      	mov	r3, r9
 80094a6:	aa03      	add	r2, sp, #12
 80094a8:	4621      	mov	r1, r4
 80094aa:	4640      	mov	r0, r8
 80094ac:	f7ff fee2 	bl	8009274 <_printf_common>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d14c      	bne.n	800954e <_printf_i+0x1fe>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	b004      	add	sp, #16
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094be:	4835      	ldr	r0, [pc, #212]	; (8009594 <_printf_i+0x244>)
 80094c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80094c4:	6829      	ldr	r1, [r5, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80094cc:	6029      	str	r1, [r5, #0]
 80094ce:	061d      	lsls	r5, r3, #24
 80094d0:	d514      	bpl.n	80094fc <_printf_i+0x1ac>
 80094d2:	07df      	lsls	r7, r3, #31
 80094d4:	bf44      	itt	mi
 80094d6:	f043 0320 	orrmi.w	r3, r3, #32
 80094da:	6023      	strmi	r3, [r4, #0]
 80094dc:	b91e      	cbnz	r6, 80094e6 <_printf_i+0x196>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	f023 0320 	bic.w	r3, r3, #32
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	2310      	movs	r3, #16
 80094e8:	e7b0      	b.n	800944c <_printf_i+0xfc>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	f043 0320 	orr.w	r3, r3, #32
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	2378      	movs	r3, #120	; 0x78
 80094f4:	4828      	ldr	r0, [pc, #160]	; (8009598 <_printf_i+0x248>)
 80094f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094fa:	e7e3      	b.n	80094c4 <_printf_i+0x174>
 80094fc:	0659      	lsls	r1, r3, #25
 80094fe:	bf48      	it	mi
 8009500:	b2b6      	uxthmi	r6, r6
 8009502:	e7e6      	b.n	80094d2 <_printf_i+0x182>
 8009504:	4615      	mov	r5, r2
 8009506:	e7bb      	b.n	8009480 <_printf_i+0x130>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	6826      	ldr	r6, [r4, #0]
 800950c:	6961      	ldr	r1, [r4, #20]
 800950e:	1d18      	adds	r0, r3, #4
 8009510:	6028      	str	r0, [r5, #0]
 8009512:	0635      	lsls	r5, r6, #24
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	d501      	bpl.n	800951c <_printf_i+0x1cc>
 8009518:	6019      	str	r1, [r3, #0]
 800951a:	e002      	b.n	8009522 <_printf_i+0x1d2>
 800951c:	0670      	lsls	r0, r6, #25
 800951e:	d5fb      	bpl.n	8009518 <_printf_i+0x1c8>
 8009520:	8019      	strh	r1, [r3, #0]
 8009522:	2300      	movs	r3, #0
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	4615      	mov	r5, r2
 8009528:	e7ba      	b.n	80094a0 <_printf_i+0x150>
 800952a:	682b      	ldr	r3, [r5, #0]
 800952c:	1d1a      	adds	r2, r3, #4
 800952e:	602a      	str	r2, [r5, #0]
 8009530:	681d      	ldr	r5, [r3, #0]
 8009532:	6862      	ldr	r2, [r4, #4]
 8009534:	2100      	movs	r1, #0
 8009536:	4628      	mov	r0, r5
 8009538:	f7f6 fe4a 	bl	80001d0 <memchr>
 800953c:	b108      	cbz	r0, 8009542 <_printf_i+0x1f2>
 800953e:	1b40      	subs	r0, r0, r5
 8009540:	6060      	str	r0, [r4, #4]
 8009542:	6863      	ldr	r3, [r4, #4]
 8009544:	6123      	str	r3, [r4, #16]
 8009546:	2300      	movs	r3, #0
 8009548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800954c:	e7a8      	b.n	80094a0 <_printf_i+0x150>
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	462a      	mov	r2, r5
 8009552:	4649      	mov	r1, r9
 8009554:	4640      	mov	r0, r8
 8009556:	47d0      	blx	sl
 8009558:	3001      	adds	r0, #1
 800955a:	d0ab      	beq.n	80094b4 <_printf_i+0x164>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	079b      	lsls	r3, r3, #30
 8009560:	d413      	bmi.n	800958a <_printf_i+0x23a>
 8009562:	68e0      	ldr	r0, [r4, #12]
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	4298      	cmp	r0, r3
 8009568:	bfb8      	it	lt
 800956a:	4618      	movlt	r0, r3
 800956c:	e7a4      	b.n	80094b8 <_printf_i+0x168>
 800956e:	2301      	movs	r3, #1
 8009570:	4632      	mov	r2, r6
 8009572:	4649      	mov	r1, r9
 8009574:	4640      	mov	r0, r8
 8009576:	47d0      	blx	sl
 8009578:	3001      	adds	r0, #1
 800957a:	d09b      	beq.n	80094b4 <_printf_i+0x164>
 800957c:	3501      	adds	r5, #1
 800957e:	68e3      	ldr	r3, [r4, #12]
 8009580:	9903      	ldr	r1, [sp, #12]
 8009582:	1a5b      	subs	r3, r3, r1
 8009584:	42ab      	cmp	r3, r5
 8009586:	dcf2      	bgt.n	800956e <_printf_i+0x21e>
 8009588:	e7eb      	b.n	8009562 <_printf_i+0x212>
 800958a:	2500      	movs	r5, #0
 800958c:	f104 0619 	add.w	r6, r4, #25
 8009590:	e7f5      	b.n	800957e <_printf_i+0x22e>
 8009592:	bf00      	nop
 8009594:	08009a52 	.word	0x08009a52
 8009598:	08009a63 	.word	0x08009a63

0800959c <memcpy>:
 800959c:	440a      	add	r2, r1
 800959e:	4291      	cmp	r1, r2
 80095a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095a4:	d100      	bne.n	80095a8 <memcpy+0xc>
 80095a6:	4770      	bx	lr
 80095a8:	b510      	push	{r4, lr}
 80095aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095b2:	4291      	cmp	r1, r2
 80095b4:	d1f9      	bne.n	80095aa <memcpy+0xe>
 80095b6:	bd10      	pop	{r4, pc}

080095b8 <memmove>:
 80095b8:	4288      	cmp	r0, r1
 80095ba:	b510      	push	{r4, lr}
 80095bc:	eb01 0402 	add.w	r4, r1, r2
 80095c0:	d902      	bls.n	80095c8 <memmove+0x10>
 80095c2:	4284      	cmp	r4, r0
 80095c4:	4623      	mov	r3, r4
 80095c6:	d807      	bhi.n	80095d8 <memmove+0x20>
 80095c8:	1e43      	subs	r3, r0, #1
 80095ca:	42a1      	cmp	r1, r4
 80095cc:	d008      	beq.n	80095e0 <memmove+0x28>
 80095ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095d6:	e7f8      	b.n	80095ca <memmove+0x12>
 80095d8:	4402      	add	r2, r0
 80095da:	4601      	mov	r1, r0
 80095dc:	428a      	cmp	r2, r1
 80095de:	d100      	bne.n	80095e2 <memmove+0x2a>
 80095e0:	bd10      	pop	{r4, pc}
 80095e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80095ea:	e7f7      	b.n	80095dc <memmove+0x24>

080095ec <_free_r>:
 80095ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ee:	2900      	cmp	r1, #0
 80095f0:	d044      	beq.n	800967c <_free_r+0x90>
 80095f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f6:	9001      	str	r0, [sp, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f1a1 0404 	sub.w	r4, r1, #4
 80095fe:	bfb8      	it	lt
 8009600:	18e4      	addlt	r4, r4, r3
 8009602:	f000 f913 	bl	800982c <__malloc_lock>
 8009606:	4a1e      	ldr	r2, [pc, #120]	; (8009680 <_free_r+0x94>)
 8009608:	9801      	ldr	r0, [sp, #4]
 800960a:	6813      	ldr	r3, [r2, #0]
 800960c:	b933      	cbnz	r3, 800961c <_free_r+0x30>
 800960e:	6063      	str	r3, [r4, #4]
 8009610:	6014      	str	r4, [r2, #0]
 8009612:	b003      	add	sp, #12
 8009614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009618:	f000 b90e 	b.w	8009838 <__malloc_unlock>
 800961c:	42a3      	cmp	r3, r4
 800961e:	d908      	bls.n	8009632 <_free_r+0x46>
 8009620:	6825      	ldr	r5, [r4, #0]
 8009622:	1961      	adds	r1, r4, r5
 8009624:	428b      	cmp	r3, r1
 8009626:	bf01      	itttt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	1949      	addeq	r1, r1, r5
 800962e:	6021      	streq	r1, [r4, #0]
 8009630:	e7ed      	b.n	800960e <_free_r+0x22>
 8009632:	461a      	mov	r2, r3
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b10b      	cbz	r3, 800963c <_free_r+0x50>
 8009638:	42a3      	cmp	r3, r4
 800963a:	d9fa      	bls.n	8009632 <_free_r+0x46>
 800963c:	6811      	ldr	r1, [r2, #0]
 800963e:	1855      	adds	r5, r2, r1
 8009640:	42a5      	cmp	r5, r4
 8009642:	d10b      	bne.n	800965c <_free_r+0x70>
 8009644:	6824      	ldr	r4, [r4, #0]
 8009646:	4421      	add	r1, r4
 8009648:	1854      	adds	r4, r2, r1
 800964a:	42a3      	cmp	r3, r4
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	d1e0      	bne.n	8009612 <_free_r+0x26>
 8009650:	681c      	ldr	r4, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	6053      	str	r3, [r2, #4]
 8009656:	4421      	add	r1, r4
 8009658:	6011      	str	r1, [r2, #0]
 800965a:	e7da      	b.n	8009612 <_free_r+0x26>
 800965c:	d902      	bls.n	8009664 <_free_r+0x78>
 800965e:	230c      	movs	r3, #12
 8009660:	6003      	str	r3, [r0, #0]
 8009662:	e7d6      	b.n	8009612 <_free_r+0x26>
 8009664:	6825      	ldr	r5, [r4, #0]
 8009666:	1961      	adds	r1, r4, r5
 8009668:	428b      	cmp	r3, r1
 800966a:	bf04      	itt	eq
 800966c:	6819      	ldreq	r1, [r3, #0]
 800966e:	685b      	ldreq	r3, [r3, #4]
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	bf04      	itt	eq
 8009674:	1949      	addeq	r1, r1, r5
 8009676:	6021      	streq	r1, [r4, #0]
 8009678:	6054      	str	r4, [r2, #4]
 800967a:	e7ca      	b.n	8009612 <_free_r+0x26>
 800967c:	b003      	add	sp, #12
 800967e:	bd30      	pop	{r4, r5, pc}
 8009680:	200020a0 	.word	0x200020a0

08009684 <sbrk_aligned>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	4e0e      	ldr	r6, [pc, #56]	; (80096c0 <sbrk_aligned+0x3c>)
 8009688:	460c      	mov	r4, r1
 800968a:	6831      	ldr	r1, [r6, #0]
 800968c:	4605      	mov	r5, r0
 800968e:	b911      	cbnz	r1, 8009696 <sbrk_aligned+0x12>
 8009690:	f000 f8bc 	bl	800980c <_sbrk_r>
 8009694:	6030      	str	r0, [r6, #0]
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f8b7 	bl	800980c <_sbrk_r>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d00a      	beq.n	80096b8 <sbrk_aligned+0x34>
 80096a2:	1cc4      	adds	r4, r0, #3
 80096a4:	f024 0403 	bic.w	r4, r4, #3
 80096a8:	42a0      	cmp	r0, r4
 80096aa:	d007      	beq.n	80096bc <sbrk_aligned+0x38>
 80096ac:	1a21      	subs	r1, r4, r0
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f8ac 	bl	800980c <_sbrk_r>
 80096b4:	3001      	adds	r0, #1
 80096b6:	d101      	bne.n	80096bc <sbrk_aligned+0x38>
 80096b8:	f04f 34ff 	mov.w	r4, #4294967295
 80096bc:	4620      	mov	r0, r4
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	200020a4 	.word	0x200020a4

080096c4 <_malloc_r>:
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	1ccd      	adds	r5, r1, #3
 80096ca:	f025 0503 	bic.w	r5, r5, #3
 80096ce:	3508      	adds	r5, #8
 80096d0:	2d0c      	cmp	r5, #12
 80096d2:	bf38      	it	cc
 80096d4:	250c      	movcc	r5, #12
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	4607      	mov	r7, r0
 80096da:	db01      	blt.n	80096e0 <_malloc_r+0x1c>
 80096dc:	42a9      	cmp	r1, r5
 80096de:	d905      	bls.n	80096ec <_malloc_r+0x28>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	2600      	movs	r6, #0
 80096e6:	4630      	mov	r0, r6
 80096e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ec:	4e2e      	ldr	r6, [pc, #184]	; (80097a8 <_malloc_r+0xe4>)
 80096ee:	f000 f89d 	bl	800982c <__malloc_lock>
 80096f2:	6833      	ldr	r3, [r6, #0]
 80096f4:	461c      	mov	r4, r3
 80096f6:	bb34      	cbnz	r4, 8009746 <_malloc_r+0x82>
 80096f8:	4629      	mov	r1, r5
 80096fa:	4638      	mov	r0, r7
 80096fc:	f7ff ffc2 	bl	8009684 <sbrk_aligned>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	4604      	mov	r4, r0
 8009704:	d14d      	bne.n	80097a2 <_malloc_r+0xde>
 8009706:	6834      	ldr	r4, [r6, #0]
 8009708:	4626      	mov	r6, r4
 800970a:	2e00      	cmp	r6, #0
 800970c:	d140      	bne.n	8009790 <_malloc_r+0xcc>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	4631      	mov	r1, r6
 8009712:	4638      	mov	r0, r7
 8009714:	eb04 0803 	add.w	r8, r4, r3
 8009718:	f000 f878 	bl	800980c <_sbrk_r>
 800971c:	4580      	cmp	r8, r0
 800971e:	d13a      	bne.n	8009796 <_malloc_r+0xd2>
 8009720:	6821      	ldr	r1, [r4, #0]
 8009722:	3503      	adds	r5, #3
 8009724:	1a6d      	subs	r5, r5, r1
 8009726:	f025 0503 	bic.w	r5, r5, #3
 800972a:	3508      	adds	r5, #8
 800972c:	2d0c      	cmp	r5, #12
 800972e:	bf38      	it	cc
 8009730:	250c      	movcc	r5, #12
 8009732:	4629      	mov	r1, r5
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ffa5 	bl	8009684 <sbrk_aligned>
 800973a:	3001      	adds	r0, #1
 800973c:	d02b      	beq.n	8009796 <_malloc_r+0xd2>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	442b      	add	r3, r5
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	e00e      	b.n	8009764 <_malloc_r+0xa0>
 8009746:	6822      	ldr	r2, [r4, #0]
 8009748:	1b52      	subs	r2, r2, r5
 800974a:	d41e      	bmi.n	800978a <_malloc_r+0xc6>
 800974c:	2a0b      	cmp	r2, #11
 800974e:	d916      	bls.n	800977e <_malloc_r+0xba>
 8009750:	1961      	adds	r1, r4, r5
 8009752:	42a3      	cmp	r3, r4
 8009754:	6025      	str	r5, [r4, #0]
 8009756:	bf18      	it	ne
 8009758:	6059      	strne	r1, [r3, #4]
 800975a:	6863      	ldr	r3, [r4, #4]
 800975c:	bf08      	it	eq
 800975e:	6031      	streq	r1, [r6, #0]
 8009760:	5162      	str	r2, [r4, r5]
 8009762:	604b      	str	r3, [r1, #4]
 8009764:	4638      	mov	r0, r7
 8009766:	f104 060b 	add.w	r6, r4, #11
 800976a:	f000 f865 	bl	8009838 <__malloc_unlock>
 800976e:	f026 0607 	bic.w	r6, r6, #7
 8009772:	1d23      	adds	r3, r4, #4
 8009774:	1af2      	subs	r2, r6, r3
 8009776:	d0b6      	beq.n	80096e6 <_malloc_r+0x22>
 8009778:	1b9b      	subs	r3, r3, r6
 800977a:	50a3      	str	r3, [r4, r2]
 800977c:	e7b3      	b.n	80096e6 <_malloc_r+0x22>
 800977e:	6862      	ldr	r2, [r4, #4]
 8009780:	42a3      	cmp	r3, r4
 8009782:	bf0c      	ite	eq
 8009784:	6032      	streq	r2, [r6, #0]
 8009786:	605a      	strne	r2, [r3, #4]
 8009788:	e7ec      	b.n	8009764 <_malloc_r+0xa0>
 800978a:	4623      	mov	r3, r4
 800978c:	6864      	ldr	r4, [r4, #4]
 800978e:	e7b2      	b.n	80096f6 <_malloc_r+0x32>
 8009790:	4634      	mov	r4, r6
 8009792:	6876      	ldr	r6, [r6, #4]
 8009794:	e7b9      	b.n	800970a <_malloc_r+0x46>
 8009796:	230c      	movs	r3, #12
 8009798:	603b      	str	r3, [r7, #0]
 800979a:	4638      	mov	r0, r7
 800979c:	f000 f84c 	bl	8009838 <__malloc_unlock>
 80097a0:	e7a1      	b.n	80096e6 <_malloc_r+0x22>
 80097a2:	6025      	str	r5, [r4, #0]
 80097a4:	e7de      	b.n	8009764 <_malloc_r+0xa0>
 80097a6:	bf00      	nop
 80097a8:	200020a0 	.word	0x200020a0

080097ac <_realloc_r>:
 80097ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	4680      	mov	r8, r0
 80097b2:	4614      	mov	r4, r2
 80097b4:	460e      	mov	r6, r1
 80097b6:	b921      	cbnz	r1, 80097c2 <_realloc_r+0x16>
 80097b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097bc:	4611      	mov	r1, r2
 80097be:	f7ff bf81 	b.w	80096c4 <_malloc_r>
 80097c2:	b92a      	cbnz	r2, 80097d0 <_realloc_r+0x24>
 80097c4:	f7ff ff12 	bl	80095ec <_free_r>
 80097c8:	4625      	mov	r5, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d0:	f000 f838 	bl	8009844 <_malloc_usable_size_r>
 80097d4:	4284      	cmp	r4, r0
 80097d6:	4607      	mov	r7, r0
 80097d8:	d802      	bhi.n	80097e0 <_realloc_r+0x34>
 80097da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097de:	d812      	bhi.n	8009806 <_realloc_r+0x5a>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4640      	mov	r0, r8
 80097e4:	f7ff ff6e 	bl	80096c4 <_malloc_r>
 80097e8:	4605      	mov	r5, r0
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d0ed      	beq.n	80097ca <_realloc_r+0x1e>
 80097ee:	42bc      	cmp	r4, r7
 80097f0:	4622      	mov	r2, r4
 80097f2:	4631      	mov	r1, r6
 80097f4:	bf28      	it	cs
 80097f6:	463a      	movcs	r2, r7
 80097f8:	f7ff fed0 	bl	800959c <memcpy>
 80097fc:	4631      	mov	r1, r6
 80097fe:	4640      	mov	r0, r8
 8009800:	f7ff fef4 	bl	80095ec <_free_r>
 8009804:	e7e1      	b.n	80097ca <_realloc_r+0x1e>
 8009806:	4635      	mov	r5, r6
 8009808:	e7df      	b.n	80097ca <_realloc_r+0x1e>
	...

0800980c <_sbrk_r>:
 800980c:	b538      	push	{r3, r4, r5, lr}
 800980e:	4d06      	ldr	r5, [pc, #24]	; (8009828 <_sbrk_r+0x1c>)
 8009810:	2300      	movs	r3, #0
 8009812:	4604      	mov	r4, r0
 8009814:	4608      	mov	r0, r1
 8009816:	602b      	str	r3, [r5, #0]
 8009818:	f7f8 fbf6 	bl	8002008 <_sbrk>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_sbrk_r+0x1a>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_sbrk_r+0x1a>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200020a8 	.word	0x200020a8

0800982c <__malloc_lock>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__malloc_lock+0x8>)
 800982e:	f000 b811 	b.w	8009854 <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	200020ac 	.word	0x200020ac

08009838 <__malloc_unlock>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__malloc_unlock+0x8>)
 800983a:	f000 b80c 	b.w	8009856 <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	200020ac 	.word	0x200020ac

08009844 <_malloc_usable_size_r>:
 8009844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009848:	1f18      	subs	r0, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	bfbc      	itt	lt
 800984e:	580b      	ldrlt	r3, [r1, r0]
 8009850:	18c0      	addlt	r0, r0, r3
 8009852:	4770      	bx	lr

08009854 <__retarget_lock_acquire_recursive>:
 8009854:	4770      	bx	lr

08009856 <__retarget_lock_release_recursive>:
 8009856:	4770      	bx	lr

08009858 <_init>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr

08009864 <_fini>:
 8009864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009866:	bf00      	nop
 8009868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986a:	bc08      	pop	{r3}
 800986c:	469e      	mov	lr, r3
 800986e:	4770      	bx	lr
