
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08008c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  20000220  08008e78  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eb4  08008e78  00021eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac5f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfc  00000000  00000000  0003aeaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003eab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002594c  00000000  00000000  00040d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016044  00000000  00000000  000666d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d74c5  00000000  00000000  0007c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153bdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f48  00000000  00000000  00153c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a34 	.word	0x08008a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08008a34 	.word	0x08008a34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b0b8      	sub	sp, #224	; 0xe0
 800056c:	af00      	add	r7, sp, #0
	int status = NO_ERROR;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000574:	f000 ffd0 	bl	8001518 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000578:	f000 f958 	bl	800082c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800057c:	f000 faf8 	bl	8000b70 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000580:	f000 f9be 	bl	8000900 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000584:	f000 fa0e 	bl	80009a4 <MX_ADC3_Init>
	MX_CAN2_Init();
 8000588:	f000 fa5e 	bl	8000a48 <MX_CAN2_Init>
	MX_SPI1_Init();
 800058c:	f000 fa90 	bl	8000ab0 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8000590:	f000 fac4 	bl	8000b1c <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8000594:	f007 f842 	bl	800761c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t onStat[3] = { 'M', '3', '\n' };
 8000598:	4a9a      	ldr	r2, [pc, #616]	; (8000804 <main+0x29c>)
 800059a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800059e:	6812      	ldr	r2, [r2, #0]
 80005a0:	4611      	mov	r1, r2
 80005a2:	8019      	strh	r1, [r3, #0]
 80005a4:	3302      	adds	r3, #2
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	701a      	strb	r2, [r3, #0]
	uint8_t offStat[3] = { 'M', '5', '\n' };
 80005aa:	4a97      	ldr	r2, [pc, #604]	; (8000808 <main+0x2a0>)
 80005ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	8019      	strh	r1, [r3, #0]
 80005b6:	3302      	adds	r3, #2
 80005b8:	0c12      	lsrs	r2, r2, #16
 80005ba:	701a      	strb	r2, [r3, #0]
	uint8_t ssStat[3] = { 'S', 'S', '\n' };
 80005bc:	4a93      	ldr	r2, [pc, #588]	; (800080c <main+0x2a4>)
 80005be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	8019      	strh	r1, [r3, #0]
 80005c8:	3302      	adds	r3, #2
 80005ca:	0c12      	lsrs	r2, r2, #16
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t errorMsg[3] = { 'E', 'R', '\n' };
 80005ce:	4a90      	ldr	r2, [pc, #576]	; (8000810 <main+0x2a8>)
 80005d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	4611      	mov	r1, r2
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	701a      	strb	r2, [r3, #0]

	char initTx[] = "11111111111111111111"; //twenty 1s
 80005e0:	4b8c      	ldr	r3, [pc, #560]	; (8000814 <main+0x2ac>)
 80005e2:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f0:	6020      	str	r0, [r4, #0]
 80005f2:	3404      	adds	r4, #4
 80005f4:	7021      	strb	r1, [r4, #0]

	char *initTxPtr = initTx;
 80005f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80005fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	uint8_t CDCtx[50] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
 80005fe:	4a86      	ldr	r2, [pc, #536]	; (8000818 <main+0x2b0>)
 8000600:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000604:	ca07      	ldmia	r2, {r0, r1, r2}
 8000606:	c303      	stmia	r3!, {r0, r1}
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	f107 0379 	add.w	r3, r7, #121	; 0x79
 800060e:	2229      	movs	r2, #41	; 0x29
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 fd4a 	bl	80080ac <memset>

	char CDCrx[100];

	CDCrx[0] = 'a';
 8000618:	2361      	movs	r3, #97	; 0x61
 800061a:	733b      	strb	r3, [r7, #12]

	char *CDCrxPtr1 = &CDCrx[2];
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	3302      	adds	r3, #2
 8000622:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	uint32_t x = -99;
 8000626:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800062a:	60bb      	str	r3, [r7, #8]
	int rpm = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 8000632:	e00a      	b.n	800064a <main+0xe2>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS((uint8_t*) CDCrx, &x);
 8000634:	f107 0208 	add.w	r2, r7, #8
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f007 f896 	bl	8007770 <CDC_Receive_FS>
		HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f000 ffd9 	bl	80015fc <HAL_Delay>
	while (CDCrx[0] != 'i')
 800064a:	7b3b      	ldrb	r3, [r7, #12]
 800064c:	2b69      	cmp	r3, #105	; 0x69
 800064e:	d1f1      	bne.n	8000634 <main+0xcc>
	}
	CDC_Transmit_FS((uint8_t*) initTxPtr, 18);
 8000650:	2112      	movs	r1, #18
 8000652:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8000656:	f007 f89f 	bl	8007798 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Receive_FS(CDCrx, &x);
 800065a:	f107 0208 	add.w	r2, r7, #8
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f883 	bl	8007770 <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	486b      	ldr	r0, [pc, #428]	; (800081c <main+0x2b4>)
 8000670:	f001 fdf4 	bl	800225c <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f000 ffc1 	bl	80015fc <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2102      	movs	r1, #2
 800067e:	4867      	ldr	r0, [pc, #412]	; (800081c <main+0x2b4>)
 8000680:	f001 fdec 	bl	800225c <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000684:	2028      	movs	r0, #40	; 0x28
 8000686:	f000 ffb9 	bl	80015fc <HAL_Delay>

		if (CDCrx[0] == 'M')
 800068a:	7b3b      	ldrb	r3, [r7, #12]
 800068c:	2b4d      	cmp	r3, #77	; 0x4d
 800068e:	d137      	bne.n	8000700 <main+0x198>
		{
			if (CDCrx[1] == '3')
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	2b33      	cmp	r3, #51	; 0x33
 8000694:	d119      	bne.n	80006ca <main+0x162>
			{
				status = spindleFWD(&huart3);
 8000696:	4862      	ldr	r0, [pc, #392]	; (8000820 <main+0x2b8>)
 8000698:	f000 fb78 	bl	8000d8c <spindleFWD>
 800069c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
				if (status != NO_ERROR)
 80006a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <main+0x14e>
				{
					CDC_Transmit_FS(errorMsg, 3);
 80006a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80006ac:	2103      	movs	r1, #3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 f872 	bl	8007798 <CDC_Transmit_FS>
 80006b4:	e005      	b.n	80006c2 <main+0x15a>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 80006b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006ba:	2103      	movs	r1, #3
 80006bc:	4618      	mov	r0, r3
 80006be:	f007 f86b 	bl	8007798 <CDC_Transmit_FS>
				}

				HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 ff9a 	bl	80015fc <HAL_Delay>
 80006c8:	e098      	b.n	80007fc <main+0x294>

			}
			else if (CDCrx[1] == '5')
 80006ca:	7b7b      	ldrb	r3, [r7, #13]
 80006cc:	2b35      	cmp	r3, #53	; 0x35
 80006ce:	f040 8095 	bne.w	80007fc <main+0x294>
			{
				if (spindleOff(&huart3) > 0)
 80006d2:	4853      	ldr	r0, [pc, #332]	; (8000820 <main+0x2b8>)
 80006d4:	f000 fb86 	bl	8000de4 <spindleOff>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dd06      	ble.n	80006ec <main+0x184>
				{

					CDC_Transmit_FS(errorMsg, 3);
 80006de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80006e2:	2103      	movs	r1, #3
 80006e4:	4618      	mov	r0, r3
 80006e6:	f007 f857 	bl	8007798 <CDC_Transmit_FS>
 80006ea:	e005      	b.n	80006f8 <main+0x190>
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 80006ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f007 f850 	bl	8007798 <CDC_Transmit_FS>
				}
				HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 ff7f 	bl	80015fc <HAL_Delay>
 80006fe:	e07d      	b.n	80007fc <main+0x294>

			}

		}
		else if (CDCrx[0] == 'S')
 8000700:	7b3b      	ldrb	r3, [r7, #12]
 8000702:	2b53      	cmp	r3, #83	; 0x53
 8000704:	d128      	bne.n	8000758 <main+0x1f0>
		{
			HAL_Delay(100);
 8000706:	2064      	movs	r0, #100	; 0x64
 8000708:	f000 ff78 	bl	80015fc <HAL_Delay>
			CDCrx[7] = (uint8_t) NULL;
 800070c:	2300      	movs	r3, #0
 800070e:	74fb      	strb	r3, [r7, #19]
			//rounddown ok
			rpm = atoi(CDCrxPtr1) / 3;
 8000710:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8000714:	f007 fc9c 	bl	8008050 <atoi>
 8000718:	4603      	mov	r3, r0
 800071a:	4a42      	ldr	r2, [pc, #264]	; (8000824 <main+0x2bc>)
 800071c:	fb82 1203 	smull	r1, r2, r2, r3
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

			//if message fails, send error message
			if (setFreq(rpm, &huart3))
 8000728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800072c:	b29b      	uxth	r3, r3
 800072e:	493c      	ldr	r1, [pc, #240]	; (8000820 <main+0x2b8>)
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fb83 	bl	8000e3c <setFreq>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d006      	beq.n	800074a <main+0x1e2>
			{
				CDC_Transmit_FS(errorMsg, 3);
 800073c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000740:	2103      	movs	r1, #3
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f828 	bl	8007798 <CDC_Transmit_FS>
 8000748:	e058      	b.n	80007fc <main+0x294>
			}
			else
			{
				CDC_Transmit_FS(ssStat, 3);
 800074a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800074e:	2103      	movs	r1, #3
 8000750:	4618      	mov	r0, r3
 8000752:	f007 f821 	bl	8007798 <CDC_Transmit_FS>
 8000756:	e051      	b.n	80007fc <main+0x294>
			}

		}
		else if (CDCrx[0] == 'R')
 8000758:	7b3b      	ldrb	r3, [r7, #12]
 800075a:	2b52      	cmp	r3, #82	; 0x52
 800075c:	d14e      	bne.n	80007fc <main+0x294>
			uint16_t spindleI;
			uint16_t spindleRPM;

			//if no errrors set vars

			switch (masterRd(&huart3, &spindle0))
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	482f      	ldr	r0, [pc, #188]	; (8000820 <main+0x2b8>)
 8000764:	f000 fbde 	bl	8000f24 <masterRd>
 8000768:	4603      	mov	r3, r0
 800076a:	2b04      	cmp	r3, #4
 800076c:	d01a      	beq.n	80007a4 <main+0x23c>
 800076e:	2b04      	cmp	r3, #4
 8000770:	dc22      	bgt.n	80007b8 <main+0x250>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <main+0x214>
 8000776:	2b03      	cmp	r3, #3
 8000778:	d00b      	beq.n	8000792 <main+0x22a>
 800077a:	e01d      	b.n	80007b8 <main+0x250>
			{
			case 0:
//				spindleI   = spindle0.current;
//				spindleRPM = spindle0.rpm;

				spindleI = altGetI();
 800077c:	f000 fc80 	bl	8001080 <altGetI>
 8000780:	4603      	mov	r3, r0
 8000782:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				spindleRPM = altGetRPM();
 8000786:	f000 fc87 	bl	8001098 <altGetRPM>
 800078a:	4603      	mov	r3, r0
 800078c:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
				break;
 8000790:	e01b      	b.n	80007ca <main+0x262>
			case 3:
				spindleI = 777;
 8000792:	f240 3309 	movw	r3, #777	; 0x309
 8000796:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				spindleRPM = 44666;
 800079a:	f64a 637a 	movw	r3, #44666	; 0xae7a
 800079e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
				break;
 80007a2:	e012      	b.n	80007ca <main+0x262>
			case 4:
				//CRC failed
				spindleI = 888;
 80007a4:	f44f 735e 	mov.w	r3, #888	; 0x378
 80007a8:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				spindleRPM = getRxCRC();
 80007ac:	f000 fc80 	bl	80010b0 <getRxCRC>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
				break;
 80007b6:	e008      	b.n	80007ca <main+0x262>
			default:
				spindleI = 999;
 80007b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80007bc:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
				spindleRPM = 44444;
 80007c0:	f64a 539c 	movw	r3, #44444	; 0xad9c
 80007c4:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
				break;
 80007c8:	bf00      	nop
//			else if (condition) {
//
//			}

			//11 bytes long
			sprintf(CDCtx, "R%05d,%03d\n", spindleRPM, spindleI);
 80007ca:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 80007ce:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80007d2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80007d6:	4914      	ldr	r1, [pc, #80]	; (8000828 <main+0x2c0>)
 80007d8:	f007 fc70 	bl	80080bc <siprintf>

			CDC_Transmit_FS(CDCtx, 11);
 80007dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e0:	210b      	movs	r1, #11
 80007e2:	4618      	mov	r0, r3
 80007e4:	f006 ffd8 	bl	8007798 <CDC_Transmit_FS>

			//delay needed since CDC tx is non blocking and OS is weird
			HAL_Delay(20);
 80007e8:	2014      	movs	r0, #20
 80007ea:	f000 ff07 	bl	80015fc <HAL_Delay>
			CDC_Transmit_FS(getCheck(), 11);
 80007ee:	f000 fb8f 	bl	8000f10 <getCheck>
 80007f2:	4603      	mov	r3, r0
 80007f4:	210b      	movs	r1, #11
 80007f6:	4618      	mov	r0, r3
 80007f8:	f006 ffce 	bl	8007798 <CDC_Transmit_FS>
		}

		//reset buffer
		CDCrx[0] = 'a';
 80007fc:	2361      	movs	r3, #97	; 0x61
 80007fe:	733b      	strb	r3, [r7, #12]
		CDC_Receive_FS(CDCrx, &x);
 8000800:	e72b      	b.n	800065a <main+0xf2>
 8000802:	bf00      	nop
 8000804:	08008a58 	.word	0x08008a58
 8000808:	08008a5c 	.word	0x08008a5c
 800080c:	08008a60 	.word	0x08008a60
 8000810:	08008a64 	.word	0x08008a64
 8000814:	08008a68 	.word	0x08008a68
 8000818:	08008a80 	.word	0x08008a80
 800081c:	40020800 	.word	0x40020800
 8000820:	20000470 	.word	0x20000470
 8000824:	55555556 	.word	0x55555556
 8000828:	08008a4c 	.word	0x08008a4c

0800082c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	; 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f007 fc36 	bl	80080ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <SystemClock_Config+0xcc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <SystemClock_Config+0xcc>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <SystemClock_Config+0xd0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800089a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800089c:	2308      	movs	r3, #8
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008a0:	23a8      	movs	r3, #168	; 0xa8
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fe6f 	bl	8003594 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80008bc:	f000 f9ee 	bl	8000c9c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2105      	movs	r1, #5
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 f8d0 	bl	8003a84 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80008ea:	f000 f9d7 	bl	8000c9c <Error_Handler>
	}
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC2_Init+0x98>)
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_ADC2_Init+0x9c>)
 8000916:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ADC2_Init+0x98>)
 800091a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800091e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC2_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ADC2_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ADC2_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC2_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ADC2_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC2_Init+0x98>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_ADC2_Init+0xa0>)
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC2_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_ADC2_Init+0x98>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_ADC2_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_ADC2_Init+0x98>)
 800095c:	2201      	movs	r2, #1
 800095e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_ADC2_Init+0x98>)
 8000962:	f000 fe6f 	bl	8001644 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 800096c:	f000 f996 	bl	8000c9c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000970:	2301      	movs	r3, #1
 8000972:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_ADC2_Init+0x98>)
 8000982:	f000 fea3 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 800098c:	f000 f986 	bl	8000c9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200004b4 	.word	0x200004b4
 800099c:	40012100 	.word	0x40012100
 80009a0:	0f000001 	.word	0x0f000001

080009a4 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <MX_ADC3_Init+0x9c>)
 80009ba:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009c2:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_ADC3_Init+0xa0>)
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_ADC3_Init+0x98>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_ADC3_Init+0x98>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_ADC3_Init+0x98>)
 8000a06:	f000 fe1d 	bl	8001644 <HAL_ADC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8000a10:	f000 f944 	bl	8000c9c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000a14:	2303      	movs	r3, #3
 8000a16:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_ADC3_Init+0x98>)
 8000a26:	f000 fe51 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8000a30:	f000 f934 	bl	8000c9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000524 	.word	0x20000524
 8000a40:	40012200 	.word	0x40012200
 8000a44:	0f000001 	.word	0x0f000001

08000a48 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <MX_CAN2_Init+0x64>)
 8000a50:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a54:	2210      	movs	r2, #16
 8000a56:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a70:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_CAN2_Init+0x60>)
 8000a96:	f001 f837 	bl	8001b08 <HAL_CAN_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8000aa0:	f000 f8fc 	bl	8000c9c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200004fc 	.word	0x200004fc
 8000aac:	40006800 	.word	0x40006800

08000ab0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_SPI1_Init+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000adc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ae0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000afc:	220a      	movs	r2, #10
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SPI1_Init+0x64>)
 8000b02:	f003 f9b9 	bl	8003e78 <HAL_SPI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000b0c:	f000 f8c6 	bl	8000c9c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000056c 	.word	0x2000056c
 8000b18:	40013000 	.word	0x40013000

08000b1c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART3_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b2c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART3_UART_Init+0x4c>)
 8000b54:	f003 fa19 	bl	8003f8a <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000b5e:	f000 f89d 	bl	8000c9c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000470 	.word	0x20000470
 8000b6c:	40004800 	.word	0x40004800

08000b70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b40      	ldr	r3, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a31      	ldr	r2, [pc, #196]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a2a      	ldr	r2, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_GPIO_Init+0x11c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_GPIO_Init+0x120>)
 8000c18:	f001 fb20 	bl	800225c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2102      	movs	r1, #2
 8000c20:	481c      	ldr	r0, [pc, #112]	; (8000c94 <MX_GPIO_Init+0x124>)
 8000c22:	f001 fb1b 	bl	800225c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000c26:	2200      	movs	r2, #0
 8000c28:	211f      	movs	r1, #31
 8000c2a:	481b      	ldr	r0, [pc, #108]	; (8000c98 <MX_GPIO_Init+0x128>)
 8000c2c:	f001 fb16 	bl	800225c <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4812      	ldr	r0, [pc, #72]	; (8000c90 <MX_GPIO_Init+0x120>)
 8000c48:	f001 f96c 	bl	8001f24 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_GPIO_Init+0x124>)
 8000c64:	f001 f95e 	bl	8001f24 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000c68:	231f      	movs	r3, #31
 8000c6a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x128>)
 8000c80:	f001 f950 	bl	8001f24 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <sendData8>:

uint16_t packetCRC;
uint16_t rxCRC;

void sendData8(UART_HandleTypeDef *huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	while(HAL_UART_Receive(huart, rx485, 1, 1) != HAL_TIMEOUT)
 8000cb0:	bf00      	nop
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <sendData8+0x4c>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f003 fa45 	bl	8004148 <HAL_UART_Receive>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d1f6      	bne.n	8000cb2 <sendData8+0xa>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 9600 baud or 1.2KB/s --- 8 bytes takes ~10ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	480b      	ldr	r0, [pc, #44]	; (8000cf8 <sendData8+0x50>)
 8000cca:	f001 fac7 	bl	800225c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000cce:	2005      	movs	r0, #5
 8000cd0:	f000 fc94 	bl	80015fc <HAL_Delay>

	//blocking transmit 15ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 15);
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4908      	ldr	r1, [pc, #32]	; (8000cfc <sendData8+0x54>)
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f003 f9a2 	bl	8004024 <HAL_UART_Transmit>
	//HAL_Delay(5);
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <sendData8+0x50>)
 8000ce6:	f001 fab9 	bl	800225c <HAL_GPIO_WritePin>

}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	20000000 	.word	0x20000000

08000d00 <appendCRC8>:


void appendCRC8()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000d06:	2106      	movs	r1, #6
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <appendCRC8+0x38>)
 8000d0a:	f000 f8c9 	bl	8000ea0 <crc_chk_value>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000d14:	1cbb      	adds	r3, r7, #2
 8000d16:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <appendCRC8+0x38>)
 8000d1e:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <appendCRC8+0x38>)
 8000d2c:	71da      	strb	r2, [r3, #7]
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000

08000d3c <checkEcho8>:
//TODO
//Check to see if we need to receive 10 bytes or not

//returns 1 if fail, 0 if success
int checkEcho8(UART_HandleTypeDef *huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, rx485, 8, 50);
 8000d44:	2332      	movs	r3, #50	; 0x32
 8000d46:	2208      	movs	r2, #8
 8000d48:	490e      	ldr	r1, [pc, #56]	; (8000d84 <checkEcho8+0x48>)
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f003 f9fc 	bl	8004148 <HAL_UART_Receive>
	for (int i = 0; i < 8; i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	e00e      	b.n	8000d74 <checkEcho8+0x38>
	{
		if (wrMsg[i] != rx485[i])
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <checkEcho8+0x4c>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <checkEcho8+0x48>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	440b      	add	r3, r1
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d001      	beq.n	8000d6e <checkEcho8+0x32>
		{
			return 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e006      	b.n	8000d7c <checkEcho8+0x40>
	for (int i = 0; i < 8; i++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	dded      	ble.n	8000d56 <checkEcho8+0x1a>
		}
	}
	return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000000 	.word	0x20000000

08000d8c <spindleFWD>:



//sends message to turn on spindle, returns 1 if success, 0 if failed
int spindleFWD(UART_HandleTypeDef *huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <spindleFWD+0x54>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <spindleFWD+0x54>)
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <spindleFWD+0x54>)
 8000da2:	2210      	movs	r2, #16
 8000da4:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <spindleFWD+0x54>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <spindleFWD+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <spindleFWD+0x54>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <spindleFWD+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <spindleFWD+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000dc4:	f7ff ff9c 	bl	8000d00 <appendCRC8>

	sendData8(huart);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff6d 	bl	8000ca8 <sendData8>

	return checkEcho8(huart);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffb4 	bl	8000d3c <checkEcho8>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000000 	.word	0x20000000

08000de4 <spindleOff>:

int spindleOff(UART_HandleTypeDef *huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <spindleOff+0x54>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <spindleOff+0x54>)
 8000df4:	2206      	movs	r2, #6
 8000df6:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <spindleOff+0x54>)
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <spindleOff+0x54>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <spindleOff+0x54>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <spindleOff+0x54>)
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <spindleOff+0x54>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <spindleOff+0x54>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000e1c:	f7ff ff70 	bl	8000d00 <appendCRC8>

	sendData8(huart);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff41 	bl	8000ca8 <sendData8>

	return checkEcho8(huart);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ff88 	bl	8000d3c <checkEcho8>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <setFreq>:

int setFreq(uint16_t freq, UART_HandleTypeDef *huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <setFreq+0x60>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <setFreq+0x60>)
 8000e50:	2206      	movs	r2, #6
 8000e52:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <setFreq+0x60>)
 8000e56:	2210      	movs	r2, #16
 8000e58:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <setFreq+0x60>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <setFreq+0x60>)
 8000e6a:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <setFreq+0x60>)
 8000e72:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <setFreq+0x60>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <setFreq+0x60>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000e80:	f7ff ff3e 	bl	8000d00 <appendCRC8>

	sendData8(huart);
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f7ff ff0f 	bl	8000ca8 <sendData8>

	return checkEcho8(huart);
 8000e8a:	6838      	ldr	r0, [r7, #0]
 8000e8c:	f7ff ff56 	bl	8000d3c <checkEcho8>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb0:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8000eb2:	e01f      	b.n	8000ef4 <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	4053      	eors	r3, r2
 8000ec2:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	e011      	b.n	8000eee <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8000eca:	89fb      	ldrh	r3, [r7, #14]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <crc_chk_value+0x6c>)
 8000edc:	4053      	eors	r3, r2
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	e002      	b.n	8000ee8 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	085b      	lsrs	r3, r3, #1
 8000ee6:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	ddea      	ble.n	8000eca <crc_chk_value+0x2a>
	while (length--)
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	1e5a      	subs	r2, r3, #1
 8000ef8:	70fa      	strb	r2, [r7, #3]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1da      	bne.n	8000eb4 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	ffffa001 	.word	0xffffa001

08000f10 <getCheck>:

uint8_t* getCheck()
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
	return rx485;
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <getCheck+0x10>)
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000008 	.word	0x20000008

08000f24 <masterRd>:
{
	return wrMsg;
}

int masterRd(UART_HandleTypeDef *huart, struct SpindleData *spindle0)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]

	wrMsg[0] = 0x01;
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <masterRd+0x144>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000f34:	4b4c      	ldr	r3, [pc, #304]	; (8001068 <masterRd+0x144>)
 8000f36:	2203      	movs	r2, #3
 8000f38:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8000f3a:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <masterRd+0x144>)
 8000f3c:	22d0      	movs	r2, #208	; 0xd0
 8000f3e:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <masterRd+0x144>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <masterRd+0x144>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <masterRd+0x144>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <masterRd+0x144>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <masterRd+0x144>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000f5e:	f7ff fecf 	bl	8000d00 <appendCRC8>


	sendData8(huart);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fea0 	bl	8000ca8 <sendData8>

	//TODO check for rx errors
	if(HAL_UART_Receive(huart, rx485, 11, 200) == HAL_TIMEOUT)
 8000f68:	23c8      	movs	r3, #200	; 0xc8
 8000f6a:	220b      	movs	r2, #11
 8000f6c:	493f      	ldr	r1, [pc, #252]	; (800106c <masterRd+0x148>)
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f003 f8ea 	bl	8004148 <HAL_UART_Receive>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d101      	bne.n	8000f7e <masterRd+0x5a>
	{
		return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e070      	b.n	8001060 <masterRd+0x13c>
	}

	rxCRC = crc_chk_value(rx485, 9);
 8000f7e:	2109      	movs	r1, #9
 8000f80:	483a      	ldr	r0, [pc, #232]	; (800106c <masterRd+0x148>)
 8000f82:	f7ff ff8d 	bl	8000ea0 <crc_chk_value>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b39      	ldr	r3, [pc, #228]	; (8001070 <masterRd+0x14c>)
 8000f8c:	801a      	strh	r2, [r3, #0]


	//lmao its midnight and i realized endinenness is fuc ked
	packetCRC = rx485[10];
 8000f8e:	4b37      	ldr	r3, [pc, #220]	; (800106c <masterRd+0x148>)
 8000f90:	7a9b      	ldrb	r3, [r3, #10]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <masterRd+0x150>)
 8000f96:	801a      	strh	r2, [r3, #0]
	packetCRC <<= 8;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <masterRd+0x150>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b34      	ldr	r3, [pc, #208]	; (8001074 <masterRd+0x150>)
 8000fa2:	801a      	strh	r2, [r3, #0]
	packetCRC |= rx485[9];
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <masterRd+0x148>)
 8000fa6:	7a5b      	ldrb	r3, [r3, #9]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <masterRd+0x150>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <masterRd+0x150>)
 8000fb4:	801a      	strh	r2, [r3, #0]

	if (packetCRC != rxCRC)
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <masterRd+0x150>)
 8000fb8:	881a      	ldrh	r2, [r3, #0]
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <masterRd+0x14c>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d001      	beq.n	8000fc6 <masterRd+0xa2>
	{
		//error code 4 - CRC failed
		return 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e04c      	b.n	8001060 <masterRd+0x13c>

//	spindle0->current = rx485[3];
//	spindle0->current <<= 8;
//	spindle0->current |= rx485[4];

	spindle0->current = (rx485[3] << 8) | rx485[4];
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <masterRd+0x148>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <masterRd+0x148>)
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	801a      	strh	r2, [r3, #0]

	//TODO delete whichever method doesnt work
	altI = (rx485[3] << 8) | rx485[4];
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <masterRd+0x148>)
 8000fe0:	78db      	ldrb	r3, [r3, #3]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <masterRd+0x148>)
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <masterRd+0x154>)
 8000ff4:	801a      	strh	r2, [r3, #0]

	spindle0->voltage = rx485[5];
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <masterRd+0x148>)
 8000ff8:	795b      	ldrb	r3, [r3, #5]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	805a      	strh	r2, [r3, #2]
	spindle0->voltage <<= 8;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	885b      	ldrh	r3, [r3, #2]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b29a      	uxth	r2, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	805a      	strh	r2, [r3, #2]
	spindle0->voltage |= rx485[6];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	885a      	ldrh	r2, [r3, #2]
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <masterRd+0x148>)
 8001012:	799b      	ldrb	r3, [r3, #6]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b29a      	uxth	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	805a      	strh	r2, [r3, #2]

	spindle0->rpm = rx485[7];
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <masterRd+0x148>)
 8001020:	79db      	ldrb	r3, [r3, #7]
 8001022:	b29a      	uxth	r2, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	809a      	strh	r2, [r3, #4]
	spindle0->rpm <<= 8;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	889b      	ldrh	r3, [r3, #4]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b29a      	uxth	r2, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	809a      	strh	r2, [r3, #4]
	spindle0->rpm |= rx485[8];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	889a      	ldrh	r2, [r3, #4]
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <masterRd+0x148>)
 800103a:	7a1b      	ldrb	r3, [r3, #8]
 800103c:	b29b      	uxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b29a      	uxth	r2, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	809a      	strh	r2, [r3, #4]

	//TODO delete whichever method doesnt work
	altRPM = (rx485[7] << 8) | rx485[8];
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <masterRd+0x148>)
 8001048:	79db      	ldrb	r3, [r3, #7]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <masterRd+0x148>)
 8001050:	7a1b      	ldrb	r3, [r3, #8]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <masterRd+0x158>)
 800105c:	801a      	strh	r2, [r3, #0]
	return 0;
 800105e:	2300      	movs	r3, #0

}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008
 8001070:	200005c4 	.word	0x200005c4
 8001074:	200005c6 	.word	0x200005c6
 8001078:	2000023e 	.word	0x2000023e
 800107c:	2000023c 	.word	0x2000023c

08001080 <altGetI>:


uint16_t altGetI()
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return altI;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <altGetI+0x14>)
 8001086:	881b      	ldrh	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000023e 	.word	0x2000023e

08001098 <altGetRPM>:
uint16_t altGetRPM()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	return altRPM;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <altGetRPM+0x14>)
 800109e:	881b      	ldrh	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000023c 	.word	0x2000023c

080010b0 <getRxCRC>:
{
	return packetCRC;
}

uint16_t getRxCRC()
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	return rxCRC;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <getRxCRC+0x14>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200005c4 	.word	0x200005c4

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_MspInit+0x4c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x4c>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <HAL_ADC_MspInit+0xd8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d128      	bne.n	800118c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a2c      	ldr	r2, [pc, #176]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 8001144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001172:	2306      	movs	r3, #6
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	481c      	ldr	r0, [pc, #112]	; (80011f8 <HAL_ADC_MspInit+0xe0>)
 8001186:	f000 fecd 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800118a:	e02c      	b.n	80011e6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <HAL_ADC_MspInit+0xe4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d127      	bne.n	80011e6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 80011a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_ADC_MspInit+0xdc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011ce:	2308      	movs	r3, #8
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d2:	2303      	movs	r3, #3
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_ADC_MspInit+0xe0>)
 80011e2:	f000 fe9f 	bl	8001f24 <HAL_GPIO_Init>
}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	; 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40012100 	.word	0x40012100
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40012200 	.word	0x40012200

08001200 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_CAN_MspInit+0xa0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d13a      	bne.n	8001298 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a1e      	ldr	r2, [pc, #120]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 800122c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_CAN_MspInit+0xa4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001276:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001288:	2309      	movs	r3, #9
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_CAN_MspInit+0xa8>)
 8001294:	f000 fe46 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40006800 	.word	0x40006800
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_SPI_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12b      	bne.n	8001326 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23f0      	movs	r3, #240	; 0xf0
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 8001322:	f000 fdff 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40013000 	.word	0x40013000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12c      	bne.n	80013b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_UART_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001396:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013a8:	2307      	movs	r3, #7
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_UART_MspInit+0x8c>)
 80013b4:	f000 fdb6 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004800 	.word	0x40004800
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020400 	.word	0x40020400

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 f8d0 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <OTG_FS_IRQHandler+0x10>)
 8001426:	f001 f882 	bl	800252e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20001a9c 	.word	0x20001a9c

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f006 fdf8 	bl	8008058 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20020000 	.word	0x20020000
 8001494:	00000400 	.word	0x00000400
 8001498:	20000240 	.word	0x20000240
 800149c:	20001eb8 	.word	0x20001eb8

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ca:	490e      	ldr	r1, [pc, #56]	; (8001504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e0:	4c0b      	ldr	r4, [pc, #44]	; (8001510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ee:	f7ff ffd7 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f006 fdb7 	bl	8008064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff f837 	bl	8000568 <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001508:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 800150c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001510:	20001eb4 	.word	0x20001eb4

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 fcad 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fdbc 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fcc5 	bl	8001f0a <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 fc8d 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000003c 	.word	0x2000003c
 80015b4:	20000044 	.word	0x20000044
 80015b8:	20000040 	.word	0x20000040

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000044 	.word	0x20000044
 80015e0:	200005c8 	.word	0x200005c8

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200005c8 	.word	0x200005c8

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000044 	.word	0x20000044

08001644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e033      	b.n	80016c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fd58 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800168a:	f023 0302 	bic.w	r3, r3, #2
 800168e:	f043 0202 	orr.w	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f93a 	bl	8001910 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
 80016b2:	e001      	b.n	80016b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e105      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x228>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b09      	cmp	r3, #9
 80016f6:	d925      	bls.n	8001744 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68d9      	ldr	r1, [r3, #12]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3b1e      	subs	r3, #30
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43da      	mvns	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	400a      	ands	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	4603      	mov	r3, r0
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4403      	add	r3, r0
 8001736:	3b1e      	subs	r3, #30
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	e022      	b.n	800178a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6919      	ldr	r1, [r3, #16]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	2207      	movs	r2, #7
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	b29b      	uxth	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4403      	add	r3, r0
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b06      	cmp	r3, #6
 8001790:	d824      	bhi.n	80017dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	221f      	movs	r2, #31
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	400a      	ands	r2, r1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b05      	subs	r3, #5
 80017ce:	fa00 f203 	lsl.w	r2, r0, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
 80017da:	e04c      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d824      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	3b23      	subs	r3, #35	; 0x23
 80017f6:	221f      	movs	r2, #31
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43da      	mvns	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	400a      	ands	r2, r1
 8001804:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b23      	subs	r3, #35	; 0x23
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
 800182c:	e023      	b.n	8001876 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b41      	subs	r3, #65	; 0x41
 8001840:	221f      	movs	r2, #31
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	3b41      	subs	r3, #65	; 0x41
 800186a:	fa00 f203 	lsl.w	r2, r0, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_ADC_ConfigChannel+0x234>)
 8001878:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	; (8001904 <HAL_ADC_ConfigChannel+0x238>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d109      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b12      	cmp	r3, #18
 800188a:	d105      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_ADC_ConfigChannel+0x238>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d123      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x1e6>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d11b      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d111      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x23c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_ADC_ConfigChannel+0x240>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	0c9a      	lsrs	r2, r3, #18
 80018d2:	4613      	mov	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000
 8001908:	2000003c 	.word	0x2000003c
 800190c:	431bde83 	.word	0x431bde83

08001910 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <ADC_Init+0x1f0>)
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	431a      	orrs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	021a      	lsls	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800198a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <ADC_Init+0x1f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d022      	beq.n	80019ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	e00f      	b.n	8001a0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0202 	bic.w	r2, r2, #2
 8001a1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
 8001a28:	005a      	lsls	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	3b01      	subs	r3, #1
 8001a68:	035a      	lsls	r2, r3, #13
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e007      	b.n	8001a84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	051a      	lsls	r2, r3, #20
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac6:	025a      	lsls	r2, r3, #9
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6899      	ldr	r1, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	029a      	lsls	r2, r3, #10
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0ed      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fb6a 	bl	8001200 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0202 	bic.w	r2, r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3c:	f7ff fd52 	bl	80015e4 <HAL_GetTick>
 8001b40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b42:	e012      	b.n	8001b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b44:	f7ff fd4e 	bl	80015e4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b0a      	cmp	r3, #10
 8001b50:	d90b      	bls.n	8001b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2205      	movs	r2, #5
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0c5      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e5      	bne.n	8001b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b88:	f7ff fd2c 	bl	80015e4 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8e:	e012      	b.n	8001bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b90:	f7ff fd28 	bl	80015e4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d90b      	bls.n	8001bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e09f      	b.n	8001cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0e5      	beq.n	8001b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e1b      	ldrb	r3, [r3, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7e5b      	ldrb	r3, [r3, #25]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e9b      	ldrb	r3, [r3, #26]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0220 	bic.w	r2, r2, #32
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7edb      	ldrb	r3, [r3, #27]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0210 	bic.w	r2, r2, #16
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0210 	orr.w	r2, r2, #16
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0208 	orr.w	r2, r2, #8
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0208 	bic.w	r2, r2, #8
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7f5b      	ldrb	r3, [r3, #29]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0204 	orr.w	r2, r2, #4
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0204 	bic.w	r2, r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	ea42 0103 	orr.w	r1, r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	; (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff3e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff31 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e16b      	b.n	8002218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 815a 	bne.w	8002212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d005      	beq.n	8001f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d130      	bne.n	8001fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0201 	and.w	r2, r3, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d017      	beq.n	8002014 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d123      	bne.n	8002068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	08da      	lsrs	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3208      	adds	r2, #8
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80b4 	beq.w	8002212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_GPIO_Init+0x30c>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <HAL_GPIO_Init+0x30c>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_GPIO_Init+0x30c>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <HAL_GPIO_Init+0x310>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_GPIO_Init+0x314>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x226>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_GPIO_Init+0x318>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a50      	ldr	r2, [pc, #320]	; (8002240 <HAL_GPIO_Init+0x31c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x320>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x324>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_GPIO_Init+0x328>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <HAL_GPIO_Init+0x32c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_GPIO_Init+0x330>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x20a>
 800212a:	2307      	movs	r3, #7
 800212c:	e00e      	b.n	800214c <HAL_GPIO_Init+0x228>
 800212e:	2308      	movs	r3, #8
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002132:	2306      	movs	r3, #6
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x228>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x228>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x228>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x310>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_GPIO_Init+0x334>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218e:	4a32      	ldr	r2, [pc, #200]	; (8002258 <HAL_GPIO_Init+0x334>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002194:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_GPIO_Init+0x334>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_GPIO_Init+0x334>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x334>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_GPIO_Init+0x334>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_GPIO_Init+0x334>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_GPIO_Init+0x334>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f ae90 	bls.w	8001f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40021400 	.word	0x40021400
 8002250:	40021800 	.word	0x40021800
 8002254:	40021c00 	.word	0x40021c00
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800228e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002290:	b08f      	sub	sp, #60	; 0x3c
 8002292:	af0a      	add	r7, sp, #40	; 0x28
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e10f      	b.n	80024c0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f005 fbb4 	bl	8007a28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fafb 	bl	80048da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	687e      	ldr	r6, [r7, #4]
 80022ec:	466d      	mov	r5, sp
 80022ee:	f106 0410 	add.w	r4, r6, #16
 80022f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002302:	1d33      	adds	r3, r6, #4
 8002304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f002 f9d2 	bl	80046b0 <USB_CoreInit>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0d0      	b.n	80024c0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fae9 	bl	80048fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e04a      	b.n	80023c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	333d      	adds	r3, #61	; 0x3d
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333c      	adds	r3, #60	; 0x3c
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	b298      	uxth	r0, r3
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3342      	adds	r3, #66	; 0x42
 800236c:	4602      	mov	r2, r0
 800236e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	333f      	adds	r3, #63	; 0x3f
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	3344      	adds	r3, #68	; 0x44
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3348      	adds	r3, #72	; 0x48
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ac:	7bfa      	ldrb	r2, [r7, #15]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3350      	adds	r3, #80	; 0x50
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	3301      	adds	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d3af      	bcc.n	8002330 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e044      	b.n	8002460 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	440b      	add	r3, r1
 80023e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d3b5      	bcc.n	80023d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	687e      	ldr	r6, [r7, #4]
 8002472:	466d      	mov	r5, sp
 8002474:	f106 0410 	add.w	r4, r6, #16
 8002478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002484:	e885 0003 	stmia.w	r5, {r0, r1}
 8002488:	1d33      	adds	r3, r6, #4
 800248a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	f002 fa5f 	bl	8004950 <USB_DevInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e00d      	b.n	80024c0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 faa7 	bl	8005a0c <USB_DevDisconnect>

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_PCD_Start+0x1c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e020      	b.n	8002526 <HAL_PCD_Start+0x5e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d109      	bne.n	8002508 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d005      	beq.n	8002508 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 f9d3 	bl	80048b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fa57 	bl	80059ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800252e:	b590      	push	{r4, r7, lr}
 8002530:	b08d      	sub	sp, #52	; 0x34
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 fb15 	bl	8005b74 <USB_GetMode>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 839d 	bne.w	8002c8c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fa79 	bl	8005a4e <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8393 	beq.w	8002c8a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fa70 	bl	8005a4e <USB_ReadInterrupts>
 800256e:	4603      	mov	r3, r0
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d107      	bne.n	8002588 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f002 0202 	and.w	r2, r2, #2
 8002586:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fa5e 	bl	8005a4e <USB_ReadInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b10      	cmp	r3, #16
 800259a:	d161      	bne.n	8002660 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0210 	bic.w	r2, r2, #16
 80025aa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	3304      	adds	r3, #4
 80025ca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d124      	bne.n	8002622 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d035      	beq.n	8002650 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a38      	ldr	r0, [r7, #32]
 80025f8:	f003 f8c4 	bl	8005784 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002608:	441a      	add	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800261a:	441a      	add	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	619a      	str	r2, [r3, #24]
 8002620:	e016      	b.n	8002650 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	0c5b      	lsrs	r3, r3, #17
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	2b06      	cmp	r3, #6
 800262c:	d110      	bne.n	8002650 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002634:	2208      	movs	r2, #8
 8002636:	4619      	mov	r1, r3
 8002638:	6a38      	ldr	r0, [r7, #32]
 800263a:	f003 f8a3 	bl	8005784 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264a:	441a      	add	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0210 	orr.w	r2, r2, #16
 800265e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 f9f2 	bl	8005a4e <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002674:	d16e      	bne.n	8002754 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f9f8 	bl	8005a74 <USB_ReadDevAllOutEpInterrupt>
 8002684:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002686:	e062      	b.n	800274e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d057      	beq.n	8002742 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f003 fa1d 	bl	8005adc <USB_ReadDevOutEPInterrupt>
 80026a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00c      	beq.n	80026c8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ba:	461a      	mov	r2, r3
 80026bc:	2301      	movs	r3, #1
 80026be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fdb0 	bl	8003228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026de:	461a      	mov	r2, r3
 80026e0:	2308      	movs	r3, #8
 80026e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 feaa 	bl	8003440 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002702:	461a      	mov	r2, r3
 8002704:	2310      	movs	r3, #16
 8002706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	2320      	movs	r3, #32
 8002722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d199      	bne.n	8002688 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f978 	bl	8005a4e <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002768:	f040 80c0 	bne.w	80028ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 f999 	bl	8005aa8 <USB_ReadDevAllInEpInterrupt>
 8002776:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800277c:	e0b2      	b.n	80028e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a7 	beq.w	80028d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f003 f9bf 	bl	8005b18 <USB_ReadDevInEPInterrupt>
 800279a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d057      	beq.n	8002856 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	2201      	movs	r2, #1
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c6:	4013      	ands	r3, r2
 80027c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	2301      	movs	r3, #1
 80027da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d132      	bne.n	800284a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	3348      	adds	r3, #72	; 0x48
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4403      	add	r3, r0
 8002804:	3344      	adds	r3, #68	; 0x44
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4419      	add	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4403      	add	r3, r0
 8002818:	3348      	adds	r3, #72	; 0x48
 800281a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2b00      	cmp	r3, #0
 8002820:	d113      	bne.n	800284a <HAL_PCD_IRQHandler+0x31c>
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	3350      	adds	r3, #80	; 0x50
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002842:	461a      	mov	r2, r3
 8002844:	2101      	movs	r1, #1
 8002846:	f003 f9c7 	bl	8005bd8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f005 f96a 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286c:	461a      	mov	r2, r3
 800286e:	2308      	movs	r3, #8
 8002870:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002888:	461a      	mov	r2, r3
 800288a:	2310      	movs	r3, #16
 800288c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a4:	461a      	mov	r2, r3
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c0:	461a      	mov	r2, r3
 80028c2:	2302      	movs	r3, #2
 80028c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fc1b 	bl	800310e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	3301      	adds	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f47f af49 	bne.w	800277e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 f8ac 	bl	8005a4e <USB_ReadInterrupts>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002900:	d122      	bne.n	8002948 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002928:	2100      	movs	r1, #0
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fe26 	bl	800357c <HAL_PCDEx_LPM_Callback>
 8002930:	e002      	b.n	8002938 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f005 f970 	bl	8007c18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f003 f87e 	bl	8005a4e <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295c:	d112      	bne.n	8002984 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f005 f92c 	bl	8007bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002982:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 f860 	bl	8005a4e <USB_ReadInterrupts>
 800298e:	4603      	mov	r3, r0
 8002990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002998:	f040 80c7 	bne.w	8002b2a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2110      	movs	r1, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 f92e 	bl	8004c18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c0:	e056      	b.n	8002a70 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ce:	461a      	mov	r2, r3
 80029d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e6:	0151      	lsls	r1, r2, #5
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	440a      	add	r2, r1
 80029ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	461a      	mov	r2, r3
 8002a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a28:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3a:	0151      	lsls	r1, r2, #5
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	440a      	add	r2, r1
 8002a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a48:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	0151      	lsls	r1, r2, #5
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	440a      	add	r2, r1
 8002a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a68:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d3a3      	bcc.n	80029c2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a8c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d016      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa6:	f043 030b 	orr.w	r3, r3, #11
 8002aaa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abc:	f043 030b 	orr.w	r3, r3, #11
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	e015      	b.n	8002af0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ada:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f043 030b 	orr.w	r3, r3, #11
 8002aee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002afe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b02:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b14:	461a      	mov	r2, r3
 8002b16:	f003 f85f 	bl	8005bd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695a      	ldr	r2, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 ff8d 	bl	8005a4e <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3e:	d124      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 f823 	bl	8005b90 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 f8c3 	bl	8004cda <USB_GetDevSpeed>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681c      	ldr	r4, [r3, #0]
 8002b60:	f001 f956 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8002b64:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f001 fe00 	bl	8004774 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 f800 	bl	8007b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 ff5d 	bl	8005a4e <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f004 ffdd 	bl	8007b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f002 0208 	and.w	r2, r2, #8
 8002bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f002 ff48 	bl	8005a4e <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc8:	d10f      	bne.n	8002bea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f005 f83f 	bl	8007c58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 ff2d 	bl	8005a4e <USB_ReadInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bfe:	d10f      	bne.n	8002c20 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f005 f812 	bl	8007c34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 ff12 	bl	8005a4e <USB_ReadInterrupts>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c34:	d10a      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f005 f820 	bl	8007c7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fefc 	bl	8005a4e <USB_ReadInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d115      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f005 f810 	bl	8007c98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e000      	b.n	8002c8c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002c8a:	bf00      	nop
    }
  }
}
 8002c8c:	3734      	adds	r7, #52	; 0x34
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}

08002c92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_SetAddress+0x1a>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e013      	b.n	8002cd4 <HAL_PCD_SetAddress+0x42>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f002 fe5a 	bl	800597e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	70fb      	strb	r3, [r7, #3]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	803b      	strh	r3, [r7, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da0f      	bge.n	8002d22 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3338      	adds	r3, #56	; 0x38
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	705a      	strb	r2, [r3, #1]
 8002d20:	e00f      	b.n	8002d42 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d4e:	883a      	ldrh	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	78ba      	ldrb	r2, [r7, #2]
 8002d58:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d6c:	78bb      	ldrb	r3, [r7, #2]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d102      	bne.n	8002d78 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_PCD_EP_Open+0xaa>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_Open+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 ffc5 	bl	8004d24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da0f      	bge.n	8002de0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	3338      	adds	r3, #56	; 0x38
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	705a      	strb	r2, [r3, #1]
 8002dde:	e00f      	b.n	8002e00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 020f 	and.w	r2, r3, #15
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	3304      	adds	r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_EP_Close+0x6e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e00e      	b.n	8002e38 <HAL_PCD_EP_Close+0x8c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68f9      	ldr	r1, [r7, #12]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 f803 	bl	8004e34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	f002 fade 	bl	8005474 <USB_EP0StartXfer>
 8002eb8:	e008      	b.n	8002ecc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	f002 f890 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ef8:	681b      	ldr	r3, [r3, #0]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b086      	sub	sp, #24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	7afb      	ldrb	r3, [r7, #11]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2201      	movs	r2, #1
 8002f44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f60:	7afb      	ldrb	r3, [r7, #11]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	6979      	ldr	r1, [r7, #20]
 8002f78:	f002 fa7c 	bl	8005474 <USB_EP0StartXfer>
 8002f7c:	e008      	b.n	8002f90 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6979      	ldr	r1, [r7, #20]
 8002f8c:	f002 f82e 	bl	8004fec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d901      	bls.n	8002fb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e050      	b.n	800305a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	da0f      	bge.n	8002fe0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	3338      	adds	r3, #56	; 0x38
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	705a      	strb	r2, [r3, #1]
 8002fde:	e00d      	b.n	8002ffc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_PCD_EP_SetStall+0x82>
 8003018:	2302      	movs	r3, #2
 800301a:	e01e      	b.n	800305a <HAL_PCD_EP_SetStall+0xc0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	f002 fbd3 	bl	80057d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	b2d9      	uxtb	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800304a:	461a      	mov	r2, r3
 800304c:	f002 fdc4 	bl	8005bd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d901      	bls.n	8003080 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e042      	b.n	8003106 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	da0f      	bge.n	80030a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 020f 	and.w	r2, r3, #15
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3338      	adds	r3, #56	; 0x38
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	705a      	strb	r2, [r3, #1]
 80030a6:	e00f      	b.n	80030c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 020f 	and.w	r2, r3, #15
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	3304      	adds	r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_PCD_EP_ClrStall+0x86>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e00e      	b.n	8003106 <HAL_PCD_EP_ClrStall+0xa4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68f9      	ldr	r1, [r7, #12]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fbdb 	bl	80058b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b08a      	sub	sp, #40	; 0x28
 8003112:	af02      	add	r7, sp, #8
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	3338      	adds	r3, #56	; 0x38
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	d901      	bls.n	8003146 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06c      	b.n	8003220 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	429a      	cmp	r2, r3
 800315a:	d902      	bls.n	8003162 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3303      	adds	r3, #3
 8003166:	089b      	lsrs	r3, r3, #2
 8003168:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316a:	e02b      	b.n	80031c4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	429a      	cmp	r2, r3
 8003180:	d902      	bls.n	8003188 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3303      	adds	r3, #3
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	4603      	mov	r3, r0
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f002 fab7 	bl	800571a <USB_WritePacket>

    ep->xfer_buff  += len;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	441a      	add	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	441a      	add	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d809      	bhi.n	80031ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d203      	bcs.n	80031ee <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1be      	bne.n	800316c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d811      	bhi.n	800321e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	2201      	movs	r2, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	43db      	mvns	r3, r3
 8003214:	6939      	ldr	r1, [r7, #16]
 8003216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800321a:	4013      	ands	r3, r2
 800321c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	333c      	adds	r3, #60	; 0x3c
 8003240:	3304      	adds	r3, #4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f040 80a0 	bne.w	80033a0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a72      	ldr	r2, [pc, #456]	; (8003438 <PCD_EP_OutXfrComplete_int+0x210>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f240 80dd 	bls.w	800342e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80d7 	beq.w	800342e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	e0cb      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	461a      	mov	r2, r3
 80032ae:	2320      	movs	r3, #32
 80032b0:	6093      	str	r3, [r2, #8]
 80032b2:	e0bc      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f040 80b7 	bne.w	800342e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <PCD_EP_OutXfrComplete_int+0x210>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d90f      	bls.n	80032e8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	461a      	mov	r2, r3
 80032e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	e0a2      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032fa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	0159      	lsls	r1, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	440b      	add	r3, r1
 8003304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800330e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003322:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4403      	add	r3, r0
 8003346:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4419      	add	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4403      	add	r3, r0
 800335c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003360:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d114      	bne.n	8003392 <PCD_EP_OutXfrComplete_int+0x16a>
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d108      	bne.n	8003392 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800338a:	461a      	mov	r2, r3
 800338c:	2101      	movs	r1, #1
 800338e:	f002 fc23 	bl	8005bd8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f004 fbab 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
 800339e:	e046      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a26      	ldr	r2, [pc, #152]	; (800343c <PCD_EP_OutXfrComplete_int+0x214>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d124      	bne.n	80033f2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c4:	6093      	str	r3, [r2, #8]
 80033c6:	e032      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	461a      	mov	r2, r3
 80033e0:	2320      	movs	r3, #32
 80033e2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f004 fb82 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
 80033f0:	e01d      	b.n	800342e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d114      	bne.n	8003422 <PCD_EP_OutXfrComplete_int+0x1fa>
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800341a:	461a      	mov	r2, r3
 800341c:	2100      	movs	r1, #0
 800341e:	f002 fbdb 	bl	8005bd8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f004 fb63 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	4f54300a 	.word	0x4f54300a
 800343c:	4f54310a 	.word	0x4f54310a

08003440 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	333c      	adds	r3, #60	; 0x3c
 8003458:	3304      	adds	r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d90e      	bls.n	8003494 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003492:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f004 fb1b 	bl	8007ad0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d90c      	bls.n	80034bc <PCD_EP_OutSetupPacket_int+0x7c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d108      	bne.n	80034bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034b4:	461a      	mov	r2, r3
 80034b6:	2101      	movs	r1, #1
 80034b8:	f002 fb8e 	bl	8005bd8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	4f54300a 	.word	0x4f54300a

080034cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
 80034d8:	4613      	mov	r3, r2
 80034da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034ea:	883b      	ldrh	r3, [r7, #0]
 80034ec:	0419      	lsls	r1, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
 80034f8:	e028      	b.n	800354c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4413      	add	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e00d      	b.n	800352a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	3340      	adds	r3, #64	; 0x40
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	4413      	add	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	3301      	adds	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	3b01      	subs	r3, #1
 8003530:	429a      	cmp	r2, r3
 8003532:	d3ec      	bcc.n	800350e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003534:	883b      	ldrh	r3, [r7, #0]
 8003536:	0418      	lsls	r0, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	3b01      	subs	r3, #1
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	4302      	orrs	r2, r0
 8003544:	3340      	adds	r3, #64	; 0x40
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	887a      	ldrh	r2, [r7, #2]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e264      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d075      	beq.n	800369e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	4ba3      	ldr	r3, [pc, #652]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d00c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4ba0      	ldr	r3, [pc, #640]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d112      	bne.n	80035f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b9d      	ldr	r3, [pc, #628]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	4b99      	ldr	r3, [pc, #612]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d05b      	beq.n	800369c <HAL_RCC_OscConfig+0x108>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d157      	bne.n	800369c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e23f      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x74>
 80035fa:	4b91      	ldr	r3, [pc, #580]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a90      	ldr	r2, [pc, #576]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e01d      	b.n	8003644 <HAL_RCC_OscConfig+0xb0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x98>
 8003612:	4b8b      	ldr	r3, [pc, #556]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a8a      	ldr	r2, [pc, #552]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a87      	ldr	r2, [pc, #540]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e00b      	b.n	8003644 <HAL_RCC_OscConfig+0xb0>
 800362c:	4b84      	ldr	r3, [pc, #528]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a83      	ldr	r2, [pc, #524]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a80      	ldr	r2, [pc, #512]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 800363e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fd ffca 	bl	80015e4 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003654:	f7fd ffc6 	bl	80015e4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e204      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0xc0>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fd ffb6 	bl	80015e4 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367c:	f7fd ffb2 	bl	80015e4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e1f0      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	4b6c      	ldr	r3, [pc, #432]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f0      	bne.n	800367c <HAL_RCC_OscConfig+0xe8>
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d063      	beq.n	8003772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b6:	4b62      	ldr	r3, [pc, #392]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d11c      	bne.n	80036fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d116      	bne.n	80036fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_RCC_OscConfig+0x152>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e1c4      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	4b56      	ldr	r3, [pc, #344]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4952      	ldr	r1, [pc, #328]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	e03a      	b.n	8003772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCC_OscConfig+0x2b0>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fd ff6b 	bl	80015e4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003712:	f7fd ff67 	bl	80015e4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1a5      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b43      	ldr	r3, [pc, #268]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4940      	ldr	r1, [pc, #256]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
 8003744:	e015      	b.n	8003772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003746:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_OscConfig+0x2b0>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd ff4a 	bl	80015e4 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003754:	f7fd ff46 	bl	80015e4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e184      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f0      	bne.n	8003754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d030      	beq.n	80037e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_RCC_OscConfig+0x2b4>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd ff2a 	bl	80015e4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd ff26 	bl	80015e4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e164      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80037a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x200>
 80037b2:	e015      	b.n	80037e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x2b4>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ba:	f7fd ff13 	bl	80015e4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c2:	f7fd ff0f 	bl	80015e4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e14d      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a0 	beq.w	800392e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x2b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d121      	bne.n	800386e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_RCC_OscConfig+0x2b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_RCC_OscConfig+0x2b8>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fd fed5 	bl	80015e4 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e011      	b.n	8003862 <HAL_RCC_OscConfig+0x2ce>
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	42470000 	.word	0x42470000
 8003848:	42470e80 	.word	0x42470e80
 800384c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003850:	f7fd fec8 	bl	80015e4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e106      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b85      	ldr	r3, [pc, #532]	; (8003a78 <HAL_RCC_OscConfig+0x4e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x2f0>
 8003876:	4b81      	ldr	r3, [pc, #516]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a80      	ldr	r2, [pc, #512]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	e01c      	b.n	80038be <HAL_RCC_OscConfig+0x32a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x312>
 800388c:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x32a>
 80038a6:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a74      	ldr	r2, [pc, #464]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a71      	ldr	r2, [pc, #452]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fd fe8d 	bl	80015e4 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fd fe89 	bl	80015e4 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0c5      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCC_OscConfig+0x33a>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fd fe77 	bl	80015e4 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fe73 	bl	80015e4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0af      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003910:	4b5a      	ldr	r3, [pc, #360]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a55      	ldr	r2, [pc, #340]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 809b 	beq.w	8003a6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d05c      	beq.n	80039fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d141      	bne.n	80039d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x4ec>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fd fe47 	bl	80015e4 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd fe43 	bl	80015e4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e081      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	019b      	lsls	r3, r3, #6
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	4937      	ldr	r1, [pc, #220]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_RCC_OscConfig+0x4ec>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fe1c 	bl	80015e4 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd fe18 	bl	80015e4 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e056      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x41c>
 80039ce:	e04e      	b.n	8003a6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_RCC_OscConfig+0x4ec>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fd fe05 	bl	80015e4 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039de:	f7fd fe01 	bl	80015e4 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e03f      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x44a>
 80039fc:	e037      	b.n	8003a6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e032      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCC_OscConfig+0x4e8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d028      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d121      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d11a      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	42470060 	.word	0x42470060

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0cc      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b68      	ldr	r3, [pc, #416]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d90c      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b65      	ldr	r3, [pc, #404]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b63      	ldr	r3, [pc, #396]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0b8      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d020      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a58      	ldr	r2, [pc, #352]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af0:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a52      	ldr	r2, [pc, #328]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b50      	ldr	r3, [pc, #320]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	494d      	ldr	r1, [pc, #308]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d044      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d119      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e07f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e06f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e067      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4934      	ldr	r1, [pc, #208]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fd fd36 	bl	80015e4 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fd fd32 	bl	80015e4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e04f      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d20c      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e032      	b.n	8003c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4916      	ldr	r1, [pc, #88]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c0a:	f000 f821 	bl	8003c50 <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	490a      	ldr	r1, [pc, #40]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fc96 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023c00 	.word	0x40023c00
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08008afc 	.word	0x08008afc
 8003c48:	2000003c 	.word	0x2000003c
 8003c4c:	20000040 	.word	0x20000040

08003c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c68:	4b67      	ldr	r3, [pc, #412]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d00d      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x40>
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	f200 80bd 	bhi.w	8003df4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x34>
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c82:	e0b7      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c86:	60bb      	str	r3, [r7, #8]
       break;
 8003c88:	e0b7      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c8a:	4b60      	ldr	r3, [pc, #384]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c8c:	60bb      	str	r3, [r7, #8]
      break;
 8003c8e:	e0b4      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c90:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d04d      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	461a      	mov	r2, r3
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	ea02 0800 	and.w	r8, r2, r0
 8003cbe:	ea03 0901 	and.w	r9, r3, r1
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	014b      	lsls	r3, r1, #5
 8003cd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cd4:	0142      	lsls	r2, r0, #5
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	ebb0 0008 	subs.w	r0, r0, r8
 8003cde:	eb61 0109 	sbc.w	r1, r1, r9
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cf0:	0182      	lsls	r2, r0, #6
 8003cf2:	1a12      	subs	r2, r2, r0
 8003cf4:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf8:	f04f 0000 	mov.w	r0, #0
 8003cfc:	f04f 0100 	mov.w	r1, #0
 8003d00:	00d9      	lsls	r1, r3, #3
 8003d02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d06:	00d0      	lsls	r0, r2, #3
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	eb12 0208 	adds.w	r2, r2, r8
 8003d10:	eb43 0309 	adc.w	r3, r3, r9
 8003d14:	f04f 0000 	mov.w	r0, #0
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	0299      	lsls	r1, r3, #10
 8003d1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d22:	0290      	lsls	r0, r2, #10
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	f7fc fa9c 	bl	8000270 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e04a      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	ea02 0400 	and.w	r4, r2, r0
 8003d5a:	ea03 0501 	and.w	r5, r3, r1
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	014b      	lsls	r3, r1, #5
 8003d6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d70:	0142      	lsls	r2, r0, #5
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	1b00      	subs	r0, r0, r4
 8003d78:	eb61 0105 	sbc.w	r1, r1, r5
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	018b      	lsls	r3, r1, #6
 8003d86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d8a:	0182      	lsls	r2, r0, #6
 8003d8c:	1a12      	subs	r2, r2, r0
 8003d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	00d9      	lsls	r1, r3, #3
 8003d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da0:	00d0      	lsls	r0, r2, #3
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	1912      	adds	r2, r2, r4
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	f04f 0000 	mov.w	r0, #0
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	0299      	lsls	r1, r3, #10
 8003db6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003dba:	0290      	lsls	r0, r2, #10
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	f7fc fa50 	bl	8000270 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003df6:	60bb      	str	r3, [r7, #8]
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000003c 	.word	0x2000003c

08003e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e2c:	f7ff fff0 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0a9b      	lsrs	r3, r3, #10
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08008b0c 	.word	0x08008b0c

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e54:	f7ff ffdc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0b5b      	lsrs	r3, r3, #13
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08008b0c 	.word	0x08008b0c

08003e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07b      	b.n	8003f82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d108      	bne.n	8003ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9a:	d009      	beq.n	8003eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]
 8003ea2:	e005      	b.n	8003eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd f9ee 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	ea42 0103 	orr.w	r1, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	f003 0104 	and.w	r1, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f003 0210 	and.w	r2, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e03f      	b.n	800401c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd f9c3 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9a6 	bl	8004320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004002:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b20      	cmp	r3, #32
 8004042:	d17c      	bne.n	800413e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_UART_Transmit+0x2c>
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e075      	b.n	8004140 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_UART_Transmit+0x3e>
 800405e:	2302      	movs	r3, #2
 8004060:	e06e      	b.n	8004140 <HAL_UART_Transmit+0x11c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2221      	movs	r2, #33	; 0x21
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004078:	f7fd fab4 	bl	80015e4 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d108      	bne.n	80040a6 <HAL_UART_Transmit+0x82>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d104      	bne.n	80040a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800409c:	2300      	movs	r3, #0
 800409e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e003      	b.n	80040ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040b6:	e02a      	b.n	800410e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2200      	movs	r2, #0
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f8e2 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e036      	b.n	8004140 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	3302      	adds	r3, #2
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e007      	b.n	8004100 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1cf      	bne.n	80040b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2200      	movs	r2, #0
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f8b2 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e006      	b.n	8004140 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800413e:	2302      	movs	r3, #2
  }
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	f040 808c 	bne.w	8004282 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_UART_Receive+0x2e>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e084      	b.n	8004284 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_UART_Receive+0x40>
 8004184:	2302      	movs	r3, #2
 8004186:	e07d      	b.n	8004284 <HAL_UART_Receive+0x13c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2222      	movs	r2, #34	; 0x22
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041a4:	f7fd fa1e 	bl	80015e4 <HAL_GetTick>
 80041a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d108      	bne.n	80041d2 <HAL_UART_Receive+0x8a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e003      	b.n	80041da <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041e2:	e043      	b.n	800426c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2120      	movs	r1, #32
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f84c 	bl	800428c <UART_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e042      	b.n	8004284 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10c      	bne.n	800421e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004210:	b29a      	uxth	r2, r3
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	3302      	adds	r3, #2
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	e01f      	b.n	800425e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004226:	d007      	beq.n	8004238 <HAL_UART_Receive+0xf0>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_UART_Receive+0xfe>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e008      	b.n	8004258 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004252:	b2da      	uxtb	r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1b6      	bne.n	80041e4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3720      	adds	r7, #32
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429c:	e02c      	b.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d028      	beq.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <UART_WaitOnFlagUntilTimeout+0x30>
 80042ac:	f7fd f99a 	bl	80015e4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d21d      	bcs.n	80042f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e00f      	b.n	8004318 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4013      	ands	r3, r2
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	429a      	cmp	r2, r3
 8004314:	d0c3      	beq.n	800429e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	b09f      	sub	sp, #124	; 0x7c
 8004326:	af00      	add	r7, sp, #0
 8004328:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800432a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	ea40 0301 	orr.w	r3, r0, r1
 8004340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	431a      	orrs	r2, r3
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	431a      	orrs	r2, r3
 8004352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	4313      	orrs	r3, r2
 8004358:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800435a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004364:	f021 010c 	bic.w	r1, r1, #12
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800436e:	430b      	orrs	r3, r1
 8004370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800437c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437e:	6999      	ldr	r1, [r3, #24]
 8004380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	ea40 0301 	orr.w	r3, r0, r1
 8004388:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4bc5      	ldr	r3, [pc, #788]	; (80046a4 <UART_SetConfig+0x384>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d004      	beq.n	800439e <UART_SetConfig+0x7e>
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4bc3      	ldr	r3, [pc, #780]	; (80046a8 <UART_SetConfig+0x388>)
 800439a:	429a      	cmp	r2, r3
 800439c:	d103      	bne.n	80043a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800439e:	f7ff fd57 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 80043a2:	6778      	str	r0, [r7, #116]	; 0x74
 80043a4:	e002      	b.n	80043ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7ff fd3f 	bl	8003e28 <HAL_RCC_GetPCLK1Freq>
 80043aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	f040 80b6 	bne.w	8004524 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ba:	461c      	mov	r4, r3
 80043bc:	f04f 0500 	mov.w	r5, #0
 80043c0:	4622      	mov	r2, r4
 80043c2:	462b      	mov	r3, r5
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	6439      	str	r1, [r7, #64]	; 0x40
 80043c8:	415b      	adcs	r3, r3
 80043ca:	647b      	str	r3, [r7, #68]	; 0x44
 80043cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043d0:	1912      	adds	r2, r2, r4
 80043d2:	eb45 0303 	adc.w	r3, r5, r3
 80043d6:	f04f 0000 	mov.w	r0, #0
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	00d9      	lsls	r1, r3, #3
 80043e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e4:	00d0      	lsls	r0, r2, #3
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	1911      	adds	r1, r2, r4
 80043ec:	6639      	str	r1, [r7, #96]	; 0x60
 80043ee:	416b      	adcs	r3, r5
 80043f0:	667b      	str	r3, [r7, #100]	; 0x64
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	1891      	adds	r1, r2, r2
 80043fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004400:	415b      	adcs	r3, r3
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004408:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800440c:	f7fb ff30 	bl	8000270 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4ba5      	ldr	r3, [pc, #660]	; (80046ac <UART_SetConfig+0x38c>)
 8004416:	fba3 2302 	umull	r2, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	011e      	lsls	r6, r3, #4
 800441e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004420:	461c      	mov	r4, r3
 8004422:	f04f 0500 	mov.w	r5, #0
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	1891      	adds	r1, r2, r2
 800442c:	6339      	str	r1, [r7, #48]	; 0x30
 800442e:	415b      	adcs	r3, r3
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004436:	1912      	adds	r2, r2, r4
 8004438:	eb45 0303 	adc.w	r3, r5, r3
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	00d9      	lsls	r1, r3, #3
 8004446:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800444a:	00d0      	lsls	r0, r2, #3
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	1911      	adds	r1, r2, r4
 8004452:	65b9      	str	r1, [r7, #88]	; 0x58
 8004454:	416b      	adcs	r3, r5
 8004456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	461a      	mov	r2, r3
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	1891      	adds	r1, r2, r2
 8004464:	62b9      	str	r1, [r7, #40]	; 0x28
 8004466:	415b      	adcs	r3, r3
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800446a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800446e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004472:	f7fb fefd 	bl	8000270 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b8c      	ldr	r3, [pc, #560]	; (80046ac <UART_SetConfig+0x38c>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	; 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	3332      	adds	r3, #50	; 0x32
 800448e:	4a87      	ldr	r2, [pc, #540]	; (80046ac <UART_SetConfig+0x38c>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800449c:	441e      	add	r6, r3
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	4618      	mov	r0, r3
 80044a2:	f04f 0100 	mov.w	r1, #0
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	1894      	adds	r4, r2, r2
 80044ac:	623c      	str	r4, [r7, #32]
 80044ae:	415b      	adcs	r3, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044b6:	1812      	adds	r2, r2, r0
 80044b8:	eb41 0303 	adc.w	r3, r1, r3
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	f04f 0500 	mov.w	r5, #0
 80044c4:	00dd      	lsls	r5, r3, #3
 80044c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044ca:	00d4      	lsls	r4, r2, #3
 80044cc:	4622      	mov	r2, r4
 80044ce:	462b      	mov	r3, r5
 80044d0:	1814      	adds	r4, r2, r0
 80044d2:	653c      	str	r4, [r7, #80]	; 0x50
 80044d4:	414b      	adcs	r3, r1
 80044d6:	657b      	str	r3, [r7, #84]	; 0x54
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	461a      	mov	r2, r3
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	61b9      	str	r1, [r7, #24]
 80044e6:	415b      	adcs	r3, r3
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044f2:	f7fb febd 	bl	8000270 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4b6c      	ldr	r3, [pc, #432]	; (80046ac <UART_SetConfig+0x38c>)
 80044fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	2164      	movs	r1, #100	; 0x64
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	3332      	adds	r3, #50	; 0x32
 800450e:	4a67      	ldr	r2, [pc, #412]	; (80046ac <UART_SetConfig+0x38c>)
 8004510:	fba2 2303 	umull	r2, r3, r2, r3
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 0207 	and.w	r2, r3, #7
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4432      	add	r2, r6
 8004520:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004522:	e0b9      	b.n	8004698 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004526:	461c      	mov	r4, r3
 8004528:	f04f 0500 	mov.w	r5, #0
 800452c:	4622      	mov	r2, r4
 800452e:	462b      	mov	r3, r5
 8004530:	1891      	adds	r1, r2, r2
 8004532:	6139      	str	r1, [r7, #16]
 8004534:	415b      	adcs	r3, r3
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800453c:	1912      	adds	r2, r2, r4
 800453e:	eb45 0303 	adc.w	r3, r5, r3
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	00d9      	lsls	r1, r3, #3
 800454c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004550:	00d0      	lsls	r0, r2, #3
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	eb12 0804 	adds.w	r8, r2, r4
 800455a:	eb43 0905 	adc.w	r9, r3, r5
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	008b      	lsls	r3, r1, #2
 8004572:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004576:	0082      	lsls	r2, r0, #2
 8004578:	4640      	mov	r0, r8
 800457a:	4649      	mov	r1, r9
 800457c:	f7fb fe78 	bl	8000270 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <UART_SetConfig+0x38c>)
 8004586:	fba3 2302 	umull	r2, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	011e      	lsls	r6, r3, #4
 800458e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004590:	4618      	mov	r0, r3
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	1894      	adds	r4, r2, r2
 800459c:	60bc      	str	r4, [r7, #8]
 800459e:	415b      	adcs	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a6:	1812      	adds	r2, r2, r0
 80045a8:	eb41 0303 	adc.w	r3, r1, r3
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	f04f 0500 	mov.w	r5, #0
 80045b4:	00dd      	lsls	r5, r3, #3
 80045b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045ba:	00d4      	lsls	r4, r2, #3
 80045bc:	4622      	mov	r2, r4
 80045be:	462b      	mov	r3, r5
 80045c0:	1814      	adds	r4, r2, r0
 80045c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80045c4:	414b      	adcs	r3, r1
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045e0:	0082      	lsls	r2, r0, #2
 80045e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045e6:	f7fb fe43 	bl	8000270 <__aeabi_uldivmod>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <UART_SetConfig+0x38c>)
 80045f0:	fba3 1302 	umull	r1, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	2164      	movs	r1, #100	; 0x64
 80045f8:	fb01 f303 	mul.w	r3, r1, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	3332      	adds	r3, #50	; 0x32
 8004602:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <UART_SetConfig+0x38c>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460e:	441e      	add	r6, r3
 8004610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004612:	4618      	mov	r0, r3
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	1894      	adds	r4, r2, r2
 800461e:	603c      	str	r4, [r7, #0]
 8004620:	415b      	adcs	r3, r3
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004628:	1812      	adds	r2, r2, r0
 800462a:	eb41 0303 	adc.w	r3, r1, r3
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	f04f 0500 	mov.w	r5, #0
 8004636:	00dd      	lsls	r5, r3, #3
 8004638:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463c:	00d4      	lsls	r4, r2, #3
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	eb12 0a00 	adds.w	sl, r2, r0
 8004646:	eb43 0b01 	adc.w	fp, r3, r1
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	008b      	lsls	r3, r1, #2
 800465e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004662:	0082      	lsls	r2, r0, #2
 8004664:	4650      	mov	r0, sl
 8004666:	4659      	mov	r1, fp
 8004668:	f7fb fe02 	bl	8000270 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <UART_SetConfig+0x38c>)
 8004672:	fba3 1302 	umull	r1, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2164      	movs	r1, #100	; 0x64
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	3332      	adds	r3, #50	; 0x32
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <UART_SetConfig+0x38c>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 020f 	and.w	r2, r3, #15
 8004690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4432      	add	r2, r6
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	bf00      	nop
 800469a:	377c      	adds	r7, #124	; 0x7c
 800469c:	46bd      	mov	sp, r7
 800469e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a2:	bf00      	nop
 80046a4:	40011000 	.word	0x40011000
 80046a8:	40011400 	.word	0x40011400
 80046ac:	51eb851f 	.word	0x51eb851f

080046b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b0:	b084      	sub	sp, #16
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	f107 001c 	add.w	r0, r7, #28
 80046be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d122      	bne.n	800470e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d105      	bne.n	8004702 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fac6 	bl	8005c94 <USB_CoreReset>
 8004708:	4603      	mov	r3, r0
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e01a      	b.n	8004744 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f001 faba 	bl	8005c94 <USB_CoreReset>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
 8004736:	e005      	b.n	8004744 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10b      	bne.n	8004762 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f043 0206 	orr.w	r2, r3, #6
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800476e:	b004      	add	sp, #16
 8004770:	4770      	bx	lr
	...

08004774 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d165      	bne.n	8004854 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a41      	ldr	r2, [pc, #260]	; (8004890 <USB_SetTurnaroundTime+0x11c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d906      	bls.n	800479e <USB_SetTurnaroundTime+0x2a>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a40      	ldr	r2, [pc, #256]	; (8004894 <USB_SetTurnaroundTime+0x120>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d202      	bcs.n	800479e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004798:	230f      	movs	r3, #15
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e062      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <USB_SetTurnaroundTime+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d306      	bcc.n	80047b4 <USB_SetTurnaroundTime+0x40>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <USB_SetTurnaroundTime+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d202      	bcs.n	80047b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047ae:	230e      	movs	r3, #14
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e057      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <USB_SetTurnaroundTime+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d306      	bcc.n	80047ca <USB_SetTurnaroundTime+0x56>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a37      	ldr	r2, [pc, #220]	; (800489c <USB_SetTurnaroundTime+0x128>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d202      	bcs.n	80047ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047c4:	230d      	movs	r3, #13
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e04c      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4a33      	ldr	r2, [pc, #204]	; (800489c <USB_SetTurnaroundTime+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d306      	bcc.n	80047e0 <USB_SetTurnaroundTime+0x6c>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a32      	ldr	r2, [pc, #200]	; (80048a0 <USB_SetTurnaroundTime+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d802      	bhi.n	80047e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047da:	230c      	movs	r3, #12
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e041      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <USB_SetTurnaroundTime+0x12c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d906      	bls.n	80047f6 <USB_SetTurnaroundTime+0x82>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <USB_SetTurnaroundTime+0x130>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d802      	bhi.n	80047f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047f0:	230b      	movs	r3, #11
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e036      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <USB_SetTurnaroundTime+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d906      	bls.n	800480c <USB_SetTurnaroundTime+0x98>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <USB_SetTurnaroundTime+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004806:	230a      	movs	r3, #10
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e02b      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <USB_SetTurnaroundTime+0x134>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d906      	bls.n	8004822 <USB_SetTurnaroundTime+0xae>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <USB_SetTurnaroundTime+0x138>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d202      	bcs.n	8004822 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800481c:	2309      	movs	r3, #9
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e020      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a21      	ldr	r2, [pc, #132]	; (80048ac <USB_SetTurnaroundTime+0x138>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d306      	bcc.n	8004838 <USB_SetTurnaroundTime+0xc4>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <USB_SetTurnaroundTime+0x13c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d802      	bhi.n	8004838 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004832:	2308      	movs	r3, #8
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	e015      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a1d      	ldr	r2, [pc, #116]	; (80048b0 <USB_SetTurnaroundTime+0x13c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0xda>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <USB_SetTurnaroundTime+0x140>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d202      	bcs.n	800484e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004848:	2307      	movs	r3, #7
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e00a      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800484e:	2306      	movs	r3, #6
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e007      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800485a:	2309      	movs	r3, #9
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e001      	b.n	8004864 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004860:	2309      	movs	r3, #9
 8004862:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800487c:	431a      	orrs	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	00d8acbf 	.word	0x00d8acbf
 8004894:	00e4e1c0 	.word	0x00e4e1c0
 8004898:	00f42400 	.word	0x00f42400
 800489c:	01067380 	.word	0x01067380
 80048a0:	011a499f 	.word	0x011a499f
 80048a4:	01312cff 	.word	0x01312cff
 80048a8:	014ca43f 	.word	0x014ca43f
 80048ac:	016e3600 	.word	0x016e3600
 80048b0:	01a6ab1f 	.word	0x01a6ab1f
 80048b4:	01e84800 	.word	0x01e84800

080048b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d106      	bne.n	8004928 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	e00b      	b.n	8004940 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e001      	b.n	8004940 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e003      	b.n	8004948 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004940:	2032      	movs	r0, #50	; 0x32
 8004942:	f7fc fe5b 	bl	80015fc <HAL_Delay>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004950:	b084      	sub	sp, #16
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800495e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e009      	b.n	8004984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3340      	adds	r3, #64	; 0x40
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	2200      	movs	r2, #0
 800497c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b0e      	cmp	r3, #14
 8004988:	d9f2      	bls.n	8004970 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d11c      	bne.n	80049ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
 80049c8:	e00b      	b.n	80049e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	4619      	mov	r1, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	461a      	mov	r2, r3
 80049fe:	680b      	ldr	r3, [r1, #0]
 8004a00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10c      	bne.n	8004a22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d104      	bne.n	8004a18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a0e:	2100      	movs	r1, #0
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f949 	bl	8004ca8 <USB_SetDevSpeed>
 8004a16:	e008      	b.n	8004a2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a18:	2101      	movs	r1, #1
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f944 	bl	8004ca8 <USB_SetDevSpeed>
 8004a20:	e003      	b.n	8004a2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a22:	2103      	movs	r1, #3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f93f 	bl	8004ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a2a:	2110      	movs	r1, #16
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8f3 	bl	8004c18 <USB_FlushTxFifo>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f911 	bl	8004c64 <USB_FlushRxFifo>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	461a      	mov	r2, r3
 8004a54:	2300      	movs	r3, #0
 8004a56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	e043      	b.n	8004afe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a8c:	d118      	bne.n	8004ac0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10a      	bne.n	8004aaa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	e013      	b.n	8004ad2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e008      	b.n	8004ad2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	461a      	mov	r2, r3
 8004af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004af6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	3301      	adds	r3, #1
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3b7      	bcc.n	8004a76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e043      	b.n	8004b94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b22:	d118      	bne.n	8004b56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b36:	461a      	mov	r2, r3
 8004b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e013      	b.n	8004b68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e008      	b.n	8004b68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	2300      	movs	r3, #0
 8004b66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	461a      	mov	r2, r3
 8004b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3301      	adds	r3, #1
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3b7      	bcc.n	8004b0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f043 0210 	orr.w	r2, r3, #16
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <USB_DevInit+0x2c4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f043 0208 	orr.w	r2, r3, #8
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d107      	bne.n	8004c04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bfc:	f043 0304 	orr.w	r3, r3, #4
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c10:	b004      	add	sp, #16
 8004c12:	4770      	bx	lr
 8004c14:	803c3800 	.word	0x803c3800

08004c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3301      	adds	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <USB_FlushTxFifo+0x48>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e006      	b.n	8004c52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d0f0      	beq.n	8004c32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	00030d40 	.word	0x00030d40

08004c64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2210      	movs	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <USB_FlushRxFifo+0x40>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d0f0      	beq.n	8004c76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	00030d40 	.word	0x00030d40

08004ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0306 	and.w	r3, r3, #6
 8004cf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
 8004cfe:	e00a      	b.n	8004d16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d002      	beq.n	8004d0c <USB_GetDevSpeed+0x32>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	d102      	bne.n	8004d12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	75fb      	strb	r3, [r7, #23]
 8004d10:	e001      	b.n	8004d16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d12:	230f      	movs	r3, #15
 8004d14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d13a      	bne.n	8004db6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	68f9      	ldr	r1, [r7, #12]
 8004d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d155      	bne.n	8004e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	78db      	ldrb	r3, [r3, #3]
 8004d92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	059b      	lsls	r3, r3, #22
 8004d9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	0151      	lsls	r1, r2, #5
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	440a      	add	r2, r1
 8004da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	e036      	b.n	8004e24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d11a      	bne.n	8004e24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	78db      	ldrb	r3, [r3, #3]
 8004e08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d161      	bne.n	8004f14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e66:	d11f      	bne.n	8004ea8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec8:	4013      	ands	r3, r2
 8004eca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	2101      	movs	r1, #1
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	68f9      	ldr	r1, [r7, #12]
 8004ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eec:	4013      	ands	r3, r2
 8004eee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	0159      	lsls	r1, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <USB_DeactivateEndpoint+0x1b0>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
 8004f12:	e060      	b.n	8004fd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2a:	d11f      	bne.n	8004f6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	43db      	mvns	r3, r3
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <USB_DeactivateEndpoint+0x1b4>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	ec337800 	.word	0xec337800
 8004fe8:	eff37800 	.word	0xeff37800

08004fec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	2b01      	cmp	r3, #1
 800500a:	f040 815c 	bne.w	80052c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d132      	bne.n	800507c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	0cdb      	lsrs	r3, r3, #19
 8005076:	04db      	lsls	r3, r3, #19
 8005078:	6113      	str	r3, [r2, #16]
 800507a:	e074      	b.n	8005166 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005096:	0cdb      	lsrs	r3, r3, #19
 8005098:	04db      	lsls	r3, r3, #19
 800509a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	69fa      	ldr	r2, [r7, #28]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6959      	ldr	r1, [r3, #20]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	440b      	add	r3, r1
 80050d8:	1e59      	subs	r1, r3, #1
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e2:	04d9      	lsls	r1, r3, #19
 80050e4:	4b9d      	ldr	r3, [pc, #628]	; (800535c <USB_EPStartXfer+0x370>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510e:	69b9      	ldr	r1, [r7, #24]
 8005110:	0148      	lsls	r0, r1, #5
 8005112:	69f9      	ldr	r1, [r7, #28]
 8005114:	4401      	add	r1, r0
 8005116:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800511a:	4313      	orrs	r3, r2
 800511c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	78db      	ldrb	r3, [r3, #3]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d11f      	bne.n	8005166 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005144:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005164:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d14b      	bne.n	8005204 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	78db      	ldrb	r3, [r3, #3]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d128      	bne.n	80051e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d110      	bne.n	80051c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e00f      	b.n	80051e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e12f      	b.n	8005464 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005222:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d015      	beq.n	8005258 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 8117 	beq.w	8005464 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	2101      	movs	r1, #1
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	69f9      	ldr	r1, [r7, #28]
 800524e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005252:	4313      	orrs	r3, r2
 8005254:	634b      	str	r3, [r1, #52]	; 0x34
 8005256:	e105      	b.n	8005464 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d110      	bne.n	800528a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e00f      	b.n	80052aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	b298      	uxth	r0, r3
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa2b 	bl	800571a <USB_WritePacket>
 80052c4:	e0ce      	b.n	8005464 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	0cdb      	lsrs	r3, r3, #19
 80052e2:	04db      	lsls	r3, r3, #19
 80052e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005308:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d126      	bne.n	8005360 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005328:	69b9      	ldr	r1, [r7, #24]
 800532a:	0148      	lsls	r0, r1, #5
 800532c:	69f9      	ldr	r1, [r7, #28]
 800532e:	4401      	add	r1, r0
 8005330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005334:	4313      	orrs	r3, r2
 8005336:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005356:	6113      	str	r3, [r2, #16]
 8005358:	e036      	b.n	80053c8 <USB_EPStartXfer+0x3dc>
 800535a:	bf00      	nop
 800535c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4413      	add	r3, r2
 800536a:	1e5a      	subs	r2, r3, #1
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	8afb      	ldrh	r3, [r7, #22]
 8005386:	04d9      	lsls	r1, r3, #19
 8005388:	4b39      	ldr	r3, [pc, #228]	; (8005470 <USB_EPStartXfer+0x484>)
 800538a:	400b      	ands	r3, r1
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	0148      	lsls	r0, r1, #5
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	4401      	add	r1, r0
 8005394:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005398:	4313      	orrs	r3, r2
 800539a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	8af9      	ldrh	r1, [r7, #22]
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	0148      	lsls	r0, r1, #5
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	4401      	add	r1, r0
 80053c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053c4:	4313      	orrs	r3, r2
 80053c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d10d      	bne.n	80053ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68d9      	ldr	r1, [r3, #12]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e6:	460a      	mov	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	78db      	ldrb	r3, [r3, #3]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d128      	bne.n	8005444 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d110      	bne.n	8005424 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00f      	b.n	8005444 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	1ff80000 	.word	0x1ff80000

08005474 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 80cd 	bne.w	8005630 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d132      	bne.n	8005504 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	0cdb      	lsrs	r3, r3, #19
 80054fe:	04db      	lsls	r3, r3, #19
 8005500:	6113      	str	r3, [r2, #16]
 8005502:	e04e      	b.n	80055a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	0cdb      	lsrs	r3, r3, #19
 8005520:	04db      	lsls	r3, r3, #19
 8005522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	695a      	ldr	r2, [r3, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d903      	bls.n	800555c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005592:	6939      	ldr	r1, [r7, #16]
 8005594:	0148      	lsls	r0, r1, #5
 8005596:	6979      	ldr	r1, [r7, #20]
 8005598:	4401      	add	r1, r0
 800559a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800559e:	4313      	orrs	r3, r2
 80055a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055a2:	79fb      	ldrb	r3, [r7, #7]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d11e      	bne.n	80055e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e092      	b.n	800570c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005604:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d07e      	beq.n	800570c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2101      	movs	r1, #1
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	6979      	ldr	r1, [r7, #20]
 8005626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800562a:	4313      	orrs	r3, r2
 800562c:	634b      	str	r3, [r1, #52]	; 0x34
 800562e:	e06d      	b.n	800570c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	0151      	lsls	r1, r2, #5
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	440a      	add	r2, r1
 8005646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564a:	0cdb      	lsrs	r3, r3, #19
 800564c:	04db      	lsls	r3, r3, #19
 800564e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800566e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005672:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	440a      	add	r2, r1
 800569a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ba:	6939      	ldr	r1, [r7, #16]
 80056bc:	0148      	lsls	r0, r1, #5
 80056be:	6979      	ldr	r1, [r7, #20]
 80056c0:	4401      	add	r1, r0
 80056c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c6:	4313      	orrs	r3, r2
 80056c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10d      	bne.n	80056ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d009      	beq.n	80056ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68d9      	ldr	r1, [r3, #12]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	460a      	mov	r2, r1
 80056ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800570a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800571a:	b480      	push	{r7}
 800571c:	b089      	sub	sp, #36	; 0x24
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	4611      	mov	r1, r2
 8005726:	461a      	mov	r2, r3
 8005728:	460b      	mov	r3, r1
 800572a:	71fb      	strb	r3, [r7, #7]
 800572c:	4613      	mov	r3, r2
 800572e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11a      	bne.n	8005776 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005740:	88bb      	ldrh	r3, [r7, #4]
 8005742:	3303      	adds	r3, #3
 8005744:	089b      	lsrs	r3, r3, #2
 8005746:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e00f      	b.n	800576e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	031a      	lsls	r2, r3, #12
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	4413      	add	r3, r2
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	461a      	mov	r2, r3
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3304      	adds	r3, #4
 8005766:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	3301      	adds	r3, #1
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	429a      	cmp	r2, r3
 8005774:	d3eb      	bcc.n	800574e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3724      	adds	r7, #36	; 0x24
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	3303      	adds	r3, #3
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e00b      	b.n	80057c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3304      	adds	r3, #4
 80057b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	3301      	adds	r3, #1
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d3ef      	bcc.n	80057a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057c8:	69fb      	ldr	r3, [r7, #28]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3724      	adds	r7, #36	; 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d12c      	bne.n	800584c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	db12      	blt.n	800582a <USB_EPSetStall+0x54>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	440a      	add	r2, r1
 8005820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005824:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005828:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	e02b      	b.n	80058a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	db12      	blt.n	8005884 <USB_EPSetStall+0xae>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005882:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d128      	bne.n	8005920 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	78db      	ldrb	r3, [r3, #3]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d003      	beq.n	80058fe <USB_EPClearStall+0x4c>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	78db      	ldrb	r3, [r3, #3]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d138      	bne.n	8005970 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	e027      	b.n	8005970 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800593e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	78db      	ldrb	r3, [r3, #3]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d003      	beq.n	8005950 <USB_EPClearStall+0x9e>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d10f      	bne.n	8005970 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800599c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059b2:	68f9      	ldr	r1, [r7, #12]
 80059b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f8:	f023 0302 	bic.w	r3, r3, #2
 80059fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4013      	ands	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	0c1b      	lsrs	r3, r3, #16
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	b29b      	uxth	r3, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	4013      	ands	r3, r2
 8005b08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	01db      	lsls	r3, r3, #7
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4013      	ands	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b66:	68bb      	ldr	r3, [r7, #8]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0301 	and.w	r3, r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005baa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bae:	f023 0307 	bic.w	r3, r3, #7
 8005bb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	460b      	mov	r3, r1
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	333c      	adds	r3, #60	; 0x3c
 8005bee:	3304      	adds	r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4a26      	ldr	r2, [pc, #152]	; (8005c90 <USB_EP0_OutStart+0xb8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d90a      	bls.n	8005c12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0c:	d101      	bne.n	8005c12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e037      	b.n	8005c82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c40:	f043 0318 	orr.w	r3, r3, #24
 8005c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10f      	bne.n	8005c80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	4f54300a 	.word	0x4f54300a

08005c94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <USB_CoreReset+0x64>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e01b      	b.n	8005cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	daf2      	bge.n	8005ca0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <USB_CoreReset+0x64>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e006      	b.n	8005cea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d0f0      	beq.n	8005cca <USB_CoreReset+0x36>

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	00030d40 	.word	0x00030d40

08005cfc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d0c:	f002 f95c 	bl	8007fc8 <USBD_static_malloc>
 8005d10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d20:	2302      	movs	r3, #2
 8005d22:	e066      	b.n	8005df2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7c1b      	ldrb	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d119      	bne.n	8005d68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d38:	2202      	movs	r2, #2
 8005d3a:	2181      	movs	r1, #129	; 0x81
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 f820 	bl	8007d82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	2101      	movs	r1, #1
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f002 f816 	bl	8007d82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2210      	movs	r2, #16
 8005d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d66:	e016      	b.n	8005d96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	2181      	movs	r1, #129	; 0x81
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 f807 	bl	8007d82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	2101      	movs	r1, #1
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fffe 	bl	8007d82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2210      	movs	r2, #16
 8005d92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d96:	2308      	movs	r3, #8
 8005d98:	2203      	movs	r2, #3
 8005d9a:	2182      	movs	r1, #130	; 0x82
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fff0 	bl	8007d82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	7c1b      	ldrb	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d109      	bne.n	8005de0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f002 f8c1 	bl	8007f60 <USBD_LL_PrepareReceive>
 8005dde:	e007      	b.n	8005df0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de6:	2340      	movs	r3, #64	; 0x40
 8005de8:	2101      	movs	r1, #1
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f002 f8b8 	bl	8007f60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e06:	2181      	movs	r1, #129	; 0x81
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 ffe0 	bl	8007dce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e14:	2101      	movs	r1, #1
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 ffd9 	bl	8007dce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e24:	2182      	movs	r1, #130	; 0x82
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 ffd1 	bl	8007dce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00e      	beq.n	8005e64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e56:	4618      	mov	r0, r3
 8005e58:	f002 f8c4 	bl	8007fe4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e0af      	b.n	8005ff8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d03f      	beq.n	8005f24 <USBD_CDC_Setup+0xb4>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	f040 809f 	bne.w	8005fe8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	88db      	ldrh	r3, [r3, #6]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02e      	beq.n	8005f10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	da16      	bge.n	8005eea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ec8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	88d2      	ldrh	r2, [r2, #6]
 8005ece:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	88db      	ldrh	r3, [r3, #6]
 8005ed4:	2b07      	cmp	r3, #7
 8005ed6:	bf28      	it	cs
 8005ed8:	2307      	movcs	r3, #7
 8005eda:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	89fa      	ldrh	r2, [r7, #14]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fb19 	bl	800751a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005ee8:	e085      	b.n	8005ff6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	785a      	ldrb	r2, [r3, #1]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f00:	6939      	ldr	r1, [r7, #16]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 fb32 	bl	8007572 <USBD_CtlPrepareRx>
      break;
 8005f0e:	e072      	b.n	8005ff6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	7850      	ldrb	r0, [r2, #1]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	4798      	blx	r3
      break;
 8005f22:	e068      	b.n	8005ff6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b0b      	cmp	r3, #11
 8005f2a:	d852      	bhi.n	8005fd2 <USBD_CDC_Setup+0x162>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <USBD_CDC_Setup+0xc4>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005fe1 	.word	0x08005fe1
 8005f3c:	08005fd3 	.word	0x08005fd3
 8005f40:	08005fd3 	.word	0x08005fd3
 8005f44:	08005fd3 	.word	0x08005fd3
 8005f48:	08005fd3 	.word	0x08005fd3
 8005f4c:	08005fd3 	.word	0x08005fd3
 8005f50:	08005fd3 	.word	0x08005fd3
 8005f54:	08005fd3 	.word	0x08005fd3
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08005f8f 	.word	0x08005f8f
 8005f60:	08005fb9 	.word	0x08005fb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d107      	bne.n	8005f80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f70:	f107 030a 	add.w	r3, r7, #10
 8005f74:	2202      	movs	r2, #2
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f001 face 	bl	800751a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f7e:	e032      	b.n	8005fe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f001 fa58 	bl	8007438 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	75fb      	strb	r3, [r7, #23]
          break;
 8005f8c:	e02b      	b.n	8005fe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d107      	bne.n	8005faa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f9a:	f107 030d 	add.w	r3, r7, #13
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 fab9 	bl	800751a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fa8:	e01d      	b.n	8005fe6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f001 fa43 	bl	8007438 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb6:	e016      	b.n	8005fe6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d00f      	beq.n	8005fe4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fa36 	bl	8007438 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005fd0:	e008      	b.n	8005fe4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 fa2f 	bl	8007438 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fde:	e002      	b.n	8005fe6 <USBD_CDC_Setup+0x176>
          break;
 8005fe0:	bf00      	nop
 8005fe2:	e008      	b.n	8005ff6 <USBD_CDC_Setup+0x186>
          break;
 8005fe4:	bf00      	nop
      }
      break;
 8005fe6:	e006      	b.n	8005ff6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fa24 	bl	8007438 <USBD_CtlError>
      ret = USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	e04f      	b.n	80060c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006028:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800602a:	78fa      	ldrb	r2, [r7, #3]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	3318      	adds	r3, #24
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d029      	beq.n	8006094 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	3318      	adds	r3, #24
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	78f9      	ldrb	r1, [r7, #3]
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	460b      	mov	r3, r1
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	1a5b      	subs	r3, r3, r1
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4403      	add	r3, r0
 8006060:	3344      	adds	r3, #68	; 0x44
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	fbb2 f1f3 	udiv	r1, r2, r3
 8006068:	fb03 f301 	mul.w	r3, r3, r1
 800606c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800606e:	2b00      	cmp	r3, #0
 8006070:	d110      	bne.n	8006094 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006072:	78fa      	ldrb	r2, [r7, #3]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	3318      	adds	r3, #24
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006086:	78f9      	ldrb	r1, [r7, #3]
 8006088:	2300      	movs	r3, #0
 800608a:	2200      	movs	r2, #0
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 ff46 	bl	8007f1e <USBD_LL_Transmit>
 8006092:	e015      	b.n	80060c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e015      	b.n	8006118 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 ff56 	bl	8007fa2 <USBD_LL_GetRxDataSize>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006112:	4611      	mov	r1, r2
 8006114:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e01b      	b.n	8006172 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <USBD_CDC_EP0_RxReady+0x50>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800614a:	2bff      	cmp	r3, #255	; 0xff
 800614c:	d010      	beq.n	8006170 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800615c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006164:	b292      	uxth	r2, r2
 8006166:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	22ff      	movs	r2, #255	; 0xff
 800616c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2243      	movs	r2, #67	; 0x43
 8006188:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800618a:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	200000d0 	.word	0x200000d0

0800619c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2243      	movs	r2, #67	; 0x43
 80061a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	2000008c 	.word	0x2000008c

080061bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2243      	movs	r2, #67	; 0x43
 80061c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	20000114 	.word	0x20000114

080061dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	220a      	movs	r2, #10
 80061e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	20000048 	.word	0x20000048

080061fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e004      	b.n	800621a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006226:	b480      	push	{r7}
 8006228:	b087      	sub	sp, #28
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006238:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	e008      	b.n	8006256 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006262:	b480      	push	{r7}
 8006264:	b085      	sub	sp, #20
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006272:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	e004      	b.n	8006288 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e01a      	b.n	80062ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d114      	bne.n	80062ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062de:	2181      	movs	r1, #129	; 0x81
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fe1c 	bl	8007f1e <USBD_LL_Transmit>

    ret = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	e016      	b.n	8006340 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	7c1b      	ldrb	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006324:	2101      	movs	r1, #1
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fe1a 	bl	8007f60 <USBD_LL_PrepareReceive>
 800632c:	e007      	b.n	800633e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	2101      	movs	r1, #1
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 fe11 	bl	8007f60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800635c:	2303      	movs	r3, #3
 800635e:	e01f      	b.n	80063a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	79fa      	ldrb	r2, [r7, #7]
 8006392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f001 fc8d 	bl	8007cb4 <USBD_LL_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063bc:	2303      	movs	r3, #3
 80063be:	e016      	b.n	80063ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f107 020e 	add.w	r2, r7, #14
 80063e0:	4610      	mov	r0, r2
 80063e2:	4798      	blx	r3
 80063e4:	4602      	mov	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fca4 	bl	8007d4c <USBD_LL_Start>
 8006404:	4603      	mov	r3, r0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006430:	2303      	movs	r3, #3
 8006432:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	4611      	mov	r1, r2
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	4798      	blx	r3
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	4611      	mov	r1, r2
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
  }

  return USBD_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 ff90 	bl	80073c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d01a      	beq.n	80064fe <USBD_LL_SetupStage+0x72>
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d822      	bhi.n	8006512 <USBD_LL_SetupStage+0x86>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <USBD_LL_SetupStage+0x4a>
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d00a      	beq.n	80064ea <USBD_LL_SetupStage+0x5e>
 80064d4:	e01d      	b.n	8006512 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa62 	bl	80069a8 <USBD_StdDevReq>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
      break;
 80064e8:	e020      	b.n	800652c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fac6 	bl	8006a84 <USBD_StdItfReq>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
      break;
 80064fc:	e016      	b.n	800652c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb05 	bl	8006b16 <USBD_StdEPReq>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
      break;
 8006510:	e00c      	b.n	800652c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800651c:	b2db      	uxtb	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 fc73 	bl	8007e0c <USBD_LL_StallEP>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	bf00      	nop
  }

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b086      	sub	sp, #24
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	460b      	mov	r3, r1
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d138      	bne.n	80065bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006550:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006558:	2b03      	cmp	r3, #3
 800655a:	d14a      	bne.n	80065f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d913      	bls.n	8006590 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	4293      	cmp	r3, r2
 8006580:	bf28      	it	cs
 8006582:	4613      	movcs	r3, r2
 8006584:	461a      	mov	r2, r3
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 f80f 	bl	80075ac <USBD_CtlContinueRx>
 800658e:	e030      	b.n	80065f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b03      	cmp	r3, #3
 800659a:	d10b      	bne.n	80065b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 f80a 	bl	80075ce <USBD_CtlSendStatus>
 80065ba:	e01a      	b.n	80065f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d114      	bne.n	80065f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00e      	beq.n	80065f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	7afa      	ldrb	r2, [r7, #11]
 80065de:	4611      	mov	r1, r2
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	4798      	blx	r3
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	e000      	b.n	80065f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	460b      	mov	r3, r1
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800660a:	7afb      	ldrb	r3, [r7, #11]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d16b      	bne.n	80066e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3314      	adds	r3, #20
 8006614:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800661c:	2b02      	cmp	r3, #2
 800661e:	d156      	bne.n	80066ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	429a      	cmp	r2, r3
 800662a:	d914      	bls.n	8006656 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	461a      	mov	r2, r3
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 ff84 	bl	8007550 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006648:	2300      	movs	r3, #0
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 fc86 	bl	8007f60 <USBD_LL_PrepareReceive>
 8006654:	e03b      	b.n	80066ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	429a      	cmp	r2, r3
 8006660:	d11c      	bne.n	800669c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800666a:	429a      	cmp	r2, r3
 800666c:	d316      	bcc.n	800669c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006678:	429a      	cmp	r2, r3
 800667a:	d20f      	bcs.n	800669c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 ff65 	bl	8007550 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800668e:	2300      	movs	r3, #0
 8006690:	2200      	movs	r2, #0
 8006692:	2100      	movs	r1, #0
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fc63 	bl	8007f60 <USBD_LL_PrepareReceive>
 800669a:	e018      	b.n	80066ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d10b      	bne.n	80066c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 fba2 	bl	8007e0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 ff93 	bl	80075f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d122      	bne.n	800671e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff fe98 	bl	800640e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066e6:	e01a      	b.n	800671e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d114      	bne.n	800671e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	7afa      	ldrb	r2, [r7, #11]
 800670a:	4611      	mov	r1, r2
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	4798      	blx	r3
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	e000      	b.n	8006720 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e02f      	b.n	80067bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00f      	beq.n	8006786 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6852      	ldr	r2, [r2, #4]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	4611      	mov	r1, r2
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006786:	2340      	movs	r3, #64	; 0x40
 8006788:	2200      	movs	r2, #0
 800678a:	2100      	movs	r1, #0
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 faf8 	bl	8007d82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2240      	movs	r2, #64	; 0x40
 800679e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067a2:	2340      	movs	r3, #64	; 0x40
 80067a4:	2200      	movs	r2, #0
 80067a6:	2180      	movs	r1, #128	; 0x80
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 faea 	bl	8007d82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2204      	movs	r2, #4
 80067fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b04      	cmp	r3, #4
 8006822:	d106      	bne.n	8006832 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800682a:	b2da      	uxtb	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e012      	b.n	800687c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d10b      	bne.n	800687a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	e014      	b.n	80068c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d10d      	bne.n	80068c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	4611      	mov	r1, r2
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e014      	b.n	8006914 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d10d      	bne.n	8006912 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	4611      	mov	r1, r2
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6852      	ldr	r2, [r2, #4]
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	4611      	mov	r1, r2
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800696a:	b480      	push	{r7}
 800696c:	b087      	sub	sp, #28
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	3301      	adds	r3, #1
 8006980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006988:	8a3b      	ldrh	r3, [r7, #16]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b21a      	sxth	r2, r3
 800698e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006992:	4313      	orrs	r3, r2
 8006994:	b21b      	sxth	r3, r3
 8006996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006998:	89fb      	ldrh	r3, [r7, #14]
}
 800699a:	4618      	mov	r0, r3
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d005      	beq.n	80069ce <USBD_StdDevReq+0x26>
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d853      	bhi.n	8006a6e <USBD_StdDevReq+0xc6>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <USBD_StdDevReq+0x3a>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d14f      	bne.n	8006a6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
      break;
 80069e0:	e04a      	b.n	8006a78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d83b      	bhi.n	8006a62 <USBD_StdDevReq+0xba>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBD_StdDevReq+0x48>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a63 	.word	0x08006a63
 80069fc:	08006a4f 	.word	0x08006a4f
 8006a00:	08006a63 	.word	0x08006a63
 8006a04:	08006a23 	.word	0x08006a23
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a63 	.word	0x08006a63
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a2d 	.word	0x08006a2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f9de 	bl	8006ddc <USBD_GetDescriptor>
          break;
 8006a20:	e024      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb43 	bl	80070b0 <USBD_SetAddress>
          break;
 8006a2a:	e01f      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fb82 	bl	8007138 <USBD_SetConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
          break;
 8006a38:	e018      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fc21 	bl	8007284 <USBD_GetConfig>
          break;
 8006a42:	e013      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fc52 	bl	80072f0 <USBD_GetStatus>
          break;
 8006a4c:	e00e      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc81 	bl	8007358 <USBD_SetFeature>
          break;
 8006a56:	e009      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fc90 	bl	8007380 <USBD_ClrFeature>
          break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fce7 	bl	8007438 <USBD_CtlError>
          break;
 8006a6a:	bf00      	nop
      }
      break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fce1 	bl	8007438 <USBD_CtlError>
      break;
 8006a76:	bf00      	nop
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d005      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d82f      	bhi.n	8006b02 <USBD_StdItfReq+0x7e>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d12b      	bne.n	8006b02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d81d      	bhi.n	8006af4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	889b      	ldrh	r3, [r3, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d813      	bhi.n	8006aea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <USBD_StdItfReq+0x7a>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10d      	bne.n	8006afe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fd73 	bl	80075ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ae8:	e009      	b.n	8006afe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fca3 	bl	8007438 <USBD_CtlError>
          break;
 8006af2:	e004      	b.n	8006afe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc9e 	bl	8007438 <USBD_CtlError>
          break;
 8006afc:	e000      	b.n	8006b00 <USBD_StdItfReq+0x7c>
          break;
 8006afe:	bf00      	nop
      }
      break;
 8006b00:	e004      	b.n	8006b0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc97 	bl	8007438 <USBD_CtlError>
      break;
 8006b0a:	bf00      	nop
  }

  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	889b      	ldrh	r3, [r3, #4]
 8006b28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b32:	2b40      	cmp	r3, #64	; 0x40
 8006b34:	d007      	beq.n	8006b46 <USBD_StdEPReq+0x30>
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	f200 8145 	bhi.w	8006dc6 <USBD_StdEPReq+0x2b0>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00c      	beq.n	8006b5a <USBD_StdEPReq+0x44>
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	f040 8140 	bne.w	8006dc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
      break;
 8006b58:	e13a      	b.n	8006dd0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d007      	beq.n	8006b72 <USBD_StdEPReq+0x5c>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	f300 8129 	bgt.w	8006dba <USBD_StdEPReq+0x2a4>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d07f      	beq.n	8006c6c <USBD_StdEPReq+0x156>
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d03c      	beq.n	8006bea <USBD_StdEPReq+0xd4>
 8006b70:	e123      	b.n	8006dba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d002      	beq.n	8006b84 <USBD_StdEPReq+0x6e>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d016      	beq.n	8006bb0 <USBD_StdEPReq+0x9a>
 8006b82:	e02c      	b.n	8006bde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <USBD_StdEPReq+0x90>
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b80      	cmp	r3, #128	; 0x80
 8006b8e:	d00a      	beq.n	8006ba6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f939 	bl	8007e0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b9a:	2180      	movs	r1, #128	; 0x80
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f935 	bl	8007e0c <USBD_LL_StallEP>
 8006ba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ba4:	e020      	b.n	8006be8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fc45 	bl	8007438 <USBD_CtlError>
              break;
 8006bae:	e01b      	b.n	8006be8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	885b      	ldrh	r3, [r3, #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10e      	bne.n	8006bd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00b      	beq.n	8006bd6 <USBD_StdEPReq+0xc0>
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b80      	cmp	r3, #128	; 0x80
 8006bc2:	d008      	beq.n	8006bd6 <USBD_StdEPReq+0xc0>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	88db      	ldrh	r3, [r3, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f91b 	bl	8007e0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fcf9 	bl	80075ce <USBD_CtlSendStatus>

              break;
 8006bdc:	e004      	b.n	8006be8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc29 	bl	8007438 <USBD_CtlError>
              break;
 8006be6:	bf00      	nop
          }
          break;
 8006be8:	e0ec      	b.n	8006dc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d002      	beq.n	8006bfc <USBD_StdEPReq+0xe6>
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d016      	beq.n	8006c28 <USBD_StdEPReq+0x112>
 8006bfa:	e030      	b.n	8006c5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <USBD_StdEPReq+0x108>
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b80      	cmp	r3, #128	; 0x80
 8006c06:	d00a      	beq.n	8006c1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 f8fd 	bl	8007e0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c12:	2180      	movs	r1, #128	; 0x80
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 f8f9 	bl	8007e0c <USBD_LL_StallEP>
 8006c1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c1c:	e025      	b.n	8006c6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc09 	bl	8007438 <USBD_CtlError>
              break;
 8006c26:	e020      	b.n	8006c6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	885b      	ldrh	r3, [r3, #2]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11b      	bne.n	8006c68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 f903 	bl	8007e4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fcc2 	bl	80075ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c5c:	e004      	b.n	8006c68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fbe9 	bl	8007438 <USBD_CtlError>
              break;
 8006c66:	e000      	b.n	8006c6a <USBD_StdEPReq+0x154>
              break;
 8006c68:	bf00      	nop
          }
          break;
 8006c6a:	e0ab      	b.n	8006dc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d002      	beq.n	8006c7e <USBD_StdEPReq+0x168>
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d032      	beq.n	8006ce2 <USBD_StdEPReq+0x1cc>
 8006c7c:	e097      	b.n	8006dae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <USBD_StdEPReq+0x17e>
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b80      	cmp	r3, #128	; 0x80
 8006c88:	d004      	beq.n	8006c94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fbd3 	bl	8007438 <USBD_CtlError>
                break;
 8006c92:	e091      	b.n	8006db8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da0b      	bge.n	8006cb4 <USBD_StdEPReq+0x19e>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	3310      	adds	r3, #16
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	e00b      	b.n	8006ccc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3304      	adds	r3, #4
 8006ccc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fc1d 	bl	800751a <USBD_CtlSendData>
              break;
 8006ce0:	e06a      	b.n	8006db8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ce2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	da11      	bge.n	8006d0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	3324      	adds	r3, #36	; 0x24
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d117      	bne.n	8006d34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb96 	bl	8007438 <USBD_CtlError>
                  break;
 8006d0c:	e054      	b.n	8006db8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb83 	bl	8007438 <USBD_CtlError>
                  break;
 8006d32:	e041      	b.n	8006db8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	da0b      	bge.n	8006d54 <USBD_StdEPReq+0x23e>
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	3310      	adds	r3, #16
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	3304      	adds	r3, #4
 8006d52:	e00b      	b.n	8006d6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <USBD_StdEPReq+0x264>
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d103      	bne.n	8006d82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e00e      	b.n	8006da0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f87e 	bl	8007e88 <USBD_LL_IsStallEP>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	e002      	b.n	8006da0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2202      	movs	r2, #2
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fbb7 	bl	800751a <USBD_CtlSendData>
              break;
 8006dac:	e004      	b.n	8006db8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb41 	bl	8007438 <USBD_CtlError>
              break;
 8006db6:	bf00      	nop
          }
          break;
 8006db8:	e004      	b.n	8006dc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb3b 	bl	8007438 <USBD_CtlError>
          break;
 8006dc2:	bf00      	nop
      }
      break;
 8006dc4:	e004      	b.n	8006dd0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb35 	bl	8007438 <USBD_CtlError>
      break;
 8006dce:	bf00      	nop
  }

  return ret;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	885b      	ldrh	r3, [r3, #2]
 8006df6:	0a1b      	lsrs	r3, r3, #8
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	f200 8128 	bhi.w	8007052 <USBD_GetDescriptor+0x276>
 8006e02:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <USBD_GetDescriptor+0x2c>)
 8006e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e08:	08006e25 	.word	0x08006e25
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08007053 	.word	0x08007053
 8006e18:	08007053 	.word	0x08007053
 8006e1c:	08006ff3 	.word	0x08006ff3
 8006e20:	0800701f 	.word	0x0800701f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	7c12      	ldrb	r2, [r2, #16]
 8006e30:	f107 0108 	add.w	r1, r7, #8
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	60f8      	str	r0, [r7, #12]
      break;
 8006e3a:	e112      	b.n	8007062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7c1b      	ldrb	r3, [r3, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10d      	bne.n	8006e60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	f107 0208 	add.w	r2, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e5e:	e100      	b.n	8007062 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	f107 0208 	add.w	r2, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	2202      	movs	r2, #2
 8006e78:	701a      	strb	r2, [r3, #0]
      break;
 8006e7a:	e0f2      	b.n	8007062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	885b      	ldrh	r3, [r3, #2]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	f200 80ac 	bhi.w	8006fe0 <USBD_GetDescriptor+0x204>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <USBD_GetDescriptor+0xb4>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006ea9 	.word	0x08006ea9
 8006e94:	08006edd 	.word	0x08006edd
 8006e98:	08006f11 	.word	0x08006f11
 8006e9c:	08006f45 	.word	0x08006f45
 8006ea0:	08006f79 	.word	0x08006f79
 8006ea4:	08006fad 	.word	0x08006fad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	f107 0108 	add.w	r1, r7, #8
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eca:	e091      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fab2 	bl	8007438 <USBD_CtlError>
            err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eda:	e089      	b.n	8006ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7c12      	ldrb	r2, [r2, #16]
 8006ef4:	f107 0108 	add.w	r1, r7, #8
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4798      	blx	r3
 8006efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efe:	e077      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa98 	bl	8007438 <USBD_CtlError>
            err++;
 8006f08:	7afb      	ldrb	r3, [r7, #11]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0e:	e06f      	b.n	8006ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00b      	beq.n	8006f34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	7c12      	ldrb	r2, [r2, #16]
 8006f28:	f107 0108 	add.w	r1, r7, #8
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f32:	e05d      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa7e 	bl	8007438 <USBD_CtlError>
            err++;
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	72fb      	strb	r3, [r7, #11]
          break;
 8006f42:	e055      	b.n	8006ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	7c12      	ldrb	r2, [r2, #16]
 8006f5c:	f107 0108 	add.w	r1, r7, #8
 8006f60:	4610      	mov	r0, r2
 8006f62:	4798      	blx	r3
 8006f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f66:	e043      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fa64 	bl	8007438 <USBD_CtlError>
            err++;
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	3301      	adds	r3, #1
 8006f74:	72fb      	strb	r3, [r7, #11]
          break;
 8006f76:	e03b      	b.n	8006ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	7c12      	ldrb	r2, [r2, #16]
 8006f90:	f107 0108 	add.w	r1, r7, #8
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f9a:	e029      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa4a 	bl	8007438 <USBD_CtlError>
            err++;
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8006faa:	e021      	b.n	8006ff0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fce:	e00f      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa30 	bl	8007438 <USBD_CtlError>
            err++;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fde:	e007      	b.n	8006ff0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa28 	bl	8007438 <USBD_CtlError>
          err++;
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	3301      	adds	r3, #1
 8006fec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006fee:	bf00      	nop
      }
      break;
 8006ff0:	e037      	b.n	8007062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	7c1b      	ldrb	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	f107 0208 	add.w	r2, r7, #8
 8007006:	4610      	mov	r0, r2
 8007008:	4798      	blx	r3
 800700a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800700c:	e029      	b.n	8007062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa11 	bl	8007438 <USBD_CtlError>
        err++;
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	3301      	adds	r3, #1
 800701a:	72fb      	strb	r3, [r7, #11]
      break;
 800701c:	e021      	b.n	8007062 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	7c1b      	ldrb	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10d      	bne.n	8007042 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702e:	f107 0208 	add.w	r2, r7, #8
 8007032:	4610      	mov	r0, r2
 8007034:	4798      	blx	r3
 8007036:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	2207      	movs	r2, #7
 800703e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007040:	e00f      	b.n	8007062 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f9f7 	bl	8007438 <USBD_CtlError>
        err++;
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	3301      	adds	r3, #1
 800704e:	72fb      	strb	r3, [r7, #11]
      break;
 8007050:	e007      	b.n	8007062 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9ef 	bl	8007438 <USBD_CtlError>
      err++;
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	3301      	adds	r3, #1
 800705e:	72fb      	strb	r3, [r7, #11]
      break;
 8007060:	bf00      	nop
  }

  if (err != 0U)
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11e      	bne.n	80070a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	88db      	ldrh	r3, [r3, #6]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d016      	beq.n	800709e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007070:	893b      	ldrh	r3, [r7, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00e      	beq.n	8007094 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88da      	ldrh	r2, [r3, #6]
 800707a:	893b      	ldrh	r3, [r7, #8]
 800707c:	4293      	cmp	r3, r2
 800707e:	bf28      	it	cs
 8007080:	4613      	movcs	r3, r2
 8007082:	b29b      	uxth	r3, r3
 8007084:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	461a      	mov	r2, r3
 800708a:	68f9      	ldr	r1, [r7, #12]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa44 	bl	800751a <USBD_CtlSendData>
 8007092:	e009      	b.n	80070a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f9ce 	bl	8007438 <USBD_CtlError>
 800709c:	e004      	b.n	80070a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa95 	bl	80075ce <USBD_CtlSendStatus>
 80070a4:	e000      	b.n	80070a8 <USBD_GetDescriptor+0x2cc>
    return;
 80070a6:	bf00      	nop
  }
}
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop

080070b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	889b      	ldrh	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d131      	bne.n	8007126 <USBD_SetAddress+0x76>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	88db      	ldrh	r3, [r3, #6]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12d      	bne.n	8007126 <USBD_SetAddress+0x76>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	2b7f      	cmp	r3, #127	; 0x7f
 80070d0:	d829      	bhi.n	8007126 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d104      	bne.n	80070f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f9a3 	bl	8007438 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f2:	e01d      	b.n	8007130 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7bfa      	ldrb	r2, [r7, #15]
 80070f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 feed 	bl	8007ee0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa61 	bl	80075ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711a:	e009      	b.n	8007130 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007124:	e004      	b.n	8007130 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f985 	bl	8007438 <USBD_CtlError>
  }
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	885b      	ldrh	r3, [r3, #2]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	4b4c      	ldr	r3, [pc, #304]	; (8007280 <USBD_SetConfig+0x148>)
 800714e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007150:	4b4b      	ldr	r3, [pc, #300]	; (8007280 <USBD_SetConfig+0x148>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d905      	bls.n	8007164 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f96c 	bl	8007438 <USBD_CtlError>
    return USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	e088      	b.n	8007276 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d002      	beq.n	8007176 <USBD_SetConfig+0x3e>
 8007170:	2b03      	cmp	r3, #3
 8007172:	d025      	beq.n	80071c0 <USBD_SetConfig+0x88>
 8007174:	e071      	b.n	800725a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007176:	4b42      	ldr	r3, [pc, #264]	; (8007280 <USBD_SetConfig+0x148>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01c      	beq.n	80071b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800717e:	4b40      	ldr	r3, [pc, #256]	; (8007280 <USBD_SetConfig+0x148>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007188:	4b3d      	ldr	r3, [pc, #244]	; (8007280 <USBD_SetConfig+0x148>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff f948 	bl	8006424 <USBD_SetClassConfig>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d004      	beq.n	80071a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f949 	bl	8007438 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071a6:	e065      	b.n	8007274 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fa10 	bl	80075ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2203      	movs	r2, #3
 80071b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071b6:	e05d      	b.n	8007274 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fa08 	bl	80075ce <USBD_CtlSendStatus>
      break;
 80071be:	e059      	b.n	8007274 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071c0:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <USBD_SetConfig+0x148>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d112      	bne.n	80071ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <USBD_SetConfig+0x148>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071da:	4b29      	ldr	r3, [pc, #164]	; (8007280 <USBD_SetConfig+0x148>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f7ff f93b 	bl	800645c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f9f1 	bl	80075ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071ec:	e042      	b.n	8007274 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80071ee:	4b24      	ldr	r3, [pc, #144]	; (8007280 <USBD_SetConfig+0x148>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d02a      	beq.n	8007252 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff f929 	bl	800645c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800720a:	4b1d      	ldr	r3, [pc, #116]	; (8007280 <USBD_SetConfig+0x148>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007214:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <USBD_SetConfig+0x148>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff f902 	bl	8006424 <USBD_SetClassConfig>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00f      	beq.n	800724a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f903 	bl	8007438 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	b2db      	uxtb	r3, r3
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff f90e 	bl	800645c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007248:	e014      	b.n	8007274 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f9bf 	bl	80075ce <USBD_CtlSendStatus>
      break;
 8007250:	e010      	b.n	8007274 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f9bb 	bl	80075ce <USBD_CtlSendStatus>
      break;
 8007258:	e00c      	b.n	8007274 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f8eb 	bl	8007438 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <USBD_SetConfig+0x148>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff f8f7 	bl	800645c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	73fb      	strb	r3, [r7, #15]
      break;
 8007272:	bf00      	nop
  }

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000244 	.word	0x20000244

08007284 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d004      	beq.n	80072a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f8cd 	bl	8007438 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800729e:	e023      	b.n	80072e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	dc02      	bgt.n	80072b2 <USBD_GetConfig+0x2e>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc03      	bgt.n	80072b8 <USBD_GetConfig+0x34>
 80072b0:	e015      	b.n	80072de <USBD_GetConfig+0x5a>
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d00b      	beq.n	80072ce <USBD_GetConfig+0x4a>
 80072b6:	e012      	b.n	80072de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3308      	adds	r3, #8
 80072c2:	2201      	movs	r2, #1
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f927 	bl	800751a <USBD_CtlSendData>
        break;
 80072cc:	e00c      	b.n	80072e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	2201      	movs	r2, #1
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f91f 	bl	800751a <USBD_CtlSendData>
        break;
 80072dc:	e004      	b.n	80072e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f8a9 	bl	8007438 <USBD_CtlError>
        break;
 80072e6:	bf00      	nop
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	b2db      	uxtb	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	2b02      	cmp	r3, #2
 8007306:	d81e      	bhi.n	8007346 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	88db      	ldrh	r3, [r3, #6]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d004      	beq.n	800731a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f890 	bl	8007438 <USBD_CtlError>
        break;
 8007318:	e01a      	b.n	8007350 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	330c      	adds	r3, #12
 800733a:	2202      	movs	r2, #2
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8eb 	bl	800751a <USBD_CtlSendData>
      break;
 8007344:	e004      	b.n	8007350 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f875 	bl	8007438 <USBD_CtlError>
      break;
 800734e:	bf00      	nop
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	885b      	ldrh	r3, [r3, #2]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d106      	bne.n	8007378 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f92b 	bl	80075ce <USBD_CtlSendStatus>
  }
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	2b02      	cmp	r3, #2
 8007396:	d80b      	bhi.n	80073b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d10c      	bne.n	80073ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f910 	bl	80075ce <USBD_CtlSendStatus>
      }
      break;
 80073ae:	e004      	b.n	80073ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f840 	bl	8007438 <USBD_CtlError>
      break;
 80073b8:	e000      	b.n	80073bc <USBD_ClrFeature+0x3c>
      break;
 80073ba:	bf00      	nop
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3301      	adds	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	781a      	ldrb	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fabb 	bl	800696a <SWAPBYTE>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3301      	adds	r3, #1
 8007400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7ff faae 	bl	800696a <SWAPBYTE>
 800740e:	4603      	mov	r3, r0
 8007410:	461a      	mov	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff faa1 	bl	800696a <SWAPBYTE>
 8007428:	4603      	mov	r3, r0
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	80da      	strh	r2, [r3, #6]
}
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fce1 	bl	8007e0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fcdd 	bl	8007e0c <USBD_LL_StallEP>
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d036      	beq.n	80074de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007474:	6938      	ldr	r0, [r7, #16]
 8007476:	f000 f836 	bl	80074e6 <USBD_GetLen>
 800747a:	4603      	mov	r3, r0
 800747c:	3301      	adds	r3, #1
 800747e:	b29b      	uxth	r3, r3
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	7812      	ldrb	r2, [r2, #0]
 8007492:	701a      	strb	r2, [r3, #0]
  idx++;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	3301      	adds	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	4413      	add	r3, r2
 80074a0:	2203      	movs	r2, #3
 80074a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	3301      	adds	r3, #1
 80074a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074aa:	e013      	b.n	80074d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	4413      	add	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3301      	adds	r3, #1
 80074bc:	613b      	str	r3, [r7, #16]
    idx++;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	3301      	adds	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4413      	add	r3, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	3301      	adds	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e7      	bne.n	80074ac <USBD_GetString+0x52>
 80074dc:	e000      	b.n	80074e0 <USBD_GetString+0x86>
    return;
 80074de:	bf00      	nop
  }
}
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074f6:	e005      	b.n	8007504 <USBD_GetLen+0x1e>
  {
    len++;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	3301      	adds	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	3301      	adds	r3, #1
 8007502:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f5      	bne.n	80074f8 <USBD_GetLen+0x12>
  }

  return len;
 800750c:	7bfb      	ldrb	r3, [r7, #15]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2202      	movs	r2, #2
 800752a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	2100      	movs	r1, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 fcec 	bl	8007f1e <USBD_LL_Transmit>

  return USBD_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	2100      	movs	r1, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fcdb 	bl	8007f1e <USBD_LL_Transmit>

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2203      	movs	r2, #3
 8007582:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	2100      	movs	r1, #0
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fcdf 	bl	8007f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	2100      	movs	r1, #0
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 fcce 	bl	8007f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075de:	2300      	movs	r3, #0
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fc9a 	bl	8007f1e <USBD_LL_Transmit>

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2205      	movs	r2, #5
 8007600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007604:	2300      	movs	r3, #0
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fca8 	bl	8007f60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007620:	2200      	movs	r2, #0
 8007622:	4912      	ldr	r1, [pc, #72]	; (800766c <MX_USB_DEVICE_Init+0x50>)
 8007624:	4812      	ldr	r0, [pc, #72]	; (8007670 <MX_USB_DEVICE_Init+0x54>)
 8007626:	f7fe fe8f 	bl	8006348 <USBD_Init>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007630:	f7f9 fb34 	bl	8000c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007634:	490f      	ldr	r1, [pc, #60]	; (8007674 <MX_USB_DEVICE_Init+0x58>)
 8007636:	480e      	ldr	r0, [pc, #56]	; (8007670 <MX_USB_DEVICE_Init+0x54>)
 8007638:	f7fe feb6 	bl	80063a8 <USBD_RegisterClass>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007642:	f7f9 fb2b 	bl	8000c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007646:	490c      	ldr	r1, [pc, #48]	; (8007678 <MX_USB_DEVICE_Init+0x5c>)
 8007648:	4809      	ldr	r0, [pc, #36]	; (8007670 <MX_USB_DEVICE_Init+0x54>)
 800764a:	f7fe fdd7 	bl	80061fc <USBD_CDC_RegisterInterface>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007654:	f7f9 fb22 	bl	8000c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007658:	4805      	ldr	r0, [pc, #20]	; (8007670 <MX_USB_DEVICE_Init+0x54>)
 800765a:	f7fe fecc 	bl	80063f6 <USBD_Start>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007664:	f7f9 fb1a 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007668:	bf00      	nop
 800766a:	bd80      	pop	{r7, pc}
 800766c:	2000016c 	.word	0x2000016c
 8007670:	200005cc 	.word	0x200005cc
 8007674:	20000054 	.word	0x20000054
 8007678:	20000158 	.word	0x20000158

0800767c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007680:	2200      	movs	r2, #0
 8007682:	4905      	ldr	r1, [pc, #20]	; (8007698 <CDC_Init_FS+0x1c>)
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <CDC_Init_FS+0x20>)
 8007686:	f7fe fdce 	bl	8006226 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800768a:	4905      	ldr	r1, [pc, #20]	; (80076a0 <CDC_Init_FS+0x24>)
 800768c:	4803      	ldr	r0, [pc, #12]	; (800769c <CDC_Init_FS+0x20>)
 800768e:	f7fe fde8 	bl	8006262 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007692:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd80      	pop	{r7, pc}
 8007698:	2000109c 	.word	0x2000109c
 800769c:	200005cc 	.word	0x200005cc
 80076a0:	2000089c 	.word	0x2000089c

080076a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
 80076c0:	4613      	mov	r3, r2
 80076c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b23      	cmp	r3, #35	; 0x23
 80076c8:	d84a      	bhi.n	8007760 <CDC_Control_FS+0xac>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <CDC_Control_FS+0x1c>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	08007761 	.word	0x08007761
 80076d4:	08007761 	.word	0x08007761
 80076d8:	08007761 	.word	0x08007761
 80076dc:	08007761 	.word	0x08007761
 80076e0:	08007761 	.word	0x08007761
 80076e4:	08007761 	.word	0x08007761
 80076e8:	08007761 	.word	0x08007761
 80076ec:	08007761 	.word	0x08007761
 80076f0:	08007761 	.word	0x08007761
 80076f4:	08007761 	.word	0x08007761
 80076f8:	08007761 	.word	0x08007761
 80076fc:	08007761 	.word	0x08007761
 8007700:	08007761 	.word	0x08007761
 8007704:	08007761 	.word	0x08007761
 8007708:	08007761 	.word	0x08007761
 800770c:	08007761 	.word	0x08007761
 8007710:	08007761 	.word	0x08007761
 8007714:	08007761 	.word	0x08007761
 8007718:	08007761 	.word	0x08007761
 800771c:	08007761 	.word	0x08007761
 8007720:	08007761 	.word	0x08007761
 8007724:	08007761 	.word	0x08007761
 8007728:	08007761 	.word	0x08007761
 800772c:	08007761 	.word	0x08007761
 8007730:	08007761 	.word	0x08007761
 8007734:	08007761 	.word	0x08007761
 8007738:	08007761 	.word	0x08007761
 800773c:	08007761 	.word	0x08007761
 8007740:	08007761 	.word	0x08007761
 8007744:	08007761 	.word	0x08007761
 8007748:	08007761 	.word	0x08007761
 800774c:	08007761 	.word	0x08007761
 8007750:	08007761 	.word	0x08007761
 8007754:	08007761 	.word	0x08007761
 8007758:	08007761 	.word	0x08007761
 800775c:	08007761 	.word	0x08007761
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007760:	bf00      	nop
  }

  return (USBD_OK);
 8007762:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4805      	ldr	r0, [pc, #20]	; (8007794 <CDC_Receive_FS+0x24>)
 800777e:	f7fe fd70 	bl	8006262 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007782:	4804      	ldr	r0, [pc, #16]	; (8007794 <CDC_Receive_FS+0x24>)
 8007784:	f7fe fdb6 	bl	80062f4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007788:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200005cc 	.word	0x200005cc

08007798 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80077a8:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <CDC_Transmit_FS+0x48>)
 80077aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e00b      	b.n	80077d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80077be:	887b      	ldrh	r3, [r7, #2]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6879      	ldr	r1, [r7, #4]
 80077c4:	4806      	ldr	r0, [pc, #24]	; (80077e0 <CDC_Transmit_FS+0x48>)
 80077c6:	f7fe fd2e 	bl	8006226 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80077ca:	4805      	ldr	r0, [pc, #20]	; (80077e0 <CDC_Transmit_FS+0x48>)
 80077cc:	f7fe fd62 	bl	8006294 <USBD_CDC_TransmitPacket>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200005cc 	.word	0x200005cc

080077e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	4603      	mov	r3, r0
 8007810:	6039      	str	r1, [r7, #0]
 8007812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2212      	movs	r2, #18
 8007818:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800781a:	4b03      	ldr	r3, [pc, #12]	; (8007828 <USBD_FS_DeviceDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	20000188 	.word	0x20000188

0800782c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2204      	movs	r2, #4
 800783c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800783e:	4b03      	ldr	r3, [pc, #12]	; (800784c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	2000019c 	.word	0x2000019c

08007850 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	4907      	ldr	r1, [pc, #28]	; (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
 8007866:	4808      	ldr	r0, [pc, #32]	; (8007888 <USBD_FS_ProductStrDescriptor+0x38>)
 8007868:	f7ff fdf7 	bl	800745a <USBD_GetString>
 800786c:	e004      	b.n	8007878 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	4904      	ldr	r1, [pc, #16]	; (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
 8007872:	4805      	ldr	r0, [pc, #20]	; (8007888 <USBD_FS_ProductStrDescriptor+0x38>)
 8007874:	f7ff fdf1 	bl	800745a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	2000189c 	.word	0x2000189c
 8007888:	08008ab4 	.word	0x08008ab4

0800788c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	4904      	ldr	r1, [pc, #16]	; (80078ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800789c:	4804      	ldr	r0, [pc, #16]	; (80078b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800789e:	f7ff fddc 	bl	800745a <USBD_GetString>
  return USBD_StrDesc;
 80078a2:	4b02      	ldr	r3, [pc, #8]	; (80078ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000189c 	.word	0x2000189c
 80078b0:	08008acc 	.word	0x08008acc

080078b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	221a      	movs	r2, #26
 80078c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078c6:	f000 f843 	bl	8007950 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078ca:	4b02      	ldr	r3, [pc, #8]	; (80078d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	200001a0 	.word	0x200001a0

080078d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ee:	4808      	ldr	r0, [pc, #32]	; (8007910 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078f0:	f7ff fdb3 	bl	800745a <USBD_GetString>
 80078f4:	e004      	b.n	8007900 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4904      	ldr	r1, [pc, #16]	; (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
 80078fa:	4805      	ldr	r0, [pc, #20]	; (8007910 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078fc:	f7ff fdad 	bl	800745a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	; (800790c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000189c 	.word	0x2000189c
 8007910:	08008ae0 	.word	0x08008ae0

08007914 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4907      	ldr	r1, [pc, #28]	; (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800792a:	4808      	ldr	r0, [pc, #32]	; (800794c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800792c:	f7ff fd95 	bl	800745a <USBD_GetString>
 8007930:	e004      	b.n	800793c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007932:	683a      	ldr	r2, [r7, #0]
 8007934:	4904      	ldr	r1, [pc, #16]	; (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007936:	4805      	ldr	r0, [pc, #20]	; (800794c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007938:	f7ff fd8f 	bl	800745a <USBD_GetString>
  }
  return USBD_StrDesc;
 800793c:	4b02      	ldr	r3, [pc, #8]	; (8007948 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000189c 	.word	0x2000189c
 800794c:	08008aec 	.word	0x08008aec

08007950 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007956:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <Get_SerialNum+0x44>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800795c:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <Get_SerialNum+0x48>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007962:	4b0e      	ldr	r3, [pc, #56]	; (800799c <Get_SerialNum+0x4c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007976:	2208      	movs	r2, #8
 8007978:	4909      	ldr	r1, [pc, #36]	; (80079a0 <Get_SerialNum+0x50>)
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f814 	bl	80079a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007980:	2204      	movs	r2, #4
 8007982:	4908      	ldr	r1, [pc, #32]	; (80079a4 <Get_SerialNum+0x54>)
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f000 f80f 	bl	80079a8 <IntToUnicode>
  }
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	1fff7a10 	.word	0x1fff7a10
 8007998:	1fff7a14 	.word	0x1fff7a14
 800799c:	1fff7a18 	.word	0x1fff7a18
 80079a0:	200001a2 	.word	0x200001a2
 80079a4:	200001b2 	.word	0x200001b2

080079a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	75fb      	strb	r3, [r7, #23]
 80079be:	e027      	b.n	8007a10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	0f1b      	lsrs	r3, r3, #28
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	d80b      	bhi.n	80079e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0f1b      	lsrs	r3, r3, #28
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4619      	mov	r1, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	440b      	add	r3, r1
 80079d8:	3230      	adds	r2, #48	; 0x30
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e00a      	b.n	80079f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	0f1b      	lsrs	r3, r3, #28
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4619      	mov	r1, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	440b      	add	r3, r1
 80079f0:	3237      	adds	r2, #55	; 0x37
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	3301      	adds	r3, #1
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	4413      	add	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
 8007a10:	7dfa      	ldrb	r2, [r7, #23]
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d3d3      	bcc.n	80079c0 <IntToUnicode+0x18>
  }
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
	...

08007a28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	609a      	str	r2, [r3, #8]
 8007a3c:	60da      	str	r2, [r3, #12]
 8007a3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a48:	d13a      	bne.n	8007ac0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	4a1d      	ldr	r2, [pc, #116]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	6313      	str	r3, [r2, #48]	; 0x30
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a74:	2303      	movs	r3, #3
 8007a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a78:	230a      	movs	r3, #10
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7c:	f107 0314 	add.w	r3, r7, #20
 8007a80:	4619      	mov	r1, r3
 8007a82:	4812      	ldr	r0, [pc, #72]	; (8007acc <HAL_PCD_MspInit+0xa4>)
 8007a84:	f7fa fa4e 	bl	8001f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	4a0e      	ldr	r2, [pc, #56]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	6353      	str	r3, [r2, #52]	; 0x34
 8007a94:	2300      	movs	r3, #0
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <HAL_PCD_MspInit+0xa0>)
 8007aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2043      	movs	r0, #67	; 0x43
 8007ab6:	f7fa f9fe 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007aba:	2043      	movs	r0, #67	; 0x43
 8007abc:	f7fa fa17 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	3728      	adds	r7, #40	; 0x28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020000 	.word	0x40020000

08007ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fcd0 	bl	800648c <USBD_LL_SetupStage>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7fe fd0a 	bl	8006536 <USBD_LL_DataOutStage>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3348      	adds	r3, #72	; 0x48
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7fe fd53 	bl	80065fc <USBD_LL_DataInStage>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fe67 	bl	8006840 <USBD_LL_SOF>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
 8007b92:	e008      	b.n	8007ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d102      	bne.n	8007ba2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
 8007ba0:	e001      	b.n	8007ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ba2:	f7f9 f87b 	bl	8000c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bac:	7bfa      	ldrb	r2, [r7, #15]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fe07 	bl	80067c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fdb3 	bl	8006728 <USBD_LL_Reset>
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fe02 	bl	80067e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6812      	ldr	r2, [r2, #0]
 8007bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf2:	f043 0301 	orr.w	r3, r3, #1
 8007bf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <HAL_PCD_SuspendCallback+0x48>)
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	4a03      	ldr	r2, [pc, #12]	; (8007c14 <HAL_PCD_SuspendCallback+0x48>)
 8007c06:	f043 0306 	orr.w	r3, r3, #6
 8007c0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	e000ed00 	.word	0xe000ed00

08007c18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fdf2 	bl	8006810 <USBD_LL_Resume>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fe40 	bl	80068d0 <USBD_LL_IsoOUTIncomplete>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fe08 	bl	8006884 <USBD_LL_IsoINIncomplete>
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fe46 	bl	800691c <USBD_LL_DevConnected>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fe43 	bl	8006932 <USBD_LL_DevDisconnected>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d13c      	bne.n	8007d3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007cc4:	4a20      	ldr	r2, [pc, #128]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007cda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cde:	2204      	movs	r2, #4
 8007ce0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ce2:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <USBD_LL_Init+0x94>)
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ce8:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cee:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cf4:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <USBD_LL_Init+0x94>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d0c:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d12:	480d      	ldr	r0, [pc, #52]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d14:	f7fa fabb 	bl	800228e <HAL_PCD_Init>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d1e:	f7f8 ffbd 	bl	8000c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d22:	2180      	movs	r1, #128	; 0x80
 8007d24:	4808      	ldr	r0, [pc, #32]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d26:	f7fb fc18 	bl	800355a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d2a:	2240      	movs	r2, #64	; 0x40
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4806      	ldr	r0, [pc, #24]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d30:	f7fb fbcc 	bl	80034cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d34:	2280      	movs	r2, #128	; 0x80
 8007d36:	2101      	movs	r1, #1
 8007d38:	4803      	ldr	r0, [pc, #12]	; (8007d48 <USBD_LL_Init+0x94>)
 8007d3a:	f7fb fbc7 	bl	80034cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20001a9c 	.word	0x20001a9c

08007d4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fa fbb0 	bl	80024c8 <HAL_PCD_Start>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 f942 	bl	8007ff8 <USBD_Get_USB_Status>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4603      	mov	r3, r0
 8007d92:	70fb      	strb	r3, [r7, #3]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70bb      	strb	r3, [r7, #2]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007daa:	78bb      	ldrb	r3, [r7, #2]
 8007dac:	883a      	ldrh	r2, [r7, #0]
 8007dae:	78f9      	ldrb	r1, [r7, #3]
 8007db0:	f7fa ff94 	bl	8002cdc <HAL_PCD_EP_Open>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f91c 	bl	8007ff8 <USBD_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fa ffdd 	bl	8002dac <HAL_PCD_EP_Close>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f8fd 	bl	8007ff8 <USBD_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fb f8b5 	bl	8002f9a <HAL_PCD_EP_SetStall>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f8de 	bl	8007ff8 <USBD_Get_USB_Status>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e64:	78fa      	ldrb	r2, [r7, #3]
 8007e66:	4611      	mov	r1, r2
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fb f8fa 	bl	8003062 <HAL_PCD_EP_ClrStall>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 f8bf 	bl	8007ff8 <USBD_Get_USB_Status>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	da0b      	bge.n	8007ebc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	333e      	adds	r3, #62	; 0x3e
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	e00b      	b.n	8007ed4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	1a9b      	subs	r3, r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ed2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007efa:	78fa      	ldrb	r2, [r7, #3]
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fa fec7 	bl	8002c92 <HAL_PCD_SetAddress>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f874 	bl	8007ff8 <USBD_Get_USB_Status>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f3c:	7af9      	ldrb	r1, [r7, #11]
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	f7fa ffe0 	bl	8002f06 <HAL_PCD_EP_Transmit>
 8007f46:	4603      	mov	r3, r0
 8007f48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f853 	bl	8007ff8 <USBD_Get_USB_Status>
 8007f52:	4603      	mov	r3, r0
 8007f54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f56:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f7e:	7af9      	ldrb	r1, [r7, #11]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	f7fa ff5c 	bl	8002e40 <HAL_PCD_EP_Receive>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f832 	bl	8007ff8 <USBD_Get_USB_Status>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f98:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fa ff8c 	bl	8002ed6 <HAL_PCD_EP_GetRxCount>
 8007fbe:	4603      	mov	r3, r0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007fd0:	4b03      	ldr	r3, [pc, #12]	; (8007fe0 <USBD_static_malloc+0x18>)
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	20000248 	.word	0x20000248

08007fe4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]

}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	2b03      	cmp	r3, #3
 800800a:	d817      	bhi.n	800803c <USBD_Get_USB_Status+0x44>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_Get_USB_Status+0x1c>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	08008025 	.word	0x08008025
 8008018:	0800802b 	.word	0x0800802b
 800801c:	08008031 	.word	0x08008031
 8008020:	08008037 	.word	0x08008037
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
    break;
 8008028:	e00b      	b.n	8008042 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800802a:	2303      	movs	r3, #3
 800802c:	73fb      	strb	r3, [r7, #15]
    break;
 800802e:	e008      	b.n	8008042 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008030:	2301      	movs	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
    break;
 8008034:	e005      	b.n	8008042 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008036:	2303      	movs	r3, #3
 8008038:	73fb      	strb	r3, [r7, #15]
    break;
 800803a:	e002      	b.n	8008042 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	73fb      	strb	r3, [r7, #15]
    break;
 8008040:	bf00      	nop
  }
  return usb_status;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <atoi>:
 8008050:	220a      	movs	r2, #10
 8008052:	2100      	movs	r1, #0
 8008054:	f000 b8d6 	b.w	8008204 <strtol>

08008058 <__errno>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <__errno+0x8>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	200001bc 	.word	0x200001bc

08008064 <__libc_init_array>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d0d      	ldr	r5, [pc, #52]	; (800809c <__libc_init_array+0x38>)
 8008068:	4c0d      	ldr	r4, [pc, #52]	; (80080a0 <__libc_init_array+0x3c>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	2600      	movs	r6, #0
 8008070:	42a6      	cmp	r6, r4
 8008072:	d109      	bne.n	8008088 <__libc_init_array+0x24>
 8008074:	4d0b      	ldr	r5, [pc, #44]	; (80080a4 <__libc_init_array+0x40>)
 8008076:	4c0c      	ldr	r4, [pc, #48]	; (80080a8 <__libc_init_array+0x44>)
 8008078:	f000 fcdc 	bl	8008a34 <_init>
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	2600      	movs	r6, #0
 8008082:	42a6      	cmp	r6, r4
 8008084:	d105      	bne.n	8008092 <__libc_init_array+0x2e>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	f855 3b04 	ldr.w	r3, [r5], #4
 800808c:	4798      	blx	r3
 800808e:	3601      	adds	r6, #1
 8008090:	e7ee      	b.n	8008070 <__libc_init_array+0xc>
 8008092:	f855 3b04 	ldr.w	r3, [r5], #4
 8008096:	4798      	blx	r3
 8008098:	3601      	adds	r6, #1
 800809a:	e7f2      	b.n	8008082 <__libc_init_array+0x1e>
 800809c:	08008c50 	.word	0x08008c50
 80080a0:	08008c50 	.word	0x08008c50
 80080a4:	08008c50 	.word	0x08008c50
 80080a8:	08008c54 	.word	0x08008c54

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <siprintf>:
 80080bc:	b40e      	push	{r1, r2, r3}
 80080be:	b500      	push	{lr}
 80080c0:	b09c      	sub	sp, #112	; 0x70
 80080c2:	ab1d      	add	r3, sp, #116	; 0x74
 80080c4:	9002      	str	r0, [sp, #8]
 80080c6:	9006      	str	r0, [sp, #24]
 80080c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080cc:	4809      	ldr	r0, [pc, #36]	; (80080f4 <siprintf+0x38>)
 80080ce:	9107      	str	r1, [sp, #28]
 80080d0:	9104      	str	r1, [sp, #16]
 80080d2:	4909      	ldr	r1, [pc, #36]	; (80080f8 <siprintf+0x3c>)
 80080d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d8:	9105      	str	r1, [sp, #20]
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	a902      	add	r1, sp, #8
 80080e0:	f000 f8f6 	bl	80082d0 <_svfiprintf_r>
 80080e4:	9b02      	ldr	r3, [sp, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	b01c      	add	sp, #112	; 0x70
 80080ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80080f0:	b003      	add	sp, #12
 80080f2:	4770      	bx	lr
 80080f4:	200001bc 	.word	0x200001bc
 80080f8:	ffff0208 	.word	0xffff0208

080080fc <_strtol_l.isra.0>:
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008102:	d001      	beq.n	8008108 <_strtol_l.isra.0+0xc>
 8008104:	2b24      	cmp	r3, #36	; 0x24
 8008106:	d906      	bls.n	8008116 <_strtol_l.isra.0+0x1a>
 8008108:	f7ff ffa6 	bl	8008058 <__errno>
 800810c:	2316      	movs	r3, #22
 800810e:	6003      	str	r3, [r0, #0]
 8008110:	2000      	movs	r0, #0
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008116:	4f3a      	ldr	r7, [pc, #232]	; (8008200 <_strtol_l.isra.0+0x104>)
 8008118:	468e      	mov	lr, r1
 800811a:	4676      	mov	r6, lr
 800811c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008120:	5de5      	ldrb	r5, [r4, r7]
 8008122:	f015 0508 	ands.w	r5, r5, #8
 8008126:	d1f8      	bne.n	800811a <_strtol_l.isra.0+0x1e>
 8008128:	2c2d      	cmp	r4, #45	; 0x2d
 800812a:	d134      	bne.n	8008196 <_strtol_l.isra.0+0x9a>
 800812c:	f89e 4000 	ldrb.w	r4, [lr]
 8008130:	f04f 0801 	mov.w	r8, #1
 8008134:	f106 0e02 	add.w	lr, r6, #2
 8008138:	2b00      	cmp	r3, #0
 800813a:	d05c      	beq.n	80081f6 <_strtol_l.isra.0+0xfa>
 800813c:	2b10      	cmp	r3, #16
 800813e:	d10c      	bne.n	800815a <_strtol_l.isra.0+0x5e>
 8008140:	2c30      	cmp	r4, #48	; 0x30
 8008142:	d10a      	bne.n	800815a <_strtol_l.isra.0+0x5e>
 8008144:	f89e 4000 	ldrb.w	r4, [lr]
 8008148:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800814c:	2c58      	cmp	r4, #88	; 0x58
 800814e:	d14d      	bne.n	80081ec <_strtol_l.isra.0+0xf0>
 8008150:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008154:	2310      	movs	r3, #16
 8008156:	f10e 0e02 	add.w	lr, lr, #2
 800815a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800815e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008162:	2600      	movs	r6, #0
 8008164:	fbbc f9f3 	udiv	r9, ip, r3
 8008168:	4635      	mov	r5, r6
 800816a:	fb03 ca19 	mls	sl, r3, r9, ip
 800816e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008172:	2f09      	cmp	r7, #9
 8008174:	d818      	bhi.n	80081a8 <_strtol_l.isra.0+0xac>
 8008176:	463c      	mov	r4, r7
 8008178:	42a3      	cmp	r3, r4
 800817a:	dd24      	ble.n	80081c6 <_strtol_l.isra.0+0xca>
 800817c:	2e00      	cmp	r6, #0
 800817e:	db1f      	blt.n	80081c0 <_strtol_l.isra.0+0xc4>
 8008180:	45a9      	cmp	r9, r5
 8008182:	d31d      	bcc.n	80081c0 <_strtol_l.isra.0+0xc4>
 8008184:	d101      	bne.n	800818a <_strtol_l.isra.0+0x8e>
 8008186:	45a2      	cmp	sl, r4
 8008188:	db1a      	blt.n	80081c0 <_strtol_l.isra.0+0xc4>
 800818a:	fb05 4503 	mla	r5, r5, r3, r4
 800818e:	2601      	movs	r6, #1
 8008190:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008194:	e7eb      	b.n	800816e <_strtol_l.isra.0+0x72>
 8008196:	2c2b      	cmp	r4, #43	; 0x2b
 8008198:	bf08      	it	eq
 800819a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800819e:	46a8      	mov	r8, r5
 80081a0:	bf08      	it	eq
 80081a2:	f106 0e02 	addeq.w	lr, r6, #2
 80081a6:	e7c7      	b.n	8008138 <_strtol_l.isra.0+0x3c>
 80081a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80081ac:	2f19      	cmp	r7, #25
 80081ae:	d801      	bhi.n	80081b4 <_strtol_l.isra.0+0xb8>
 80081b0:	3c37      	subs	r4, #55	; 0x37
 80081b2:	e7e1      	b.n	8008178 <_strtol_l.isra.0+0x7c>
 80081b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80081b8:	2f19      	cmp	r7, #25
 80081ba:	d804      	bhi.n	80081c6 <_strtol_l.isra.0+0xca>
 80081bc:	3c57      	subs	r4, #87	; 0x57
 80081be:	e7db      	b.n	8008178 <_strtol_l.isra.0+0x7c>
 80081c0:	f04f 36ff 	mov.w	r6, #4294967295
 80081c4:	e7e4      	b.n	8008190 <_strtol_l.isra.0+0x94>
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	da05      	bge.n	80081d6 <_strtol_l.isra.0+0xda>
 80081ca:	2322      	movs	r3, #34	; 0x22
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	4665      	mov	r5, ip
 80081d0:	b942      	cbnz	r2, 80081e4 <_strtol_l.isra.0+0xe8>
 80081d2:	4628      	mov	r0, r5
 80081d4:	e79d      	b.n	8008112 <_strtol_l.isra.0+0x16>
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	d000      	beq.n	80081de <_strtol_l.isra.0+0xe2>
 80081dc:	426d      	negs	r5, r5
 80081de:	2a00      	cmp	r2, #0
 80081e0:	d0f7      	beq.n	80081d2 <_strtol_l.isra.0+0xd6>
 80081e2:	b10e      	cbz	r6, 80081e8 <_strtol_l.isra.0+0xec>
 80081e4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80081e8:	6011      	str	r1, [r2, #0]
 80081ea:	e7f2      	b.n	80081d2 <_strtol_l.isra.0+0xd6>
 80081ec:	2430      	movs	r4, #48	; 0x30
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1b3      	bne.n	800815a <_strtol_l.isra.0+0x5e>
 80081f2:	2308      	movs	r3, #8
 80081f4:	e7b1      	b.n	800815a <_strtol_l.isra.0+0x5e>
 80081f6:	2c30      	cmp	r4, #48	; 0x30
 80081f8:	d0a4      	beq.n	8008144 <_strtol_l.isra.0+0x48>
 80081fa:	230a      	movs	r3, #10
 80081fc:	e7ad      	b.n	800815a <_strtol_l.isra.0+0x5e>
 80081fe:	bf00      	nop
 8008200:	08008b15 	.word	0x08008b15

08008204 <strtol>:
 8008204:	4613      	mov	r3, r2
 8008206:	460a      	mov	r2, r1
 8008208:	4601      	mov	r1, r0
 800820a:	4802      	ldr	r0, [pc, #8]	; (8008214 <strtol+0x10>)
 800820c:	6800      	ldr	r0, [r0, #0]
 800820e:	f7ff bf75 	b.w	80080fc <_strtol_l.isra.0>
 8008212:	bf00      	nop
 8008214:	200001bc 	.word	0x200001bc

08008218 <__ssputs_r>:
 8008218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	688e      	ldr	r6, [r1, #8]
 800821e:	429e      	cmp	r6, r3
 8008220:	4682      	mov	sl, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4690      	mov	r8, r2
 8008226:	461f      	mov	r7, r3
 8008228:	d838      	bhi.n	800829c <__ssputs_r+0x84>
 800822a:	898a      	ldrh	r2, [r1, #12]
 800822c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008230:	d032      	beq.n	8008298 <__ssputs_r+0x80>
 8008232:	6825      	ldr	r5, [r4, #0]
 8008234:	6909      	ldr	r1, [r1, #16]
 8008236:	eba5 0901 	sub.w	r9, r5, r1
 800823a:	6965      	ldr	r5, [r4, #20]
 800823c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008244:	3301      	adds	r3, #1
 8008246:	444b      	add	r3, r9
 8008248:	106d      	asrs	r5, r5, #1
 800824a:	429d      	cmp	r5, r3
 800824c:	bf38      	it	cc
 800824e:	461d      	movcc	r5, r3
 8008250:	0553      	lsls	r3, r2, #21
 8008252:	d531      	bpl.n	80082b8 <__ssputs_r+0xa0>
 8008254:	4629      	mov	r1, r5
 8008256:	f000 fb47 	bl	80088e8 <_malloc_r>
 800825a:	4606      	mov	r6, r0
 800825c:	b950      	cbnz	r0, 8008274 <__ssputs_r+0x5c>
 800825e:	230c      	movs	r3, #12
 8008260:	f8ca 3000 	str.w	r3, [sl]
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008274:	6921      	ldr	r1, [r4, #16]
 8008276:	464a      	mov	r2, r9
 8008278:	f000 fabe 	bl	80087f8 <memcpy>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008286:	81a3      	strh	r3, [r4, #12]
 8008288:	6126      	str	r6, [r4, #16]
 800828a:	6165      	str	r5, [r4, #20]
 800828c:	444e      	add	r6, r9
 800828e:	eba5 0509 	sub.w	r5, r5, r9
 8008292:	6026      	str	r6, [r4, #0]
 8008294:	60a5      	str	r5, [r4, #8]
 8008296:	463e      	mov	r6, r7
 8008298:	42be      	cmp	r6, r7
 800829a:	d900      	bls.n	800829e <__ssputs_r+0x86>
 800829c:	463e      	mov	r6, r7
 800829e:	4632      	mov	r2, r6
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	4641      	mov	r1, r8
 80082a4:	f000 fab6 	bl	8008814 <memmove>
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	1b9b      	subs	r3, r3, r6
 80082ae:	4432      	add	r2, r6
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	2000      	movs	r0, #0
 80082b6:	e7db      	b.n	8008270 <__ssputs_r+0x58>
 80082b8:	462a      	mov	r2, r5
 80082ba:	f000 fb6f 	bl	800899c <_realloc_r>
 80082be:	4606      	mov	r6, r0
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d1e1      	bne.n	8008288 <__ssputs_r+0x70>
 80082c4:	6921      	ldr	r1, [r4, #16]
 80082c6:	4650      	mov	r0, sl
 80082c8:	f000 fabe 	bl	8008848 <_free_r>
 80082cc:	e7c7      	b.n	800825e <__ssputs_r+0x46>
	...

080082d0 <_svfiprintf_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	4698      	mov	r8, r3
 80082d6:	898b      	ldrh	r3, [r1, #12]
 80082d8:	061b      	lsls	r3, r3, #24
 80082da:	b09d      	sub	sp, #116	; 0x74
 80082dc:	4607      	mov	r7, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	d50e      	bpl.n	8008302 <_svfiprintf_r+0x32>
 80082e4:	690b      	ldr	r3, [r1, #16]
 80082e6:	b963      	cbnz	r3, 8008302 <_svfiprintf_r+0x32>
 80082e8:	2140      	movs	r1, #64	; 0x40
 80082ea:	f000 fafd 	bl	80088e8 <_malloc_r>
 80082ee:	6028      	str	r0, [r5, #0]
 80082f0:	6128      	str	r0, [r5, #16]
 80082f2:	b920      	cbnz	r0, 80082fe <_svfiprintf_r+0x2e>
 80082f4:	230c      	movs	r3, #12
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	e0d1      	b.n	80084a2 <_svfiprintf_r+0x1d2>
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	616b      	str	r3, [r5, #20]
 8008302:	2300      	movs	r3, #0
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	2320      	movs	r3, #32
 8008308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800830c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008310:	2330      	movs	r3, #48	; 0x30
 8008312:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084bc <_svfiprintf_r+0x1ec>
 8008316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800831a:	f04f 0901 	mov.w	r9, #1
 800831e:	4623      	mov	r3, r4
 8008320:	469a      	mov	sl, r3
 8008322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008326:	b10a      	cbz	r2, 800832c <_svfiprintf_r+0x5c>
 8008328:	2a25      	cmp	r2, #37	; 0x25
 800832a:	d1f9      	bne.n	8008320 <_svfiprintf_r+0x50>
 800832c:	ebba 0b04 	subs.w	fp, sl, r4
 8008330:	d00b      	beq.n	800834a <_svfiprintf_r+0x7a>
 8008332:	465b      	mov	r3, fp
 8008334:	4622      	mov	r2, r4
 8008336:	4629      	mov	r1, r5
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ff6d 	bl	8008218 <__ssputs_r>
 800833e:	3001      	adds	r0, #1
 8008340:	f000 80aa 	beq.w	8008498 <_svfiprintf_r+0x1c8>
 8008344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008346:	445a      	add	r2, fp
 8008348:	9209      	str	r2, [sp, #36]	; 0x24
 800834a:	f89a 3000 	ldrb.w	r3, [sl]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80a2 	beq.w	8008498 <_svfiprintf_r+0x1c8>
 8008354:	2300      	movs	r3, #0
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835e:	f10a 0a01 	add.w	sl, sl, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	9307      	str	r3, [sp, #28]
 8008366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800836a:	931a      	str	r3, [sp, #104]	; 0x68
 800836c:	4654      	mov	r4, sl
 800836e:	2205      	movs	r2, #5
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	4851      	ldr	r0, [pc, #324]	; (80084bc <_svfiprintf_r+0x1ec>)
 8008376:	f7f7 ff2b 	bl	80001d0 <memchr>
 800837a:	9a04      	ldr	r2, [sp, #16]
 800837c:	b9d8      	cbnz	r0, 80083b6 <_svfiprintf_r+0xe6>
 800837e:	06d0      	lsls	r0, r2, #27
 8008380:	bf44      	itt	mi
 8008382:	2320      	movmi	r3, #32
 8008384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008388:	0711      	lsls	r1, r2, #28
 800838a:	bf44      	itt	mi
 800838c:	232b      	movmi	r3, #43	; 0x2b
 800838e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008392:	f89a 3000 	ldrb.w	r3, [sl]
 8008396:	2b2a      	cmp	r3, #42	; 0x2a
 8008398:	d015      	beq.n	80083c6 <_svfiprintf_r+0xf6>
 800839a:	9a07      	ldr	r2, [sp, #28]
 800839c:	4654      	mov	r4, sl
 800839e:	2000      	movs	r0, #0
 80083a0:	f04f 0c0a 	mov.w	ip, #10
 80083a4:	4621      	mov	r1, r4
 80083a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083aa:	3b30      	subs	r3, #48	; 0x30
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d94e      	bls.n	800844e <_svfiprintf_r+0x17e>
 80083b0:	b1b0      	cbz	r0, 80083e0 <_svfiprintf_r+0x110>
 80083b2:	9207      	str	r2, [sp, #28]
 80083b4:	e014      	b.n	80083e0 <_svfiprintf_r+0x110>
 80083b6:	eba0 0308 	sub.w	r3, r0, r8
 80083ba:	fa09 f303 	lsl.w	r3, r9, r3
 80083be:	4313      	orrs	r3, r2
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	46a2      	mov	sl, r4
 80083c4:	e7d2      	b.n	800836c <_svfiprintf_r+0x9c>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	1d19      	adds	r1, r3, #4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	9103      	str	r1, [sp, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bfbb      	ittet	lt
 80083d2:	425b      	neglt	r3, r3
 80083d4:	f042 0202 	orrlt.w	r2, r2, #2
 80083d8:	9307      	strge	r3, [sp, #28]
 80083da:	9307      	strlt	r3, [sp, #28]
 80083dc:	bfb8      	it	lt
 80083de:	9204      	strlt	r2, [sp, #16]
 80083e0:	7823      	ldrb	r3, [r4, #0]
 80083e2:	2b2e      	cmp	r3, #46	; 0x2e
 80083e4:	d10c      	bne.n	8008400 <_svfiprintf_r+0x130>
 80083e6:	7863      	ldrb	r3, [r4, #1]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d135      	bne.n	8008458 <_svfiprintf_r+0x188>
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	1d1a      	adds	r2, r3, #4
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	9203      	str	r2, [sp, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb8      	it	lt
 80083f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083fc:	3402      	adds	r4, #2
 80083fe:	9305      	str	r3, [sp, #20]
 8008400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084cc <_svfiprintf_r+0x1fc>
 8008404:	7821      	ldrb	r1, [r4, #0]
 8008406:	2203      	movs	r2, #3
 8008408:	4650      	mov	r0, sl
 800840a:	f7f7 fee1 	bl	80001d0 <memchr>
 800840e:	b140      	cbz	r0, 8008422 <_svfiprintf_r+0x152>
 8008410:	2340      	movs	r3, #64	; 0x40
 8008412:	eba0 000a 	sub.w	r0, r0, sl
 8008416:	fa03 f000 	lsl.w	r0, r3, r0
 800841a:	9b04      	ldr	r3, [sp, #16]
 800841c:	4303      	orrs	r3, r0
 800841e:	3401      	adds	r4, #1
 8008420:	9304      	str	r3, [sp, #16]
 8008422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008426:	4826      	ldr	r0, [pc, #152]	; (80084c0 <_svfiprintf_r+0x1f0>)
 8008428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800842c:	2206      	movs	r2, #6
 800842e:	f7f7 fecf 	bl	80001d0 <memchr>
 8008432:	2800      	cmp	r0, #0
 8008434:	d038      	beq.n	80084a8 <_svfiprintf_r+0x1d8>
 8008436:	4b23      	ldr	r3, [pc, #140]	; (80084c4 <_svfiprintf_r+0x1f4>)
 8008438:	bb1b      	cbnz	r3, 8008482 <_svfiprintf_r+0x1b2>
 800843a:	9b03      	ldr	r3, [sp, #12]
 800843c:	3307      	adds	r3, #7
 800843e:	f023 0307 	bic.w	r3, r3, #7
 8008442:	3308      	adds	r3, #8
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008448:	4433      	add	r3, r6
 800844a:	9309      	str	r3, [sp, #36]	; 0x24
 800844c:	e767      	b.n	800831e <_svfiprintf_r+0x4e>
 800844e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008452:	460c      	mov	r4, r1
 8008454:	2001      	movs	r0, #1
 8008456:	e7a5      	b.n	80083a4 <_svfiprintf_r+0xd4>
 8008458:	2300      	movs	r3, #0
 800845a:	3401      	adds	r4, #1
 800845c:	9305      	str	r3, [sp, #20]
 800845e:	4619      	mov	r1, r3
 8008460:	f04f 0c0a 	mov.w	ip, #10
 8008464:	4620      	mov	r0, r4
 8008466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800846a:	3a30      	subs	r2, #48	; 0x30
 800846c:	2a09      	cmp	r2, #9
 800846e:	d903      	bls.n	8008478 <_svfiprintf_r+0x1a8>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0c5      	beq.n	8008400 <_svfiprintf_r+0x130>
 8008474:	9105      	str	r1, [sp, #20]
 8008476:	e7c3      	b.n	8008400 <_svfiprintf_r+0x130>
 8008478:	fb0c 2101 	mla	r1, ip, r1, r2
 800847c:	4604      	mov	r4, r0
 800847e:	2301      	movs	r3, #1
 8008480:	e7f0      	b.n	8008464 <_svfiprintf_r+0x194>
 8008482:	ab03      	add	r3, sp, #12
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	462a      	mov	r2, r5
 8008488:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <_svfiprintf_r+0x1f8>)
 800848a:	a904      	add	r1, sp, #16
 800848c:	4638      	mov	r0, r7
 800848e:	f3af 8000 	nop.w
 8008492:	1c42      	adds	r2, r0, #1
 8008494:	4606      	mov	r6, r0
 8008496:	d1d6      	bne.n	8008446 <_svfiprintf_r+0x176>
 8008498:	89ab      	ldrh	r3, [r5, #12]
 800849a:	065b      	lsls	r3, r3, #25
 800849c:	f53f af2c 	bmi.w	80082f8 <_svfiprintf_r+0x28>
 80084a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084a2:	b01d      	add	sp, #116	; 0x74
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	ab03      	add	r3, sp, #12
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	462a      	mov	r2, r5
 80084ae:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <_svfiprintf_r+0x1f8>)
 80084b0:	a904      	add	r1, sp, #16
 80084b2:	4638      	mov	r0, r7
 80084b4:	f000 f87a 	bl	80085ac <_printf_i>
 80084b8:	e7eb      	b.n	8008492 <_svfiprintf_r+0x1c2>
 80084ba:	bf00      	nop
 80084bc:	08008c15 	.word	0x08008c15
 80084c0:	08008c1f 	.word	0x08008c1f
 80084c4:	00000000 	.word	0x00000000
 80084c8:	08008219 	.word	0x08008219
 80084cc:	08008c1b 	.word	0x08008c1b

080084d0 <_printf_common>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	4616      	mov	r6, r2
 80084d6:	4699      	mov	r9, r3
 80084d8:	688a      	ldr	r2, [r1, #8]
 80084da:	690b      	ldr	r3, [r1, #16]
 80084dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	bfb8      	it	lt
 80084e4:	4613      	movlt	r3, r2
 80084e6:	6033      	str	r3, [r6, #0]
 80084e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084ec:	4607      	mov	r7, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	b10a      	cbz	r2, 80084f6 <_printf_common+0x26>
 80084f2:	3301      	adds	r3, #1
 80084f4:	6033      	str	r3, [r6, #0]
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	0699      	lsls	r1, r3, #26
 80084fa:	bf42      	ittt	mi
 80084fc:	6833      	ldrmi	r3, [r6, #0]
 80084fe:	3302      	addmi	r3, #2
 8008500:	6033      	strmi	r3, [r6, #0]
 8008502:	6825      	ldr	r5, [r4, #0]
 8008504:	f015 0506 	ands.w	r5, r5, #6
 8008508:	d106      	bne.n	8008518 <_printf_common+0x48>
 800850a:	f104 0a19 	add.w	sl, r4, #25
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	6832      	ldr	r2, [r6, #0]
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	42ab      	cmp	r3, r5
 8008516:	dc26      	bgt.n	8008566 <_printf_common+0x96>
 8008518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800851c:	1e13      	subs	r3, r2, #0
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	bf18      	it	ne
 8008522:	2301      	movne	r3, #1
 8008524:	0692      	lsls	r2, r2, #26
 8008526:	d42b      	bmi.n	8008580 <_printf_common+0xb0>
 8008528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800852c:	4649      	mov	r1, r9
 800852e:	4638      	mov	r0, r7
 8008530:	47c0      	blx	r8
 8008532:	3001      	adds	r0, #1
 8008534:	d01e      	beq.n	8008574 <_printf_common+0xa4>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	68e5      	ldr	r5, [r4, #12]
 800853a:	6832      	ldr	r2, [r6, #0]
 800853c:	f003 0306 	and.w	r3, r3, #6
 8008540:	2b04      	cmp	r3, #4
 8008542:	bf08      	it	eq
 8008544:	1aad      	subeq	r5, r5, r2
 8008546:	68a3      	ldr	r3, [r4, #8]
 8008548:	6922      	ldr	r2, [r4, #16]
 800854a:	bf0c      	ite	eq
 800854c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008550:	2500      	movne	r5, #0
 8008552:	4293      	cmp	r3, r2
 8008554:	bfc4      	itt	gt
 8008556:	1a9b      	subgt	r3, r3, r2
 8008558:	18ed      	addgt	r5, r5, r3
 800855a:	2600      	movs	r6, #0
 800855c:	341a      	adds	r4, #26
 800855e:	42b5      	cmp	r5, r6
 8008560:	d11a      	bne.n	8008598 <_printf_common+0xc8>
 8008562:	2000      	movs	r0, #0
 8008564:	e008      	b.n	8008578 <_printf_common+0xa8>
 8008566:	2301      	movs	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	4649      	mov	r1, r9
 800856c:	4638      	mov	r0, r7
 800856e:	47c0      	blx	r8
 8008570:	3001      	adds	r0, #1
 8008572:	d103      	bne.n	800857c <_printf_common+0xac>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	3501      	adds	r5, #1
 800857e:	e7c6      	b.n	800850e <_printf_common+0x3e>
 8008580:	18e1      	adds	r1, r4, r3
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	2030      	movs	r0, #48	; 0x30
 8008586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800858a:	4422      	add	r2, r4
 800858c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008594:	3302      	adds	r3, #2
 8008596:	e7c7      	b.n	8008528 <_printf_common+0x58>
 8008598:	2301      	movs	r3, #1
 800859a:	4622      	mov	r2, r4
 800859c:	4649      	mov	r1, r9
 800859e:	4638      	mov	r0, r7
 80085a0:	47c0      	blx	r8
 80085a2:	3001      	adds	r0, #1
 80085a4:	d0e6      	beq.n	8008574 <_printf_common+0xa4>
 80085a6:	3601      	adds	r6, #1
 80085a8:	e7d9      	b.n	800855e <_printf_common+0x8e>
	...

080085ac <_printf_i>:
 80085ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	460c      	mov	r4, r1
 80085b2:	4691      	mov	r9, r2
 80085b4:	7e27      	ldrb	r7, [r4, #24]
 80085b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085b8:	2f78      	cmp	r7, #120	; 0x78
 80085ba:	4680      	mov	r8, r0
 80085bc:	469a      	mov	sl, r3
 80085be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c2:	d807      	bhi.n	80085d4 <_printf_i+0x28>
 80085c4:	2f62      	cmp	r7, #98	; 0x62
 80085c6:	d80a      	bhi.n	80085de <_printf_i+0x32>
 80085c8:	2f00      	cmp	r7, #0
 80085ca:	f000 80d8 	beq.w	800877e <_printf_i+0x1d2>
 80085ce:	2f58      	cmp	r7, #88	; 0x58
 80085d0:	f000 80a3 	beq.w	800871a <_printf_i+0x16e>
 80085d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085dc:	e03a      	b.n	8008654 <_printf_i+0xa8>
 80085de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085e2:	2b15      	cmp	r3, #21
 80085e4:	d8f6      	bhi.n	80085d4 <_printf_i+0x28>
 80085e6:	a001      	add	r0, pc, #4	; (adr r0, 80085ec <_printf_i+0x40>)
 80085e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008659 	.word	0x08008659
 80085f4:	080085d5 	.word	0x080085d5
 80085f8:	080085d5 	.word	0x080085d5
 80085fc:	080085d5 	.word	0x080085d5
 8008600:	080085d5 	.word	0x080085d5
 8008604:	08008659 	.word	0x08008659
 8008608:	080085d5 	.word	0x080085d5
 800860c:	080085d5 	.word	0x080085d5
 8008610:	080085d5 	.word	0x080085d5
 8008614:	080085d5 	.word	0x080085d5
 8008618:	08008765 	.word	0x08008765
 800861c:	08008689 	.word	0x08008689
 8008620:	08008747 	.word	0x08008747
 8008624:	080085d5 	.word	0x080085d5
 8008628:	080085d5 	.word	0x080085d5
 800862c:	08008787 	.word	0x08008787
 8008630:	080085d5 	.word	0x080085d5
 8008634:	08008689 	.word	0x08008689
 8008638:	080085d5 	.word	0x080085d5
 800863c:	080085d5 	.word	0x080085d5
 8008640:	0800874f 	.word	0x0800874f
 8008644:	680b      	ldr	r3, [r1, #0]
 8008646:	1d1a      	adds	r2, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	600a      	str	r2, [r1, #0]
 800864c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008654:	2301      	movs	r3, #1
 8008656:	e0a3      	b.n	80087a0 <_printf_i+0x1f4>
 8008658:	6825      	ldr	r5, [r4, #0]
 800865a:	6808      	ldr	r0, [r1, #0]
 800865c:	062e      	lsls	r6, r5, #24
 800865e:	f100 0304 	add.w	r3, r0, #4
 8008662:	d50a      	bpl.n	800867a <_printf_i+0xce>
 8008664:	6805      	ldr	r5, [r0, #0]
 8008666:	600b      	str	r3, [r1, #0]
 8008668:	2d00      	cmp	r5, #0
 800866a:	da03      	bge.n	8008674 <_printf_i+0xc8>
 800866c:	232d      	movs	r3, #45	; 0x2d
 800866e:	426d      	negs	r5, r5
 8008670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008674:	485e      	ldr	r0, [pc, #376]	; (80087f0 <_printf_i+0x244>)
 8008676:	230a      	movs	r3, #10
 8008678:	e019      	b.n	80086ae <_printf_i+0x102>
 800867a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800867e:	6805      	ldr	r5, [r0, #0]
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	bf18      	it	ne
 8008684:	b22d      	sxthne	r5, r5
 8008686:	e7ef      	b.n	8008668 <_printf_i+0xbc>
 8008688:	680b      	ldr	r3, [r1, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	1d18      	adds	r0, r3, #4
 800868e:	6008      	str	r0, [r1, #0]
 8008690:	0628      	lsls	r0, r5, #24
 8008692:	d501      	bpl.n	8008698 <_printf_i+0xec>
 8008694:	681d      	ldr	r5, [r3, #0]
 8008696:	e002      	b.n	800869e <_printf_i+0xf2>
 8008698:	0669      	lsls	r1, r5, #25
 800869a:	d5fb      	bpl.n	8008694 <_printf_i+0xe8>
 800869c:	881d      	ldrh	r5, [r3, #0]
 800869e:	4854      	ldr	r0, [pc, #336]	; (80087f0 <_printf_i+0x244>)
 80086a0:	2f6f      	cmp	r7, #111	; 0x6f
 80086a2:	bf0c      	ite	eq
 80086a4:	2308      	moveq	r3, #8
 80086a6:	230a      	movne	r3, #10
 80086a8:	2100      	movs	r1, #0
 80086aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ae:	6866      	ldr	r6, [r4, #4]
 80086b0:	60a6      	str	r6, [r4, #8]
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	bfa2      	ittt	ge
 80086b6:	6821      	ldrge	r1, [r4, #0]
 80086b8:	f021 0104 	bicge.w	r1, r1, #4
 80086bc:	6021      	strge	r1, [r4, #0]
 80086be:	b90d      	cbnz	r5, 80086c4 <_printf_i+0x118>
 80086c0:	2e00      	cmp	r6, #0
 80086c2:	d04d      	beq.n	8008760 <_printf_i+0x1b4>
 80086c4:	4616      	mov	r6, r2
 80086c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ca:	fb03 5711 	mls	r7, r3, r1, r5
 80086ce:	5dc7      	ldrb	r7, [r0, r7]
 80086d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086d4:	462f      	mov	r7, r5
 80086d6:	42bb      	cmp	r3, r7
 80086d8:	460d      	mov	r5, r1
 80086da:	d9f4      	bls.n	80086c6 <_printf_i+0x11a>
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d10b      	bne.n	80086f8 <_printf_i+0x14c>
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	07df      	lsls	r7, r3, #31
 80086e4:	d508      	bpl.n	80086f8 <_printf_i+0x14c>
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	4299      	cmp	r1, r3
 80086ec:	bfde      	ittt	le
 80086ee:	2330      	movle	r3, #48	; 0x30
 80086f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086f8:	1b92      	subs	r2, r2, r6
 80086fa:	6122      	str	r2, [r4, #16]
 80086fc:	f8cd a000 	str.w	sl, [sp]
 8008700:	464b      	mov	r3, r9
 8008702:	aa03      	add	r2, sp, #12
 8008704:	4621      	mov	r1, r4
 8008706:	4640      	mov	r0, r8
 8008708:	f7ff fee2 	bl	80084d0 <_printf_common>
 800870c:	3001      	adds	r0, #1
 800870e:	d14c      	bne.n	80087aa <_printf_i+0x1fe>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	b004      	add	sp, #16
 8008716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871a:	4835      	ldr	r0, [pc, #212]	; (80087f0 <_printf_i+0x244>)
 800871c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	680e      	ldr	r6, [r1, #0]
 8008724:	061f      	lsls	r7, r3, #24
 8008726:	f856 5b04 	ldr.w	r5, [r6], #4
 800872a:	600e      	str	r6, [r1, #0]
 800872c:	d514      	bpl.n	8008758 <_printf_i+0x1ac>
 800872e:	07d9      	lsls	r1, r3, #31
 8008730:	bf44      	itt	mi
 8008732:	f043 0320 	orrmi.w	r3, r3, #32
 8008736:	6023      	strmi	r3, [r4, #0]
 8008738:	b91d      	cbnz	r5, 8008742 <_printf_i+0x196>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	f023 0320 	bic.w	r3, r3, #32
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	2310      	movs	r3, #16
 8008744:	e7b0      	b.n	80086a8 <_printf_i+0xfc>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	f043 0320 	orr.w	r3, r3, #32
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	2378      	movs	r3, #120	; 0x78
 8008750:	4828      	ldr	r0, [pc, #160]	; (80087f4 <_printf_i+0x248>)
 8008752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008756:	e7e3      	b.n	8008720 <_printf_i+0x174>
 8008758:	065e      	lsls	r6, r3, #25
 800875a:	bf48      	it	mi
 800875c:	b2ad      	uxthmi	r5, r5
 800875e:	e7e6      	b.n	800872e <_printf_i+0x182>
 8008760:	4616      	mov	r6, r2
 8008762:	e7bb      	b.n	80086dc <_printf_i+0x130>
 8008764:	680b      	ldr	r3, [r1, #0]
 8008766:	6826      	ldr	r6, [r4, #0]
 8008768:	6960      	ldr	r0, [r4, #20]
 800876a:	1d1d      	adds	r5, r3, #4
 800876c:	600d      	str	r5, [r1, #0]
 800876e:	0635      	lsls	r5, r6, #24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	d501      	bpl.n	8008778 <_printf_i+0x1cc>
 8008774:	6018      	str	r0, [r3, #0]
 8008776:	e002      	b.n	800877e <_printf_i+0x1d2>
 8008778:	0671      	lsls	r1, r6, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0x1c8>
 800877c:	8018      	strh	r0, [r3, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	4616      	mov	r6, r2
 8008784:	e7ba      	b.n	80086fc <_printf_i+0x150>
 8008786:	680b      	ldr	r3, [r1, #0]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	600a      	str	r2, [r1, #0]
 800878c:	681e      	ldr	r6, [r3, #0]
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fd1c 	bl	80001d0 <memchr>
 8008798:	b108      	cbz	r0, 800879e <_printf_i+0x1f2>
 800879a:	1b80      	subs	r0, r0, r6
 800879c:	6060      	str	r0, [r4, #4]
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	2300      	movs	r3, #0
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a8:	e7a8      	b.n	80086fc <_printf_i+0x150>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0ab      	beq.n	8008710 <_printf_i+0x164>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	079b      	lsls	r3, r3, #30
 80087bc:	d413      	bmi.n	80087e6 <_printf_i+0x23a>
 80087be:	68e0      	ldr	r0, [r4, #12]
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	4298      	cmp	r0, r3
 80087c4:	bfb8      	it	lt
 80087c6:	4618      	movlt	r0, r3
 80087c8:	e7a4      	b.n	8008714 <_printf_i+0x168>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4632      	mov	r2, r6
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	47d0      	blx	sl
 80087d4:	3001      	adds	r0, #1
 80087d6:	d09b      	beq.n	8008710 <_printf_i+0x164>
 80087d8:	3501      	adds	r5, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	1a5b      	subs	r3, r3, r1
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dcf2      	bgt.n	80087ca <_printf_i+0x21e>
 80087e4:	e7eb      	b.n	80087be <_printf_i+0x212>
 80087e6:	2500      	movs	r5, #0
 80087e8:	f104 0619 	add.w	r6, r4, #25
 80087ec:	e7f5      	b.n	80087da <_printf_i+0x22e>
 80087ee:	bf00      	nop
 80087f0:	08008c26 	.word	0x08008c26
 80087f4:	08008c37 	.word	0x08008c37

080087f8 <memcpy>:
 80087f8:	440a      	add	r2, r1
 80087fa:	4291      	cmp	r1, r2
 80087fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008800:	d100      	bne.n	8008804 <memcpy+0xc>
 8008802:	4770      	bx	lr
 8008804:	b510      	push	{r4, lr}
 8008806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800880a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880e:	4291      	cmp	r1, r2
 8008810:	d1f9      	bne.n	8008806 <memcpy+0xe>
 8008812:	bd10      	pop	{r4, pc}

08008814 <memmove>:
 8008814:	4288      	cmp	r0, r1
 8008816:	b510      	push	{r4, lr}
 8008818:	eb01 0402 	add.w	r4, r1, r2
 800881c:	d902      	bls.n	8008824 <memmove+0x10>
 800881e:	4284      	cmp	r4, r0
 8008820:	4623      	mov	r3, r4
 8008822:	d807      	bhi.n	8008834 <memmove+0x20>
 8008824:	1e43      	subs	r3, r0, #1
 8008826:	42a1      	cmp	r1, r4
 8008828:	d008      	beq.n	800883c <memmove+0x28>
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008832:	e7f8      	b.n	8008826 <memmove+0x12>
 8008834:	4402      	add	r2, r0
 8008836:	4601      	mov	r1, r0
 8008838:	428a      	cmp	r2, r1
 800883a:	d100      	bne.n	800883e <memmove+0x2a>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008846:	e7f7      	b.n	8008838 <memmove+0x24>

08008848 <_free_r>:
 8008848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800884a:	2900      	cmp	r1, #0
 800884c:	d048      	beq.n	80088e0 <_free_r+0x98>
 800884e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008852:	9001      	str	r0, [sp, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f1a1 0404 	sub.w	r4, r1, #4
 800885a:	bfb8      	it	lt
 800885c:	18e4      	addlt	r4, r4, r3
 800885e:	f000 f8d3 	bl	8008a08 <__malloc_lock>
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <_free_r+0x9c>)
 8008864:	9801      	ldr	r0, [sp, #4]
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	4615      	mov	r5, r2
 800886a:	b933      	cbnz	r3, 800887a <_free_r+0x32>
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6014      	str	r4, [r2, #0]
 8008870:	b003      	add	sp, #12
 8008872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008876:	f000 b8cd 	b.w	8008a14 <__malloc_unlock>
 800887a:	42a3      	cmp	r3, r4
 800887c:	d90b      	bls.n	8008896 <_free_r+0x4e>
 800887e:	6821      	ldr	r1, [r4, #0]
 8008880:	1862      	adds	r2, r4, r1
 8008882:	4293      	cmp	r3, r2
 8008884:	bf04      	itt	eq
 8008886:	681a      	ldreq	r2, [r3, #0]
 8008888:	685b      	ldreq	r3, [r3, #4]
 800888a:	6063      	str	r3, [r4, #4]
 800888c:	bf04      	itt	eq
 800888e:	1852      	addeq	r2, r2, r1
 8008890:	6022      	streq	r2, [r4, #0]
 8008892:	602c      	str	r4, [r5, #0]
 8008894:	e7ec      	b.n	8008870 <_free_r+0x28>
 8008896:	461a      	mov	r2, r3
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	b10b      	cbz	r3, 80088a0 <_free_r+0x58>
 800889c:	42a3      	cmp	r3, r4
 800889e:	d9fa      	bls.n	8008896 <_free_r+0x4e>
 80088a0:	6811      	ldr	r1, [r2, #0]
 80088a2:	1855      	adds	r5, r2, r1
 80088a4:	42a5      	cmp	r5, r4
 80088a6:	d10b      	bne.n	80088c0 <_free_r+0x78>
 80088a8:	6824      	ldr	r4, [r4, #0]
 80088aa:	4421      	add	r1, r4
 80088ac:	1854      	adds	r4, r2, r1
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	d1dd      	bne.n	8008870 <_free_r+0x28>
 80088b4:	681c      	ldr	r4, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	6053      	str	r3, [r2, #4]
 80088ba:	4421      	add	r1, r4
 80088bc:	6011      	str	r1, [r2, #0]
 80088be:	e7d7      	b.n	8008870 <_free_r+0x28>
 80088c0:	d902      	bls.n	80088c8 <_free_r+0x80>
 80088c2:	230c      	movs	r3, #12
 80088c4:	6003      	str	r3, [r0, #0]
 80088c6:	e7d3      	b.n	8008870 <_free_r+0x28>
 80088c8:	6825      	ldr	r5, [r4, #0]
 80088ca:	1961      	adds	r1, r4, r5
 80088cc:	428b      	cmp	r3, r1
 80088ce:	bf04      	itt	eq
 80088d0:	6819      	ldreq	r1, [r3, #0]
 80088d2:	685b      	ldreq	r3, [r3, #4]
 80088d4:	6063      	str	r3, [r4, #4]
 80088d6:	bf04      	itt	eq
 80088d8:	1949      	addeq	r1, r1, r5
 80088da:	6021      	streq	r1, [r4, #0]
 80088dc:	6054      	str	r4, [r2, #4]
 80088de:	e7c7      	b.n	8008870 <_free_r+0x28>
 80088e0:	b003      	add	sp, #12
 80088e2:	bd30      	pop	{r4, r5, pc}
 80088e4:	20000468 	.word	0x20000468

080088e8 <_malloc_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	1ccd      	adds	r5, r1, #3
 80088ec:	f025 0503 	bic.w	r5, r5, #3
 80088f0:	3508      	adds	r5, #8
 80088f2:	2d0c      	cmp	r5, #12
 80088f4:	bf38      	it	cc
 80088f6:	250c      	movcc	r5, #12
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	4606      	mov	r6, r0
 80088fc:	db01      	blt.n	8008902 <_malloc_r+0x1a>
 80088fe:	42a9      	cmp	r1, r5
 8008900:	d903      	bls.n	800890a <_malloc_r+0x22>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	2000      	movs	r0, #0
 8008908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890a:	f000 f87d 	bl	8008a08 <__malloc_lock>
 800890e:	4921      	ldr	r1, [pc, #132]	; (8008994 <_malloc_r+0xac>)
 8008910:	680a      	ldr	r2, [r1, #0]
 8008912:	4614      	mov	r4, r2
 8008914:	b99c      	cbnz	r4, 800893e <_malloc_r+0x56>
 8008916:	4f20      	ldr	r7, [pc, #128]	; (8008998 <_malloc_r+0xb0>)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	b923      	cbnz	r3, 8008926 <_malloc_r+0x3e>
 800891c:	4621      	mov	r1, r4
 800891e:	4630      	mov	r0, r6
 8008920:	f000 f862 	bl	80089e8 <_sbrk_r>
 8008924:	6038      	str	r0, [r7, #0]
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f000 f85d 	bl	80089e8 <_sbrk_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	d123      	bne.n	800897a <_malloc_r+0x92>
 8008932:	230c      	movs	r3, #12
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	4630      	mov	r0, r6
 8008938:	f000 f86c 	bl	8008a14 <__malloc_unlock>
 800893c:	e7e3      	b.n	8008906 <_malloc_r+0x1e>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	1b5b      	subs	r3, r3, r5
 8008942:	d417      	bmi.n	8008974 <_malloc_r+0x8c>
 8008944:	2b0b      	cmp	r3, #11
 8008946:	d903      	bls.n	8008950 <_malloc_r+0x68>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	441c      	add	r4, r3
 800894c:	6025      	str	r5, [r4, #0]
 800894e:	e004      	b.n	800895a <_malloc_r+0x72>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	42a2      	cmp	r2, r4
 8008954:	bf0c      	ite	eq
 8008956:	600b      	streq	r3, [r1, #0]
 8008958:	6053      	strne	r3, [r2, #4]
 800895a:	4630      	mov	r0, r6
 800895c:	f000 f85a 	bl	8008a14 <__malloc_unlock>
 8008960:	f104 000b 	add.w	r0, r4, #11
 8008964:	1d23      	adds	r3, r4, #4
 8008966:	f020 0007 	bic.w	r0, r0, #7
 800896a:	1ac2      	subs	r2, r0, r3
 800896c:	d0cc      	beq.n	8008908 <_malloc_r+0x20>
 800896e:	1a1b      	subs	r3, r3, r0
 8008970:	50a3      	str	r3, [r4, r2]
 8008972:	e7c9      	b.n	8008908 <_malloc_r+0x20>
 8008974:	4622      	mov	r2, r4
 8008976:	6864      	ldr	r4, [r4, #4]
 8008978:	e7cc      	b.n	8008914 <_malloc_r+0x2c>
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d0e3      	beq.n	800894c <_malloc_r+0x64>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4630      	mov	r0, r6
 8008988:	f000 f82e 	bl	80089e8 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d1dd      	bne.n	800894c <_malloc_r+0x64>
 8008990:	e7cf      	b.n	8008932 <_malloc_r+0x4a>
 8008992:	bf00      	nop
 8008994:	20000468 	.word	0x20000468
 8008998:	2000046c 	.word	0x2000046c

0800899c <_realloc_r>:
 800899c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899e:	4607      	mov	r7, r0
 80089a0:	4614      	mov	r4, r2
 80089a2:	460e      	mov	r6, r1
 80089a4:	b921      	cbnz	r1, 80089b0 <_realloc_r+0x14>
 80089a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089aa:	4611      	mov	r1, r2
 80089ac:	f7ff bf9c 	b.w	80088e8 <_malloc_r>
 80089b0:	b922      	cbnz	r2, 80089bc <_realloc_r+0x20>
 80089b2:	f7ff ff49 	bl	8008848 <_free_r>
 80089b6:	4625      	mov	r5, r4
 80089b8:	4628      	mov	r0, r5
 80089ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089bc:	f000 f830 	bl	8008a20 <_malloc_usable_size_r>
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d20f      	bcs.n	80089e4 <_realloc_r+0x48>
 80089c4:	4621      	mov	r1, r4
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7ff ff8e 	bl	80088e8 <_malloc_r>
 80089cc:	4605      	mov	r5, r0
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d0f2      	beq.n	80089b8 <_realloc_r+0x1c>
 80089d2:	4631      	mov	r1, r6
 80089d4:	4622      	mov	r2, r4
 80089d6:	f7ff ff0f 	bl	80087f8 <memcpy>
 80089da:	4631      	mov	r1, r6
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ff33 	bl	8008848 <_free_r>
 80089e2:	e7e9      	b.n	80089b8 <_realloc_r+0x1c>
 80089e4:	4635      	mov	r5, r6
 80089e6:	e7e7      	b.n	80089b8 <_realloc_r+0x1c>

080089e8 <_sbrk_r>:
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4d06      	ldr	r5, [pc, #24]	; (8008a04 <_sbrk_r+0x1c>)
 80089ec:	2300      	movs	r3, #0
 80089ee:	4604      	mov	r4, r0
 80089f0:	4608      	mov	r0, r1
 80089f2:	602b      	str	r3, [r5, #0]
 80089f4:	f7f8 fd1e 	bl	8001434 <_sbrk>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_sbrk_r+0x1a>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_sbrk_r+0x1a>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	20001ea4 	.word	0x20001ea4

08008a08 <__malloc_lock>:
 8008a08:	4801      	ldr	r0, [pc, #4]	; (8008a10 <__malloc_lock+0x8>)
 8008a0a:	f000 b811 	b.w	8008a30 <__retarget_lock_acquire_recursive>
 8008a0e:	bf00      	nop
 8008a10:	20001eac 	.word	0x20001eac

08008a14 <__malloc_unlock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__malloc_unlock+0x8>)
 8008a16:	f000 b80c 	b.w	8008a32 <__retarget_lock_release_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20001eac 	.word	0x20001eac

08008a20 <_malloc_usable_size_r>:
 8008a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a24:	1f18      	subs	r0, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbc      	itt	lt
 8008a2a:	580b      	ldrlt	r3, [r1, r0]
 8008a2c:	18c0      	addlt	r0, r0, r3
 8008a2e:	4770      	bx	lr

08008a30 <__retarget_lock_acquire_recursive>:
 8008a30:	4770      	bx	lr

08008a32 <__retarget_lock_release_recursive>:
 8008a32:	4770      	bx	lr

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
