
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca8  08007ca8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb0  08007cb0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  200001ec  08007ea4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  08007ea4  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f47  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  0003a163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255db  00000000  00000000  0003fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158d8  00000000  00000000  0006534b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6eb3  00000000  00000000  0007ac23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  00151b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b0c 	.word	0x08007b0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08007b0c 	.word	0x08007b0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f000 fd63 	bl	8000f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f88d 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 fa2d 	bl	800092c <MX_GPIO_Init>
	MX_ADC2_Init();
 80004d2:	f000 f8f3 	bl	80006bc <MX_ADC2_Init>
	MX_ADC3_Init();
 80004d6:	f000 f943 	bl	8000760 <MX_ADC3_Init>
	MX_CAN2_Init();
 80004da:	f000 f993 	bl	8000804 <MX_CAN2_Init>
	MX_SPI1_Init();
 80004de:	f000 f9c5 	bl	800086c <MX_SPI1_Init>
	MX_USART3_UART_Init();
 80004e2:	f000 f9f9 	bl	80008d8 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80004e6:	f006 fd33 	bl	8006f50 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t tempBuf[32];

	const uint8_t spStat[3] = {'S', 'P','\n'};
 80004ea:	4a37      	ldr	r2, [pc, #220]	; (80005c8 <main+0x108>)
 80004ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	3302      	adds	r3, #2
 80004f8:	0c12      	lsrs	r2, r2, #16
 80004fa:	701a      	strb	r2, [r3, #0]
	const uint8_t onStat[3] = {'M', '3','\n'};
 80004fc:	4a33      	ldr	r2, [pc, #204]	; (80005cc <main+0x10c>)
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	701a      	strb	r2, [r3, #0]
	const uint8_t offStat[3] = {'M', '5','\n'};
 800050e:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <main+0x110>)
 8000510:	f107 031c 	add.w	r3, r7, #28
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	0c12      	lsrs	r2, r2, #16
 800051e:	701a      	strb	r2, [r3, #0]

	//uint8_t txBuf[8] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t rxBuf[16]; // = { '0', '0', '0', '0', '0', '0', '0', '\n', '\0' };


	uint8_t CDCrx[8] = { '0', '0', '0', '0', '0', '0', '0', '\n' };
 8000520:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <main+0x114>)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	e883 0003 	stmia.w	r3, {r0, r1}

	char *CDCrxPtr1 = &CDCrx[1];
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	3301      	adds	r3, #1
 8000530:	653b      	str	r3, [r7, #80]	; 0x50

	uint32_t x = -99;
 8000532:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000536:	603b      	str	r3, [r7, #0]
	uint16_t length, length2;

    char *tempPtr = &x;
 8000538:	463b      	mov	r3, r7
 800053a:	64fb      	str	r3, [r7, #76]	; 0x4c

	int rpm = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
    int j = 00;
 8000540:	2300      	movs	r3, #0
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48

    tempPtr = rxBuf;
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	64fb      	str	r3, [r7, #76]	; 0x4c
    strcpy(rxBuf, "1234ABCD");
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4a22      	ldr	r2, [pc, #136]	; (80005d8 <main+0x118>)
 8000550:	ca07      	ldmia	r2, {r0, r1, r2}
 8000552:	c303      	stmia	r3!, {r0, r1}
 8000554:	701a      	strb	r2, [r3, #0]
		//hStatus = HAL_UART_Receive(&huart3, rxBuf, 8, 10);

		//HAL_UART_Receive(&huart3, rxBuf, 8, 10);


		CDC_Receive_FS(CDCrx, &x);
 8000556:	463a      	mov	r2, r7
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f006 fda1 	bl	80070a4 <CDC_Receive_FS>

		HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fd85 	bl	8001074 <HAL_Delay>

		if (CDCrx[0] == 'M') {
 800056a:	793b      	ldrb	r3, [r7, #4]
 800056c:	2b4d      	cmp	r3, #77	; 0x4d
 800056e:	d018      	beq.n	80005a2 <main+0xe2>
//				spindleOff(&huart3);
//				CDC_Transmit_FS(offStat, 3);
//			}

		}
		else if (CDCrx[0] == 'S') {
 8000570:	793b      	ldrb	r3, [r7, #4]
 8000572:	2b53      	cmp	r3, #83	; 0x53
 8000574:	d115      	bne.n	80005a2 <main+0xe2>
			HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 fd7c 	bl	8001074 <HAL_Delay>
//					break;
//				}
//			}
			//CDCrx[6] = NULL;
			//rounddown ok
			rpm = atoi(CDCrxPtr1)/3;
 800057c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800057e:	f007 fa01 	bl	8007984 <atoi>
 8000582:	4603      	mov	r3, r0
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0x11c>)
 8000586:	fb82 1203 	smull	r1, r2, r2, r3
 800058a:	17db      	asrs	r3, r3, #31
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
			setFreq(rpm, &huart3);
 8000590:	4913      	ldr	r1, [pc, #76]	; (80005e0 <main+0x120>)
 8000592:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000594:	f000 faa4 	bl	8000ae0 <setFreq>
			CDC_Transmit_FS(CDCrx, 8);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2108      	movs	r1, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f006 fd95 	bl	80070cc <CDC_Transmit_FS>
		} else {

		}

		CDCrx[0] = 'a';
 80005a2:	2361      	movs	r3, #97	; 0x61
 80005a4:	713b      	strb	r3, [r7, #4]

		if(rpm > 1000)
 80005a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ac:	dd05      	ble.n	80005ba <main+0xfa>
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2102      	movs	r1, #2
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <main+0x124>)
 80005b4:	f001 fb8e 	bl	8001cd4 <HAL_GPIO_WritePin>
 80005b8:	e7cd      	b.n	8000556 <main+0x96>
		}
		else
		{
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2102      	movs	r1, #2
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x124>)
 80005c0:	f001 fb88 	bl	8001cd4 <HAL_GPIO_WritePin>
		CDC_Receive_FS(CDCrx, &x);
 80005c4:	e7c7      	b.n	8000556 <main+0x96>
 80005c6:	bf00      	nop
 80005c8:	08007b30 	.word	0x08007b30
 80005cc:	08007b34 	.word	0x08007b34
 80005d0:	08007b38 	.word	0x08007b38
 80005d4:	08007b3c 	.word	0x08007b3c
 80005d8:	08007b24 	.word	0x08007b24
 80005dc:	55555556 	.word	0x55555556
 80005e0:	2000042c 	.word	0x2000042c
 80005e4:	40020800 	.word	0x40020800

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 f9f2 	bl	80079e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800065c:	23a8      	movs	r3, #168	; 0xa8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f002 fccd 	bl	800300c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
		Error_Handler();
 8000678:	f000 f9ee 	bl	8000a58 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2105      	movs	r1, #5
 800069a:	4618      	mov	r0, r3
 800069c:	f002 ff2e 	bl	80034fc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
		Error_Handler();
 80006a6:	f000 f9d7 	bl	8000a58 <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC2_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC2_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC2_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006da:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ADC2_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC2_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ADC2_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC2_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_ADC2_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC2_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC2_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_ADC2_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC2_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC2_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_ADC2_Init+0x98>)
 800071e:	f000 fccd 	bl	80010bc <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC2_Init+0x70>
		Error_Handler();
 8000728:	f000 f996 	bl	8000a58 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800072c:	2301      	movs	r3, #1
 800072e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_ADC2_Init+0x98>)
 800073e:	f000 fd01 	bl	8001144 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000748:	f000 f986 	bl	8000a58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000470 	.word	0x20000470
 8000758:	40012100 	.word	0x40012100
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <MX_ADC3_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_ADC3_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <MX_ADC3_Init+0x98>)
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800077e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000780:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_ADC3_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ADC3_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800078c:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_ADC3_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ADC3_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_ADC3_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_ADC3_Init+0xa0>)
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007bc:	2201      	movs	r2, #1
 80007be:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007c2:	f000 fc7b 	bl	80010bc <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC3_Init+0x70>
		Error_Handler();
 80007cc:	f000 f944 	bl	8000a58 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80007d0:	2303      	movs	r3, #3
 80007d2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80007dc:	463b      	mov	r3, r7
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_ADC3_Init+0x98>)
 80007e2:	f000 fcaf 	bl	8001144 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC3_Init+0x90>
		Error_Handler();
 80007ec:	f000 f934 	bl	8000a58 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200004e0 	.word	0x200004e0
 80007fc:	40012200 	.word	0x40012200
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_CAN2_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_CAN2_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_CAN2_Init+0x60>)
 8000810:	2210      	movs	r2, #16
 8000812:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_CAN2_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_CAN2_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_CAN2_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_CAN2_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_CAN2_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_CAN2_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_CAN2_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_CAN2_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_CAN2_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_CAN2_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_CAN2_Init+0x60>)
 8000852:	f000 fe95 	bl	8001580 <HAL_CAN_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_CAN2_Init+0x5c>
		Error_Handler();
 800085c:	f000 f8fc 	bl	8000a58 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200004b8 	.word	0x200004b8
 8000868:	40006800 	.word	0x40006800

0800086c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_SPI1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800087c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800089c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_SPI1_Init+0x64>)
 80008be:	f003 f817 	bl	80038f0 <HAL_SPI_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_SPI1_Init+0x60>
		Error_Handler();
 80008c8:	f000 f8c6 	bl	8000a58 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000528 	.word	0x20000528
 80008d4:	40013000 	.word	0x40013000

080008d8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END   USART3_Init 1 */

	huart3.Instance = USART3;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART3_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART3_UART_Init+0x4c>)
 8000910:	f003 f877 	bl	8003a02 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800091a:	f000 f89d 	bl	8000a58 <Error_Handler>

	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END   USART3_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	2000042c 	.word	0x2000042c
 8000928:	40004800 	.word	0x40004800

0800092c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b40      	ldr	r3, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x11c>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a38      	ldr	r2, [pc, #224]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <MX_GPIO_Init+0x11c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <MX_GPIO_Init+0x11c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_GPIO_Init+0x11c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x11c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2102      	movs	r1, #2
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <MX_GPIO_Init+0x120>)
 80009d4:	f001 f97e 	bl	8001cd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2102      	movs	r1, #2
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x124>)
 80009de:	f001 f979 	bl	8001cd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80009e2:	2200      	movs	r2, #0
 80009e4:	211f      	movs	r1, #31
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x128>)
 80009e8:	f001 f974 	bl	8001cd4 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4812      	ldr	r0, [pc, #72]	; (8000a4c <MX_GPIO_Init+0x120>)
 8000a04:	f000 ffca 	bl	800199c <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_GPIO_Init+0x124>)
 8000a20:	f000 ffbc 	bl	800199c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000a24:	231f      	movs	r3, #31
 8000a26:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <MX_GPIO_Init+0x128>)
 8000a3c:	f000 ffae 	bl	800199c <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <sendData8>:

uint8_t wrMsg[] = { 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };

uint8_t check[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void sendData8(UART_HandleTypeDef *huart) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2102      	movs	r1, #2
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <sendData8+0x38>)
 8000a72:	f001 f92f 	bl	8001cd4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f000 fafc 	bl	8001074 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	2208      	movs	r2, #8
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <sendData8+0x3c>)
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f003 f80a 	bl	8003a9c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <sendData8+0x38>)
 8000a8e:	f001 f921 	bl	8001cd4 <HAL_GPIO_WritePin>

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <appendCRC8>:

void clearSer() {
	//TODO
}

void appendCRC8() {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000aaa:	2106      	movs	r1, #6
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <appendCRC8+0x38>)
 8000aae:	f000 f845 	bl	8000b3c <crc_chk_value>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000ab8:	1cbb      	adds	r3, r7, #2
 8000aba:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781a      	ldrb	r2, [r3, #0]
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <appendCRC8+0x38>)
 8000ac2:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b03      	ldr	r3, [pc, #12]	; (8000adc <appendCRC8+0x38>)
 8000ad0:	71da      	strb	r2, [r3, #7]
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <setFreq>:
	sendData8(huart);

	//checkEcho8();
}

void setFreq(uint16_t freq, UART_HandleTypeDef *huart) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <setFreq+0x58>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <setFreq+0x58>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <setFreq+0x58>)
 8000afa:	2210      	movs	r2, #16
 8000afc:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <setFreq+0x58>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <setFreq+0x58>)
 8000b0e:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <setFreq+0x58>)
 8000b16:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <setFreq+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <setFreq+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000b24:	f7ff ffbe 	bl	8000aa4 <appendCRC8>

	sendData8(huart);
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f7ff ff9b 	bl	8000a64 <sendData8>

	//checkEcho8();
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000000 	.word	0x20000000

08000b3c <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4c:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--) {
 8000b4e:	e01f      	b.n	8000b90 <crc_chk_value+0x54>
		crc_value ^= *data_value++;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	4053      	eors	r3, r2
 8000b5e:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	e011      	b.n	8000b8a <crc_chk_value+0x4e>
			if (crc_value & 0x0001)
 8000b66:	89fb      	ldrh	r3, [r7, #14]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	085b      	lsrs	r3, r3, #1
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <crc_chk_value+0x6c>)
 8000b78:	4053      	eors	r3, r2
 8000b7a:	81fb      	strh	r3, [r7, #14]
 8000b7c:	e002      	b.n	8000b84 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	ddea      	ble.n	8000b66 <crc_chk_value+0x2a>
	while (length--) {
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	70fa      	strb	r2, [r7, #3]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1da      	bne.n	8000b50 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	ffffa001 	.word	0xffffa001

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_ADC_MspInit+0xd8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d128      	bne.n	8000c70 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a2c      	ldr	r2, [pc, #176]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c56:	2306      	movs	r3, #6
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	481c      	ldr	r0, [pc, #112]	; (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c6a:	f000 fe97 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c6e:	e02c      	b.n	8000cca <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_ADC_MspInit+0xe4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d127      	bne.n	8000cca <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000cc6:	f000 fe69 	bl	800199c <HAL_GPIO_Init>
}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012100 	.word	0x40012100
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40012200 	.word	0x40012200

08000ce4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <HAL_CAN_MspInit+0xa0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d13a      	bne.n	8000d7c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_CAN_MspInit+0xa4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000d6c:	2309      	movs	r3, #9
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_CAN_MspInit+0xa8>)
 8000d78:	f000 fe10 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40006800 	.word	0x40006800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_SPI_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12b      	bne.n	8000e0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_SPI_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dea:	23f0      	movs	r3, #240	; 0xf0
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_SPI_MspInit+0x8c>)
 8000e06:	f000 fdc9 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_UART_MspInit+0x84>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12c      	bne.n	8000e9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_UART_MspInit+0x8c>)
 8000e98:	f000 fd80 	bl	800199c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020400 	.word	0x40020400

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f89a 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <OTG_FS_IRQHandler+0x10>)
 8000f0a:	f001 f84c 	bl	8001fa6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20001a54 	.word	0x20001a54

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f006 fd15 	bl	8007998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff faa7 	bl	80004c0 <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000f80:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8000f84:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000f88:	20001e5c 	.word	0x20001e5c

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fcad 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fdf2 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fcc5 	bl	8001982 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 fc8d 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000008 	.word	0x20000008
 800102c:	20000010 	.word	0x20000010
 8001030:	2000000c 	.word	0x2000000c

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000010 	.word	0x20000010
 8001058:	20000580 	.word	0x20000580

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000580 	.word	0x20000580

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000010 	.word	0x20000010

080010bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e033      	b.n	800113a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd8e 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001102:	f023 0302 	bic.w	r3, r3, #2
 8001106:	f043 0202 	orr.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f93a 	bl	8001388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
 800112a:	e001      	b.n	8001130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1c>
 800115c:	2302      	movs	r3, #2
 800115e:	e105      	b.n	800136c <HAL_ADC_ConfigChannel+0x228>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b09      	cmp	r3, #9
 800116e:	d925      	bls.n	80011bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68d9      	ldr	r1, [r3, #12]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	3b1e      	subs	r3, #30
 8001186:	2207      	movs	r2, #7
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43da      	mvns	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	400a      	ands	r2, r1
 8001194:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68d9      	ldr	r1, [r3, #12]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4403      	add	r3, r0
 80011ae:	3b1e      	subs	r3, #30
 80011b0:	409a      	lsls	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	e022      	b.n	8001202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6919      	ldr	r1, [r3, #16]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	2207      	movs	r2, #7
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6919      	ldr	r1, [r3, #16]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4403      	add	r3, r0
 80011f8:	409a      	lsls	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b06      	cmp	r3, #6
 8001208:	d824      	bhi.n	8001254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b05      	subs	r3, #5
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b05      	subs	r3, #5
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	635a      	str	r2, [r3, #52]	; 0x34
 8001252:	e04c      	b.n	80012ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b0c      	cmp	r3, #12
 800125a:	d824      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b23      	subs	r3, #35	; 0x23
 800126e:	221f      	movs	r2, #31
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43da      	mvns	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	400a      	ands	r2, r1
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b23      	subs	r3, #35	; 0x23
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
 80012a4:	e023      	b.n	80012ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b41      	subs	r3, #65	; 0x41
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b41      	subs	r3, #65	; 0x41
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <HAL_ADC_ConfigChannel+0x234>)
 80012f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a21      	ldr	r2, [pc, #132]	; (800137c <HAL_ADC_ConfigChannel+0x238>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1cc>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b12      	cmp	r3, #18
 8001302:	d105      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_ADC_ConfigChannel+0x238>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d123      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x21e>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d003      	beq.n	800132a <HAL_ADC_ConfigChannel+0x1e6>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b11      	cmp	r3, #17
 8001328:	d11b      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d111      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_ADC_ConfigChannel+0x23c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_ADC_ConfigChannel+0x240>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9a      	lsrs	r2, r3, #18
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001354:	e002      	b.n	800135c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3b01      	subs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40012300 	.word	0x40012300
 800137c:	40012000 	.word	0x40012000
 8001380:	20000008 	.word	0x20000008
 8001384:	431bde83 	.word	0x431bde83

08001388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001390:	4b79      	ldr	r3, [pc, #484]	; (8001578 <ADC_Init+0x1f0>)
 8001392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	021a      	lsls	r2, r3, #8
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6899      	ldr	r1, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	4a58      	ldr	r2, [pc, #352]	; (800157c <ADC_Init+0x1f4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d022      	beq.n	8001466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800142e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6899      	ldr	r1, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6899      	ldr	r1, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e00f      	b.n	8001486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0202 	bic.w	r2, r2, #2
 8001494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6899      	ldr	r1, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7e1b      	ldrb	r3, [r3, #24]
 80014a0:	005a      	lsls	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6859      	ldr	r1, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	3b01      	subs	r3, #1
 80014e0:	035a      	lsls	r2, r3, #13
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	e007      	b.n	80014fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	3b01      	subs	r3, #1
 8001518:	051a      	lsls	r2, r3, #20
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6899      	ldr	r1, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800153e:	025a      	lsls	r2, r3, #9
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	029a      	lsls	r2, r3, #10
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40012300 	.word	0x40012300
 800157c:	0f000001 	.word	0x0f000001

08001580 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0ed      	b.n	800176e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fba0 	bl	8000ce4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0202 	bic.w	r2, r2, #2
 80015b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b4:	f7ff fd52 	bl	800105c <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ba:	e012      	b.n	80015e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015bc:	f7ff fd4e 	bl	800105c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d90b      	bls.n	80015e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2205      	movs	r2, #5
 80015da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0c5      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e5      	bne.n	80015bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001600:	f7ff fd2c 	bl	800105c <HAL_GetTick>
 8001604:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001606:	e012      	b.n	800162e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001608:	f7ff fd28 	bl	800105c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d90b      	bls.n	800162e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2205      	movs	r2, #5
 8001626:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e09f      	b.n	800176e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e5      	beq.n	8001608 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7e5b      	ldrb	r3, [r3, #25]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e9b      	ldrb	r3, [r3, #26]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0220 	bic.w	r2, r2, #32
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7edb      	ldrb	r3, [r3, #27]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0210 	bic.w	r2, r2, #16
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0210 	orr.w	r2, r2, #16
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7f1b      	ldrb	r3, [r3, #28]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0208 	orr.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f5b      	ldrb	r3, [r3, #29]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0204 	bic.w	r2, r2, #4
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	ea42 0103 	orr.w	r1, r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e16b      	b.n	8001c90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 815a 	bne.w	8001c8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80b4 	beq.w	8001c8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a5f      	ldr	r2, [pc, #380]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b5d      	ldr	r3, [pc, #372]	; (8001ca8 <HAL_GPIO_Init+0x30c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a5b      	ldr	r2, [pc, #364]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x314>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d02b      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x318>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x31c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x216>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x212>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x32c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x20e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x20a>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e00e      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x310>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae90 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d08:	b08f      	sub	sp, #60	; 0x3c
 8001d0a:	af0a      	add	r7, sp, #40	; 0x28
 8001d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e10f      	b.n	8001f38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f005 fb12 	bl	800735c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fa59 	bl	800420e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f002 f930 	bl	8003fe4 <USB_CoreInit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d0      	b.n	8001f38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fa47 	bl	8004230 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e04a      	b.n	8001e3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333d      	adds	r3, #61	; 0x3d
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333c      	adds	r3, #60	; 0x3c
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3342      	adds	r3, #66	; 0x42
 8001de4:	4602      	mov	r2, r0
 8001de6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	333f      	adds	r3, #63	; 0x3f
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3344      	adds	r3, #68	; 0x44
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3348      	adds	r3, #72	; 0x48
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3350      	adds	r3, #80	; 0x50
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3af      	bcc.n	8001da8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e044      	b.n	8001ed8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3b5      	bcc.n	8001e4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	687e      	ldr	r6, [r7, #4]
 8001eea:	466d      	mov	r5, sp
 8001eec:	f106 0410 	add.w	r4, r6, #16
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	1d33      	adds	r3, r6, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f002 f9bd 	bl	8004284 <USB_DevInit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e00d      	b.n	8001f38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fa05 	bl	8005340 <USB_DevDisconnect>

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_PCD_Start+0x1c>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e020      	b.n	8001f9e <HAL_PCD_Start+0x5e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d109      	bne.n	8001f80 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 f931 	bl	80041ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f9b5 	bl	80052fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fa6:	b590      	push	{r4, r7, lr}
 8001fa8:	b08d      	sub	sp, #52	; 0x34
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fa73 	bl	80054a8 <USB_GetMode>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 839d 	bne.w	8002704 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 f9d7 	bl	8005382 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8393 	beq.w	8002702 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f9ce 	bl	8005382 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d107      	bne.n	8002000 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f002 0202 	and.w	r2, r2, #2
 8001ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f003 f9bc 	bl	8005382 <USB_ReadInterrupts>
 800200a:	4603      	mov	r3, r0
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b10      	cmp	r3, #16
 8002012:	d161      	bne.n	80020d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0210 	bic.w	r2, r2, #16
 8002022:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	0c5b      	lsrs	r3, r3, #17
 8002048:	f003 030f 	and.w	r3, r3, #15
 800204c:	2b02      	cmp	r3, #2
 800204e:	d124      	bne.n	800209a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d035      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	6a38      	ldr	r0, [r7, #32]
 8002070:	f003 f822 	bl	80050b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002080:	441a      	add	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002092:	441a      	add	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	e016      	b.n	80020c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	0c5b      	lsrs	r3, r3, #17
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d110      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ac:	2208      	movs	r2, #8
 80020ae:	4619      	mov	r1, r3
 80020b0:	6a38      	ldr	r0, [r7, #32]
 80020b2:	f003 f801 	bl	80050b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c2:	441a      	add	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0210 	orr.w	r2, r2, #16
 80020d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 f950 	bl	8005382 <USB_ReadInterrupts>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ec:	d16e      	bne.n	80021cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 f956 	bl	80053a8 <USB_ReadDevAllOutEpInterrupt>
 80020fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020fe:	e062      	b.n	80021c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d057      	beq.n	80021ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f97b 	bl	8005410 <USB_ReadDevOutEPInterrupt>
 800211a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	2301      	movs	r3, #1
 8002136:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fdb0 	bl	8002ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	2308      	movs	r3, #8
 800215a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 feaa 	bl	8002eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d008      	beq.n	8002180 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	2310      	movs	r3, #16
 800217e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	2320      	movs	r3, #32
 800219a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	3301      	adds	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d199      	bne.n	8002100 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f8d6 	bl	8005382 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021e0:	f040 80c0 	bne.w	8002364 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 f8f7 	bl	80053dc <USB_ReadDevAllInEpInterrupt>
 80021ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021f4:	e0b2      	b.n	800235c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a7 	beq.w	8002350 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f003 f91d 	bl	800544c <USB_ReadDevInEPInterrupt>
 8002212:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d057      	beq.n	80022ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	69f9      	ldr	r1, [r7, #28]
 800223a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223e:	4013      	ands	r3, r2
 8002240:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224e:	461a      	mov	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d132      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3348      	adds	r3, #72	; 0x48
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	3344      	adds	r3, #68	; 0x44
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4419      	add	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4403      	add	r3, r0
 8002290:	3348      	adds	r3, #72	; 0x48
 8002292:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d113      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x31c>
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	3350      	adds	r3, #80	; 0x50
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d108      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022ba:	461a      	mov	r2, r3
 80022bc:	2101      	movs	r1, #1
 80022be:	f003 f925 	bl	800550c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f005 f8c8 	bl	800745e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2308      	movs	r3, #8
 80022e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002300:	461a      	mov	r2, r3
 8002302:	2310      	movs	r3, #16
 8002304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231c:	461a      	mov	r2, r3
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002338:	461a      	mov	r2, r3
 800233a:	2302      	movs	r3, #2
 800233c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fc1b 	bl	8002b86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	3301      	adds	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	f47f af49 	bne.w	80021f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 f80a 	bl	8005382 <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002378:	d122      	bne.n	80023c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002388:	f023 0301 	bic.w	r3, r3, #1
 800238c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023a0:	2100      	movs	r1, #0
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fe26 	bl	8002ff4 <HAL_PCDEx_LPM_Callback>
 80023a8:	e002      	b.n	80023b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f005 f8ce 	bl	800754c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 ffdc 	bl	8005382 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d4:	d112      	bne.n	80023fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f005 f88a 	bl	8007500 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 ffbe 	bl	8005382 <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	f040 80c7 	bne.w	80025a2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2110      	movs	r1, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f88c 	bl	800454c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002438:	e056      	b.n	80024e8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002446:	461a      	mov	r2, r3
 8002448:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800244c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245e:	0151      	lsls	r1, r2, #5
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	440a      	add	r2, r1
 8002464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002468:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800246c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	4413      	add	r3, r2
 8002476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247e:	0151      	lsls	r1, r2, #5
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	440a      	add	r2, r1
 8002484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002488:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800248c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249a:	461a      	mov	r2, r3
 800249c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b2:	0151      	lsls	r1, r2, #5
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	440a      	add	r2, r1
 80024b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	3301      	adds	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d3a3      	bcc.n	800243a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002500:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002504:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251e:	f043 030b 	orr.w	r3, r3, #11
 8002522:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002534:	f043 030b 	orr.w	r3, r3, #11
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	e015      	b.n	8002568 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800254e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002552:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002562:	f043 030b 	orr.w	r3, r3, #11
 8002566:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002576:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800257a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800258c:	461a      	mov	r2, r3
 800258e:	f002 ffbd 	bl	800550c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 feeb 	bl	8005382 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	d124      	bne.n	8002602 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 ff81 	bl	80054c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f002 f821 	bl	800460e <USB_GetDevSpeed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681c      	ldr	r4, [r3, #0]
 80025d8:	f001 f956 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80025dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4620      	mov	r0, r4
 80025e8:	f001 fd5e 	bl	80040a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f004 ff5e 	bl	80074ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f002 febb 	bl	8005382 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d10a      	bne.n	800262c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f004 ff3b 	bl	8007492 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f002 0208 	and.w	r2, r2, #8
 800262a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fea6 	bl	8005382 <USB_ReadInterrupts>
 8002636:	4603      	mov	r3, r0
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002640:	d10f      	bne.n	8002662 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f004 ff9d 	bl	800758c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fe8b 	bl	8005382 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002676:	d10f      	bne.n	8002698 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	b2db      	uxtb	r3, r3
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f004 ff70 	bl	8007568 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fe70 	bl	8005382 <USB_ReadInterrupts>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d10a      	bne.n	80026c4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f004 ff7e 	bl	80075b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695a      	ldr	r2, [r3, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fe5a 	bl	8005382 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d115      	bne.n	8002704 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f004 ff6e 	bl	80075cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	e000      	b.n	8002704 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002702:	bf00      	nop
    }
  }
}
 8002704:	3734      	adds	r7, #52	; 0x34
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}

0800270a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	460b      	mov	r3, r1
 8002714:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_PCD_SetAddress+0x1a>
 8002720:	2302      	movs	r3, #2
 8002722:	e013      	b.n	800274c <HAL_PCD_SetAddress+0x42>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f002 fdb8 	bl	80052b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	70fb      	strb	r3, [r7, #3]
 8002766:	460b      	mov	r3, r1
 8002768:	803b      	strh	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002776:	2b00      	cmp	r3, #0
 8002778:	da0f      	bge.n	800279a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	3338      	adds	r3, #56	; 0x38
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	3304      	adds	r3, #4
 8002790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	705a      	strb	r2, [r3, #1]
 8002798:	e00f      	b.n	80027ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c6:	883a      	ldrh	r2, [r7, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	78ba      	ldrb	r2, [r7, #2]
 80027d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027e4:	78bb      	ldrb	r3, [r7, #2]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d102      	bne.n	80027f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_PCD_EP_Open+0xaa>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e00e      	b.n	800281c <HAL_PCD_EP_Open+0xc8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68f9      	ldr	r1, [r7, #12]
 800280c:	4618      	mov	r0, r3
 800280e:	f001 ff23 	bl	8004658 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800281a:	7afb      	ldrb	r3, [r7, #11]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002834:	2b00      	cmp	r3, #0
 8002836:	da0f      	bge.n	8002858 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 020f 	and.w	r2, r3, #15
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	3338      	adds	r3, #56	; 0x38
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	705a      	strb	r2, [r3, #1]
 8002856:	e00f      	b.n	8002878 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_PCD_EP_Close+0x6e>
 800288e:	2302      	movs	r3, #2
 8002890:	e00e      	b.n	80028b0 <HAL_PCD_EP_Close+0x8c>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 ff61 	bl	8004768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	460b      	mov	r3, r1
 80028c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	f003 020f 	and.w	r2, r3, #15
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	3304      	adds	r3, #4
 80028e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d102      	bne.n	8002914 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	f002 fa3c 	bl	8004da8 <USB_EP0StartXfer>
 8002930:	e008      	b.n	8002944 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	6979      	ldr	r1, [r7, #20]
 8002940:	f001 ffee 	bl	8004920 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002970:	681b      	ldr	r3, [r3, #0]
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	460b      	mov	r3, r1
 800298c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2201      	movs	r2, #1
 80029bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6979      	ldr	r1, [r7, #20]
 80029f0:	f002 f9da 	bl	8004da8 <USB_EP0StartXfer>
 80029f4:	e008      	b.n	8002a08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6979      	ldr	r1, [r7, #20]
 8002a04:	f001 ff8c 	bl	8004920 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d901      	bls.n	8002a30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e050      	b.n	8002ad2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da0f      	bge.n	8002a58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	3338      	adds	r3, #56	; 0x38
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	705a      	strb	r2, [r3, #1]
 8002a56:	e00d      	b.n	8002a74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4413      	add	r3, r2
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_PCD_EP_SetStall+0x82>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e01e      	b.n	8002ad2 <HAL_PCD_EP_SetStall+0xc0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 fb31 	bl	800510a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	b2d9      	uxtb	r1, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f002 fd22 	bl	800550c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	f003 020f 	and.w	r2, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d901      	bls.n	8002af8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e042      	b.n	8002b7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	da0f      	bge.n	8002b20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3338      	adds	r3, #56	; 0x38
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	705a      	strb	r2, [r3, #1]
 8002b1e:	e00f      	b.n	8002b40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 020f 	and.w	r2, r3, #15
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_PCD_EP_ClrStall+0x86>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e00e      	b.n	8002b7e <HAL_PCD_EP_ClrStall+0xa4>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fb39 	bl	80051e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b08a      	sub	sp, #40	; 0x28
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	3338      	adds	r3, #56	; 0x38
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	3304      	adds	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d901      	bls.n	8002bbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06c      	b.n	8002c98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d902      	bls.n	8002bda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3303      	adds	r3, #3
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be2:	e02b      	b.n	8002c3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d902      	bls.n	8002c00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3303      	adds	r3, #3
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	6978      	ldr	r0, [r7, #20]
 8002c20:	f002 fa15 	bl	800504e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d809      	bhi.n	8002c66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d203      	bcs.n	8002c66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1be      	bne.n	8002be4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d811      	bhi.n	8002c96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2201      	movs	r2, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	6939      	ldr	r1, [r7, #16]
 8002c8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c92:	4013      	ands	r3, r2
 8002c94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	333c      	adds	r3, #60	; 0x3c
 8002cb8:	3304      	adds	r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 80a0 	bne.w	8002e18 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f240 80dd 	bls.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80d7 	beq.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	6093      	str	r3, [r2, #8]
 8002d0c:	e0cb      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d24:	461a      	mov	r2, r3
 8002d26:	2320      	movs	r3, #32
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	e0bc      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80b7 	bne.w	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d90f      	bls.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	e0a2      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4403      	add	r3, r0
 8002d96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4403      	add	r3, r0
 8002dbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4419      	add	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4403      	add	r3, r0
 8002dd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d114      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d108      	bne.n	8002e0a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e02:	461a      	mov	r2, r3
 8002e04:	2101      	movs	r1, #1
 8002e06:	f002 fb81 	bl	800550c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f004 fb09 	bl	8007428 <HAL_PCD_DataOutStageCallback>
 8002e16:	e046      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d124      	bne.n	8002e6a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3c:	6093      	str	r3, [r2, #8]
 8002e3e:	e032      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	2320      	movs	r3, #32
 8002e5a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f004 fae0 	bl	8007428 <HAL_PCD_DataOutStageCallback>
 8002e68:	e01d      	b.n	8002ea6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d114      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d108      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f002 fb39 	bl	800550c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f004 fac1 	bl	8007428 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	4f54300a 	.word	0x4f54300a
 8002eb4:	4f54310a 	.word	0x4f54310a

08002eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	333c      	adds	r3, #60	; 0x3c
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d90e      	bls.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d009      	beq.n	8002f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f004 fa79 	bl	8007404 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d90c      	bls.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d108      	bne.n	8002f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2101      	movs	r1, #1
 8002f30:	f002 faec 	bl	800550c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	4f54300a 	.word	0x4f54300a

08002f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	4613      	mov	r3, r2
 8002f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f62:	883b      	ldrh	r3, [r7, #0]
 8002f64:	0419      	lsls	r1, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e028      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	0418      	lsls	r0, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4302      	orrs	r2, r0
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e264      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4ba3      	ldr	r3, [pc, #652]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4ba0      	ldr	r3, [pc, #640]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b9d      	ldr	r3, [pc, #628]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b99      	ldr	r3, [pc, #612]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e23f      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a90      	ldr	r2, [pc, #576]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b8b      	ldr	r3, [pc, #556]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a8a      	ldr	r2, [pc, #552]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b88      	ldr	r3, [pc, #544]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a87      	ldr	r2, [pc, #540]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b84      	ldr	r3, [pc, #528]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a83      	ldr	r2, [pc, #524]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b81      	ldr	r3, [pc, #516]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd ffca 	bl	800105c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd ffc6 	bl	800105c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e204      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fd ffb6 	bl	800105c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd ffb2 	bl	800105c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f0      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b62      	ldr	r3, [pc, #392]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b5f      	ldr	r3, [pc, #380]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c4      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4952      	ldr	r1, [pc, #328]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fd ff6b 	bl	800105c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fd ff67 	bl	800105c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a5      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4940      	ldr	r1, [pc, #256]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x2b0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fd ff4a 	bl	800105c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fd ff46 	bl	800105c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e184      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d030      	beq.n	8003258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd ff2a 	bl	800105c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fd ff26 	bl	800105c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e164      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_RCC_OscConfig+0x2b4>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fd ff13 	bl	800105c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fd ff0f 	bl	800105c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e14d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a0e      	ldr	r2, [pc, #56]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d121      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_RCC_OscConfig+0x2b8>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fed5 	bl	800105c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e011      	b.n	80032da <HAL_RCC_OscConfig+0x2ce>
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	42470000 	.word	0x42470000
 80032c0:	42470e80 	.word	0x42470e80
 80032c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fd fec8 	bl	800105c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e106      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b85      	ldr	r3, [pc, #532]	; (80034f0 <HAL_RCC_OscConfig+0x4e4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <HAL_RCC_OscConfig+0x2f0>
 80032ee:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	e01c      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b05      	cmp	r3, #5
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x312>
 8003304:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a7a      	ldr	r2, [pc, #488]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b78      	ldr	r3, [pc, #480]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a77      	ldr	r2, [pc, #476]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x32a>
 800331e:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a74      	ldr	r2, [pc, #464]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	4b72      	ldr	r3, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a71      	ldr	r2, [pc, #452]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d015      	beq.n	800336a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd fe8d 	bl	800105c <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fe89 	bl	800105c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0c5      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RCC_OscConfig+0x33a>
 8003368:	e014      	b.n	8003394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fd fe77 	bl	800105c <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fe73 	bl	800105c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e0af      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ee      	bne.n	8003372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a55      	ldr	r2, [pc, #340]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 809b 	beq.w	80034e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d05c      	beq.n	8003476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d141      	bne.n	8003448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ca:	f7fd fe47 	bl	800105c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d2:	f7fd fe43 	bl	800105c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e081      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e4:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	019b      	lsls	r3, r3, #6
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	061b      	lsls	r3, r3, #24
 8003414:	4937      	ldr	r1, [pc, #220]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fe1c 	bl	800105c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fd fe18 	bl	800105c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e056      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x41c>
 8003446:	e04e      	b.n	80034e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fe05 	bl	800105c <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd fe01 	bl	800105c <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e03f      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003468:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x44a>
 8003474:	e037      	b.n	80034e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e032      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_RCC_OscConfig+0x4e8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d028      	beq.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d121      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d11a      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b2:	4013      	ands	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40007000 	.word	0x40007000
 80034f4:	40023800 	.word	0x40023800
 80034f8:	42470060 	.word	0x42470060

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fd fd36 	bl	800105c <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd fd32 	bl	800105c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fd fc96 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08007b8c 	.word	0x08007b8c
 80036c0:	20000008 	.word	0x20000008
 80036c4:	2000000c 	.word	0x2000000c

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	2300      	movs	r3, #0
 80036da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b67      	ldr	r3, [pc, #412]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80bd 	bhi.w	800386c <HAL_RCC_GetSysClockFreq+0x1a4>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e0b7      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b61      	ldr	r3, [pc, #388]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036fe:	60bb      	str	r3, [r7, #8]
       break;
 8003700:	e0b7      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b60      	ldr	r3, [pc, #384]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003704:	60bb      	str	r3, [r7, #8]
      break;
 8003706:	e0b4      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b5d      	ldr	r3, [pc, #372]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04d      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b58      	ldr	r3, [pc, #352]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	461a      	mov	r2, r3
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	ea02 0800 	and.w	r8, r2, r0
 8003736:	ea03 0901 	and.w	r9, r3, r1
 800373a:	4640      	mov	r0, r8
 800373c:	4649      	mov	r1, r9
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	014b      	lsls	r3, r1, #5
 8003748:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800374c:	0142      	lsls	r2, r0, #5
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	ebb0 0008 	subs.w	r0, r0, r8
 8003756:	eb61 0109 	sbc.w	r1, r1, r9
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	018b      	lsls	r3, r1, #6
 8003764:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003768:	0182      	lsls	r2, r0, #6
 800376a:	1a12      	subs	r2, r2, r0
 800376c:	eb63 0301 	sbc.w	r3, r3, r1
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	00d9      	lsls	r1, r3, #3
 800377a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800377e:	00d0      	lsls	r0, r2, #3
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	eb12 0208 	adds.w	r2, r2, r8
 8003788:	eb43 0309 	adc.w	r3, r3, r9
 800378c:	f04f 0000 	mov.w	r0, #0
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	0299      	lsls	r1, r3, #10
 8003796:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800379a:	0290      	lsls	r0, r2, #10
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f7fc fd0c 	bl	80001c8 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	e04a      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	099b      	lsrs	r3, r3, #6
 80037c0:	461a      	mov	r2, r3
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	ea02 0400 	and.w	r4, r2, r0
 80037d2:	ea03 0501 	and.w	r5, r3, r1
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	014b      	lsls	r3, r1, #5
 80037e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037e8:	0142      	lsls	r2, r0, #5
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	1b00      	subs	r0, r0, r4
 80037f0:	eb61 0105 	sbc.w	r1, r1, r5
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	018b      	lsls	r3, r1, #6
 80037fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003802:	0182      	lsls	r2, r0, #6
 8003804:	1a12      	subs	r2, r2, r0
 8003806:	eb63 0301 	sbc.w	r3, r3, r1
 800380a:	f04f 0000 	mov.w	r0, #0
 800380e:	f04f 0100 	mov.w	r1, #0
 8003812:	00d9      	lsls	r1, r3, #3
 8003814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003818:	00d0      	lsls	r0, r2, #3
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	1912      	adds	r2, r2, r4
 8003820:	eb45 0303 	adc.w	r3, r5, r3
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	0299      	lsls	r1, r3, #10
 800382e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003832:	0290      	lsls	r0, r2, #10
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	f7fc fcc0 	bl	80001c8 <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4613      	mov	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	60bb      	str	r3, [r7, #8]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800386e:	60bb      	str	r3, [r7, #8]
      break;
 8003870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003872:	68bb      	ldr	r3, [r7, #8]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	00f42400 	.word	0x00f42400

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	08007b9c 	.word	0x08007b9c

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffdc 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08007b9c 	.word	0x08007b9c

080038f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07b      	b.n	80039fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003912:	d009      	beq.n	8003928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
 800391a:	e005      	b.n	8003928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fa24 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0104 	and.w	r1, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0210 	and.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e03f      	b.n	8003a94 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7fd f9f9 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2224      	movs	r2, #36	; 0x24
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f904 	bl	8003c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d17c      	bne.n	8003bb6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Transmit+0x2c>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e075      	b.n	8003bb8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Transmit+0x3e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e06e      	b.n	8003bb8 <HAL_UART_Transmit+0x11c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2221      	movs	r2, #33	; 0x21
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af0:	f7fd fab4 	bl	800105c <HAL_GetTick>
 8003af4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d108      	bne.n	8003b1e <HAL_UART_Transmit+0x82>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	e003      	b.n	8003b26 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b2e:	e02a      	b.n	8003b86 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f840 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e036      	b.n	8003bb8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b5e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	3302      	adds	r3, #2
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e007      	b.n	8003b78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1cf      	bne.n	8003b30 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2140      	movs	r1, #64	; 0x40
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f810 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e02c      	b.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d028      	beq.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be0:	f7fd fa3c 	bl	800105c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d21d      	bcs.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e00f      	b.n	8003c4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d0c3      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c58:	b09f      	sub	sp, #124	; 0x7c
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	68d9      	ldr	r1, [r3, #12]
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	ea40 0301 	orr.w	r3, r0, r1
 8003c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c98:	f021 010c 	bic.w	r1, r1, #12
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb2:	6999      	ldr	r1, [r3, #24]
 8003cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	ea40 0301 	orr.w	r3, r0, r1
 8003cbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4bc5      	ldr	r3, [pc, #788]	; (8003fd8 <UART_SetConfig+0x384>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d004      	beq.n	8003cd2 <UART_SetConfig+0x7e>
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4bc3      	ldr	r3, [pc, #780]	; (8003fdc <UART_SetConfig+0x388>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d103      	bne.n	8003cda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd2:	f7ff fdf9 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8003cd6:	6778      	str	r0, [r7, #116]	; 0x74
 8003cd8:	e002      	b.n	8003ce0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cda:	f7ff fde1 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8003cde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	f040 80b6 	bne.w	8003e58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cee:	461c      	mov	r4, r3
 8003cf0:	f04f 0500 	mov.w	r5, #0
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	6439      	str	r1, [r7, #64]	; 0x40
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003d00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d04:	1912      	adds	r2, r2, r4
 8003d06:	eb45 0303 	adc.w	r3, r5, r3
 8003d0a:	f04f 0000 	mov.w	r0, #0
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	00d9      	lsls	r1, r3, #3
 8003d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d18:	00d0      	lsls	r0, r2, #3
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	1911      	adds	r1, r2, r4
 8003d20:	6639      	str	r1, [r7, #96]	; 0x60
 8003d22:	416b      	adcs	r3, r5
 8003d24:	667b      	str	r3, [r7, #100]	; 0x64
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d34:	415b      	adcs	r3, r3
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d40:	f7fc fa42 	bl	80001c8 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4ba5      	ldr	r3, [pc, #660]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	011e      	lsls	r6, r3, #4
 8003d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d54:	461c      	mov	r4, r3
 8003d56:	f04f 0500 	mov.w	r5, #0
 8003d5a:	4622      	mov	r2, r4
 8003d5c:	462b      	mov	r3, r5
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	6339      	str	r1, [r7, #48]	; 0x30
 8003d62:	415b      	adcs	r3, r3
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d6a:	1912      	adds	r2, r2, r4
 8003d6c:	eb45 0303 	adc.w	r3, r5, r3
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	00d9      	lsls	r1, r3, #3
 8003d7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d7e:	00d0      	lsls	r0, r2, #3
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	1911      	adds	r1, r2, r4
 8003d86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d88:	416b      	adcs	r3, r5
 8003d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	461a      	mov	r2, r3
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003da2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003da6:	f7fc fa0f 	bl	80001c8 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b8c      	ldr	r3, [pc, #560]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003db0:	fba3 1302 	umull	r1, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	2164      	movs	r1, #100	; 0x64
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	3332      	adds	r3, #50	; 0x32
 8003dc2:	4a87      	ldr	r2, [pc, #540]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd0:	441e      	add	r6, r3
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1894      	adds	r4, r2, r2
 8003de0:	623c      	str	r4, [r7, #32]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dea:	1812      	adds	r2, r2, r0
 8003dec:	eb41 0303 	adc.w	r3, r1, r3
 8003df0:	f04f 0400 	mov.w	r4, #0
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	00dd      	lsls	r5, r3, #3
 8003dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dfe:	00d4      	lsls	r4, r2, #3
 8003e00:	4622      	mov	r2, r4
 8003e02:	462b      	mov	r3, r5
 8003e04:	1814      	adds	r4, r2, r0
 8003e06:	653c      	str	r4, [r7, #80]	; 0x50
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	61b9      	str	r1, [r7, #24]
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e26:	f7fc f9cf 	bl	80001c8 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003e30:	fba3 1302 	umull	r1, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	2164      	movs	r1, #100	; 0x64
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	3332      	adds	r3, #50	; 0x32
 8003e42:	4a67      	ldr	r2, [pc, #412]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	f003 0207 	and.w	r2, r3, #7
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4432      	add	r2, r6
 8003e54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e56:	e0b9      	b.n	8003fcc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5a:	461c      	mov	r4, r3
 8003e5c:	f04f 0500 	mov.w	r5, #0
 8003e60:	4622      	mov	r2, r4
 8003e62:	462b      	mov	r3, r5
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	6139      	str	r1, [r7, #16]
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e70:	1912      	adds	r2, r2, r4
 8003e72:	eb45 0303 	adc.w	r3, r5, r3
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	00d9      	lsls	r1, r3, #3
 8003e80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e84:	00d0      	lsls	r0, r2, #3
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	eb12 0804 	adds.w	r8, r2, r4
 8003e8e:	eb43 0905 	adc.w	r9, r3, r5
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eaa:	0082      	lsls	r2, r0, #2
 8003eac:	4640      	mov	r0, r8
 8003eae:	4649      	mov	r1, r9
 8003eb0:	f7fc f98a 	bl	80001c8 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003eba:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	011e      	lsls	r6, r3, #4
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	1894      	adds	r4, r2, r2
 8003ed0:	60bc      	str	r4, [r7, #8]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eda:	1812      	adds	r2, r2, r0
 8003edc:	eb41 0303 	adc.w	r3, r1, r3
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	f04f 0500 	mov.w	r5, #0
 8003ee8:	00dd      	lsls	r5, r3, #3
 8003eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eee:	00d4      	lsls	r4, r2, #3
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	1814      	adds	r4, r2, r0
 8003ef6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ef8:	414b      	adcs	r3, r1
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f04f 0100 	mov.w	r1, #0
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f14:	0082      	lsls	r2, r0, #2
 8003f16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f1a:	f7fc f955 	bl	80001c8 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b2f      	ldr	r3, [pc, #188]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f42:	441e      	add	r6, r3
 8003f44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f46:	4618      	mov	r0, r3
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	1894      	adds	r4, r2, r2
 8003f52:	603c      	str	r4, [r7, #0]
 8003f54:	415b      	adcs	r3, r3
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f5c:	1812      	adds	r2, r2, r0
 8003f5e:	eb41 0303 	adc.w	r3, r1, r3
 8003f62:	f04f 0400 	mov.w	r4, #0
 8003f66:	f04f 0500 	mov.w	r5, #0
 8003f6a:	00dd      	lsls	r5, r3, #3
 8003f6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f70:	00d4      	lsls	r4, r2, #3
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	eb12 0a00 	adds.w	sl, r2, r0
 8003f7a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	008b      	lsls	r3, r1, #2
 8003f92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f96:	0082      	lsls	r2, r0, #2
 8003f98:	4650      	mov	r0, sl
 8003f9a:	4659      	mov	r1, fp
 8003f9c:	f7fc f914 	bl	80001c8 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <UART_SetConfig+0x38c>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4432      	add	r2, r6
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	377c      	adds	r7, #124	; 0x7c
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40011400 	.word	0x40011400
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	f107 001c 	add.w	r0, r7, #28
 8003ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d122      	bne.n	8004042 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fac6 	bl	80055c8 <USB_CoreReset>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e01a      	b.n	8004078 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f001 faba 	bl	80055c8 <USB_CoreReset>
 8004054:	4603      	mov	r3, r0
 8004056:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
 800406a:	e005      	b.n	8004078 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	2b01      	cmp	r3, #1
 800407c:	d10b      	bne.n	8004096 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f043 0206 	orr.w	r2, r3, #6
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a2:	b004      	add	sp, #16
 80040a4:	4770      	bx	lr
	...

080040a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	4613      	mov	r3, r2
 80040b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d165      	bne.n	8004188 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <USB_SetTurnaroundTime+0x11c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d906      	bls.n	80040d2 <USB_SetTurnaroundTime+0x2a>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a40      	ldr	r2, [pc, #256]	; (80041c8 <USB_SetTurnaroundTime+0x120>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d202      	bcs.n	80040d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040cc:	230f      	movs	r3, #15
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e062      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4a3c      	ldr	r2, [pc, #240]	; (80041c8 <USB_SetTurnaroundTime+0x120>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d306      	bcc.n	80040e8 <USB_SetTurnaroundTime+0x40>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a3b      	ldr	r2, [pc, #236]	; (80041cc <USB_SetTurnaroundTime+0x124>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d202      	bcs.n	80040e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040e2:	230e      	movs	r3, #14
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e057      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4a38      	ldr	r2, [pc, #224]	; (80041cc <USB_SetTurnaroundTime+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d306      	bcc.n	80040fe <USB_SetTurnaroundTime+0x56>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a37      	ldr	r2, [pc, #220]	; (80041d0 <USB_SetTurnaroundTime+0x128>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d202      	bcs.n	80040fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040f8:	230d      	movs	r3, #13
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e04c      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4a33      	ldr	r2, [pc, #204]	; (80041d0 <USB_SetTurnaroundTime+0x128>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d306      	bcc.n	8004114 <USB_SetTurnaroundTime+0x6c>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <USB_SetTurnaroundTime+0x12c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d802      	bhi.n	8004114 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800410e:	230c      	movs	r3, #12
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e041      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4a2f      	ldr	r2, [pc, #188]	; (80041d4 <USB_SetTurnaroundTime+0x12c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d906      	bls.n	800412a <USB_SetTurnaroundTime+0x82>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <USB_SetTurnaroundTime+0x130>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d802      	bhi.n	800412a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004124:	230b      	movs	r3, #11
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e036      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <USB_SetTurnaroundTime+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d906      	bls.n	8004140 <USB_SetTurnaroundTime+0x98>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <USB_SetTurnaroundTime+0x134>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d802      	bhi.n	8004140 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800413a:	230a      	movs	r3, #10
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e02b      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4a26      	ldr	r2, [pc, #152]	; (80041dc <USB_SetTurnaroundTime+0x134>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d906      	bls.n	8004156 <USB_SetTurnaroundTime+0xae>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a25      	ldr	r2, [pc, #148]	; (80041e0 <USB_SetTurnaroundTime+0x138>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d202      	bcs.n	8004156 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004150:	2309      	movs	r3, #9
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e020      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <USB_SetTurnaroundTime+0x138>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d306      	bcc.n	800416c <USB_SetTurnaroundTime+0xc4>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <USB_SetTurnaroundTime+0x13c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d802      	bhi.n	800416c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004166:	2308      	movs	r3, #8
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e015      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <USB_SetTurnaroundTime+0x13c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d906      	bls.n	8004182 <USB_SetTurnaroundTime+0xda>
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <USB_SetTurnaroundTime+0x140>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d202      	bcs.n	8004182 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800417c:	2307      	movs	r3, #7
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e00a      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004182:	2306      	movs	r3, #6
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e007      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800418e:	2309      	movs	r3, #9
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e001      	b.n	8004198 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004194:	2309      	movs	r3, #9
 8004196:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	029b      	lsls	r3, r3, #10
 80041ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	00d8acbf 	.word	0x00d8acbf
 80041c8:	00e4e1c0 	.word	0x00e4e1c0
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	01067380 	.word	0x01067380
 80041d4:	011a499f 	.word	0x011a499f
 80041d8:	01312cff 	.word	0x01312cff
 80041dc:	014ca43f 	.word	0x014ca43f
 80041e0:	016e3600 	.word	0x016e3600
 80041e4:	01a6ab1f 	.word	0x01a6ab1f
 80041e8:	01e84800 	.word	0x01e84800

080041ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e00b      	b.n	8004274 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	e001      	b.n	8004274 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e003      	b.n	800427c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004274:	2032      	movs	r0, #50	; 0x32
 8004276:	f7fc fefd 	bl	8001074 <HAL_Delay>

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004284:	b084      	sub	sp, #16
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e009      	b.n	80042b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3340      	adds	r3, #64	; 0x40
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	3301      	adds	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b0e      	cmp	r3, #14
 80042bc:	d9f2      	bls.n	80042a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d11c      	bne.n	80042fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
 80042fc:	e00b      	b.n	8004316 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800431c:	461a      	mov	r2, r3
 800431e:	2300      	movs	r3, #0
 8004320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	4619      	mov	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004330:	461a      	mov	r2, r3
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10c      	bne.n	8004356 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f949 	bl	80045dc <USB_SetDevSpeed>
 800434a:	e008      	b.n	800435e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800434c:	2101      	movs	r1, #1
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f944 	bl	80045dc <USB_SetDevSpeed>
 8004354:	e003      	b.n	800435e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004356:	2103      	movs	r1, #3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f93f 	bl	80045dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800435e:	2110      	movs	r1, #16
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f8f3 	bl	800454c <USB_FlushTxFifo>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f911 	bl	8004598 <USB_FlushRxFifo>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	461a      	mov	r2, r3
 8004388:	2300      	movs	r3, #0
 800438a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	461a      	mov	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	461a      	mov	r2, r3
 80043a0:	2300      	movs	r3, #0
 80043a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	e043      	b.n	8004432 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043c0:	d118      	bne.n	80043f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e013      	b.n	8004406 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	461a      	mov	r2, r3
 80043ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e008      	b.n	8004406 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	461a      	mov	r2, r3
 8004402:	2300      	movs	r3, #0
 8004404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	461a      	mov	r2, r3
 8004426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800442a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d3b7      	bcc.n	80043aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e043      	b.n	80044c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004456:	d118      	bne.n	800448a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e013      	b.n	800449c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e008      	b.n	800449c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d3b7      	bcc.n	8004440 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <USB_DevInit+0x2c4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f043 0208 	orr.w	r2, r3, #8
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004524:	2b01      	cmp	r3, #1
 8004526:	d107      	bne.n	8004538 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004544:	b004      	add	sp, #16
 8004546:	4770      	bx	lr
 8004548:	803c3800 	.word	0x803c3800

0800454c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <USB_FlushTxFifo+0x48>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e006      	b.n	8004586 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0320 	and.w	r3, r3, #32
 8004580:	2b20      	cmp	r3, #32
 8004582:	d0f0      	beq.n	8004566 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	00030d40 	.word	0x00030d40

08004598 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2210      	movs	r2, #16
 80045a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <USB_FlushRxFifo+0x40>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d0f0      	beq.n	80045aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	00030d40 	.word	0x00030d40

080045dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800460e:	b480      	push	{r7}
 8004610:	b087      	sub	sp, #28
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
 8004632:	e00a      	b.n	800464a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d002      	beq.n	8004640 <USB_GetDevSpeed+0x32>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d102      	bne.n	8004646 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004640:	2302      	movs	r3, #2
 8004642:	75fb      	strb	r3, [r7, #23]
 8004644:	e001      	b.n	800464a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004646:	230f      	movs	r3, #15
 8004648:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d13a      	bne.n	80046ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	68f9      	ldr	r1, [r7, #12]
 800468e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004692:	4313      	orrs	r3, r2
 8004694:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d155      	bne.n	8004758 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	059b      	lsls	r3, r3, #22
 80046ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80046d0:	4313      	orrs	r3, r2
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	e036      	b.n	8004758 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	2101      	movs	r1, #1
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11a      	bne.n	8004758 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	78db      	ldrb	r3, [r3, #3]
 800473c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800473e:	430b      	orrs	r3, r1
 8004740:	4313      	orrs	r3, r2
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004756:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d161      	bne.n	8004848 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800479a:	d11f      	bne.n	80047dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fc:	4013      	ands	r3, r2
 80047fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	43db      	mvns	r3, r3
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004820:	4013      	ands	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	440b      	add	r3, r1
 800483a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483e:	4619      	mov	r1, r3
 8004840:	4b35      	ldr	r3, [pc, #212]	; (8004918 <USB_DeactivateEndpoint+0x1b0>)
 8004842:	4013      	ands	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
 8004846:	e060      	b.n	800490a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485e:	d11f      	bne.n	80048a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800487e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	43db      	mvns	r3, r3
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c0:	4013      	ands	r3, r2
 80048c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	43db      	mvns	r3, r3
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e4:	4013      	ands	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	0159      	lsls	r1, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004902:	4619      	mov	r1, r3
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <USB_DeactivateEndpoint+0x1b4>)
 8004906:	4013      	ands	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	ec337800 	.word	0xec337800
 800491c:	eff37800 	.word	0xeff37800

08004920 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 815c 	bne.w	8004bfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d132      	bne.n	80049b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800496c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	0151      	lsls	r1, r2, #5
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	440a      	add	r2, r1
 8004984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800498c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a8:	0cdb      	lsrs	r3, r3, #19
 80049aa:	04db      	lsls	r3, r3, #19
 80049ac:	6113      	str	r3, [r2, #16]
 80049ae:	e074      	b.n	8004a9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ca:	0cdb      	lsrs	r3, r3, #19
 80049cc:	04db      	lsls	r3, r3, #19
 80049ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	440b      	add	r3, r1
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a16:	04d9      	lsls	r1, r3, #19
 8004a18:	4b9d      	ldr	r3, [pc, #628]	; (8004c90 <USB_EPStartXfer+0x370>)
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	69b9      	ldr	r1, [r7, #24]
 8004a1e:	0148      	lsls	r0, r1, #5
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	4401      	add	r1, r0
 8004a24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a42:	69b9      	ldr	r1, [r7, #24]
 8004a44:	0148      	lsls	r0, r1, #5
 8004a46:	69f9      	ldr	r1, [r7, #28]
 8004a48:	4401      	add	r1, r0
 8004a4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	78db      	ldrb	r3, [r3, #3]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d11f      	bne.n	8004a9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	0151      	lsls	r1, r2, #5
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	440a      	add	r2, r1
 8004a70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d14b      	bne.n	8004b38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	78db      	ldrb	r3, [r3, #3]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d128      	bne.n	8004b16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d110      	bne.n	8004af6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e00f      	b.n	8004b16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e12f      	b.n	8004d98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	78db      	ldrb	r3, [r3, #3]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d015      	beq.n	8004b8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8117 	beq.w	8004d98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b80:	69f9      	ldr	r1, [r7, #28]
 8004b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b86:	4313      	orrs	r3, r2
 8004b88:	634b      	str	r3, [r1, #52]	; 0x34
 8004b8a:	e105      	b.n	8004d98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d110      	bne.n	8004bbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e00f      	b.n	8004bde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	69fa      	ldr	r2, [r7, #28]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	b298      	uxth	r0, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fa2b 	bl	800504e <USB_WritePacket>
 8004bf8:	e0ce      	b.n	8004d98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c14:	0cdb      	lsrs	r3, r3, #19
 8004c16:	04db      	lsls	r3, r3, #19
 8004c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	0151      	lsls	r1, r2, #5
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	440a      	add	r2, r1
 8004c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d126      	bne.n	8004c94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	0148      	lsls	r0, r1, #5
 8004c60:	69f9      	ldr	r1, [r7, #28]
 8004c62:	4401      	add	r1, r0
 8004c64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	69fa      	ldr	r2, [r7, #28]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c8a:	6113      	str	r3, [r2, #16]
 8004c8c:	e036      	b.n	8004cfc <USB_EPStartXfer+0x3dc>
 8004c8e:	bf00      	nop
 8004c90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	695a      	ldr	r2, [r3, #20]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	1e5a      	subs	r2, r3, #1
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	8afb      	ldrh	r3, [r7, #22]
 8004cba:	04d9      	lsls	r1, r3, #19
 8004cbc:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <USB_EPStartXfer+0x484>)
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	69b9      	ldr	r1, [r7, #24]
 8004cc2:	0148      	lsls	r0, r1, #5
 8004cc4:	69f9      	ldr	r1, [r7, #28]
 8004cc6:	4401      	add	r1, r0
 8004cc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	8af9      	ldrh	r1, [r7, #22]
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	0148      	lsls	r0, r1, #5
 8004cf0:	69f9      	ldr	r1, [r7, #28]
 8004cf2:	4401      	add	r1, r0
 8004cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10d      	bne.n	8004d1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68d9      	ldr	r1, [r3, #12]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	78db      	ldrb	r3, [r3, #3]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d128      	bne.n	8004d78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d110      	bne.n	8004d58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00f      	b.n	8004d78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	1ff80000 	.word	0x1ff80000

08004da8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	f040 80cd 	bne.w	8004f64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d132      	bne.n	8004e38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	0151      	lsls	r1, r2, #5
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	440a      	add	r2, r1
 8004e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e30:	0cdb      	lsrs	r3, r3, #19
 8004e32:	04db      	lsls	r3, r3, #19
 8004e34:	6113      	str	r3, [r2, #16]
 8004e36:	e04e      	b.n	8004ed6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	0cdb      	lsrs	r3, r3, #19
 8004e54:	04db      	lsls	r3, r3, #19
 8004e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d903      	bls.n	8004e90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec6:	6939      	ldr	r1, [r7, #16]
 8004ec8:	0148      	lsls	r0, r1, #5
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	4401      	add	r1, r0
 8004ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d11e      	bne.n	8004f1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	e092      	b.n	8005040 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d07e      	beq.n	8005040 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	2101      	movs	r1, #1
 8004f54:	fa01 f303 	lsl.w	r3, r1, r3
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	634b      	str	r3, [r1, #52]	; 0x34
 8004f62:	e06d      	b.n	8005040 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7e:	0cdb      	lsrs	r3, r3, #19
 8004f80:	04db      	lsls	r3, r3, #19
 8004f82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	0151      	lsls	r1, r2, #5
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	440a      	add	r2, r1
 8004f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fa6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	0148      	lsls	r0, r1, #5
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	4401      	add	r1, r0
 8004ff6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d10d      	bne.n	8005020 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	68d9      	ldr	r1, [r3, #12]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	460a      	mov	r2, r1
 800501e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800503e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800504e:	b480      	push	{r7}
 8005050:	b089      	sub	sp, #36	; 0x24
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	4611      	mov	r1, r2
 800505a:	461a      	mov	r2, r3
 800505c:	460b      	mov	r3, r1
 800505e:	71fb      	strb	r3, [r7, #7]
 8005060:	4613      	mov	r3, r2
 8005062:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800506c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11a      	bne.n	80050aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005074:	88bb      	ldrh	r3, [r7, #4]
 8005076:	3303      	adds	r3, #3
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800507c:	2300      	movs	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e00f      	b.n	80050a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	031a      	lsls	r2, r3, #12
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508e:	461a      	mov	r2, r3
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3304      	adds	r3, #4
 800509a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	3301      	adds	r3, #1
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3eb      	bcc.n	8005082 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3724      	adds	r7, #36	; 0x24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	3303      	adds	r3, #3
 80050d2:	089b      	lsrs	r3, r3, #2
 80050d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e00b      	b.n	80050f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3304      	adds	r3, #4
 80050ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	3301      	adds	r3, #1
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3ef      	bcc.n	80050dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80050fc:	69fb      	ldr	r3, [r7, #28]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3724      	adds	r7, #36	; 0x24
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d12c      	bne.n	8005180 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	db12      	blt.n	800515e <USB_EPSetStall+0x54>
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00f      	beq.n	800515e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	0151      	lsls	r1, r2, #5
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	440a      	add	r2, r1
 8005154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800515c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e02b      	b.n	80051d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	db12      	blt.n	80051b8 <USB_EPSetStall+0xae>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b085      	sub	sp, #20
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d128      	bne.n	8005254 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005220:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d003      	beq.n	8005232 <USB_EPClearStall+0x4c>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d138      	bne.n	80052a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e027      	b.n	80052a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005272:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	78db      	ldrb	r3, [r3, #3]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d003      	beq.n	8005284 <USB_EPClearStall+0x9e>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	78db      	ldrb	r3, [r3, #3]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d10f      	bne.n	80052a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005318:	f023 0303 	bic.w	r3, r3, #3
 800531c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f023 0302 	bic.w	r3, r3, #2
 8005330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536e:	f043 0302 	orr.w	r3, r3, #2
 8005372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4013      	ands	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800539a:	68fb      	ldr	r3, [r7, #12]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4013      	ands	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	0c1b      	lsrs	r3, r3, #16
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	b29b      	uxth	r3, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800543e:	68bb      	ldr	r3, [r7, #8]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	01db      	lsls	r3, r3, #7
 800547e:	b2db      	uxtb	r3, r3
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800549a:	68bb      	ldr	r3, [r7, #8]
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f003 0301 	and.w	r3, r3, #1
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	333c      	adds	r3, #60	; 0x3c
 8005522:	3304      	adds	r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <USB_EP0_OutStart+0xb8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d90a      	bls.n	8005546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800553c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005540:	d101      	bne.n	8005546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e037      	b.n	80055b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	461a      	mov	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005574:	f043 0318 	orr.w	r3, r3, #24
 8005578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800558c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d10f      	bne.n	80055b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	4f54300a 	.word	0x4f54300a

080055c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <USB_CoreReset+0x64>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e01b      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	daf2      	bge.n	80055d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f043 0201 	orr.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3301      	adds	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <USB_CoreReset+0x64>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d0f0      	beq.n	80055fe <USB_CoreReset+0x36>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	00030d40 	.word	0x00030d40

08005630 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800563c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005640:	f002 f95c 	bl	80078fc <USBD_static_malloc>
 8005644:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005654:	2302      	movs	r3, #2
 8005656:	e066      	b.n	8005726 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7c1b      	ldrb	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d119      	bne.n	800569c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566c:	2202      	movs	r2, #2
 800566e:	2181      	movs	r1, #129	; 0x81
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 f820 	bl	80076b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800567c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005680:	2202      	movs	r2, #2
 8005682:	2101      	movs	r1, #1
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f002 f816 	bl	80076b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2210      	movs	r2, #16
 8005696:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800569a:	e016      	b.n	80056ca <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	2202      	movs	r2, #2
 80056a0:	2181      	movs	r1, #129	; 0x81
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f002 f807 	bl	80076b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056ae:	2340      	movs	r3, #64	; 0x40
 80056b0:	2202      	movs	r2, #2
 80056b2:	2101      	movs	r1, #1
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fffe 	bl	80076b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2210      	movs	r2, #16
 80056c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056ca:	2308      	movs	r3, #8
 80056cc:	2203      	movs	r2, #3
 80056ce:	2182      	movs	r1, #130	; 0x82
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 fff0 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	7c1b      	ldrb	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800570a:	2101      	movs	r1, #1
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f002 f8c1 	bl	8007894 <USBD_LL_PrepareReceive>
 8005712:	e007      	b.n	8005724 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800571a:	2340      	movs	r3, #64	; 0x40
 800571c:	2101      	movs	r1, #1
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f002 f8b8 	bl	8007894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800573a:	2181      	movs	r1, #129	; 0x81
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 ffe0 	bl	8007702 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005748:	2101      	movs	r1, #1
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 ffd9 	bl	8007702 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005758:	2182      	movs	r1, #130	; 0x82
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 ffd1 	bl	8007702 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00e      	beq.n	8005798 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800578a:	4618      	mov	r0, r3
 800578c:	f002 f8c4 	bl	8007918 <USBD_static_free>
    pdev->pClassData = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0af      	b.n	800592c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d03f      	beq.n	8005858 <USBD_CDC_Setup+0xb4>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	f040 809f 	bne.w	800591c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d02e      	beq.n	8005844 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b25b      	sxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	da16      	bge.n	800581e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80057fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	88d2      	ldrh	r2, [r2, #6]
 8005802:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	2b07      	cmp	r3, #7
 800580a:	bf28      	it	cs
 800580c:	2307      	movcs	r3, #7
 800580e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	89fa      	ldrh	r2, [r7, #14]
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 fb19 	bl	8006e4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800581c:	e085      	b.n	800592a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785a      	ldrb	r2, [r3, #1]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	88db      	ldrh	r3, [r3, #6]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005834:	6939      	ldr	r1, [r7, #16]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	461a      	mov	r2, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 fb32 	bl	8006ea6 <USBD_CtlPrepareRx>
      break;
 8005842:	e072      	b.n	800592a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	7850      	ldrb	r0, [r2, #1]
 8005850:	2200      	movs	r2, #0
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	4798      	blx	r3
      break;
 8005856:	e068      	b.n	800592a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	785b      	ldrb	r3, [r3, #1]
 800585c:	2b0b      	cmp	r3, #11
 800585e:	d852      	bhi.n	8005906 <USBD_CDC_Setup+0x162>
 8005860:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <USBD_CDC_Setup+0xc4>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	08005899 	.word	0x08005899
 800586c:	08005915 	.word	0x08005915
 8005870:	08005907 	.word	0x08005907
 8005874:	08005907 	.word	0x08005907
 8005878:	08005907 	.word	0x08005907
 800587c:	08005907 	.word	0x08005907
 8005880:	08005907 	.word	0x08005907
 8005884:	08005907 	.word	0x08005907
 8005888:	08005907 	.word	0x08005907
 800588c:	08005907 	.word	0x08005907
 8005890:	080058c3 	.word	0x080058c3
 8005894:	080058ed 	.word	0x080058ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d107      	bne.n	80058b4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80058a4:	f107 030a 	add.w	r3, r7, #10
 80058a8:	2202      	movs	r2, #2
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f001 face 	bl	8006e4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058b2:	e032      	b.n	800591a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fa58 	bl	8006d6c <USBD_CtlError>
            ret = USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	75fb      	strb	r3, [r7, #23]
          break;
 80058c0:	e02b      	b.n	800591a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d107      	bne.n	80058de <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80058ce:	f107 030d 	add.w	r3, r7, #13
 80058d2:	2201      	movs	r2, #1
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fab9 	bl	8006e4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058dc:	e01d      	b.n	800591a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fa43 	bl	8006d6c <USBD_CtlError>
            ret = USBD_FAIL;
 80058e6:	2303      	movs	r3, #3
 80058e8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ea:	e016      	b.n	800591a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d00f      	beq.n	8005918 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fa36 	bl	8006d6c <USBD_CtlError>
            ret = USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005904:	e008      	b.n	8005918 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fa2f 	bl	8006d6c <USBD_CtlError>
          ret = USBD_FAIL;
 800590e:	2303      	movs	r3, #3
 8005910:	75fb      	strb	r3, [r7, #23]
          break;
 8005912:	e002      	b.n	800591a <USBD_CDC_Setup+0x176>
          break;
 8005914:	bf00      	nop
 8005916:	e008      	b.n	800592a <USBD_CDC_Setup+0x186>
          break;
 8005918:	bf00      	nop
      }
      break;
 800591a:	e006      	b.n	800592a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fa24 	bl	8006d6c <USBD_CtlError>
      ret = USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	75fb      	strb	r3, [r7, #23]
      break;
 8005928:	bf00      	nop
  }

  return (uint8_t)ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005946:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005952:	2303      	movs	r3, #3
 8005954:	e04f      	b.n	80059f6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800595c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3318      	adds	r3, #24
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d029      	beq.n	80059c8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	3318      	adds	r3, #24
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	78f9      	ldrb	r1, [r7, #3]
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	460b      	mov	r3, r1
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a5b      	subs	r3, r3, r1
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4403      	add	r3, r0
 8005994:	3344      	adds	r3, #68	; 0x44
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	fbb2 f1f3 	udiv	r1, r2, r3
 800599c:	fb03 f301 	mul.w	r3, r3, r1
 80059a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d110      	bne.n	80059c8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3318      	adds	r3, #24
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059ba:	78f9      	ldrb	r1, [r7, #3]
 80059bc:	2300      	movs	r3, #0
 80059be:	2200      	movs	r2, #0
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 ff46 	bl	8007852 <USBD_LL_Transmit>
 80059c6:	e015      	b.n	80059f4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e015      	b.n	8005a4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 ff56 	bl	80078d6 <USBD_LL_GetRxDataSize>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a46:	4611      	mov	r1, r2
 8005a48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e01b      	b.n	8005aa6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <USBD_CDC_EP0_RxReady+0x50>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a7e:	2bff      	cmp	r3, #255	; 0xff
 8005a80:	d010      	beq.n	8005aa4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	22ff      	movs	r2, #255	; 0xff
 8005aa0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2243      	movs	r2, #67	; 0x43
 8005abc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005abe:	4b03      	ldr	r3, [pc, #12]	; (8005acc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	2000009c 	.word	0x2000009c

08005ad0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2243      	movs	r2, #67	; 0x43
 8005adc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ade:	4b03      	ldr	r3, [pc, #12]	; (8005aec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000058 	.word	0x20000058

08005af0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2243      	movs	r2, #67	; 0x43
 8005afc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005afe:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	200000e0 	.word	0x200000e0

08005b10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b1e:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000014 	.word	0x20000014

08005b30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e004      	b.n	8005b4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e008      	b.n	8005b8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e004      	b.n	8005bbc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e01a      	b.n	8005c20 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d114      	bne.n	8005c1e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c12:	2181      	movs	r1, #129	; 0x81
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 fe1c 	bl	8007852 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e016      	b.n	8005c74 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c58:	2101      	movs	r1, #1
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fe1a 	bl	8007894 <USBD_LL_PrepareReceive>
 8005c60:	e007      	b.n	8005c72 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 fe11 	bl	8007894 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e01f      	b.n	8005cd4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	79fa      	ldrb	r2, [r7, #7]
 8005cc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f001 fc8d 	bl	80075e8 <USBD_LL_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e016      	b.n	8005d22 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	f107 020e 	add.w	r2, r7, #14
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	4602      	mov	r2, r0
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f001 fca4 	bl	8007680 <USBD_LL_Start>
 8005d38:	4603      	mov	r3, r0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	4611      	mov	r1, r2
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
  }

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 ff90 	bl	8006cf8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d01a      	beq.n	8005e32 <USBD_LL_SetupStage+0x72>
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d822      	bhi.n	8005e46 <USBD_LL_SetupStage+0x86>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <USBD_LL_SetupStage+0x4a>
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d00a      	beq.n	8005e1e <USBD_LL_SetupStage+0x5e>
 8005e08:	e01d      	b.n	8005e46 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa62 	bl	80062dc <USBD_StdDevReq>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e020      	b.n	8005e60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e24:	4619      	mov	r1, r3
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fac6 	bl	80063b8 <USBD_StdItfReq>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e30:	e016      	b.n	8005e60 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb05 	bl	800644a <USBD_StdEPReq>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
      break;
 8005e44:	e00c      	b.n	8005e60 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f001 fc73 	bl	8007740 <USBD_LL_StallEP>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5e:	bf00      	nop
  }

  return ret;
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	460b      	mov	r3, r1
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d138      	bne.n	8005ef0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d14a      	bne.n	8005f26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d913      	bls.n	8005ec4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	1ad2      	subs	r2, r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	bf28      	it	cs
 8005eb6:	4613      	movcs	r3, r2
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f001 f80f 	bl	8006ee0 <USBD_CtlContinueRx>
 8005ec2:	e030      	b.n	8005f26 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d10b      	bne.n	8005ee8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f001 f80a 	bl	8006f02 <USBD_CtlSendStatus>
 8005eee:	e01a      	b.n	8005f26 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d114      	bne.n	8005f26 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	7afa      	ldrb	r2, [r7, #11]
 8005f12:	4611      	mov	r1, r2
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	4798      	blx	r3
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	e000      	b.n	8005f28 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f3e:	7afb      	ldrb	r3, [r7, #11]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d16b      	bne.n	800601c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3314      	adds	r3, #20
 8005f48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d156      	bne.n	8006002 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d914      	bls.n	8005f8a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	461a      	mov	r2, r3
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 ff84 	bl	8006e84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f001 fc86 	bl	8007894 <USBD_LL_PrepareReceive>
 8005f88:	e03b      	b.n	8006002 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d11c      	bne.n	8005fd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d316      	bcc.n	8005fd0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d20f      	bcs.n	8005fd0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 ff65 	bl	8006e84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f001 fc63 	bl	8007894 <USBD_LL_PrepareReceive>
 8005fce:	e018      	b.n	8006002 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d10b      	bne.n	8005ff4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ff4:	2180      	movs	r1, #128	; 0x80
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 fba2 	bl	8007740 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 ff93 	bl	8006f28 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d122      	bne.n	8006052 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7ff fe98 	bl	8005d42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800601a:	e01a      	b.n	8006052 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d114      	bne.n	8006052 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	7afa      	ldrb	r2, [r7, #11]
 800603e:	4611      	mov	r1, r2
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	4798      	blx	r3
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	e000      	b.n	8006054 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e02f      	b.n	80060f0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00f      	beq.n	80060ba <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6852      	ldr	r2, [r2, #4]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	4611      	mov	r1, r2
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	2200      	movs	r2, #0
 80060be:	2100      	movs	r1, #0
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 faf8 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2240      	movs	r2, #64	; 0x40
 80060d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060d6:	2340      	movs	r3, #64	; 0x40
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 faea 	bl	80076b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2240      	movs	r2, #64	; 0x40
 80060ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006126:	b2da      	uxtb	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b04      	cmp	r3, #4
 8006156:	d106      	bne.n	8006166 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800615e:	b2da      	uxtb	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006186:	2303      	movs	r3, #3
 8006188:	e012      	b.n	80061b0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b03      	cmp	r3, #3
 8006194:	d10b      	bne.n	80061ae <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e014      	b.n	80061fc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d10d      	bne.n	80061fa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4611      	mov	r1, r2
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	e014      	b.n	8006248 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d10d      	bne.n	8006246 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	4611      	mov	r1, r2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6852      	ldr	r2, [r2, #4]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	4611      	mov	r1, r2
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
  }

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800629e:	b480      	push	{r7}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	3301      	adds	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062bc:	8a3b      	ldrh	r3, [r7, #16]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	b21a      	sxth	r2, r3
 80062c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b21b      	sxth	r3, r3
 80062ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062cc:	89fb      	ldrh	r3, [r7, #14]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062f2:	2b40      	cmp	r3, #64	; 0x40
 80062f4:	d005      	beq.n	8006302 <USBD_StdDevReq+0x26>
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d853      	bhi.n	80063a2 <USBD_StdDevReq+0xc6>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <USBD_StdDevReq+0x3a>
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d14f      	bne.n	80063a2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e04a      	b.n	80063ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b09      	cmp	r3, #9
 800631c:	d83b      	bhi.n	8006396 <USBD_StdDevReq+0xba>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <USBD_StdDevReq+0x48>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006379 	.word	0x08006379
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006397 	.word	0x08006397
 8006330:	08006383 	.word	0x08006383
 8006334:	08006397 	.word	0x08006397
 8006338:	08006357 	.word	0x08006357
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006397 	.word	0x08006397
 8006344:	0800636f 	.word	0x0800636f
 8006348:	08006361 	.word	0x08006361
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f9de 	bl	8006710 <USBD_GetDescriptor>
          break;
 8006354:	e024      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb43 	bl	80069e4 <USBD_SetAddress>
          break;
 800635e:	e01f      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fb82 	bl	8006a6c <USBD_SetConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
          break;
 800636c:	e018      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fc21 	bl	8006bb8 <USBD_GetConfig>
          break;
 8006376:	e013      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fc52 	bl	8006c24 <USBD_GetStatus>
          break;
 8006380:	e00e      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fc81 	bl	8006c8c <USBD_SetFeature>
          break;
 800638a:	e009      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc90 	bl	8006cb4 <USBD_ClrFeature>
          break;
 8006394:	e004      	b.n	80063a0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fce7 	bl	8006d6c <USBD_CtlError>
          break;
 800639e:	bf00      	nop
      }
      break;
 80063a0:	e004      	b.n	80063ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fce1 	bl	8006d6c <USBD_CtlError>
      break;
 80063aa:	bf00      	nop
  }

  return ret;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop

080063b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ce:	2b40      	cmp	r3, #64	; 0x40
 80063d0:	d005      	beq.n	80063de <USBD_StdItfReq+0x26>
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d82f      	bhi.n	8006436 <USBD_StdItfReq+0x7e>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <USBD_StdItfReq+0x26>
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d12b      	bne.n	8006436 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d81d      	bhi.n	8006428 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	889b      	ldrh	r3, [r3, #4]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d813      	bhi.n	800641e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
 8006404:	4603      	mov	r3, r0
 8006406:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	88db      	ldrh	r3, [r3, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d110      	bne.n	8006432 <USBD_StdItfReq+0x7a>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fd73 	bl	8006f02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800641c:	e009      	b.n	8006432 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fca3 	bl	8006d6c <USBD_CtlError>
          break;
 8006426:	e004      	b.n	8006432 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006428:	6839      	ldr	r1, [r7, #0]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fc9e 	bl	8006d6c <USBD_CtlError>
          break;
 8006430:	e000      	b.n	8006434 <USBD_StdItfReq+0x7c>
          break;
 8006432:	bf00      	nop
      }
      break;
 8006434:	e004      	b.n	8006440 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fc97 	bl	8006d6c <USBD_CtlError>
      break;
 800643e:	bf00      	nop
  }

  return ret;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	889b      	ldrh	r3, [r3, #4]
 800645c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d007      	beq.n	800647a <USBD_StdEPReq+0x30>
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	f200 8145 	bhi.w	80066fa <USBD_StdEPReq+0x2b0>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <USBD_StdEPReq+0x44>
 8006474:	2b20      	cmp	r3, #32
 8006476:	f040 8140 	bne.w	80066fa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]
      break;
 800648c:	e13a      	b.n	8006704 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d007      	beq.n	80064a6 <USBD_StdEPReq+0x5c>
 8006496:	2b03      	cmp	r3, #3
 8006498:	f300 8129 	bgt.w	80066ee <USBD_StdEPReq+0x2a4>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d07f      	beq.n	80065a0 <USBD_StdEPReq+0x156>
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d03c      	beq.n	800651e <USBD_StdEPReq+0xd4>
 80064a4:	e123      	b.n	80066ee <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d002      	beq.n	80064b8 <USBD_StdEPReq+0x6e>
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d016      	beq.n	80064e4 <USBD_StdEPReq+0x9a>
 80064b6:	e02c      	b.n	8006512 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <USBD_StdEPReq+0x90>
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	2b80      	cmp	r3, #128	; 0x80
 80064c2:	d00a      	beq.n	80064da <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 f939 	bl	8007740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 f935 	bl	8007740 <USBD_LL_StallEP>
 80064d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064d8:	e020      	b.n	800651c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fc45 	bl	8006d6c <USBD_CtlError>
              break;
 80064e2:	e01b      	b.n	800651c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	885b      	ldrh	r3, [r3, #2]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10e      	bne.n	800650a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <USBD_StdEPReq+0xc0>
 80064f2:	7bbb      	ldrb	r3, [r7, #14]
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d008      	beq.n	800650a <USBD_StdEPReq+0xc0>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	88db      	ldrh	r3, [r3, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f91b 	bl	8007740 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fcf9 	bl	8006f02 <USBD_CtlSendStatus>

              break;
 8006510:	e004      	b.n	800651c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc29 	bl	8006d6c <USBD_CtlError>
              break;
 800651a:	bf00      	nop
          }
          break;
 800651c:	e0ec      	b.n	80066f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d002      	beq.n	8006530 <USBD_StdEPReq+0xe6>
 800652a:	2b03      	cmp	r3, #3
 800652c:	d016      	beq.n	800655c <USBD_StdEPReq+0x112>
 800652e:	e030      	b.n	8006592 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <USBD_StdEPReq+0x108>
 8006536:	7bbb      	ldrb	r3, [r7, #14]
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d00a      	beq.n	8006552 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f8fd 	bl	8007740 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006546:	2180      	movs	r1, #128	; 0x80
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 f8f9 	bl	8007740 <USBD_LL_StallEP>
 800654e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006550:	e025      	b.n	800659e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fc09 	bl	8006d6c <USBD_CtlError>
              break;
 800655a:	e020      	b.n	800659e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	885b      	ldrh	r3, [r3, #2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11b      	bne.n	800659c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 f903 	bl	800777e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fcc2 	bl	8006f02 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006590:	e004      	b.n	800659c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 fbe9 	bl	8006d6c <USBD_CtlError>
              break;
 800659a:	e000      	b.n	800659e <USBD_StdEPReq+0x154>
              break;
 800659c:	bf00      	nop
          }
          break;
 800659e:	e0ab      	b.n	80066f8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d002      	beq.n	80065b2 <USBD_StdEPReq+0x168>
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d032      	beq.n	8006616 <USBD_StdEPReq+0x1cc>
 80065b0:	e097      	b.n	80066e2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <USBD_StdEPReq+0x17e>
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d004      	beq.n	80065c8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fbd3 	bl	8006d6c <USBD_CtlError>
                break;
 80065c6:	e091      	b.n	80066ec <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da0b      	bge.n	80065e8 <USBD_StdEPReq+0x19e>
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	3310      	adds	r3, #16
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4413      	add	r3, r2
 80065e4:	3304      	adds	r3, #4
 80065e6:	e00b      	b.n	8006600 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	3304      	adds	r3, #4
 8006600:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2202      	movs	r2, #2
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fc1d 	bl	8006e4e <USBD_CtlSendData>
              break;
 8006614:	e06a      	b.n	80066ec <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006616:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800661a:	2b00      	cmp	r3, #0
 800661c:	da11      	bge.n	8006642 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	3324      	adds	r3, #36	; 0x24
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d117      	bne.n	8006668 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb96 	bl	8006d6c <USBD_CtlError>
                  break;
 8006640:	e054      	b.n	80066ec <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	f003 020f 	and.w	r2, r3, #15
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fb83 	bl	8006d6c <USBD_CtlError>
                  break;
 8006666:	e041      	b.n	80066ec <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da0b      	bge.n	8006688 <USBD_StdEPReq+0x23e>
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	3310      	adds	r3, #16
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	4413      	add	r3, r2
 8006684:	3304      	adds	r3, #4
 8006686:	e00b      	b.n	80066a0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006688:	7bbb      	ldrb	r3, [r7, #14]
 800668a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <USBD_StdEPReq+0x264>
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d103      	bne.n	80066b6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e00e      	b.n	80066d4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f87e 	bl	80077bc <USBD_LL_IsStallEP>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e002      	b.n	80066d4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2202      	movs	r2, #2
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fbb7 	bl	8006e4e <USBD_CtlSendData>
              break;
 80066e0:	e004      	b.n	80066ec <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fb41 	bl	8006d6c <USBD_CtlError>
              break;
 80066ea:	bf00      	nop
          }
          break;
 80066ec:	e004      	b.n	80066f8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fb3b 	bl	8006d6c <USBD_CtlError>
          break;
 80066f6:	bf00      	nop
      }
      break;
 80066f8:	e004      	b.n	8006704 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fb35 	bl	8006d6c <USBD_CtlError>
      break;
 8006702:	bf00      	nop
  }

  return ret;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	885b      	ldrh	r3, [r3, #2]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	2b06      	cmp	r3, #6
 8006732:	f200 8128 	bhi.w	8006986 <USBD_GetDescriptor+0x276>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <USBD_GetDescriptor+0x2c>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006759 	.word	0x08006759
 8006740:	08006771 	.word	0x08006771
 8006744:	080067b1 	.word	0x080067b1
 8006748:	08006987 	.word	0x08006987
 800674c:	08006987 	.word	0x08006987
 8006750:	08006927 	.word	0x08006927
 8006754:	08006953 	.word	0x08006953
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	7c12      	ldrb	r2, [r2, #16]
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	60f8      	str	r0, [r7, #12]
      break;
 800676e:	e112      	b.n	8006996 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	7c1b      	ldrb	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10d      	bne.n	8006794 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	f107 0208 	add.w	r2, r7, #8
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3301      	adds	r3, #1
 800678e:	2202      	movs	r2, #2
 8006790:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006792:	e100      	b.n	8006996 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679c:	f107 0208 	add.w	r2, r7, #8
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
 80067a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	2202      	movs	r2, #2
 80067ac:	701a      	strb	r2, [r3, #0]
      break;
 80067ae:	e0f2      	b.n	8006996 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b05      	cmp	r3, #5
 80067b8:	f200 80ac 	bhi.w	8006914 <USBD_GetDescriptor+0x204>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <USBD_GetDescriptor+0xb4>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	08006811 	.word	0x08006811
 80067cc:	08006845 	.word	0x08006845
 80067d0:	08006879 	.word	0x08006879
 80067d4:	080068ad 	.word	0x080068ad
 80067d8:	080068e1 	.word	0x080068e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e091      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fab2 	bl	8006d6c <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e089      	b.n	8006924 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e077      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa98 	bl	8006d6c <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e06f      	b.n	8006924 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e05d      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa7e 	bl	8006d6c <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e055      	b.n	8006924 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e043      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa64 	bl	8006d6c <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e03b      	b.n	8006924 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	7c12      	ldrb	r2, [r2, #16]
 80068c4:	f107 0108 	add.w	r1, r7, #8
 80068c8:	4610      	mov	r0, r2
 80068ca:	4798      	blx	r3
 80068cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ce:	e029      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa4a 	bl	8006d6c <USBD_CtlError>
            err++;
 80068d8:	7afb      	ldrb	r3, [r7, #11]
 80068da:	3301      	adds	r3, #1
 80068dc:	72fb      	strb	r3, [r7, #11]
          break;
 80068de:	e021      	b.n	8006924 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006902:	e00f      	b.n	8006924 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fa30 	bl	8006d6c <USBD_CtlError>
            err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
          break;
 8006912:	e007      	b.n	8006924 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fa28 	bl	8006d6c <USBD_CtlError>
          err++;
 800691c:	7afb      	ldrb	r3, [r7, #11]
 800691e:	3301      	adds	r3, #1
 8006920:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006922:	bf00      	nop
      }
      break;
 8006924:	e037      	b.n	8006996 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	f107 0208 	add.w	r2, r7, #8
 800693a:	4610      	mov	r0, r2
 800693c:	4798      	blx	r3
 800693e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006940:	e029      	b.n	8006996 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa11 	bl	8006d6c <USBD_CtlError>
        err++;
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	3301      	adds	r3, #1
 800694e:	72fb      	strb	r3, [r7, #11]
      break;
 8006950:	e021      	b.n	8006996 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	7c1b      	ldrb	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	f107 0208 	add.w	r2, r7, #8
 8006966:	4610      	mov	r0, r2
 8006968:	4798      	blx	r3
 800696a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	2207      	movs	r2, #7
 8006972:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006974:	e00f      	b.n	8006996 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9f7 	bl	8006d6c <USBD_CtlError>
        err++;
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	3301      	adds	r3, #1
 8006982:	72fb      	strb	r3, [r7, #11]
      break;
 8006984:	e007      	b.n	8006996 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f9ef 	bl	8006d6c <USBD_CtlError>
      err++;
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	3301      	adds	r3, #1
 8006992:	72fb      	strb	r3, [r7, #11]
      break;
 8006994:	bf00      	nop
  }

  if (err != 0U)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d11e      	bne.n	80069da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	88db      	ldrh	r3, [r3, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d016      	beq.n	80069d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80069a4:	893b      	ldrh	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	88da      	ldrh	r2, [r3, #6]
 80069ae:	893b      	ldrh	r3, [r7, #8]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	bf28      	it	cs
 80069b4:	4613      	movcs	r3, r2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069ba:	893b      	ldrh	r3, [r7, #8]
 80069bc:	461a      	mov	r2, r3
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fa44 	bl	8006e4e <USBD_CtlSendData>
 80069c6:	e009      	b.n	80069dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9ce 	bl	8006d6c <USBD_CtlError>
 80069d0:	e004      	b.n	80069dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa95 	bl	8006f02 <USBD_CtlSendStatus>
 80069d8:	e000      	b.n	80069dc <USBD_GetDescriptor+0x2cc>
    return;
 80069da:	bf00      	nop
  }
}
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	889b      	ldrh	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d131      	bne.n	8006a5a <USBD_SetAddress+0x76>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	88db      	ldrh	r3, [r3, #6]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d12d      	bne.n	8006a5a <USBD_SetAddress+0x76>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	885b      	ldrh	r3, [r3, #2]
 8006a02:	2b7f      	cmp	r3, #127	; 0x7f
 8006a04:	d829      	bhi.n	8006a5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	885b      	ldrh	r3, [r3, #2]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d104      	bne.n	8006a28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f9a3 	bl	8006d6c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a26:	e01d      	b.n	8006a64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7bfa      	ldrb	r2, [r7, #15]
 8006a2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 feed 	bl	8007814 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa61 	bl	8006f02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d004      	beq.n	8006a50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4e:	e009      	b.n	8006a64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a58:	e004      	b.n	8006a64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f985 	bl	8006d6c <USBD_CtlError>
  }
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b4c      	ldr	r3, [pc, #304]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006a82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a84:	4b4b      	ldr	r3, [pc, #300]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d905      	bls.n	8006a98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f96c 	bl	8006d6c <USBD_CtlError>
    return USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e088      	b.n	8006baa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d002      	beq.n	8006aaa <USBD_SetConfig+0x3e>
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d025      	beq.n	8006af4 <USBD_SetConfig+0x88>
 8006aa8:	e071      	b.n	8006b8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006aaa:	4b42      	ldr	r3, [pc, #264]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006ab2:	4b40      	ldr	r3, [pc, #256]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006abc:	4b3d      	ldr	r3, [pc, #244]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff f948 	bl	8005d58 <USBD_SetClassConfig>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f949 	bl	8006d6c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ada:	e065      	b.n	8006ba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa10 	bl	8006f02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006aea:	e05d      	b.n	8006ba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fa08 	bl	8006f02 <USBD_CtlSendStatus>
      break;
 8006af2:	e059      	b.n	8006ba8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006af4:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d112      	bne.n	8006b22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b04:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b0e:	4b29      	ldr	r3, [pc, #164]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff f93b 	bl	8005d90 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9f1 	bl	8006f02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b20:	e042      	b.n	8006ba8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006b22:	4b24      	ldr	r3, [pc, #144]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d02a      	beq.n	8006b86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff f929 	bl	8005d90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff f902 	bl	8005d58 <USBD_SetClassConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00f      	beq.n	8006b7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f903 	bl	8006d6c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff f90e 	bl	8005d90 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b7c:	e014      	b.n	8006ba8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9bf 	bl	8006f02 <USBD_CtlSendStatus>
      break;
 8006b84:	e010      	b.n	8006ba8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9bb 	bl	8006f02 <USBD_CtlSendStatus>
      break;
 8006b8c:	e00c      	b.n	8006ba8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8eb 	bl	8006d6c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b96:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <USBD_SetConfig+0x148>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff f8f7 	bl	8005d90 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000208 	.word	0x20000208

08006bb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	88db      	ldrh	r3, [r3, #6]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d004      	beq.n	8006bd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8cd 	bl	8006d6c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bd2:	e023      	b.n	8006c1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	dc02      	bgt.n	8006be6 <USBD_GetConfig+0x2e>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dc03      	bgt.n	8006bec <USBD_GetConfig+0x34>
 8006be4:	e015      	b.n	8006c12 <USBD_GetConfig+0x5a>
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d00b      	beq.n	8006c02 <USBD_GetConfig+0x4a>
 8006bea:	e012      	b.n	8006c12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f927 	bl	8006e4e <USBD_CtlSendData>
        break;
 8006c00:	e00c      	b.n	8006c1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	2201      	movs	r2, #1
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f91f 	bl	8006e4e <USBD_CtlSendData>
        break;
 8006c10:	e004      	b.n	8006c1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f8a9 	bl	8006d6c <USBD_CtlError>
        break;
 8006c1a:	bf00      	nop
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d81e      	bhi.n	8006c7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	88db      	ldrh	r3, [r3, #6]
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d004      	beq.n	8006c4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f890 	bl	8006d6c <USBD_CtlError>
        break;
 8006c4c:	e01a      	b.n	8006c84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d005      	beq.n	8006c6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 0202 	orr.w	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	2202      	movs	r2, #2
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8eb 	bl	8006e4e <USBD_CtlSendData>
      break;
 8006c78:	e004      	b.n	8006c84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f875 	bl	8006d6c <USBD_CtlError>
      break;
 8006c82:	bf00      	nop
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d106      	bne.n	8006cac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f92b 	bl	8006f02 <USBD_CtlSendStatus>
  }
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d80b      	bhi.n	8006ce4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	885b      	ldrh	r3, [r3, #2]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10c      	bne.n	8006cee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f910 	bl	8006f02 <USBD_CtlSendStatus>
      }
      break;
 8006ce2:	e004      	b.n	8006cee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f840 	bl	8006d6c <USBD_CtlError>
      break;
 8006cec:	e000      	b.n	8006cf0 <USBD_ClrFeature+0x3c>
      break;
 8006cee:	bf00      	nop
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781a      	ldrb	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3301      	adds	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f7ff fabb 	bl	800629e <SWAPBYTE>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3301      	adds	r3, #1
 8006d34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f7ff faae 	bl	800629e <SWAPBYTE>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff faa1 	bl	800629e <SWAPBYTE>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	80da      	strh	r2, [r3, #6]
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fce1 	bl	8007740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fcdd 	bl	8007740 <USBD_LL_StallEP>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d036      	beq.n	8006e12 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006da8:	6938      	ldr	r0, [r7, #16]
 8006daa:	f000 f836 	bl	8006e1a <USBD_GetLen>
 8006dae:	4603      	mov	r3, r0
 8006db0:	3301      	adds	r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006dce:	7dfb      	ldrb	r3, [r7, #23]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006dde:	e013      	b.n	8006e08 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4413      	add	r3, r2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	3301      	adds	r3, #1
 8006df0:	613b      	str	r3, [r7, #16]
    idx++;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
 8006df4:	3301      	adds	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
    idx++;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	3301      	adds	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e7      	bne.n	8006de0 <USBD_GetString+0x52>
 8006e10:	e000      	b.n	8006e14 <USBD_GetString+0x86>
    return;
 8006e12:	bf00      	nop
  }
}
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006e2a:	e005      	b.n	8006e38 <USBD_GetLen+0x1e>
  {
    len++;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f5      	bne.n	8006e2c <USBD_GetLen+0x12>
  }

  return len;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 fcec 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	2100      	movs	r1, #0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fcdb 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fcdf 	bl	8007894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fcce 	bl	8007894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f12:	2300      	movs	r3, #0
 8006f14:	2200      	movs	r2, #0
 8006f16:	2100      	movs	r1, #0
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fc9a 	bl	8007852 <USBD_LL_Transmit>

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2205      	movs	r2, #5
 8006f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fca8 	bl	8007894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f54:	2200      	movs	r2, #0
 8006f56:	4912      	ldr	r1, [pc, #72]	; (8006fa0 <MX_USB_DEVICE_Init+0x50>)
 8006f58:	4812      	ldr	r0, [pc, #72]	; (8006fa4 <MX_USB_DEVICE_Init+0x54>)
 8006f5a:	f7fe fe8f 	bl	8005c7c <USBD_Init>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f64:	f7f9 fd78 	bl	8000a58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f68:	490f      	ldr	r1, [pc, #60]	; (8006fa8 <MX_USB_DEVICE_Init+0x58>)
 8006f6a:	480e      	ldr	r0, [pc, #56]	; (8006fa4 <MX_USB_DEVICE_Init+0x54>)
 8006f6c:	f7fe feb6 	bl	8005cdc <USBD_RegisterClass>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f76:	f7f9 fd6f 	bl	8000a58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f7a:	490c      	ldr	r1, [pc, #48]	; (8006fac <MX_USB_DEVICE_Init+0x5c>)
 8006f7c:	4809      	ldr	r0, [pc, #36]	; (8006fa4 <MX_USB_DEVICE_Init+0x54>)
 8006f7e:	f7fe fdd7 	bl	8005b30 <USBD_CDC_RegisterInterface>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f88:	f7f9 fd66 	bl	8000a58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f8c:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <MX_USB_DEVICE_Init+0x54>)
 8006f8e:	f7fe fecc 	bl	8005d2a <USBD_Start>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f98:	f7f9 fd5e 	bl	8000a58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f9c:	bf00      	nop
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20000138 	.word	0x20000138
 8006fa4:	20000584 	.word	0x20000584
 8006fa8:	20000020 	.word	0x20000020
 8006fac:	20000124 	.word	0x20000124

08006fb0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4905      	ldr	r1, [pc, #20]	; (8006fcc <CDC_Init_FS+0x1c>)
 8006fb8:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <CDC_Init_FS+0x20>)
 8006fba:	f7fe fdce 	bl	8005b5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fbe:	4905      	ldr	r1, [pc, #20]	; (8006fd4 <CDC_Init_FS+0x24>)
 8006fc0:	4803      	ldr	r0, [pc, #12]	; (8006fd0 <CDC_Init_FS+0x20>)
 8006fc2:	f7fe fde8 	bl	8005b96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20001054 	.word	0x20001054
 8006fd0:	20000584 	.word	0x20000584
 8006fd4:	20000854 	.word	0x20000854

08006fd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006fdc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	2b23      	cmp	r3, #35	; 0x23
 8006ffc:	d84a      	bhi.n	8007094 <CDC_Control_FS+0xac>
 8006ffe:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <CDC_Control_FS+0x1c>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007095 	.word	0x08007095
 8007008:	08007095 	.word	0x08007095
 800700c:	08007095 	.word	0x08007095
 8007010:	08007095 	.word	0x08007095
 8007014:	08007095 	.word	0x08007095
 8007018:	08007095 	.word	0x08007095
 800701c:	08007095 	.word	0x08007095
 8007020:	08007095 	.word	0x08007095
 8007024:	08007095 	.word	0x08007095
 8007028:	08007095 	.word	0x08007095
 800702c:	08007095 	.word	0x08007095
 8007030:	08007095 	.word	0x08007095
 8007034:	08007095 	.word	0x08007095
 8007038:	08007095 	.word	0x08007095
 800703c:	08007095 	.word	0x08007095
 8007040:	08007095 	.word	0x08007095
 8007044:	08007095 	.word	0x08007095
 8007048:	08007095 	.word	0x08007095
 800704c:	08007095 	.word	0x08007095
 8007050:	08007095 	.word	0x08007095
 8007054:	08007095 	.word	0x08007095
 8007058:	08007095 	.word	0x08007095
 800705c:	08007095 	.word	0x08007095
 8007060:	08007095 	.word	0x08007095
 8007064:	08007095 	.word	0x08007095
 8007068:	08007095 	.word	0x08007095
 800706c:	08007095 	.word	0x08007095
 8007070:	08007095 	.word	0x08007095
 8007074:	08007095 	.word	0x08007095
 8007078:	08007095 	.word	0x08007095
 800707c:	08007095 	.word	0x08007095
 8007080:	08007095 	.word	0x08007095
 8007084:	08007095 	.word	0x08007095
 8007088:	08007095 	.word	0x08007095
 800708c:	08007095 	.word	0x08007095
 8007090:	08007095 	.word	0x08007095
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007094:	bf00      	nop
  }

  return (USBD_OK);
 8007096:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4805      	ldr	r0, [pc, #20]	; (80070c8 <CDC_Receive_FS+0x24>)
 80070b2:	f7fe fd70 	bl	8005b96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070b6:	4804      	ldr	r0, [pc, #16]	; (80070c8 <CDC_Receive_FS+0x24>)
 80070b8:	f7fe fdb6 	bl	8005c28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000584 	.word	0x20000584

080070cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <CDC_Transmit_FS+0x48>)
 80070de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e00b      	b.n	800710a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	461a      	mov	r2, r3
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	4806      	ldr	r0, [pc, #24]	; (8007114 <CDC_Transmit_FS+0x48>)
 80070fa:	f7fe fd2e 	bl	8005b5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070fe:	4805      	ldr	r0, [pc, #20]	; (8007114 <CDC_Transmit_FS+0x48>)
 8007100:	f7fe fd62 	bl	8005bc8 <USBD_CDC_TransmitPacket>
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000584 	.word	0x20000584

08007118 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4613      	mov	r3, r2
 8007124:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800712a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2212      	movs	r2, #18
 800714c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800714e:	4b03      	ldr	r3, [pc, #12]	; (800715c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	20000154 	.word	0x20000154

08007160 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2204      	movs	r2, #4
 8007170:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007172:	4b03      	ldr	r3, [pc, #12]	; (8007180 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	20000168 	.word	0x20000168

08007184 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d105      	bne.n	80071a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	4907      	ldr	r1, [pc, #28]	; (80071b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800719a:	4808      	ldr	r0, [pc, #32]	; (80071bc <USBD_FS_ProductStrDescriptor+0x38>)
 800719c:	f7ff fdf7 	bl	8006d8e <USBD_GetString>
 80071a0:	e004      	b.n	80071ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80071a6:	4805      	ldr	r0, [pc, #20]	; (80071bc <USBD_FS_ProductStrDescriptor+0x38>)
 80071a8:	f7ff fdf1 	bl	8006d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071ac:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	20001854 	.word	0x20001854
 80071bc:	08007b44 	.word	0x08007b44

080071c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	4904      	ldr	r1, [pc, #16]	; (80071e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071d0:	4804      	ldr	r0, [pc, #16]	; (80071e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071d2:	f7ff fddc 	bl	8006d8e <USBD_GetString>
  return USBD_StrDesc;
 80071d6:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20001854 	.word	0x20001854
 80071e4:	08007b5c 	.word	0x08007b5c

080071e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	6039      	str	r1, [r7, #0]
 80071f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	221a      	movs	r2, #26
 80071f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071fa:	f000 f843 	bl	8007284 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071fe:	4b02      	ldr	r3, [pc, #8]	; (8007208 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000016c 	.word	0x2000016c

0800720c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4907      	ldr	r1, [pc, #28]	; (8007240 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007222:	4808      	ldr	r0, [pc, #32]	; (8007244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007224:	f7ff fdb3 	bl	8006d8e <USBD_GetString>
 8007228:	e004      	b.n	8007234 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <USBD_FS_ConfigStrDescriptor+0x34>)
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007230:	f7ff fdad 	bl	8006d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20001854 	.word	0x20001854
 8007244:	08007b70 	.word	0x08007b70

08007248 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4907      	ldr	r1, [pc, #28]	; (800727c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007260:	f7ff fd95 	bl	8006d8e <USBD_GetString>
 8007264:	e004      	b.n	8007270 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800726c:	f7ff fd8f 	bl	8006d8e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20001854 	.word	0x20001854
 8007280:	08007b7c 	.word	0x08007b7c

08007284 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800728a:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <Get_SerialNum+0x44>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007290:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <Get_SerialNum+0x48>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <Get_SerialNum+0x4c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072aa:	2208      	movs	r2, #8
 80072ac:	4909      	ldr	r1, [pc, #36]	; (80072d4 <Get_SerialNum+0x50>)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f814 	bl	80072dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072b4:	2204      	movs	r2, #4
 80072b6:	4908      	ldr	r1, [pc, #32]	; (80072d8 <Get_SerialNum+0x54>)
 80072b8:	68b8      	ldr	r0, [r7, #8]
 80072ba:	f000 f80f 	bl	80072dc <IntToUnicode>
  }
}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	1fff7a10 	.word	0x1fff7a10
 80072cc:	1fff7a14 	.word	0x1fff7a14
 80072d0:	1fff7a18 	.word	0x1fff7a18
 80072d4:	2000016e 	.word	0x2000016e
 80072d8:	2000017e 	.word	0x2000017e

080072dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]
 80072f2:	e027      	b.n	8007344 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0f1b      	lsrs	r3, r3, #28
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	d80b      	bhi.n	8007314 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0f1b      	lsrs	r3, r3, #28
 8007300:	b2da      	uxtb	r2, r3
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	4619      	mov	r1, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	440b      	add	r3, r1
 800730c:	3230      	adds	r2, #48	; 0x30
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e00a      	b.n	800732a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	0f1b      	lsrs	r3, r3, #28
 8007318:	b2da      	uxtb	r2, r3
 800731a:	7dfb      	ldrb	r3, [r7, #23]
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	4619      	mov	r1, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	440b      	add	r3, r1
 8007324:	3237      	adds	r2, #55	; 0x37
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	3301      	adds	r3, #1
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800733e:	7dfb      	ldrb	r3, [r7, #23]
 8007340:	3301      	adds	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
 8007344:	7dfa      	ldrb	r2, [r7, #23]
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3d3      	bcc.n	80072f4 <IntToUnicode+0x18>
  }
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
	...

0800735c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800737c:	d13a      	bne.n	80073f4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	6313      	str	r3, [r2, #48]	; 0x30
 800738e:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800739a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800739e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a0:	2302      	movs	r3, #2
 80073a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073a8:	2303      	movs	r3, #3
 80073aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073ac:	230a      	movs	r3, #10
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b0:	f107 0314 	add.w	r3, r7, #20
 80073b4:	4619      	mov	r1, r3
 80073b6:	4812      	ldr	r0, [pc, #72]	; (8007400 <HAL_PCD_MspInit+0xa4>)
 80073b8:	f7fa faf0 	bl	800199c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	4a0e      	ldr	r2, [pc, #56]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 80073c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c6:	6353      	str	r3, [r2, #52]	; 0x34
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 80073d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073d6:	6453      	str	r3, [r2, #68]	; 0x44
 80073d8:	4b08      	ldr	r3, [pc, #32]	; (80073fc <HAL_PCD_MspInit+0xa0>)
 80073da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073e4:	2200      	movs	r2, #0
 80073e6:	2100      	movs	r1, #0
 80073e8:	2043      	movs	r0, #67	; 0x43
 80073ea:	f7fa faa0 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073ee:	2043      	movs	r0, #67	; 0x43
 80073f0:	f7fa fab9 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073f4:	bf00      	nop
 80073f6:	3728      	adds	r7, #40	; 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40023800 	.word	0x40023800
 8007400:	40020000 	.word	0x40020000

08007404 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fcd0 	bl	8005dc0 <USBD_LL_SetupStage>
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800743a:	78fa      	ldrb	r2, [r7, #3]
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	4613      	mov	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	440b      	add	r3, r1
 8007448:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	4619      	mov	r1, r3
 8007452:	f7fe fd0a 	bl	8005e6a <USBD_LL_DataOutStage>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	460b      	mov	r3, r1
 8007468:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	1a9b      	subs	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	3348      	adds	r3, #72	; 0x48
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	4619      	mov	r1, r3
 8007486:	f7fe fd53 	bl	8005f30 <USBD_LL_DataInStage>
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7fe fe67 	bl	8006174 <USBD_LL_SOF>
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074b6:	2301      	movs	r3, #1
 80074b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
 80074c6:	e008      	b.n	80074da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d102      	bne.n	80074d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	e001      	b.n	80074da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80074d6:	f7f9 fabf 	bl	8000a58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	4611      	mov	r1, r2
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fe07 	bl	80060f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fdb3 	bl	800605c <USBD_LL_Reset>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fe02 	bl	8006118 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007534:	4b04      	ldr	r3, [pc, #16]	; (8007548 <HAL_PCD_SuspendCallback+0x48>)
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	4a03      	ldr	r2, [pc, #12]	; (8007548 <HAL_PCD_SuspendCallback+0x48>)
 800753a:	f043 0306 	orr.w	r3, r3, #6
 800753e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed00 	.word	0xe000ed00

0800754c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fdf2 	bl	8006144 <USBD_LL_Resume>
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fe40 	bl	8006204 <USBD_LL_IsoOUTIncomplete>
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759e:	78fa      	ldrb	r2, [r7, #3]
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fe08 	bl	80061b8 <USBD_LL_IsoINIncomplete>
}
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fe46 	bl	8006250 <USBD_LL_DevConnected>
}
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fe fe43 	bl	8006266 <USBD_LL_DevDisconnected>
}
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d13c      	bne.n	8007672 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075f8:	4a20      	ldr	r2, [pc, #128]	; (800767c <USBD_LL_Init+0x94>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a1e      	ldr	r2, [pc, #120]	; (800767c <USBD_LL_Init+0x94>)
 8007604:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007608:	4b1c      	ldr	r3, [pc, #112]	; (800767c <USBD_LL_Init+0x94>)
 800760a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800760e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007610:	4b1a      	ldr	r3, [pc, #104]	; (800767c <USBD_LL_Init+0x94>)
 8007612:	2204      	movs	r2, #4
 8007614:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <USBD_LL_Init+0x94>)
 8007618:	2202      	movs	r2, #2
 800761a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <USBD_LL_Init+0x94>)
 800761e:	2200      	movs	r2, #0
 8007620:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007622:	4b16      	ldr	r3, [pc, #88]	; (800767c <USBD_LL_Init+0x94>)
 8007624:	2202      	movs	r2, #2
 8007626:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007628:	4b14      	ldr	r3, [pc, #80]	; (800767c <USBD_LL_Init+0x94>)
 800762a:	2200      	movs	r2, #0
 800762c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <USBD_LL_Init+0x94>)
 8007630:	2200      	movs	r2, #0
 8007632:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <USBD_LL_Init+0x94>)
 8007636:	2200      	movs	r2, #0
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800763a:	4b10      	ldr	r3, [pc, #64]	; (800767c <USBD_LL_Init+0x94>)
 800763c:	2200      	movs	r2, #0
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007640:	4b0e      	ldr	r3, [pc, #56]	; (800767c <USBD_LL_Init+0x94>)
 8007642:	2200      	movs	r2, #0
 8007644:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007646:	480d      	ldr	r0, [pc, #52]	; (800767c <USBD_LL_Init+0x94>)
 8007648:	f7fa fb5d 	bl	8001d06 <HAL_PCD_Init>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007652:	f7f9 fa01 	bl	8000a58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007656:	2180      	movs	r1, #128	; 0x80
 8007658:	4808      	ldr	r0, [pc, #32]	; (800767c <USBD_LL_Init+0x94>)
 800765a:	f7fb fcba 	bl	8002fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	2100      	movs	r1, #0
 8007662:	4806      	ldr	r0, [pc, #24]	; (800767c <USBD_LL_Init+0x94>)
 8007664:	f7fb fc6e 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007668:	2280      	movs	r2, #128	; 0x80
 800766a:	2101      	movs	r1, #1
 800766c:	4803      	ldr	r0, [pc, #12]	; (800767c <USBD_LL_Init+0x94>)
 800766e:	f7fb fc69 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20001a54 	.word	0x20001a54

08007680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fa fc52 	bl	8001f40 <HAL_PCD_Start>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 f942 	bl	800792c <USBD_Get_USB_Status>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	461a      	mov	r2, r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	70fb      	strb	r3, [r7, #3]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70bb      	strb	r3, [r7, #2]
 80076cc:	4613      	mov	r3, r2
 80076ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076de:	78bb      	ldrb	r3, [r7, #2]
 80076e0:	883a      	ldrh	r2, [r7, #0]
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	f7fb f836 	bl	8002754 <HAL_PCD_EP_Open>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f91c 	bl	800792c <USBD_Get_USB_Status>
 80076f4:	4603      	mov	r3, r0
 80076f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fb f87f 	bl	8002824 <HAL_PCD_EP_Close>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8fd 	bl	800792c <USBD_Get_USB_Status>
 8007732:	4603      	mov	r3, r0
 8007734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007736:	7bbb      	ldrb	r3, [r7, #14]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f7fb f957 	bl	8002a12 <HAL_PCD_EP_SetStall>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f8de 	bl	800792c <USBD_Get_USB_Status>
 8007770:	4603      	mov	r3, r0
 8007772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007774:	7bbb      	ldrb	r3, [r7, #14]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	460b      	mov	r3, r1
 8007788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7fb f99c 	bl	8002ada <HAL_PCD_EP_ClrStall>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 f8bf 	bl	800792c <USBD_Get_USB_Status>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da0b      	bge.n	80077f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	333e      	adds	r3, #62	; 0x3e
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	e00b      	b.n	8007808 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007806:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	4611      	mov	r1, r2
 8007832:	4618      	mov	r0, r3
 8007834:	f7fa ff69 	bl	800270a <HAL_PCD_SetAddress>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f874 	bl	800792c <USBD_Get_USB_Status>
 8007844:	4603      	mov	r3, r0
 8007846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007848:	7bbb      	ldrb	r3, [r7, #14]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	60f8      	str	r0, [r7, #12]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
 800785e:	460b      	mov	r3, r1
 8007860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007870:	7af9      	ldrb	r1, [r7, #11]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	f7fb f882 	bl	800297e <HAL_PCD_EP_Transmit>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f853 	bl	800792c <USBD_Get_USB_Status>
 8007886:	4603      	mov	r3, r0
 8007888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800788a:	7dbb      	ldrb	r3, [r7, #22]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078b2:	7af9      	ldrb	r1, [r7, #11]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	f7fa fffe 	bl	80028b8 <HAL_PCD_EP_Receive>
 80078bc:	4603      	mov	r3, r0
 80078be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f832 	bl	800792c <USBD_Get_USB_Status>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	4611      	mov	r1, r2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fb f82e 	bl	800294e <HAL_PCD_EP_GetRxCount>
 80078f2:	4603      	mov	r3, r0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007904:	4b03      	ldr	r3, [pc, #12]	; (8007914 <USBD_static_malloc+0x18>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	2000020c 	.word	0x2000020c

08007918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d817      	bhi.n	8007970 <USBD_Get_USB_Status+0x44>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <USBD_Get_USB_Status+0x1c>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007959 	.word	0x08007959
 800794c:	0800795f 	.word	0x0800795f
 8007950:	08007965 	.word	0x08007965
 8007954:	0800796b 	.word	0x0800796b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
    break;
 800795c:	e00b      	b.n	8007976 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
    break;
 8007962:	e008      	b.n	8007976 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
    break;
 8007968:	e005      	b.n	8007976 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	73fb      	strb	r3, [r7, #15]
    break;
 800796e:	e002      	b.n	8007976 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007970:	2303      	movs	r3, #3
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	bf00      	nop
  }
  return usb_status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <atoi>:
 8007984:	220a      	movs	r2, #10
 8007986:	2100      	movs	r1, #0
 8007988:	f000 b8b6 	b.w	8007af8 <strtol>

0800798c <__errno>:
 800798c:	4b01      	ldr	r3, [pc, #4]	; (8007994 <__errno+0x8>)
 800798e:	6818      	ldr	r0, [r3, #0]
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000188 	.word	0x20000188

08007998 <__libc_init_array>:
 8007998:	b570      	push	{r4, r5, r6, lr}
 800799a:	4d0d      	ldr	r5, [pc, #52]	; (80079d0 <__libc_init_array+0x38>)
 800799c:	4c0d      	ldr	r4, [pc, #52]	; (80079d4 <__libc_init_array+0x3c>)
 800799e:	1b64      	subs	r4, r4, r5
 80079a0:	10a4      	asrs	r4, r4, #2
 80079a2:	2600      	movs	r6, #0
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	d109      	bne.n	80079bc <__libc_init_array+0x24>
 80079a8:	4d0b      	ldr	r5, [pc, #44]	; (80079d8 <__libc_init_array+0x40>)
 80079aa:	4c0c      	ldr	r4, [pc, #48]	; (80079dc <__libc_init_array+0x44>)
 80079ac:	f000 f8ae 	bl	8007b0c <_init>
 80079b0:	1b64      	subs	r4, r4, r5
 80079b2:	10a4      	asrs	r4, r4, #2
 80079b4:	2600      	movs	r6, #0
 80079b6:	42a6      	cmp	r6, r4
 80079b8:	d105      	bne.n	80079c6 <__libc_init_array+0x2e>
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c0:	4798      	blx	r3
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7ee      	b.n	80079a4 <__libc_init_array+0xc>
 80079c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ca:	4798      	blx	r3
 80079cc:	3601      	adds	r6, #1
 80079ce:	e7f2      	b.n	80079b6 <__libc_init_array+0x1e>
 80079d0:	08007cb0 	.word	0x08007cb0
 80079d4:	08007cb0 	.word	0x08007cb0
 80079d8:	08007cb0 	.word	0x08007cb0
 80079dc:	08007cb4 	.word	0x08007cb4

080079e0 <memset>:
 80079e0:	4402      	add	r2, r0
 80079e2:	4603      	mov	r3, r0
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d100      	bne.n	80079ea <memset+0xa>
 80079e8:	4770      	bx	lr
 80079ea:	f803 1b01 	strb.w	r1, [r3], #1
 80079ee:	e7f9      	b.n	80079e4 <memset+0x4>

080079f0 <_strtol_l.isra.0>:
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f6:	d001      	beq.n	80079fc <_strtol_l.isra.0+0xc>
 80079f8:	2b24      	cmp	r3, #36	; 0x24
 80079fa:	d906      	bls.n	8007a0a <_strtol_l.isra.0+0x1a>
 80079fc:	f7ff ffc6 	bl	800798c <__errno>
 8007a00:	2316      	movs	r3, #22
 8007a02:	6003      	str	r3, [r0, #0]
 8007a04:	2000      	movs	r0, #0
 8007a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0a:	4f3a      	ldr	r7, [pc, #232]	; (8007af4 <_strtol_l.isra.0+0x104>)
 8007a0c:	468e      	mov	lr, r1
 8007a0e:	4676      	mov	r6, lr
 8007a10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a14:	5de5      	ldrb	r5, [r4, r7]
 8007a16:	f015 0508 	ands.w	r5, r5, #8
 8007a1a:	d1f8      	bne.n	8007a0e <_strtol_l.isra.0+0x1e>
 8007a1c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a1e:	d134      	bne.n	8007a8a <_strtol_l.isra.0+0x9a>
 8007a20:	f89e 4000 	ldrb.w	r4, [lr]
 8007a24:	f04f 0801 	mov.w	r8, #1
 8007a28:	f106 0e02 	add.w	lr, r6, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d05c      	beq.n	8007aea <_strtol_l.isra.0+0xfa>
 8007a30:	2b10      	cmp	r3, #16
 8007a32:	d10c      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007a34:	2c30      	cmp	r4, #48	; 0x30
 8007a36:	d10a      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007a38:	f89e 4000 	ldrb.w	r4, [lr]
 8007a3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a40:	2c58      	cmp	r4, #88	; 0x58
 8007a42:	d14d      	bne.n	8007ae0 <_strtol_l.isra.0+0xf0>
 8007a44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f10e 0e02 	add.w	lr, lr, #2
 8007a4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007a52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a56:	2600      	movs	r6, #0
 8007a58:	fbbc f9f3 	udiv	r9, ip, r3
 8007a5c:	4635      	mov	r5, r6
 8007a5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007a66:	2f09      	cmp	r7, #9
 8007a68:	d818      	bhi.n	8007a9c <_strtol_l.isra.0+0xac>
 8007a6a:	463c      	mov	r4, r7
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	dd24      	ble.n	8007aba <_strtol_l.isra.0+0xca>
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	db1f      	blt.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a74:	45a9      	cmp	r9, r5
 8007a76:	d31d      	bcc.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a78:	d101      	bne.n	8007a7e <_strtol_l.isra.0+0x8e>
 8007a7a:	45a2      	cmp	sl, r4
 8007a7c:	db1a      	blt.n	8007ab4 <_strtol_l.isra.0+0xc4>
 8007a7e:	fb05 4503 	mla	r5, r5, r3, r4
 8007a82:	2601      	movs	r6, #1
 8007a84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007a88:	e7eb      	b.n	8007a62 <_strtol_l.isra.0+0x72>
 8007a8a:	2c2b      	cmp	r4, #43	; 0x2b
 8007a8c:	bf08      	it	eq
 8007a8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007a92:	46a8      	mov	r8, r5
 8007a94:	bf08      	it	eq
 8007a96:	f106 0e02 	addeq.w	lr, r6, #2
 8007a9a:	e7c7      	b.n	8007a2c <_strtol_l.isra.0+0x3c>
 8007a9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007aa0:	2f19      	cmp	r7, #25
 8007aa2:	d801      	bhi.n	8007aa8 <_strtol_l.isra.0+0xb8>
 8007aa4:	3c37      	subs	r4, #55	; 0x37
 8007aa6:	e7e1      	b.n	8007a6c <_strtol_l.isra.0+0x7c>
 8007aa8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007aac:	2f19      	cmp	r7, #25
 8007aae:	d804      	bhi.n	8007aba <_strtol_l.isra.0+0xca>
 8007ab0:	3c57      	subs	r4, #87	; 0x57
 8007ab2:	e7db      	b.n	8007a6c <_strtol_l.isra.0+0x7c>
 8007ab4:	f04f 36ff 	mov.w	r6, #4294967295
 8007ab8:	e7e4      	b.n	8007a84 <_strtol_l.isra.0+0x94>
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	da05      	bge.n	8007aca <_strtol_l.isra.0+0xda>
 8007abe:	2322      	movs	r3, #34	; 0x22
 8007ac0:	6003      	str	r3, [r0, #0]
 8007ac2:	4665      	mov	r5, ip
 8007ac4:	b942      	cbnz	r2, 8007ad8 <_strtol_l.isra.0+0xe8>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e79d      	b.n	8007a06 <_strtol_l.isra.0+0x16>
 8007aca:	f1b8 0f00 	cmp.w	r8, #0
 8007ace:	d000      	beq.n	8007ad2 <_strtol_l.isra.0+0xe2>
 8007ad0:	426d      	negs	r5, r5
 8007ad2:	2a00      	cmp	r2, #0
 8007ad4:	d0f7      	beq.n	8007ac6 <_strtol_l.isra.0+0xd6>
 8007ad6:	b10e      	cbz	r6, 8007adc <_strtol_l.isra.0+0xec>
 8007ad8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	e7f2      	b.n	8007ac6 <_strtol_l.isra.0+0xd6>
 8007ae0:	2430      	movs	r4, #48	; 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1b3      	bne.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	e7b1      	b.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007aea:	2c30      	cmp	r4, #48	; 0x30
 8007aec:	d0a4      	beq.n	8007a38 <_strtol_l.isra.0+0x48>
 8007aee:	230a      	movs	r3, #10
 8007af0:	e7ad      	b.n	8007a4e <_strtol_l.isra.0+0x5e>
 8007af2:	bf00      	nop
 8007af4:	08007ba5 	.word	0x08007ba5

08007af8 <strtol>:
 8007af8:	4613      	mov	r3, r2
 8007afa:	460a      	mov	r2, r1
 8007afc:	4601      	mov	r1, r0
 8007afe:	4802      	ldr	r0, [pc, #8]	; (8007b08 <strtol+0x10>)
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f7ff bf75 	b.w	80079f0 <_strtol_l.isra.0>
 8007b06:	bf00      	nop
 8007b08:	20000188 	.word	0x20000188

08007b0c <_init>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr

08007b18 <_fini>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr
