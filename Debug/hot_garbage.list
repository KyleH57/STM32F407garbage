
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009060  08009060  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009068  08009068  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009068  08009068  00019068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800906c  0800906c  0001906c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  20000220  08009290  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eac  08009290  00021eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001653f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb9  00000000  00000000  0003678f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ee2  00000000  00000000  0003c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001764d  00000000  00000000  000625e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d72fd  00000000  00000000  00079c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150f2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050bc  00000000  00000000  00150f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e48 	.word	0x08008e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	08008e48 	.word	0x08008e48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <H100spindleFWD>:
};



int H100spindleFWD(UART_HandleTypeDef *uart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x01, TIMEOUT, NUM_RETRIES);
 800057c:	2303      	movs	r3, #3
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	f44f 7291 	mov.w	r2, #290	; 0x122
 800058c:	2101      	movs	r1, #1
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f882 	bl	8000698 <modBusWrSingle>

	//TODO see if 0x8000 works
	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x01, TIMEOUT, NUM_RETRIES);

	return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <H100spindleOFF>:

int H100spindleOFF(UART_HandleTypeDef *uart)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b084      	sub	sp, #16
 80005a2:	af02      	add	r7, sp, #8
 80005a4:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x10, TIMEOUT, NUM_RETRIES);
 80005a6:	2303      	movs	r3, #3
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2310      	movs	r3, #16
 80005b2:	f44f 7291 	mov.w	r2, #290	; 0x122
 80005b6:	2101      	movs	r1, #1
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f86d 	bl	8000698 <modBusWrSingle>

	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x10, TIMEOUT, NUM_RETRIES);

	return 0;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <modBusCRC>:
	MESSAGE_CORRUPT,
	ERROR_UNKNOWN
};

uint16_t modBusCRC(uint8_t *message, uint16_t length)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b087      	sub	sp, #28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 80005d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d8:	82fb      	strh	r3, [r7, #22]

	for (int i = 0; i < length; i++)
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	e022      	b.n	8000626 <modBusCRC+0x5e>
	{
		crc ^= message[i];
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	8afb      	ldrh	r3, [r7, #22]
 80005ec:	4053      	eors	r3, r2
 80005ee:	82fb      	strh	r3, [r7, #22]

		for (int j = 0; j < 8; j++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e011      	b.n	800061a <modBusCRC+0x52>
		{
			if (crc & 0x0001)
 80005f6:	8afb      	ldrh	r3, [r7, #22]
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <modBusCRC+0x46>
			{
				crc = (crc >> 1) ^ 0xA001;
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <modBusCRC+0x74>)
 8000608:	4053      	eors	r3, r2
 800060a:	82fb      	strh	r3, [r7, #22]
 800060c:	e002      	b.n	8000614 <modBusCRC+0x4c>
			}
			else
			{
				crc = crc >> 1;
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	085b      	lsrs	r3, r3, #1
 8000612:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b07      	cmp	r3, #7
 800061e:	ddea      	ble.n	80005f6 <modBusCRC+0x2e>
	for (int i = 0; i < length; i++)
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	3301      	adds	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbd8      	blt.n	80005e0 <modBusCRC+0x18>
			}
		}
	}

	return crc;
 800062e:	8afb      	ldrh	r3, [r7, #22]
}
 8000630:	4618      	mov	r0, r3
 8000632:	371c      	adds	r7, #28
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	ffffa001 	.word	0xffffa001

08000640 <modBusTransmit>:

int modBusTransmit(UART_HandleTypeDef *uart, uint8_t *data, uint32_t timeout)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09e      	sub	sp, #120	; 0x78
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
	uint8_t uselessData[100];
	while(HAL_UART_Receive(uart, uselessData, 1, 1) != HAL_TIMEOUT)
 800064c:	bf00      	nop
 800064e:	f107 0114 	add.w	r1, r7, #20
 8000652:	2301      	movs	r3, #1
 8000654:	2201      	movs	r2, #1
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f003 fe96 	bl	8004388 <HAL_UART_Receive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b03      	cmp	r3, #3
 8000660:	d1f5      	bne.n	800064e <modBusTransmit+0xe>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 19200 baud or 1.2KB/s --- 8 bytes takes ~5ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	2102      	movs	r1, #2
 8000666:	480b      	ldr	r0, [pc, #44]	; (8000694 <modBusTransmit+0x54>)
 8000668:	f001 fef4 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f8a7 	bl	80017c0 <HAL_Delay>
	//blocking transmit 15ms timeout
	HAL_UART_Transmit(uart, data, 8, 15);
 8000672:	230f      	movs	r3, #15
 8000674:	2208      	movs	r2, #8
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f003 fdf3 	bl	8004264 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <modBusTransmit+0x54>)
 8000684:	f001 fee6 	bl	8002454 <HAL_GPIO_WritePin>

	return 0;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3778      	adds	r7, #120	; 0x78
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400

08000698 <modBusWrSingle>:
 * deviceAddr
 */
int modBusWrSingle(UART_HandleTypeDef *uart, uint8_t deviceAddr,
		uint16_t registerAddr, uint16_t data, uint32_t timeout,
		uint8_t maxRetries)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	4608      	mov	r0, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	461a      	mov	r2, r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	72fb      	strb	r3, [r7, #11]
 80006aa:	460b      	mov	r3, r1
 80006ac:	813b      	strh	r3, [r7, #8]
 80006ae:	4613      	mov	r3, r2
 80006b0:	80fb      	strh	r3, [r7, #6]
	// Create a buffer to hold the Modbus message
	uint8_t message[8];

	// Set the Modbus function code for a single register write
	message[0] = deviceAddr;
 80006b2:	7afb      	ldrb	r3, [r7, #11]
 80006b4:	773b      	strb	r3, [r7, #28]
	message[1] = 0x06;
 80006b6:	2306      	movs	r3, #6
 80006b8:	777b      	strb	r3, [r7, #29]

	// Encode the register address and data in big-endian format
	message[2] = (registerAddr >> 8) & 0xFF;
 80006ba:	893b      	ldrh	r3, [r7, #8]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	77bb      	strb	r3, [r7, #30]
	message[3] = registerAddr & 0xFF;
 80006c4:	893b      	ldrh	r3, [r7, #8]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	77fb      	strb	r3, [r7, #31]
	message[4] = (data >> 8) & 0xFF;
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f887 3020 	strb.w	r3, [r7, #32]
	message[5] = data & 0xFF;
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	// Calculate the 16-bit Modbus RTU CRC for the message
	uint16_t crc = modBusCRC(message, 6);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2106      	movs	r1, #6
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff6f 	bl	80005c8 <modBusCRC>
 80006ea:	4603      	mov	r3, r0
 80006ec:	857b      	strh	r3, [r7, #42]	; 0x2a

	// Append the CRC to the message
	//might be broken
	message[7] = (crc >> 8) & 0xFF;
 80006ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006f0:	0a1b      	lsrs	r3, r3, #8
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	message[6] = crc & 0xFF;
 80006fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
//	message[4] = 0x01;
//	message[5] = 0x01;

	uint8_t rxMsg[8];

	int success = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
	int numTries = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
	do
	{
		numTries++;
 800070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070c:	3301      	adds	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
		// Send the message over the UART
		modBusTransmit(uart, message, MODBUS_TIMEOUT);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2202      	movs	r2, #2
 8000716:	4619      	mov	r1, r3
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff ff91 	bl	8000640 <modBusTransmit>

		// Wait for the response message from the slave device
		if (HAL_UART_Receive(uart, rxMsg, 8, timeout) != HAL_OK)
 800071e:	f107 0114 	add.w	r1, r7, #20
 8000722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000724:	2208      	movs	r2, #8
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f003 fe2e 	bl	8004388 <HAL_UART_Receive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <modBusWrSingle+0x9e>
		{
			return MODBUS_TIMEOUT;
 8000732:	2302      	movs	r3, #2
 8000734:	e008      	b.n	8000748 <modBusWrSingle+0xb0>
		}
	} while (!success || numTries <= maxRetries);
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0e6      	beq.n	800070a <modBusWrSingle+0x72>
 800073c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000742:	429a      	cmp	r2, r3
 8000744:	dde1      	ble.n	800070a <modBusWrSingle+0x72>

	return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <unlock_Z_axis>:
//	//return modBusWrSingle(uart, DEVICE_ADDRESS, registerAddr, state, TIMEOUT, NUM_RETRIES);
//	reuturn 0;
//}

int unlock_Z_axis(UART_HandleTypeDef *uart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 8000758:	2303      	movs	r3, #3
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	2203      	movs	r2, #3
 8000766:	2102      	movs	r1, #2
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff95 	bl	8000698 <modBusWrSingle>
 800076e:	4603      	mov	r3, r0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <lock_Z_axis>:

int lock_Z_axis(UART_HandleTypeDef *uart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 8000780:	2303      	movs	r3, #3
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2203      	movs	r2, #3
 800078e:	2102      	movs	r1, #2
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff81 	bl	8000698 <modBusWrSingle>
 8000796:	4603      	mov	r3, r0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b0ba      	sub	sp, #232	; 0xe8
 80007a4:	af00      	add	r7, sp, #0
	int status = NO_ERROR;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ac:	f000 ff96 	bl	80016dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007b0:	f000 f988 	bl	8000ac4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007b4:	f000 fb28 	bl	8000e08 <MX_GPIO_Init>
	MX_ADC2_Init();
 80007b8:	f000 f9ee 	bl	8000b98 <MX_ADC2_Init>
	MX_ADC3_Init();
 80007bc:	f000 fa3e 	bl	8000c3c <MX_ADC3_Init>
	MX_CAN2_Init();
 80007c0:	f000 fa8e 	bl	8000ce0 <MX_CAN2_Init>
	MX_SPI1_Init();
 80007c4:	f000 fac0 	bl	8000d48 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 80007c8:	f000 faf4 	bl	8000db4 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80007cc:	f007 f8f2 	bl	80079b4 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t onStat[3] = { 'M', '3', '\n' };
 80007d0:	4ab1      	ldr	r2, [pc, #708]	; (8000a98 <main+0x2f8>)
 80007d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	4611      	mov	r1, r2
 80007da:	8019      	strh	r1, [r3, #0]
 80007dc:	3302      	adds	r3, #2
 80007de:	0c12      	lsrs	r2, r2, #16
 80007e0:	701a      	strb	r2, [r3, #0]
	uint8_t offStat[3] = { 'M', '5', '\n' };
 80007e2:	4aae      	ldr	r2, [pc, #696]	; (8000a9c <main+0x2fc>)
 80007e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	4611      	mov	r1, r2
 80007ec:	8019      	strh	r1, [r3, #0]
 80007ee:	3302      	adds	r3, #2
 80007f0:	0c12      	lsrs	r2, r2, #16
 80007f2:	701a      	strb	r2, [r3, #0]
	uint8_t ssStat[3] = { 'S', 'S', '\n' };
 80007f4:	4aaa      	ldr	r2, [pc, #680]	; (8000aa0 <main+0x300>)
 80007f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	4611      	mov	r1, r2
 80007fe:	8019      	strh	r1, [r3, #0]
 8000800:	3302      	adds	r3, #2
 8000802:	0c12      	lsrs	r2, r2, #16
 8000804:	701a      	strb	r2, [r3, #0]
	uint8_t ack[3] = { 'A', 'C', '\n' };
 8000806:	4aa7      	ldr	r2, [pc, #668]	; (8000aa4 <main+0x304>)
 8000808:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	4611      	mov	r1, r2
 8000810:	8019      	strh	r1, [r3, #0]
 8000812:	3302      	adds	r3, #2
 8000814:	0c12      	lsrs	r2, r2, #16
 8000816:	701a      	strb	r2, [r3, #0]
	uint8_t errorMsg[3] = { 'E', 'R', '\n' };
 8000818:	4aa3      	ldr	r2, [pc, #652]	; (8000aa8 <main+0x308>)
 800081a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	4611      	mov	r1, r2
 8000822:	8019      	strh	r1, [r3, #0]
 8000824:	3302      	adds	r3, #2
 8000826:	0c12      	lsrs	r2, r2, #16
 8000828:	701a      	strb	r2, [r3, #0]

	char initTx[] = "11111111111111111111"; //twenty 1s
 800082a:	4ba0      	ldr	r3, [pc, #640]	; (8000aac <main+0x30c>)
 800082c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000830:	461d      	mov	r5, r3
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	e895 0003 	ldmia.w	r5, {r0, r1}
 800083a:	6020      	str	r0, [r4, #0]
 800083c:	3404      	adds	r4, #4
 800083e:	7021      	strb	r1, [r4, #0]

	char *initTxPtr = initTx;
 8000840:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	uint8_t CDCtx[50] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
 8000848:	4a99      	ldr	r2, [pc, #612]	; (8000ab0 <main+0x310>)
 800084a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800084e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000850:	c303      	stmia	r3!, {r0, r1}
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	f107 037d 	add.w	r3, r7, #125	; 0x7d
 8000858:	2229      	movs	r2, #41	; 0x29
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f007 fdf1 	bl	8008444 <memset>

	char CDCrx[100];

	CDCrx[0] = 'a';
 8000862:	2361      	movs	r3, #97	; 0x61
 8000864:	743b      	strb	r3, [r7, #16]

	char *CDCrxPtr1 = &CDCrx[2];
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	3302      	adds	r3, #2
 800086c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	uint32_t x = -99;
 8000870:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000874:	60fb      	str	r3, [r7, #12]
	int rpm = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 800087c:	e00a      	b.n	8000894 <main+0xf4>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS((uint8_t*) CDCrx, &x);
 800087e:	f107 020c 	add.w	r2, r7, #12
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f007 f93d 	bl	8007b08 <CDC_Receive_FS>
		HAL_Delay(10);
 800088e:	200a      	movs	r0, #10
 8000890:	f000 ff96 	bl	80017c0 <HAL_Delay>
	while (CDCrx[0] != 'i')
 8000894:	7c3b      	ldrb	r3, [r7, #16]
 8000896:	2b69      	cmp	r3, #105	; 0x69
 8000898:	d1f1      	bne.n	800087e <main+0xde>
	}
	CDC_Transmit_FS((uint8_t*) initTxPtr, 18);
 800089a:	2112      	movs	r1, #18
 800089c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80008a0:	f007 f946 	bl	8007b30 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Receive_FS(CDCrx, &x);
 80008a4:	f107 020c 	add.w	r2, r7, #12
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f007 f92a 	bl	8007b08 <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2102      	movs	r1, #2
 80008b8:	487e      	ldr	r0, [pc, #504]	; (8000ab4 <main+0x314>)
 80008ba:	f001 fdcb 	bl	8002454 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 80008be:	2028      	movs	r0, #40	; 0x28
 80008c0:	f000 ff7e 	bl	80017c0 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	487a      	ldr	r0, [pc, #488]	; (8000ab4 <main+0x314>)
 80008ca:	f001 fdc3 	bl	8002454 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f000 ff76 	bl	80017c0 <HAL_Delay>

		if (CDCrx[0] == 'M')
 80008d4:	7c3b      	ldrb	r3, [r7, #16]
 80008d6:	2b4d      	cmp	r3, #77	; 0x4d
 80008d8:	d143      	bne.n	8000962 <main+0x1c2>
		{
			if (CDCrx[1] == '3')
 80008da:	7c7b      	ldrb	r3, [r7, #17]
 80008dc:	2b33      	cmp	r3, #51	; 0x33
 80008de:	d11f      	bne.n	8000920 <main+0x180>
			{
				CDC_Transmit_FS(ack, 3);
 80008e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008e4:	2103      	movs	r1, #3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f007 f922 	bl	8007b30 <CDC_Transmit_FS>

				//send the cmd to turn on the spindle
				status = H100spindleFWD(&huart3);
 80008ec:	4872      	ldr	r0, [pc, #456]	; (8000ab8 <main+0x318>)
 80008ee:	f7ff fe41 	bl	8000574 <H100spindleFWD>
 80008f2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

				if (status != NO_ERROR)
 80008f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <main+0x16c>
				{
					CDC_Transmit_FS(errorMsg, 3);
 80008fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000902:	2103      	movs	r1, #3
 8000904:	4618      	mov	r0, r3
 8000906:	f007 f913 	bl	8007b30 <CDC_Transmit_FS>
 800090a:	e005      	b.n	8000918 <main+0x178>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 800090c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000910:	2103      	movs	r1, #3
 8000912:	4618      	mov	r0, r3
 8000914:	f007 f90c 	bl	8007b30 <CDC_Transmit_FS>
				}

				HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f000 ff51 	bl	80017c0 <HAL_Delay>
 800091e:	e0b7      	b.n	8000a90 <main+0x2f0>

			}
			else if (CDCrx[1] == '5')
 8000920:	7c7b      	ldrb	r3, [r7, #17]
 8000922:	2b35      	cmp	r3, #53	; 0x35
 8000924:	f040 80b4 	bne.w	8000a90 <main+0x2f0>
			{
				CDC_Transmit_FS(ack, 3);
 8000928:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800092c:	2103      	movs	r1, #3
 800092e:	4618      	mov	r0, r3
 8000930:	f007 f8fe 	bl	8007b30 <CDC_Transmit_FS>

				if (H100spindleOFF(&huart3) != NO_ERROR)
 8000934:	4860      	ldr	r0, [pc, #384]	; (8000ab8 <main+0x318>)
 8000936:	f7ff fe32 	bl	800059e <H100spindleOFF>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <main+0x1ae>
				{
					CDC_Transmit_FS(errorMsg, 3);
 8000940:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000944:	2103      	movs	r1, #3
 8000946:	4618      	mov	r0, r3
 8000948:	f007 f8f2 	bl	8007b30 <CDC_Transmit_FS>
 800094c:	e005      	b.n	800095a <main+0x1ba>
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 800094e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000952:	2103      	movs	r1, #3
 8000954:	4618      	mov	r0, r3
 8000956:	f007 f8eb 	bl	8007b30 <CDC_Transmit_FS>
				}
				HAL_Delay(10);
 800095a:	200a      	movs	r0, #10
 800095c:	f000 ff30 	bl	80017c0 <HAL_Delay>
 8000960:	e096      	b.n	8000a90 <main+0x2f0>

			}

		}
		else if (CDCrx[0] == 'S')
 8000962:	7c3b      	ldrb	r3, [r7, #16]
 8000964:	2b53      	cmp	r3, #83	; 0x53
 8000966:	d12b      	bne.n	80009c0 <main+0x220>
		{
			CDC_Transmit_FS(ack, 3);
 8000968:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800096c:	2103      	movs	r1, #3
 800096e:	4618      	mov	r0, r3
 8000970:	f007 f8de 	bl	8007b30 <CDC_Transmit_FS>

			CDCrx[7] = (uint8_t) NULL;
 8000974:	2300      	movs	r3, #0
 8000976:	75fb      	strb	r3, [r7, #23]
			//rounddown ok
			rpm = atoi(CDCrxPtr1) / 3;
 8000978:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800097c:	f007 fd34 	bl	80083e8 <atoi>
 8000980:	4603      	mov	r3, r0
 8000982:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <main+0x31c>)
 8000984:	fb82 1203 	smull	r1, r2, r2, r3
 8000988:	17db      	asrs	r3, r3, #31
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

			//if message fails, send error message
			if (setFreq(rpm, &huart3))
 8000990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000994:	b29b      	uxth	r3, r3
 8000996:	4948      	ldr	r1, [pc, #288]	; (8000ab8 <main+0x318>)
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fb43 	bl	8001024 <setFreq>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <main+0x212>
			{
				CDC_Transmit_FS(errorMsg, 3);
 80009a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80009a8:	2103      	movs	r1, #3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f007 f8c0 	bl	8007b30 <CDC_Transmit_FS>
 80009b0:	e06e      	b.n	8000a90 <main+0x2f0>
			}
			else
			{
				CDC_Transmit_FS(ssStat, 3);
 80009b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f007 f8b9 	bl	8007b30 <CDC_Transmit_FS>
 80009be:	e067      	b.n	8000a90 <main+0x2f0>
			}

		}
		else if (CDCrx[0] == 'R')
 80009c0:	7c3b      	ldrb	r3, [r7, #16]
 80009c2:	2b52      	cmp	r3, #82	; 0x52
 80009c4:	d14b      	bne.n	8000a5e <main+0x2be>
		{
			CDC_Transmit_FS(ack, 3);
 80009c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009ca:	2103      	movs	r1, #3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f007 f8af 	bl	8007b30 <CDC_Transmit_FS>
			uint16_t spindleI;
			uint16_t spindleRPM;

			//if no errrors set vars

			switch (masterRd(&huart3, &spindle0))
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4619      	mov	r1, r3
 80009d6:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <main+0x318>)
 80009d8:	f000 fb8e 	bl	80010f8 <masterRd>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d01a      	beq.n	8000a18 <main+0x278>
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	dc22      	bgt.n	8000a2c <main+0x28c>
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <main+0x250>
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d00b      	beq.n	8000a06 <main+0x266>
 80009ee:	e01d      	b.n	8000a2c <main+0x28c>
			{
			case 0:
//				spindleI   = spindle0.current;
//				spindleRPM = spindle0.rpm;

				spindleI = altGetI();
 80009f0:	f000 fc28 	bl	8001244 <altGetI>
 80009f4:	4603      	mov	r3, r0
 80009f6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				spindleRPM = altGetRPM();
 80009fa:	f000 fc2f 	bl	800125c <altGetRPM>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				break;
 8000a04:	e01b      	b.n	8000a3e <main+0x29e>
			case 3:
				//HAL_TIMEOUT
				spindleI = 777;
 8000a06:	f240 3309 	movw	r3, #777	; 0x309
 8000a0a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				spindleRPM = 44666;
 8000a0e:	f64a 637a 	movw	r3, #44666	; 0xae7a
 8000a12:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				break;
 8000a16:	e012      	b.n	8000a3e <main+0x29e>
			case 4:
				//CRC failed
				spindleI = 888;
 8000a18:	f44f 735e 	mov.w	r3, #888	; 0x378
 8000a1c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				spindleRPM = getRxCRC();
 8000a20:	f000 fc28 	bl	8001274 <getRxCRC>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				break;
 8000a2a:	e008      	b.n	8000a3e <main+0x29e>
			default:
				spindleI = 999;
 8000a2c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000a30:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				spindleRPM = 44444;
 8000a34:	f64a 539c 	movw	r3, #44444	; 0xad9c
 8000a38:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
				break;
 8000a3c:	bf00      	nop
			}

			//11 bytes long
			sprintf(CDCtx, "R%05d,%03d\n", spindleRPM, spindleI);
 8000a3e:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8000a42:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000a46:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000a4a:	491d      	ldr	r1, [pc, #116]	; (8000ac0 <main+0x320>)
 8000a4c:	f007 fd02 	bl	8008454 <siprintf>

			CDC_Transmit_FS(CDCtx, 11);
 8000a50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a54:	210b      	movs	r1, #11
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 f86a 	bl	8007b30 <CDC_Transmit_FS>
 8000a5c:	e018      	b.n	8000a90 <main+0x2f0>

			//delay needed since CDC tx is non blocking and OS is weird
			//HAL_Delay(20);
			//CDC_Transmit_FS(getCheck(), 11);
		}
		else if (CDCrx[0] == 'H') {
 8000a5e:	7c3b      	ldrb	r3, [r7, #16]
 8000a60:	2b48      	cmp	r3, #72	; 0x48
 8000a62:	d110      	bne.n	8000a86 <main+0x2e6>
			if (CDCrx[1] == '3') {
 8000a64:	7c7b      	ldrb	r3, [r7, #17]
 8000a66:	2b33      	cmp	r3, #51	; 0x33
 8000a68:	d112      	bne.n	8000a90 <main+0x2f0>
				if (CDCrx[2] == '1') {
 8000a6a:	7cbb      	ldrb	r3, [r7, #18]
 8000a6c:	2b31      	cmp	r3, #49	; 0x31
 8000a6e:	d103      	bne.n	8000a78 <main+0x2d8>
					unlock_Z_axis(&huart3);
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <main+0x318>)
 8000a72:	f7ff fe6d 	bl	8000750 <unlock_Z_axis>
 8000a76:	e00b      	b.n	8000a90 <main+0x2f0>
				}
				else if (CDCrx[2] == '0') {
 8000a78:	7cbb      	ldrb	r3, [r7, #18]
 8000a7a:	2b30      	cmp	r3, #48	; 0x30
 8000a7c:	d108      	bne.n	8000a90 <main+0x2f0>
					lock_Z_axis(&huart3);
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <main+0x318>)
 8000a80:	f7ff fe7a 	bl	8000778 <lock_Z_axis>
 8000a84:	e004      	b.n	8000a90 <main+0x2f0>

			}


		}
		else if (CDCrx[0] == 'q') {
 8000a86:	7c3b      	ldrb	r3, [r7, #16]
 8000a88:	2b71      	cmp	r3, #113	; 0x71
 8000a8a:	d101      	bne.n	8000a90 <main+0x2f0>
			//reboot
			HAL_NVIC_SystemReset();
 8000a8c:	f001 fb35 	bl	80020fa <HAL_NVIC_SystemReset>
		}
		//reset buffer
		CDCrx[0] = 'a';
 8000a90:	2361      	movs	r3, #97	; 0x61
 8000a92:	743b      	strb	r3, [r7, #16]
		CDC_Receive_FS(CDCrx, &x);
 8000a94:	e706      	b.n	80008a4 <main+0x104>
 8000a96:	bf00      	nop
 8000a98:	08008e6c 	.word	0x08008e6c
 8000a9c:	08008e70 	.word	0x08008e70
 8000aa0:	08008e74 	.word	0x08008e74
 8000aa4:	08008e78 	.word	0x08008e78
 8000aa8:	08008e7c 	.word	0x08008e7c
 8000aac:	08008e80 	.word	0x08008e80
 8000ab0:	08008e98 	.word	0x08008e98
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	2000034c 	.word	0x2000034c
 8000abc:	55555556 	.word	0x55555556
 8000ac0:	08008e60 	.word	0x08008e60

08000ac4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f007 fcb6 	bl	8008444 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <SystemClock_Config+0xcc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <SystemClock_Config+0xcc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <SystemClock_Config+0xcc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000b38:	23a8      	movs	r3, #168	; 0xa8
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b40:	2307      	movs	r3, #7
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe1f 	bl	800378c <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000b54:	f000 f9ee 	bl	8000f34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2105      	movs	r1, #5
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f880 	bl	8003c7c <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000b82:	f000 f9d7 	bl	8000f34 <Error_Handler>
	}
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_ADC2_Init+0x9c>)
 8000bae:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb6:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <MX_ADC2_Init+0xa0>)
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000bfa:	f000 fe05 	bl	8001808 <HAL_ADC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8000c04:	f000 f996 	bl	8000f34 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_ADC2_Init+0x98>)
 8000c1a:	f000 fe39 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 8000c24:	f000 f986 	bl	8000f34 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000023c 	.word	0x2000023c
 8000c34:	40012100 	.word	0x40012100
 8000c38:	0f000001 	.word	0x0f000001

08000c3c <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c50:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <MX_ADC3_Init+0x9c>)
 8000c52:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c5a:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_ADC3_Init+0xa0>)
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000c9e:	f000 fdb3 	bl	8001808 <HAL_ADC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8000ca8:	f000 f944 	bl	8000f34 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000cac:	2303      	movs	r3, #3
 8000cae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cb8:	463b      	mov	r3, r7
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_ADC3_Init+0x98>)
 8000cbe:	f000 fde7 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8000cc8:	f000 f934 	bl	8000f34 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000284 	.word	0x20000284
 8000cd8:	40012200 	.word	0x40012200
 8000cdc:	0f000001 	.word	0x0f000001

08000ce0 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <MX_CAN2_Init+0x64>)
 8000ce8:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_CAN2_Init+0x60>)
 8000d2e:	f000 ffcd 	bl	8001ccc <HAL_CAN_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8000d38:	f000 f8fc 	bl	8000f34 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200002cc 	.word	0x200002cc
 8000d44:	40006800 	.word	0x40006800

08000d48 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <MX_SPI1_Init+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d58:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d78:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <MX_SPI1_Init+0x64>)
 8000d9a:	f003 f98d 	bl	80040b8 <HAL_SPI_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000da4:	f000 f8c6 	bl	8000f34 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002f4 	.word	0x200002f4
 8000db0:	40013000 	.word	0x40013000

08000db4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <MX_USART3_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 19200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000dc4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dec:	f003 f9ed 	bl	80041ca <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000df6:	f000 f89d 	bl	8000f34 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000034c 	.word	0x2000034c
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a38      	ldr	r2, [pc, #224]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a23      	ldr	r2, [pc, #140]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2102      	movs	r1, #2
 8000eae:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_GPIO_Init+0x120>)
 8000eb0:	f001 fad0 	bl	8002454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_GPIO_Init+0x124>)
 8000eba:	f001 facb 	bl	8002454 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	211f      	movs	r1, #31
 8000ec2:	481b      	ldr	r0, [pc, #108]	; (8000f30 <MX_GPIO_Init+0x128>)
 8000ec4:	f001 fac6 	bl	8002454 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4812      	ldr	r0, [pc, #72]	; (8000f28 <MX_GPIO_Init+0x120>)
 8000ee0:	f001 f91c 	bl	800211c <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_GPIO_Init+0x124>)
 8000efc:	f001 f90e 	bl	800211c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000f00:	231f      	movs	r3, #31
 8000f02:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_GPIO_Init+0x128>)
 8000f18:	f001 f900 	bl	800211c <HAL_GPIO_Init>

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020c00 	.word	0x40020c00

08000f34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <sendData8>:

uint16_t packetCRC;
uint16_t rxCRC;

void sendData8(UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

	while(HAL_UART_Receive(huart, rx485, 1, 1) != HAL_TIMEOUT)
 8000f48:	bf00      	nop
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	490f      	ldr	r1, [pc, #60]	; (8000f8c <sendData8+0x4c>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f003 fa19 	bl	8004388 <HAL_UART_Receive>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d1f6      	bne.n	8000f4a <sendData8+0xa>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 9600 baud or 1.2KB/s --- 8 bytes takes ~10ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2102      	movs	r1, #2
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <sendData8+0x50>)
 8000f62:	f001 fa77 	bl	8002454 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f66:	2005      	movs	r0, #5
 8000f68:	f000 fc2a 	bl	80017c0 <HAL_Delay>

	//blocking transmit 15ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 15);
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	2208      	movs	r2, #8
 8000f70:	4908      	ldr	r1, [pc, #32]	; (8000f94 <sendData8+0x54>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f003 f976 	bl	8004264 <HAL_UART_Transmit>
	//HAL_Delay(5);
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <sendData8+0x50>)
 8000f7e:	f001 fa69 	bl	8002454 <HAL_GPIO_WritePin>

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	40020400 	.word	0x40020400
 8000f94:	20000000 	.word	0x20000000

08000f98 <appendCRC8>:


void appendCRC8()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000f9e:	2106      	movs	r1, #6
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <appendCRC8+0x38>)
 8000fa2:	f000 f871 	bl	8001088 <crc_chk_value>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000fac:	1cbb      	adds	r3, r7, #2
 8000fae:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781a      	ldrb	r2, [r3, #0]
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <appendCRC8+0x38>)
 8000fb6:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <appendCRC8+0x38>)
 8000fc4:	71da      	strb	r2, [r3, #7]
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <checkEcho8>:
//TODO
//Check to see if we need to receive 10 bytes or not

//returns 1 if fail, 0 if success
int checkEcho8(UART_HandleTypeDef *huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, rx485, 8, 50);
 8000fdc:	2332      	movs	r3, #50	; 0x32
 8000fde:	2208      	movs	r2, #8
 8000fe0:	490e      	ldr	r1, [pc, #56]	; (800101c <checkEcho8+0x48>)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f003 f9d0 	bl	8004388 <HAL_UART_Receive>
	for (int i = 0; i < 8; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e00e      	b.n	800100c <checkEcho8+0x38>
	{
		if (wrMsg[i] != rx485[i])
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <checkEcho8+0x4c>)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	4909      	ldr	r1, [pc, #36]	; (800101c <checkEcho8+0x48>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	440b      	add	r3, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d001      	beq.n	8001006 <checkEcho8+0x32>
		{
			return 1;
 8001002:	2301      	movs	r3, #1
 8001004:	e006      	b.n	8001014 <checkEcho8+0x40>
	for (int i = 0; i < 8; i++)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3301      	adds	r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b07      	cmp	r3, #7
 8001010:	dded      	ble.n	8000fee <checkEcho8+0x1a>
		}
	}
	return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000008 	.word	0x20000008
 8001020:	20000000 	.word	0x20000000

08001024 <setFreq>:

	return checkEcho8(huart);
}

int setFreq(uint16_t freq, UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <setFreq+0x60>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <setFreq+0x60>)
 8001038:	2206      	movs	r2, #6
 800103a:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <setFreq+0x60>)
 800103e:	2210      	movs	r2, #16
 8001040:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <setFreq+0x60>)
 8001044:	2202      	movs	r2, #2
 8001046:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <setFreq+0x60>)
 8001052:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <setFreq+0x60>)
 800105a:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <setFreq+0x60>)
 800105e:	2200      	movs	r2, #0
 8001060:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <setFreq+0x60>)
 8001064:	2200      	movs	r2, #0
 8001066:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8001068:	f7ff ff96 	bl	8000f98 <appendCRC8>

	sendData8(huart);
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f7ff ff67 	bl	8000f40 <sendData8>

	return checkEcho8(huart);
 8001072:	6838      	ldr	r0, [r7, #0]
 8001074:	f7ff ffae 	bl	8000fd4 <checkEcho8>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8001094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001098:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 800109a:	e01f      	b.n	80010dc <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	4053      	eors	r3, r2
 80010aa:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	e011      	b.n	80010d6 <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	085b      	lsrs	r3, r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <crc_chk_value+0x6c>)
 80010c4:	4053      	eors	r3, r2
 80010c6:	81fb      	strh	r3, [r7, #14]
 80010c8:	e002      	b.n	80010d0 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	085b      	lsrs	r3, r3, #1
 80010ce:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b07      	cmp	r3, #7
 80010da:	ddea      	ble.n	80010b2 <crc_chk_value+0x2a>
	while (length--)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	70fa      	strb	r2, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1da      	bne.n	800109c <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 80010e6:	89fb      	ldrh	r3, [r7, #14]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	ffffa001 	.word	0xffffa001

080010f8 <masterRd>:
{
	return wrMsg;
}

int masterRd(UART_HandleTypeDef *huart, struct SpindleData *spindle0)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]

	wrMsg[0] = 0x01;
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <masterRd+0x134>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <masterRd+0x134>)
 800110a:	2203      	movs	r2, #3
 800110c:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 800110e:	4b47      	ldr	r3, [pc, #284]	; (800122c <masterRd+0x134>)
 8001110:	22d0      	movs	r2, #208	; 0xd0
 8001112:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <masterRd+0x134>)
 8001116:	2201      	movs	r2, #1
 8001118:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <masterRd+0x134>)
 800111c:	2200      	movs	r2, #0
 800111e:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <masterRd+0x134>)
 8001122:	2203      	movs	r2, #3
 8001124:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <masterRd+0x134>)
 8001128:	2200      	movs	r2, #0
 800112a:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <masterRd+0x134>)
 800112e:	2200      	movs	r2, #0
 8001130:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8001132:	f7ff ff31 	bl	8000f98 <appendCRC8>


	sendData8(huart);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff02 	bl	8000f40 <sendData8>

	//TODO check for rx errors
	if(HAL_UART_Receive(huart, rx485, 11, 200) == HAL_TIMEOUT)
 800113c:	23c8      	movs	r3, #200	; 0xc8
 800113e:	220b      	movs	r2, #11
 8001140:	493b      	ldr	r1, [pc, #236]	; (8001230 <masterRd+0x138>)
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f003 f920 	bl	8004388 <HAL_UART_Receive>
 8001148:	4603      	mov	r3, r0
 800114a:	2b03      	cmp	r3, #3
 800114c:	d101      	bne.n	8001152 <masterRd+0x5a>
	{
		return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e068      	b.n	8001224 <masterRd+0x12c>
	}

	rxCRC = crc_chk_value(rx485, 9);
 8001152:	2109      	movs	r1, #9
 8001154:	4836      	ldr	r0, [pc, #216]	; (8001230 <masterRd+0x138>)
 8001156:	f7ff ff97 	bl	8001088 <crc_chk_value>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <masterRd+0x13c>)
 8001160:	801a      	strh	r2, [r3, #0]


	//lmao its midnight and i realized endinenness is fuc ked
	packetCRC = (rx485[10] << 8) | rx485[9];
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <masterRd+0x138>)
 8001164:	7a9b      	ldrb	r3, [r3, #10]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <masterRd+0x138>)
 800116c:	7a5b      	ldrb	r3, [r3, #9]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <masterRd+0x140>)
 8001178:	801a      	strh	r2, [r3, #0]


	if (packetCRC != rxCRC)
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <masterRd+0x140>)
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <masterRd+0x13c>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <masterRd+0x92>
	{
		//error code 4 - CRC failed
		return 4;
 8001186:	2304      	movs	r3, #4
 8001188:	e04c      	b.n	8001224 <masterRd+0x12c>

//	spindle0->current = rx485[3];
//	spindle0->current <<= 8;
//	spindle0->current |= rx485[4];

	spindle0->current = (rx485[3] << 8) | rx485[4];
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <masterRd+0x138>)
 800118c:	78db      	ldrb	r3, [r3, #3]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <masterRd+0x138>)
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21b      	sxth	r3, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	801a      	strh	r2, [r3, #0]

	//TODO delete whichever method doesnt work
	altI = (rx485[3] << 8) | rx485[4];
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <masterRd+0x138>)
 80011a4:	78db      	ldrb	r3, [r3, #3]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <masterRd+0x138>)
 80011ac:	791b      	ldrb	r3, [r3, #4]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <masterRd+0x144>)
 80011b8:	801a      	strh	r2, [r3, #0]

	spindle0->voltage = rx485[5];
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <masterRd+0x138>)
 80011bc:	795b      	ldrb	r3, [r3, #5]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	805a      	strh	r2, [r3, #2]
	spindle0->voltage <<= 8;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	885b      	ldrh	r3, [r3, #2]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	805a      	strh	r2, [r3, #2]
	spindle0->voltage |= rx485[6];
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	885a      	ldrh	r2, [r3, #2]
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <masterRd+0x138>)
 80011d6:	799b      	ldrb	r3, [r3, #6]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	805a      	strh	r2, [r3, #2]

	spindle0->rpm = rx485[7];
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <masterRd+0x138>)
 80011e4:	79db      	ldrb	r3, [r3, #7]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	809a      	strh	r2, [r3, #4]
	spindle0->rpm <<= 8;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	809a      	strh	r2, [r3, #4]
	spindle0->rpm |= rx485[8];
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	889a      	ldrh	r2, [r3, #4]
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <masterRd+0x138>)
 80011fe:	7a1b      	ldrb	r3, [r3, #8]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b29a      	uxth	r2, r3
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	809a      	strh	r2, [r3, #4]

	//TODO delete whichever method doesnt work
	altRPM = (rx485[7] << 8) | rx485[8];
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <masterRd+0x138>)
 800120c:	79db      	ldrb	r3, [r3, #7]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <masterRd+0x138>)
 8001214:	7a1b      	ldrb	r3, [r3, #8]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21b      	sxth	r3, r3
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <masterRd+0x148>)
 8001220:	801a      	strh	r2, [r3, #0]
	return 0;
 8001222:	2300      	movs	r3, #0

}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000396 	.word	0x20000396
 8001238:	20000394 	.word	0x20000394
 800123c:	20000392 	.word	0x20000392
 8001240:	20000390 	.word	0x20000390

08001244 <altGetI>:


uint16_t altGetI()
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return altI;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <altGetI+0x14>)
 800124a:	881b      	ldrh	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000392 	.word	0x20000392

0800125c <altGetRPM>:
uint16_t altGetRPM()
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	return altRPM;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <altGetRPM+0x14>)
 8001262:	881b      	ldrh	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000390 	.word	0x20000390

08001274 <getRxCRC>:
{
	return packetCRC;
}

uint16_t getRxCRC()
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	return rxCRC;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <getRxCRC+0x14>)
 800127a:	881b      	ldrh	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000396 	.word	0x20000396

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_MspInit+0x4c>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_MspInit+0x4c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <HAL_ADC_MspInit+0xd8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d128      	bne.n	8001350 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001336:	2306      	movs	r3, #6
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	481c      	ldr	r0, [pc, #112]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 800134a:	f000 fee7 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800134e:	e02c      	b.n	80013aa <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <HAL_ADC_MspInit+0xe4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001392:	2308      	movs	r3, #8
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 80013a6:	f000 feb9 	bl	800211c <HAL_GPIO_Init>
}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012100 	.word	0x40012100
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40012200 	.word	0x40012200

080013c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_CAN_MspInit+0xa0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d13a      	bne.n	800145c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 80013f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_CAN_MspInit+0xa4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800143a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800144c:	2309      	movs	r3, #9
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_CAN_MspInit+0xa8>)
 8001458:	f000 fe60 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40006800 	.word	0x40006800
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12b      	bne.n	80014ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 800149c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ca:	23f0      	movs	r3, #240	; 0xf0
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014da:	2305      	movs	r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_SPI_MspInit+0x8c>)
 80014e6:	f000 fe19 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12c      	bne.n	800157c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800155a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800156c:	2307      	movs	r3, #7
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0x8c>)
 8001578:	f000 fdd0 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40004800 	.word	0x40004800
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <NMI_Handler+0x4>

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <MemManage_Handler+0x4>

080015a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <BusFault_Handler+0x4>

080015a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <UsageFault_Handler+0x4>

080015ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015dc:	f000 f8d0 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <OTG_FS_IRQHandler+0x10>)
 80015ea:	f001 f89c 	bl	8002726 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20001874 	.word	0x20001874

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f006 fee2 	bl	80083f0 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20020000 	.word	0x20020000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000398 	.word	0x20000398
 8001660:	20001eb0 	.word	0x20001eb0

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f006 fea1 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff f871 	bl	80007a0 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80016cc:	08009070 	.word	0x08009070
  ldr r2, =_sbss
 80016d0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80016d4:	20001eac 	.word	0x20001eac

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 fcc3 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fdbc 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fcdf 	bl	8002102 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 fca3 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000003c 	.word	0x2000003c
 8001778:	20000044 	.word	0x20000044
 800177c:	20000040 	.word	0x20000040

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000044 	.word	0x20000044
 80017a4:	2000039c 	.word	0x2000039c

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000039c 	.word	0x2000039c

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000044 	.word	0x20000044

08001808 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e033      	b.n	8001886 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fd58 	bl	80012dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800184e:	f023 0302 	bic.w	r3, r3, #2
 8001852:	f043 0202 	orr.w	r2, r3, #2
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f93a 	bl	8001ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
 8001876:	e001      	b.n	800187c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e105      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x228>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d925      	bls.n	8001908 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	3b1e      	subs	r3, #30
 80018d2:	2207      	movs	r2, #7
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43da      	mvns	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	400a      	ands	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4403      	add	r3, r0
 80018fa:	3b1e      	subs	r3, #30
 80018fc:	409a      	lsls	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e022      	b.n	800194e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6919      	ldr	r1, [r3, #16]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	2207      	movs	r2, #7
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	400a      	ands	r2, r1
 800192a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6919      	ldr	r1, [r3, #16]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	4618      	mov	r0, r3
 800193e:	4603      	mov	r3, r0
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4403      	add	r3, r0
 8001944:	409a      	lsls	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d824      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b05      	subs	r3, #5
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b05      	subs	r3, #5
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34
 800199e:	e04c      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d824      	bhi.n	80019f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b23      	subs	r3, #35	; 0x23
 80019ba:	221f      	movs	r2, #31
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b23      	subs	r3, #35	; 0x23
 80019e4:	fa00 f203 	lsl.w	r2, r0, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
 80019f0:	e023      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b41      	subs	r3, #65	; 0x41
 8001a04:	221f      	movs	r2, #31
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b41      	subs	r3, #65	; 0x41
 8001a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_ADC_ConfigChannel+0x234>)
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <HAL_ADC_ConfigChannel+0x238>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d109      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_ADC_ConfigChannel+0x238>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d123      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d003      	beq.n	8001a76 <HAL_ADC_ConfigChannel+0x1e6>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b11      	cmp	r3, #17
 8001a74:	d11b      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d111      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_ADC_ConfigChannel+0x23c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_ADC_ConfigChannel+0x240>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9a      	lsrs	r2, r3, #18
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	40012000 	.word	0x40012000
 8001acc:	2000003c 	.word	0x2000003c
 8001ad0:	431bde83 	.word	0x431bde83

08001ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001adc:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <ADC_Init+0x1f0>)
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6899      	ldr	r1, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <ADC_Init+0x1f4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6899      	ldr	r1, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	e00f      	b.n	8001bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0202 	bic.w	r2, r2, #2
 8001be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
 8001bec:	005a      	lsls	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01b      	beq.n	8001c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6859      	ldr	r1, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	035a      	lsls	r2, r3, #13
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e007      	b.n	8001c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	051a      	lsls	r2, r3, #20
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	029a      	lsls	r2, r3, #10
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40012300 	.word	0x40012300
 8001cc8:	0f000001 	.word	0x0f000001

08001ccc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0ed      	b.n	8001eba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fb6a 	bl	80013c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0202 	bic.w	r2, r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d00:	f7ff fd52 	bl	80017a8 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d06:	e012      	b.n	8001d2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d08:	f7ff fd4e 	bl	80017a8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b0a      	cmp	r3, #10
 8001d14:	d90b      	bls.n	8001d2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2205      	movs	r2, #5
 8001d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0c5      	b.n	8001eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e5      	bne.n	8001d08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff fd2c 	bl	80017a8 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff fd28 	bl	80017a8 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e09f      	b.n	8001eba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0e5      	beq.n	8001d54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7e5b      	ldrb	r3, [r3, #25]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e007      	b.n	8001ddc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e9b      	ldrb	r3, [r3, #26]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d108      	bne.n	8001df6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0220 	bic.w	r2, r2, #32
 8001e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7edb      	ldrb	r3, [r3, #27]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0210 	bic.w	r2, r2, #16
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0210 	orr.w	r2, r2, #16
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7f1b      	ldrb	r3, [r3, #28]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0208 	orr.w	r2, r2, #8
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e007      	b.n	8001e5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0208 	bic.w	r2, r2, #8
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7f5b      	ldrb	r3, [r3, #29]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d108      	bne.n	8001e74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0204 	orr.w	r2, r2, #4
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e007      	b.n	8001e84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	ea42 0103 	orr.w	r1, r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	; 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002024:	f3bf 8f4f 	dsb	sy
}
 8002028:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <__NVIC_SystemReset+0x24>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002032:	4904      	ldr	r1, [pc, #16]	; (8002044 <__NVIC_SystemReset+0x24>)
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_SystemReset+0x28>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800203a:	f3bf 8f4f 	dsb	sy
}
 800203e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <__NVIC_SystemReset+0x20>
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	05fa0004 	.word	0x05fa0004

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f7ff ff78 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff13 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff28 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff78 	bl	8001fb8 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff47 	bl	8001f64 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff1b 	bl	8001f28 <__NVIC_EnableIRQ>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80020fe:	f7ff ff8f 	bl	8002020 <__NVIC_SystemReset>

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff9e 	bl	800204c <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e16b      	b.n	8002410 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002138:	2201      	movs	r2, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	f040 815a 	bne.w	800240a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d005      	beq.n	800216e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	2b02      	cmp	r3, #2
 800216c:	d130      	bne.n	80021d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 0201 	and.w	r2, r3, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d017      	beq.n	800220c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d123      	bne.n	8002260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	08da      	lsrs	r2, r3, #3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3208      	adds	r2, #8
 8002220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0203 	and.w	r2, r3, #3
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80b4 	beq.w	800240a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b60      	ldr	r3, [pc, #384]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_GPIO_Init+0x30c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <HAL_GPIO_Init+0x310>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_GPIO_Init+0x314>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02b      	beq.n	8002342 <HAL_GPIO_Init+0x226>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_GPIO_Init+0x318>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d025      	beq.n	800233e <HAL_GPIO_Init+0x222>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a50      	ldr	r2, [pc, #320]	; (8002438 <HAL_GPIO_Init+0x31c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <HAL_GPIO_Init+0x21e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4f      	ldr	r2, [pc, #316]	; (800243c <HAL_GPIO_Init+0x320>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x21a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_GPIO_Init+0x324>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x216>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <HAL_GPIO_Init+0x328>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x212>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_GPIO_Init+0x32c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x20e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <HAL_GPIO_Init+0x330>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x20a>
 8002322:	2307      	movs	r3, #7
 8002324:	e00e      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002326:	2308      	movs	r3, #8
 8002328:	e00c      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800232a:	2306      	movs	r3, #6
 800232c:	e00a      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800232e:	2305      	movs	r3, #5
 8002330:	e008      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002332:	2304      	movs	r3, #4
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002336:	2303      	movs	r3, #3
 8002338:	e004      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800233a:	2302      	movs	r3, #2
 800233c:	e002      	b.n	8002344 <HAL_GPIO_Init+0x228>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x228>
 8002342:	2300      	movs	r3, #0
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f002 0203 	and.w	r2, r2, #3
 800234a:	0092      	lsls	r2, r2, #2
 800234c:	4093      	lsls	r3, r2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002354:	4935      	ldr	r1, [pc, #212]	; (800242c <HAL_GPIO_Init+0x310>)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002386:	4a32      	ldr	r2, [pc, #200]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800238c:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_GPIO_Init+0x334>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_GPIO_Init+0x334>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_GPIO_Init+0x334>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b0f      	cmp	r3, #15
 8002414:	f67f ae90 	bls.w	8002138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40013800 	.word	0x40013800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020400 	.word	0x40020400
 8002438:	40020800 	.word	0x40020800
 800243c:	40020c00 	.word	0x40020c00
 8002440:	40021000 	.word	0x40021000
 8002444:	40021400 	.word	0x40021400
 8002448:	40021800 	.word	0x40021800
 800244c:	40021c00 	.word	0x40021c00
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
 8002460:	4613      	mov	r3, r2
 8002462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002470:	e003      	b.n	800247a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	041a      	lsls	r2, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	619a      	str	r2, [r3, #24]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002488:	b08f      	sub	sp, #60	; 0x3c
 800248a:	af0a      	add	r7, sp, #40	; 0x28
 800248c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e10f      	b.n	80026b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f005 fc84 	bl	8007dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2203      	movs	r2, #3
 80024bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fbcb 	bl	8004c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	687e      	ldr	r6, [r7, #4]
 80024e4:	466d      	mov	r5, sp
 80024e6:	f106 0410 	add.w	r4, r6, #16
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024fa:	1d33      	adds	r3, r6, #4
 80024fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fe:	6838      	ldr	r0, [r7, #0]
 8002500:	f002 faa2 	bl	8004a48 <USB_CoreInit>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e0d0      	b.n	80026b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fbb9 	bl	8004c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e04a      	b.n	80025be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333d      	adds	r3, #61	; 0x3d
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	333c      	adds	r3, #60	; 0x3c
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	b298      	uxth	r0, r3
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3342      	adds	r3, #66	; 0x42
 8002564:	4602      	mov	r2, r0
 8002566:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	333f      	adds	r3, #63	; 0x3f
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800257c:	7bfa      	ldrb	r2, [r7, #15]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3344      	adds	r3, #68	; 0x44
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3348      	adds	r3, #72	; 0x48
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	3350      	adds	r3, #80	; 0x50
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3af      	bcc.n	8002528 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e044      	b.n	8002658 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3b5      	bcc.n	80025ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	687e      	ldr	r6, [r7, #4]
 800266a:	466d      	mov	r5, sp
 800266c:	f106 0410 	add.w	r4, r6, #16
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002678:	e894 0003 	ldmia.w	r4, {r0, r1}
 800267c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002680:	1d33      	adds	r3, r6, #4
 8002682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002684:	6838      	ldr	r0, [r7, #0]
 8002686:	f002 fb2f 	bl	8004ce8 <USB_DevInit>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e00d      	b.n	80026b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fb77 	bl	8005da4 <USB_DevDisconnect>

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_PCD_Start+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e020      	b.n	800271e <HAL_PCD_Start+0x5e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d109      	bne.n	8002700 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d005      	beq.n	8002700 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 faa3 	bl	8004c50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fb27 	bl	8005d62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b08d      	sub	sp, #52	; 0x34
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fbe5 	bl	8005f0c <USB_GetMode>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 839d 	bne.w	8002e84 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fb49 	bl	8005de6 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 8393 	beq.w	8002e82 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fb40 	bl	8005de6 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d107      	bne.n	8002780 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f002 0202 	and.w	r2, r2, #2
 800277e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f003 fb2e 	bl	8005de6 <USB_ReadInterrupts>
 800278a:	4603      	mov	r3, r0
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	d161      	bne.n	8002858 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0210 	bic.w	r2, r2, #16
 80027a2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	0c5b      	lsrs	r3, r3, #17
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d124      	bne.n	800281a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d035      	beq.n	8002848 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	6a38      	ldr	r0, [r7, #32]
 80027f0:	f003 f994 	bl	8005b1c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002800:	441a      	add	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002812:	441a      	add	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	e016      	b.n	8002848 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	0c5b      	lsrs	r3, r3, #17
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	2b06      	cmp	r3, #6
 8002824:	d110      	bne.n	8002848 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800282c:	2208      	movs	r2, #8
 800282e:	4619      	mov	r1, r3
 8002830:	6a38      	ldr	r0, [r7, #32]
 8002832:	f003 f973 	bl	8005b1c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002842:	441a      	add	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0210 	orr.w	r2, r2, #16
 8002856:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fac2 	bl	8005de6 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800286c:	d16e      	bne.n	800294c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fac8 	bl	8005e0c <USB_ReadDevAllOutEpInterrupt>
 800287c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800287e:	e062      	b.n	8002946 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d057      	beq.n	800293a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f003 faed 	bl	8005e74 <USB_ReadDevOutEPInterrupt>
 800289a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b2:	461a      	mov	r2, r3
 80028b4:	2301      	movs	r3, #1
 80028b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fdb0 	bl	8003420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	2308      	movs	r3, #8
 80028da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 feaa 	bl	8003638 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fa:	461a      	mov	r2, r3
 80028fc:	2310      	movs	r3, #16
 80028fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002916:	461a      	mov	r2, r3
 8002918:	2320      	movs	r3, #32
 800291a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002932:	461a      	mov	r2, r3
 8002934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002938:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d199      	bne.n	8002880 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fa48 	bl	8005de6 <USB_ReadInterrupts>
 8002956:	4603      	mov	r3, r0
 8002958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002960:	f040 80c0 	bne.w	8002ae4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fa69 	bl	8005e40 <USB_ReadDevAllInEpInterrupt>
 800296e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002974:	e0b2      	b.n	8002adc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a7 	beq.w	8002ad0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f003 fa8f 	bl	8005eb0 <USB_ReadDevInEPInterrupt>
 8002992:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d057      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	2201      	movs	r2, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69f9      	ldr	r1, [r7, #28]
 80029ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029be:	4013      	ands	r3, r2
 80029c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ce:	461a      	mov	r2, r3
 80029d0:	2301      	movs	r3, #1
 80029d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d132      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3348      	adds	r3, #72	; 0x48
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4403      	add	r3, r0
 80029fc:	3344      	adds	r3, #68	; 0x44
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4419      	add	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4403      	add	r3, r0
 8002a10:	3348      	adds	r3, #72	; 0x48
 8002a12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x31c>
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3350      	adds	r3, #80	; 0x50
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d108      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	f003 fa97 	bl	8005f70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f005 fa3a 	bl	8007ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a64:	461a      	mov	r2, r3
 8002a66:	2308      	movs	r3, #8
 8002a68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a80:	461a      	mov	r2, r3
 8002a82:	2310      	movs	r3, #16
 8002a84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2302      	movs	r3, #2
 8002abc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fc1b 	bl	8003306 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f af49 	bne.w	8002976 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f97c 	bl	8005de6 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af8:	d122      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d108      	bne.n	8002b2a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b20:	2100      	movs	r1, #0
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fe26 	bl	8003774 <HAL_PCDEx_LPM_Callback>
 8002b28:	e002      	b.n	8002b30 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f005 fa40 	bl	8007fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 f94e 	bl	8005de6 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b54:	d112      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f005 f9fc 	bl	8007f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b7a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 f930 	bl	8005de6 <USB_ReadInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	f040 80c7 	bne.w	8002d22 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2110      	movs	r1, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 f9fe 	bl	8004fb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb8:	e056      	b.n	8002c68 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bcc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	0151      	lsls	r1, r2, #5
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	440a      	add	r2, r1
 8002be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bec:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c32:	0151      	lsls	r1, r2, #5
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	440a      	add	r2, r1
 8002c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c52:	0151      	lsls	r1, r2, #5
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	440a      	add	r2, r1
 8002c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	3301      	adds	r3, #1
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d3a3      	bcc.n	8002bba <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9e:	f043 030b 	orr.w	r3, r3, #11
 8002ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb4:	f043 030b 	orr.w	r3, r3, #11
 8002cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cba:	e015      	b.n	8002ce8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce2:	f043 030b 	orr.w	r3, r3, #11
 8002ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f003 f92f 	bl	8005f70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 f85d 	bl	8005de6 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d36:	d124      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 f8f3 	bl	8005f28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 f993 	bl	8005072 <USB_GetDevSpeed>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681c      	ldr	r4, [r3, #0]
 8002d58:	f001 f97a 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	4620      	mov	r0, r4
 8002d68:	f001 fed0 	bl	8004b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f005 f8d0 	bl	8007f12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 f82d 	bl	8005de6 <USB_ReadInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d10a      	bne.n	8002dac <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f005 f8ad 	bl	8007ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f002 0208 	and.w	r2, r2, #8
 8002daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 f818 	bl	8005de6 <USB_ReadInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f005 f90f 	bl	8007ff0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fffd 	bl	8005de6 <USB_ReadInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002df6:	d10f      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f005 f8e2 	bl	8007fcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 ffe2 	bl	8005de6 <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d10a      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f005 f8f0 	bl	8008014 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 ffcc 	bl	8005de6 <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d115      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 f8e0 	bl	8008030 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e000      	b.n	8002e84 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e82:	bf00      	nop
    }
  }
}
 8002e84:	3734      	adds	r7, #52	; 0x34
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_PCD_SetAddress+0x1a>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e013      	b.n	8002ecc <HAL_PCD_SetAddress+0x42>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 ff2a 	bl	8005d16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	70fb      	strb	r3, [r7, #3]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	803b      	strh	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da0f      	bge.n	8002f1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	3338      	adds	r3, #56	; 0x38
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	705a      	strb	r2, [r3, #1]
 8002f18:	e00f      	b.n	8002f3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f46:	883a      	ldrh	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	78ba      	ldrb	r2, [r7, #2]
 8002f50:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f64:	78bb      	ldrb	r3, [r7, #2]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_PCD_EP_Open+0xaa>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e00e      	b.n	8002f9c <HAL_PCD_EP_Open+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 f895 	bl	80050bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0f      	bge.n	8002fd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3338      	adds	r3, #56	; 0x38
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00f      	b.n	8002ff8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_PCD_EP_Close+0x6e>
 800300e:	2302      	movs	r3, #2
 8003010:	e00e      	b.n	8003030 <HAL_PCD_EP_Close+0x8c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 f8d3 	bl	80051cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	f002 fbae 	bl	800580c <USB_EP0StartXfer>
 80030b0:	e008      	b.n	80030c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	f002 f960 	bl	8005384 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030f0:	681b      	ldr	r3, [r3, #0]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	460b      	mov	r3, r1
 800310c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3338      	adds	r3, #56	; 0x38
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	f002 fb4c 	bl	800580c <USB_EP0StartXfer>
 8003174:	e008      	b.n	8003188 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	f002 f8fe 	bl	8005384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d901      	bls.n	80031b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e050      	b.n	8003252 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da0f      	bge.n	80031d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 020f 	and.w	r2, r3, #15
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3338      	adds	r3, #56	; 0x38
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	705a      	strb	r2, [r3, #1]
 80031d6:	e00d      	b.n	80031f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_PCD_EP_SetStall+0x82>
 8003210:	2302      	movs	r3, #2
 8003212:	e01e      	b.n	8003252 <HAL_PCD_EP_SetStall+0xc0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 fca3 	bl	8005b6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	b2d9      	uxtb	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003242:	461a      	mov	r2, r3
 8003244:	f002 fe94 	bl	8005f70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d901      	bls.n	8003278 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e042      	b.n	80032fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da0f      	bge.n	80032a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	705a      	strb	r2, [r3, #1]
 800329e:	e00f      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_PCD_EP_ClrStall+0x86>
 80032dc:	2302      	movs	r3, #2
 80032de:	e00e      	b.n	80032fe <HAL_PCD_EP_ClrStall+0xa4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68f9      	ldr	r1, [r7, #12]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 fcab 	bl	8005c4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b08a      	sub	sp, #40	; 0x28
 800330a:	af02      	add	r7, sp, #8
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	3338      	adds	r3, #56	; 0x38
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	3304      	adds	r3, #4
 800332c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	429a      	cmp	r2, r3
 8003338:	d901      	bls.n	800333e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06c      	b.n	8003418 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	429a      	cmp	r2, r3
 8003352:	d902      	bls.n	800335a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3303      	adds	r3, #3
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003362:	e02b      	b.n	80033bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	429a      	cmp	r2, r3
 8003378:	d902      	bls.n	8003380 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	3303      	adds	r3, #3
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	68d9      	ldr	r1, [r3, #12]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003398:	b2db      	uxtb	r3, r3
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4603      	mov	r3, r0
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f002 fb87 	bl	8005ab2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	441a      	add	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d809      	bhi.n	80033e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033da:	429a      	cmp	r2, r3
 80033dc:	d203      	bcs.n	80033e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1be      	bne.n	8003364 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d811      	bhi.n	8003416 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	2201      	movs	r2, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	43db      	mvns	r3, r3
 800340c:	6939      	ldr	r1, [r7, #16]
 800340e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003412:	4013      	ands	r3, r2
 8003414:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	333c      	adds	r3, #60	; 0x3c
 8003438:	3304      	adds	r3, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80a0 	bne.w	8003598 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a72      	ldr	r2, [pc, #456]	; (8003630 <PCD_EP_OutXfrComplete_int+0x210>)
 8003466:	4293      	cmp	r3, r2
 8003468:	f240 80dd 	bls.w	8003626 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80d7 	beq.w	8003626 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	461a      	mov	r2, r3
 8003486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348a:	6093      	str	r3, [r2, #8]
 800348c:	e0cb      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	2320      	movs	r3, #32
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	e0bc      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f040 80b7 	bne.w	8003626 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a5d      	ldr	r2, [pc, #372]	; (8003630 <PCD_EP_OutXfrComplete_int+0x210>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d90f      	bls.n	80034e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034dc:	6093      	str	r3, [r2, #8]
 80034de:	e0a2      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	440b      	add	r3, r1
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003506:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4403      	add	r3, r0
 8003516:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800351a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4403      	add	r3, r0
 800353e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4419      	add	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4403      	add	r3, r0
 8003554:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003558:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d114      	bne.n	800358a <PCD_EP_OutXfrComplete_int+0x16a>
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003582:	461a      	mov	r2, r3
 8003584:	2101      	movs	r1, #1
 8003586:	f002 fcf3 	bl	8005f70 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f004 fc7b 	bl	8007e8c <HAL_PCD_DataOutStageCallback>
 8003596:	e046      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <PCD_EP_OutXfrComplete_int+0x214>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d124      	bne.n	80035ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035bc:	6093      	str	r3, [r2, #8]
 80035be:	e032      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	2320      	movs	r3, #32
 80035da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f004 fc52 	bl	8007e8c <HAL_PCD_DataOutStageCallback>
 80035e8:	e01d      	b.n	8003626 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d114      	bne.n	800361a <PCD_EP_OutXfrComplete_int+0x1fa>
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d108      	bne.n	800361a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003612:	461a      	mov	r2, r3
 8003614:	2100      	movs	r1, #0
 8003616:	f002 fcab 	bl	8005f70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f004 fc33 	bl	8007e8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	4f54300a 	.word	0x4f54300a
 8003634:	4f54310a 	.word	0x4f54310a

08003638 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	333c      	adds	r3, #60	; 0x3c
 8003650:	3304      	adds	r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d90e      	bls.n	800368c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	461a      	mov	r2, r3
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f004 fbeb 	bl	8007e68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d90c      	bls.n	80036b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d108      	bne.n	80036b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036ac:	461a      	mov	r2, r3
 80036ae:	2101      	movs	r1, #1
 80036b0:	f002 fc5e 	bl	8005f70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	4f54300a 	.word	0x4f54300a

080036c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	70fb      	strb	r3, [r7, #3]
 80036d0:	4613      	mov	r3, r2
 80036d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036e2:	883b      	ldrh	r3, [r7, #0]
 80036e4:	0419      	lsls	r1, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	e028      	b.n	8003744 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e00d      	b.n	8003722 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	3340      	adds	r3, #64	; 0x40
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	3301      	adds	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	3b01      	subs	r3, #1
 8003728:	429a      	cmp	r2, r3
 800372a:	d3ec      	bcc.n	8003706 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800372c:	883b      	ldrh	r3, [r7, #0]
 800372e:	0418      	lsls	r0, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	3b01      	subs	r3, #1
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	4302      	orrs	r2, r0
 800373c:	3340      	adds	r3, #64	; 0x40
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e267      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d075      	beq.n	8003896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00c      	beq.n	80037d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b6:	4b85      	ldr	r3, [pc, #532]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d112      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c2:	4b82      	ldr	r3, [pc, #520]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d0:	4b7e      	ldr	r3, [pc, #504]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05b      	beq.n	8003894 <HAL_RCC_OscConfig+0x108>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e242      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x74>
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e01d      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003808:	d10c      	bne.n	8003824 <HAL_RCC_OscConfig+0x98>
 800380a:	4b70      	ldr	r3, [pc, #448]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a6f      	ldr	r2, [pc, #444]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b6d      	ldr	r3, [pc, #436]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e00b      	b.n	800383c <HAL_RCC_OscConfig+0xb0>
 8003824:	4b69      	ldr	r3, [pc, #420]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800382a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a65      	ldr	r2, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d013      	beq.n	800386c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd ffb0 	bl	80017a8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800384c:	f7fd ffac 	bl	80017a8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e207      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0xc0>
 800386a:	e014      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fd ff9c 	bl	80017a8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003874:	f7fd ff98 	bl	80017a8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	; 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e1f3      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	4b51      	ldr	r3, [pc, #324]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0xe8>
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a2:	4b4a      	ldr	r3, [pc, #296]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ae:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ba:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	4b41      	ldr	r3, [pc, #260]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e1c7      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	e03a      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038fc:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x244>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003902:	f7fd ff51 	bl	80017a8 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390a:	f7fd ff4d 	bl	80017a8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1a8      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4925      	ldr	r1, [pc, #148]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
 800393c:	e015      	b.n	800396a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_RCC_OscConfig+0x244>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd ff30 	bl	80017a8 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394c:	f7fd ff2c 	bl	80017a8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e187      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d036      	beq.n	80039e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d016      	beq.n	80039ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_RCC_OscConfig+0x248>)
 8003980:	2201      	movs	r2, #1
 8003982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003984:	f7fd ff10 	bl	80017a8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398c:	f7fd ff0c 	bl	80017a8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e167      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_RCC_OscConfig+0x240>)
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x200>
 80039aa:	e01b      	b.n	80039e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_OscConfig+0x248>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b2:	f7fd fef9 	bl	80017a8 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	e00e      	b.n	80039d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ba:	f7fd fef5 	bl	80017a8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d907      	bls.n	80039d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e150      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ea      	bne.n	80039ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8097 	beq.w	8003b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b7a      	ldr	r3, [pc, #488]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b77      	ldr	r3, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d118      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b74      	ldr	r3, [pc, #464]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a73      	ldr	r2, [pc, #460]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fd feb5 	bl	80017a8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a42:	f7fd feb1 	bl	80017a8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e10c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x474>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d106      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ea>
 8003a68:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6713      	str	r3, [r2, #112]	; 0x70
 8003a74:	e01c      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x30c>
 8003a7e:	4b5f      	ldr	r3, [pc, #380]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a5e      	ldr	r2, [pc, #376]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a84:	f043 0304 	orr.w	r3, r3, #4
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8a:	4b5c      	ldr	r3, [pc, #368]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6713      	str	r3, [r2, #112]	; 0x70
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x324>
 8003a98:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a57      	ldr	r2, [pc, #348]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fe76 	bl	80017a8 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fe72 	bl	80017a8 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0cb      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x334>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fe60 	bl	80017a8 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fd fe5c 	bl	80017a8 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0b5      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a1 	beq.w	8003c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d05c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d141      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fd fe30 	bl	80017a8 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd fe2c 	bl	80017a8 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e087      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	061b      	lsls	r3, r3, #24
 8003b8e:	491b      	ldr	r1, [pc, #108]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fd fe05 	bl	80017a8 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fd fe01 	bl	80017a8 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e05c      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x416>
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fdee 	bl	80017a8 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fdea 	bl	80017a8 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e045      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x444>
 8003bee:	e03d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e038      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_RCC_OscConfig+0x4ec>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d121      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d11a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d111      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0cc      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c90:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d90c      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9e:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d044      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d119      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e067      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f023 0203 	bic.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4934      	ldr	r1, [pc, #208]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd fd1c 	bl	80017a8 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	e00a      	b.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d74:	f7fd fd18 	bl	80017a8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e04f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8a:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 020c 	and.w	r2, r3, #12
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d1eb      	bne.n	8003d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d20c      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd fc7c 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023c00 	.word	0x40023c00
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	08008f14 	.word	0x08008f14
 8003e40:	2000003c 	.word	0x2000003c
 8003e44:	20000040 	.word	0x20000040

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b094      	sub	sp, #80	; 0x50
 8003e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
 8003e54:	2300      	movs	r3, #0
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	2300      	movs	r3, #0
 8003e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d00d      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x40>
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	f200 80e1 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x34>
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7a:	e0db      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b73      	ldr	r3, [pc, #460]	; (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e80:	e0db      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e82:	4b72      	ldr	r3, [pc, #456]	; (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e86:	e0d8      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e88:	4b6f      	ldr	r3, [pc, #444]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e92:	4b6d      	ldr	r3, [pc, #436]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6139      	str	r1, [r7, #16]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eec:	4659      	mov	r1, fp
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4651      	mov	r1, sl
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4651      	mov	r1, sl
 8003efc:	ebb2 0801 	subs.w	r8, r2, r1
 8003f00:	4659      	mov	r1, fp
 8003f02:	eb63 0901 	sbc.w	r9, r3, r1
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1a:	4690      	mov	r8, r2
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	eb18 0303 	adds.w	r3, r8, r3
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	462b      	mov	r3, r5
 8003f28:	eb49 0303 	adc.w	r3, r9, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	028b      	lsls	r3, r1, #10
 8003f3e:	4621      	mov	r1, r4
 8003f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f44:	4621      	mov	r1, r4
 8003f46:	028a      	lsls	r2, r1, #10
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4e:	2200      	movs	r2, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f58:	f7fc f98a 	bl	8000270 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f64:	e058      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	099b      	lsrs	r3, r3, #6
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	4611      	mov	r1, r2
 8003f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	0159      	lsls	r1, r3, #5
 8003f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f92:	0150      	lsls	r0, r2, #5
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4641      	mov	r1, r8
 8003f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	00eb      	lsls	r3, r5, #3
 8003fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fce:	00e2      	lsls	r2, r4, #3
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
 8003fd4:	4643      	mov	r3, r8
 8003fd6:	18e3      	adds	r3, r4, r3
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	464b      	mov	r3, r9
 8003fdc:	eb45 0303 	adc.w	r3, r5, r3
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fee:	4629      	mov	r1, r5
 8003ff0:	028b      	lsls	r3, r1, #10
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	f7fc f930 	bl	8000270 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_GetSysClockFreq+0x200>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetSysClockFreq+0x204>)
 8004036:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800403c:	4618      	mov	r0, r3
 800403e:	3750      	adds	r7, #80	; 0x50
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000003c 	.word	0x2000003c

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	08008f24 	.word	0x08008f24

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08008f24 	.word	0x08008f24

080040b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e07b      	b.n	80041c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d009      	beq.n	80040f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	61da      	str	r2, [r3, #28]
 80040e2:	e005      	b.n	80040f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd f9b0 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	ea42 0103 	orr.w	r1, r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0104 	and.w	r1, r3, #4
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	f003 0210 	and.w	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e03f      	b.n	800425c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fd f985 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2224      	movs	r2, #36	; 0x24
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f9a6 	bl	8004560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004222:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004232:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004242:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d17c      	bne.n	800437e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Transmit+0x2c>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e075      	b.n	8004380 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Transmit+0x3e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e06e      	b.n	8004380 <HAL_UART_Transmit+0x11c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2221      	movs	r2, #33	; 0x21
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b8:	f7fd fa76 	bl	80017a8 <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d108      	bne.n	80042e6 <HAL_UART_Transmit+0x82>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	e003      	b.n	80042ee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042f6:	e02a      	b.n	800434e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	2180      	movs	r1, #128	; 0x80
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f8e2 	bl	80044cc <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e036      	b.n	8004380 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004326:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3302      	adds	r3, #2
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e007      	b.n	8004340 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3301      	adds	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1cf      	bne.n	80042f8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f8b2 	bl	80044cc <UART_WaitOnFlagUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e006      	b.n	8004380 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 808c 	bne.w	80044c2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_UART_Receive+0x2e>
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e084      	b.n	80044c4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Receive+0x40>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e07d      	b.n	80044c4 <HAL_UART_Receive+0x13c>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2222      	movs	r2, #34	; 0x22
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e4:	f7fd f9e0 	bl	80017a8 <HAL_GetTick>
 80043e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	88fa      	ldrh	r2, [r7, #6]
 80043f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d108      	bne.n	8004412 <HAL_UART_Receive+0x8a>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d104      	bne.n	8004412 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e003      	b.n	800441a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004422:	e043      	b.n	80044ac <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2200      	movs	r2, #0
 800442c:	2120      	movs	r1, #32
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f84c 	bl	80044cc <UART_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e042      	b.n	80044c4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	b29a      	uxth	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	3302      	adds	r3, #2
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e01f      	b.n	800449e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	d007      	beq.n	8004478 <HAL_UART_Receive+0xf0>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_UART_Receive+0xfe>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e008      	b.n	8004498 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004492:	b2da      	uxtb	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	3301      	adds	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1b6      	bne.n	8004424 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044dc:	e02c      	b.n	8004538 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d028      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout+0x30>
 80044ec:	f7fd f95c 	bl	80017a8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d21d      	bcs.n	8004538 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800450a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e00f      	b.n	8004558 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	429a      	cmp	r2, r3
 8004554:	d0c3      	beq.n	80044de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b0c0      	sub	sp, #256	; 0x100
 8004566:	af00      	add	r7, sp, #0
 8004568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b8:	f021 010c 	bic.w	r1, r1, #12
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	ea40 0301 	orr.w	r3, r0, r1
 80045e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8f      	ldr	r3, [pc, #572]	; (800482c <UART_SetConfig+0x2cc>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0xa0>
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8d      	ldr	r3, [pc, #564]	; (8004830 <UART_SetConfig+0x2d0>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7ff fd46 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8004604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004608:	e003      	b.n	8004612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7ff fd2d 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 800460e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461c:	f040 810c 	bne.w	8004838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800462a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800462e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	1891      	adds	r1, r2, r2
 8004638:	65b9      	str	r1, [r7, #88]	; 0x58
 800463a:	415b      	adcs	r3, r3
 800463c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004642:	4621      	mov	r1, r4
 8004644:	eb12 0801 	adds.w	r8, r2, r1
 8004648:	4629      	mov	r1, r5
 800464a:	eb43 0901 	adc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800468a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
 8004694:	4613      	mov	r3, r2
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
 800469c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046a4:	f7fb fde4 	bl	8000270 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80046d0:	415b      	adcs	r3, r3
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d8:	4641      	mov	r1, r8
 80046da:	eb12 0a01 	adds.w	sl, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0b01 	adc.w	fp, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	4692      	mov	sl, r2
 80046fa:	469b      	mov	fp, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004706:	464b      	mov	r3, r9
 8004708:	eb4b 0303 	adc.w	r3, fp, r3
 800470c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800471c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	643b      	str	r3, [r7, #64]	; 0x40
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
 8004732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800473a:	f7fb fd99 	bl	8000270 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <UART_SetConfig+0x2d4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	; 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <UART_SetConfig+0x2d4>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	63b9      	str	r1, [r7, #56]	; 0x38
 8004784:	415b      	adcs	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6339      	str	r1, [r7, #48]	; 0x30
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047e0:	460b      	mov	r3, r1
 80047e2:	18db      	adds	r3, r3, r3
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e6:	4613      	mov	r3, r2
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047f6:	f7fb fd3b 	bl	8000270 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <UART_SetConfig+0x2d4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	3332      	adds	r3, #50	; 0x32
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UART_SetConfig+0x2d4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4422      	add	r2, r4
 8004826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004828:	e105      	b.n	8004a36 <UART_SetConfig+0x4d6>
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	415b      	adcs	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	4641      	mov	r1, r8
 800485c:	1854      	adds	r4, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0501 	adc.w	r5, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004880:	464b      	mov	r3, r9
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a6:	4629      	mov	r1, r5
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b0:	4621      	mov	r1, r4
 80048b2:	008a      	lsls	r2, r1, #2
 80048b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b8:	f7fb fcda 	bl	8000270 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <UART_SetConfig+0x4e4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	61b9      	str	r1, [r7, #24]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6139      	str	r1, [r7, #16]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004920:	464b      	mov	r3, r9
 8004922:	460a      	mov	r2, r1
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	67bb      	str	r3, [r7, #120]	; 0x78
 8004936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004944:	4649      	mov	r1, r9
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494e:	4641      	mov	r1, r8
 8004950:	008a      	lsls	r2, r1, #2
 8004952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004956:	f7fb fc8b 	bl	8000270 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004960:	fba3 1302 	umull	r1, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497e:	441c      	add	r4, r3
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	673b      	str	r3, [r7, #112]	; 0x70
 8004988:	677a      	str	r2, [r7, #116]	; 0x74
 800498a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	1891      	adds	r1, r2, r2
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	415b      	adcs	r3, r3
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499e:	4641      	mov	r1, r8
 80049a0:	1851      	adds	r1, r2, r1
 80049a2:	6039      	str	r1, [r7, #0]
 80049a4:	4649      	mov	r1, r9
 80049a6:	414b      	adcs	r3, r1
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b6:	4659      	mov	r1, fp
 80049b8:	00cb      	lsls	r3, r1, #3
 80049ba:	4651      	mov	r1, sl
 80049bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c0:	4651      	mov	r1, sl
 80049c2:	00ca      	lsls	r2, r1, #3
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	4642      	mov	r2, r8
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d0:	464b      	mov	r3, r9
 80049d2:	460a      	mov	r2, r1
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
 80049e4:	667a      	str	r2, [r7, #100]	; 0x64
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049f2:	4649      	mov	r1, r9
 80049f4:	008b      	lsls	r3, r1, #2
 80049f6:	4641      	mov	r1, r8
 80049f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fc:	4641      	mov	r1, r8
 80049fe:	008a      	lsls	r2, r1, #2
 8004a00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a04:	f7fb fc34 	bl	8000270 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2164      	movs	r1, #100	; 0x64
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	3332      	adds	r3, #50	; 0x32
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4422      	add	r2, r4
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 001c 	add.w	r0, r7, #28
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d122      	bne.n	8004aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d105      	bne.n	8004a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fac6 	bl	800602c <USB_CoreReset>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e01a      	b.n	8004adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 faba 	bl	800602c <USB_CoreReset>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ace:	e005      	b.n	8004adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10b      	bne.n	8004afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f043 0206 	orr.w	r2, r3, #6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b06:	b004      	add	sp, #16
 8004b08:	4770      	bx	lr
	...

08004b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d165      	bne.n	8004bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a41      	ldr	r2, [pc, #260]	; (8004c28 <USB_SetTurnaroundTime+0x11c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d906      	bls.n	8004b36 <USB_SetTurnaroundTime+0x2a>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a40      	ldr	r2, [pc, #256]	; (8004c2c <USB_SetTurnaroundTime+0x120>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d202      	bcs.n	8004b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b30:	230f      	movs	r3, #15
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e062      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <USB_SetTurnaroundTime+0x120>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d306      	bcc.n	8004b4c <USB_SetTurnaroundTime+0x40>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <USB_SetTurnaroundTime+0x124>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d202      	bcs.n	8004b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b46:	230e      	movs	r3, #14
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e057      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <USB_SetTurnaroundTime+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d306      	bcc.n	8004b62 <USB_SetTurnaroundTime+0x56>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a37      	ldr	r2, [pc, #220]	; (8004c34 <USB_SetTurnaroundTime+0x128>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d202      	bcs.n	8004b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e04c      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <USB_SetTurnaroundTime+0x128>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d306      	bcc.n	8004b78 <USB_SetTurnaroundTime+0x6c>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a32      	ldr	r2, [pc, #200]	; (8004c38 <USB_SetTurnaroundTime+0x12c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b72:	230c      	movs	r3, #12
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e041      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <USB_SetTurnaroundTime+0x12c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d906      	bls.n	8004b8e <USB_SetTurnaroundTime+0x82>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <USB_SetTurnaroundTime+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d802      	bhi.n	8004b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b88:	230b      	movs	r3, #11
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e036      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <USB_SetTurnaroundTime+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d906      	bls.n	8004ba4 <USB_SetTurnaroundTime+0x98>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a29      	ldr	r2, [pc, #164]	; (8004c40 <USB_SetTurnaroundTime+0x134>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d802      	bhi.n	8004ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e02b      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <USB_SetTurnaroundTime+0x134>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d906      	bls.n	8004bba <USB_SetTurnaroundTime+0xae>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <USB_SetTurnaroundTime+0x138>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d202      	bcs.n	8004bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bb4:	2309      	movs	r3, #9
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e020      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <USB_SetTurnaroundTime+0x138>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d306      	bcc.n	8004bd0 <USB_SetTurnaroundTime+0xc4>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <USB_SetTurnaroundTime+0x13c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e015      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <USB_SetTurnaroundTime+0x13c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d906      	bls.n	8004be6 <USB_SetTurnaroundTime+0xda>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <USB_SetTurnaroundTime+0x140>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d202      	bcs.n	8004be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004be0:	2307      	movs	r3, #7
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e00a      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004be6:	2306      	movs	r3, #6
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e007      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bf2:	2309      	movs	r3, #9
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e001      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bf8:	2309      	movs	r3, #9
 8004bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00d8acbf 	.word	0x00d8acbf
 8004c2c:	00e4e1c0 	.word	0x00e4e1c0
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	01067380 	.word	0x01067380
 8004c38:	011a499f 	.word	0x011a499f
 8004c3c:	01312cff 	.word	0x01312cff
 8004c40:	014ca43f 	.word	0x014ca43f
 8004c44:	016e3600 	.word	0x016e3600
 8004c48:	01a6ab1f 	.word	0x01a6ab1f
 8004c4c:	01e84800 	.word	0x01e84800

08004c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d106      	bne.n	8004cc0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e00b      	b.n	8004cd8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	e001      	b.n	8004cd8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e003      	b.n	8004ce0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cd8:	2032      	movs	r0, #50	; 0x32
 8004cda:	f7fc fd71 	bl	80017c0 <HAL_Delay>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce8:	b084      	sub	sp, #16
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	e009      	b.n	8004d1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	3340      	adds	r3, #64	; 0x40
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b0e      	cmp	r3, #14
 8004d20:	d9f2      	bls.n	8004d08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d11c      	bne.n	8004d62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d36:	f043 0302 	orr.w	r3, r3, #2
 8004d3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8004d60:	e00b      	b.n	8004d7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d80:	461a      	mov	r2, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	461a      	mov	r2, r3
 8004d96:	680b      	ldr	r3, [r1, #0]
 8004d98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10c      	bne.n	8004dba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004da6:	2100      	movs	r1, #0
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f949 	bl	8005040 <USB_SetDevSpeed>
 8004dae:	e008      	b.n	8004dc2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004db0:	2101      	movs	r1, #1
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f944 	bl	8005040 <USB_SetDevSpeed>
 8004db8:	e003      	b.n	8004dc2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dba:	2103      	movs	r1, #3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f93f 	bl	8005040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f8f3 	bl	8004fb0 <USB_FlushTxFifo>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f911 	bl	8004ffc <USB_FlushRxFifo>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	461a      	mov	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	e043      	b.n	8004e96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e24:	d118      	bne.n	8004e58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e013      	b.n	8004e6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e008      	b.n	8004e6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	3301      	adds	r3, #1
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3b7      	bcc.n	8004e0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e043      	b.n	8004f2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eba:	d118      	bne.n	8004eee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e013      	b.n	8004f00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e008      	b.n	8004f00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3b7      	bcc.n	8004ea4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f043 0210 	orr.w	r2, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <USB_DevInit+0x2c4>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f043 0208 	orr.w	r2, r3, #8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d107      	bne.n	8004f9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa8:	b004      	add	sp, #16
 8004faa:	4770      	bx	lr
 8004fac:	803c3800 	.word	0x803c3800

08004fb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	019b      	lsls	r3, r3, #6
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <USB_FlushTxFifo+0x48>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d0f0      	beq.n	8004fca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	00030d40 	.word	0x00030d40

08004ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2210      	movs	r2, #16
 800500c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <USB_FlushRxFifo+0x40>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e006      	b.n	800502e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d0f0      	beq.n	800500e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	00030d40 	.word	0x00030d40

08005040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005060:	4313      	orrs	r3, r2
 8005062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b087      	sub	sp, #28
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0306 	and.w	r3, r3, #6
 800508a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
 8005096:	e00a      	b.n	80050ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d002      	beq.n	80050a4 <USB_GetDevSpeed+0x32>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d102      	bne.n	80050aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050a4:	2302      	movs	r3, #2
 80050a6:	75fb      	strb	r3, [r7, #23]
 80050a8:	e001      	b.n	80050ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050aa:	230f      	movs	r3, #15
 80050ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	785b      	ldrb	r3, [r3, #1]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d13a      	bne.n	800514e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d155      	bne.n	80051bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	78db      	ldrb	r3, [r3, #3]
 800512a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800512c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	059b      	lsls	r3, r3, #22
 8005132:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005134:	4313      	orrs	r3, r2
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	0151      	lsls	r1, r2, #5
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	440a      	add	r2, r1
 800513e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514a:	6013      	str	r3, [r2, #0]
 800514c:	e036      	b.n	80051bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	2101      	movs	r1, #1
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	041b      	lsls	r3, r3, #16
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800516c:	4313      	orrs	r3, r2
 800516e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d11a      	bne.n	80051bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	78db      	ldrb	r3, [r3, #3]
 80051a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051a2:	430b      	orrs	r3, r1
 80051a4:	4313      	orrs	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	785b      	ldrb	r3, [r3, #1]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d161      	bne.n	80052ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051fe:	d11f      	bne.n	8005240 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800521e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800523e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005260:	4013      	ands	r3, r2
 8005262:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005284:	4013      	ands	r3, r2
 8005286:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	0159      	lsls	r1, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	440b      	add	r3, r1
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	4619      	mov	r1, r3
 80052a4:	4b35      	ldr	r3, [pc, #212]	; (800537c <USB_DeactivateEndpoint+0x1b0>)
 80052a6:	4013      	ands	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]
 80052aa:	e060      	b.n	800536e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052c2:	d11f      	bne.n	8005304 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	43db      	mvns	r3, r3
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005324:	4013      	ands	r3, r2
 8005326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	2101      	movs	r1, #1
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	43db      	mvns	r3, r3
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4013      	ands	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	0159      	lsls	r1, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	440b      	add	r3, r1
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	4619      	mov	r1, r3
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <USB_DeactivateEndpoint+0x1b4>)
 800536a:	4013      	ands	r3, r2
 800536c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	ec337800 	.word	0xec337800
 8005380:	eff37800 	.word	0xeff37800

08005384 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	4613      	mov	r3, r2
 8005390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	f040 815c 	bne.w	800565e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d132      	bne.n	8005414 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540c:	0cdb      	lsrs	r3, r3, #19
 800540e:	04db      	lsls	r3, r3, #19
 8005410:	6113      	str	r3, [r2, #16]
 8005412:	e074      	b.n	80054fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542e:	0cdb      	lsrs	r3, r3, #19
 8005430:	04db      	lsls	r3, r3, #19
 8005432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6959      	ldr	r1, [r3, #20]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	440b      	add	r3, r1
 8005470:	1e59      	subs	r1, r3, #1
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	fbb1 f3f3 	udiv	r3, r1, r3
 800547a:	04d9      	lsls	r1, r3, #19
 800547c:	4b9d      	ldr	r3, [pc, #628]	; (80056f4 <USB_EPStartXfer+0x370>)
 800547e:	400b      	ands	r3, r1
 8005480:	69b9      	ldr	r1, [r7, #24]
 8005482:	0148      	lsls	r0, r1, #5
 8005484:	69f9      	ldr	r1, [r7, #28]
 8005486:	4401      	add	r1, r0
 8005488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800548c:	4313      	orrs	r3, r2
 800548e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	0148      	lsls	r0, r1, #5
 80054aa:	69f9      	ldr	r1, [r7, #28]
 80054ac:	4401      	add	r1, r0
 80054ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054b2:	4313      	orrs	r3, r2
 80054b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	78db      	ldrb	r3, [r3, #3]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d11f      	bne.n	80054fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d14b      	bne.n	800559c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d128      	bne.n	800557a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d110      	bne.n	800555a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	440a      	add	r2, r1
 800554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e00f      	b.n	800557a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e12f      	b.n	80057fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d015      	beq.n	80055f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8117 	beq.w	80057fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	2101      	movs	r1, #1
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ea:	4313      	orrs	r3, r2
 80055ec:	634b      	str	r3, [r1, #52]	; 0x34
 80055ee:	e105      	b.n	80057fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d110      	bne.n	8005622 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e00f      	b.n	8005642 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	68d9      	ldr	r1, [r3, #12]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	b298      	uxth	r0, r3
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4603      	mov	r3, r0
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fa2b 	bl	8005ab2 <USB_WritePacket>
 800565c:	e0ce      	b.n	80057fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005678:	0cdb      	lsrs	r3, r3, #19
 800567a:	04db      	lsls	r3, r3, #19
 800567c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800569c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d126      	bne.n	80056f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	0148      	lsls	r0, r1, #5
 80056c4:	69f9      	ldr	r1, [r7, #28]
 80056c6:	4401      	add	r1, r0
 80056c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ee:	6113      	str	r3, [r2, #16]
 80056f0:	e036      	b.n	8005760 <USB_EPStartXfer+0x3dc>
 80056f2:	bf00      	nop
 80056f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4413      	add	r3, r2
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	8afb      	ldrh	r3, [r7, #22]
 800571e:	04d9      	lsls	r1, r3, #19
 8005720:	4b39      	ldr	r3, [pc, #228]	; (8005808 <USB_EPStartXfer+0x484>)
 8005722:	400b      	ands	r3, r1
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	0148      	lsls	r0, r1, #5
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	4401      	add	r1, r0
 800572c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005730:	4313      	orrs	r3, r2
 8005732:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	8af9      	ldrh	r1, [r7, #22]
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005750:	69b9      	ldr	r1, [r7, #24]
 8005752:	0148      	lsls	r0, r1, #5
 8005754:	69f9      	ldr	r1, [r7, #28]
 8005756:	4401      	add	r1, r0
 8005758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800575c:	4313      	orrs	r3, r2
 800575e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d10d      	bne.n	8005782 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68d9      	ldr	r1, [r3, #12]
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	460a      	mov	r2, r1
 8005780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d128      	bne.n	80057dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d110      	bne.n	80057bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e00f      	b.n	80057dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	0151      	lsls	r1, r2, #5
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	440a      	add	r2, r1
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	1ff80000 	.word	0x1ff80000

0800580c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 80cd 	bne.w	80059c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d132      	bne.n	800589c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	0cdb      	lsrs	r3, r3, #19
 8005896:	04db      	lsls	r3, r3, #19
 8005898:	6113      	str	r3, [r2, #16]
 800589a:	e04e      	b.n	800593a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	0cdb      	lsrs	r3, r3, #19
 80058b8:	04db      	lsls	r3, r3, #19
 80058ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d903      	bls.n	80058f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592a:	6939      	ldr	r1, [r7, #16]
 800592c:	0148      	lsls	r0, r1, #5
 800592e:	6979      	ldr	r1, [r7, #20]
 8005930:	4401      	add	r1, r0
 8005932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d11e      	bne.n	800597e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d009      	beq.n	800595c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	e092      	b.n	8005aa4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800599c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d07e      	beq.n	8005aa4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f303 	lsl.w	r3, r1, r3
 80059bc:	6979      	ldr	r1, [r7, #20]
 80059be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c2:	4313      	orrs	r3, r2
 80059c4:	634b      	str	r3, [r1, #52]	; 0x34
 80059c6:	e06d      	b.n	8005aa4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	0cdb      	lsrs	r3, r3, #19
 80059e4:	04db      	lsls	r3, r3, #19
 80059e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a52:	6939      	ldr	r1, [r7, #16]
 8005a54:	0148      	lsls	r0, r1, #5
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	4401      	add	r1, r0
 8005a5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10d      	bne.n	8005a84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d009      	beq.n	8005a84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	68d9      	ldr	r1, [r3, #12]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	460a      	mov	r2, r1
 8005a82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b089      	sub	sp, #36	; 0x24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	4611      	mov	r1, r2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	71fb      	strb	r3, [r7, #7]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11a      	bne.n	8005b0e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ad8:	88bb      	ldrh	r3, [r7, #4]
 8005ada:	3303      	adds	r3, #3
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61bb      	str	r3, [r7, #24]
 8005ae4:	e00f      	b.n	8005b06 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	031a      	lsls	r2, r3, #12
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af2:	461a      	mov	r2, r3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	3304      	adds	r3, #4
 8005afe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3eb      	bcc.n	8005ae6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3724      	adds	r7, #36	; 0x24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	3303      	adds	r3, #3
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e00b      	b.n	8005b58 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	3301      	adds	r3, #1
 8005b56:	61bb      	str	r3, [r7, #24]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d3ef      	bcc.n	8005b40 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b60:	69fb      	ldr	r3, [r7, #28]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3724      	adds	r7, #36	; 0x24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d12c      	bne.n	8005be4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	db12      	blt.n	8005bc2 <USB_EPSetStall+0x54>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bc0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e02b      	b.n	8005c3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	db12      	blt.n	8005c1c <USB_EPSetStall+0xae>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b085      	sub	sp, #20
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d128      	bne.n	8005cb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	78db      	ldrb	r3, [r3, #3]
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d003      	beq.n	8005c96 <USB_EPClearStall+0x4c>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	78db      	ldrb	r3, [r3, #3]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d138      	bne.n	8005d08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e027      	b.n	8005d08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d003      	beq.n	8005ce8 <USB_EPClearStall+0x9e>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	78db      	ldrb	r3, [r3, #3]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d10f      	bne.n	8005d08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	0151      	lsls	r1, r2, #5
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	440a      	add	r2, r1
 8005cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d90:	f023 0302 	bic.w	r3, r3, #2
 8005d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd2:	f043 0302 	orr.w	r3, r3, #2
 8005dd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	0c1b      	lsrs	r3, r3, #16
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	b29b      	uxth	r3, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee0:	01db      	lsls	r3, r3, #7
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4013      	ands	r3, r2
 8005efc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005efe:	68bb      	ldr	r3, [r7, #8]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	371c      	adds	r7, #28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0301 	and.w	r3, r3, #1
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f46:	f023 0307 	bic.w	r3, r3, #7
 8005f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	333c      	adds	r3, #60	; 0x3c
 8005f86:	3304      	adds	r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4a26      	ldr	r2, [pc, #152]	; (8006028 <USB_EP0_OutStart+0xb8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d90a      	bls.n	8005faa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa4:	d101      	bne.n	8005faa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e037      	b.n	800601a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd8:	f043 0318 	orr.w	r3, r3, #24
 8005fdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ff0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d10f      	bne.n	8006018 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006012:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006016:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	4f54300a 	.word	0x4f54300a

0800602c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <USB_CoreReset+0x64>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e01b      	b.n	8006082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	daf2      	bge.n	8006038 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f043 0201 	orr.w	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <USB_CoreReset+0x64>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d901      	bls.n	8006074 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e006      	b.n	8006082 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d0f0      	beq.n	8006062 <USB_CoreReset+0x36>

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	00030d40 	.word	0x00030d40

08006094 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80060a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80060a4:	f002 f95c 	bl	8008360 <USBD_static_malloc>
 80060a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80060b8:	2302      	movs	r3, #2
 80060ba:	e066      	b.n	800618a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7c1b      	ldrb	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d119      	bne.n	8006100 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d0:	2202      	movs	r2, #2
 80060d2:	2181      	movs	r1, #129	; 0x81
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f820 	bl	800811a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e4:	2202      	movs	r2, #2
 80060e6:	2101      	movs	r1, #1
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f002 f816 	bl	800811a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2210      	movs	r2, #16
 80060fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060fe:	e016      	b.n	800612e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006100:	2340      	movs	r3, #64	; 0x40
 8006102:	2202      	movs	r2, #2
 8006104:	2181      	movs	r1, #129	; 0x81
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 f807 	bl	800811a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	2202      	movs	r2, #2
 8006116:	2101      	movs	r1, #1
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fffe 	bl	800811a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2210      	movs	r2, #16
 800612a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800612e:	2308      	movs	r3, #8
 8006130:	2203      	movs	r2, #3
 8006132:	2182      	movs	r1, #130	; 0x82
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fff0 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	7c1b      	ldrb	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800616a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f002 f8c1 	bl	80082f8 <USBD_LL_PrepareReceive>
 8006176:	e007      	b.n	8006188 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	2101      	movs	r1, #1
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f002 f8b8 	bl	80082f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800619e:	2181      	movs	r1, #129	; 0x81
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 ffe0 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80061ac:	2101      	movs	r1, #1
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 ffd9 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80061bc:	2182      	movs	r1, #130	; 0x82
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 ffd1 	bl	8008166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 f8c4 	bl	800837c <USBD_static_free>
    pdev->pClassData = NULL;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006218:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e0af      	b.n	8006390 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03f      	beq.n	80062bc <USBD_CDC_Setup+0xb4>
 800623c:	2b20      	cmp	r3, #32
 800623e:	f040 809f 	bne.w	8006380 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	88db      	ldrh	r3, [r3, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02e      	beq.n	80062a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b25b      	sxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	da16      	bge.n	8006282 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006260:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	88d2      	ldrh	r2, [r2, #6]
 8006266:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	88db      	ldrh	r3, [r3, #6]
 800626c:	2b07      	cmp	r3, #7
 800626e:	bf28      	it	cs
 8006270:	2307      	movcs	r3, #7
 8006272:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	89fa      	ldrh	r2, [r7, #14]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 fb19 	bl	80078b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006280:	e085      	b.n	800638e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785a      	ldrb	r2, [r3, #1]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	88db      	ldrh	r3, [r3, #6]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006298:	6939      	ldr	r1, [r7, #16]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	88db      	ldrh	r3, [r3, #6]
 800629e:	461a      	mov	r2, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fb32 	bl	800790a <USBD_CtlPrepareRx>
      break;
 80062a6:	e072      	b.n	800638e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	7850      	ldrb	r0, [r2, #1]
 80062b4:	2200      	movs	r2, #0
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	4798      	blx	r3
      break;
 80062ba:	e068      	b.n	800638e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b0b      	cmp	r3, #11
 80062c2:	d852      	bhi.n	800636a <USBD_CDC_Setup+0x162>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <USBD_CDC_Setup+0xc4>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062fd 	.word	0x080062fd
 80062d0:	08006379 	.word	0x08006379
 80062d4:	0800636b 	.word	0x0800636b
 80062d8:	0800636b 	.word	0x0800636b
 80062dc:	0800636b 	.word	0x0800636b
 80062e0:	0800636b 	.word	0x0800636b
 80062e4:	0800636b 	.word	0x0800636b
 80062e8:	0800636b 	.word	0x0800636b
 80062ec:	0800636b 	.word	0x0800636b
 80062f0:	0800636b 	.word	0x0800636b
 80062f4:	08006327 	.word	0x08006327
 80062f8:	08006351 	.word	0x08006351
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d107      	bne.n	8006318 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006308:	f107 030a 	add.w	r3, r7, #10
 800630c:	2202      	movs	r2, #2
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 face 	bl	80078b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006316:	e032      	b.n	800637e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fa58 	bl	80077d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
          break;
 8006324:	e02b      	b.n	800637e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b03      	cmp	r3, #3
 8006330:	d107      	bne.n	8006342 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006332:	f107 030d 	add.w	r3, r7, #13
 8006336:	2201      	movs	r2, #1
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fab9 	bl	80078b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006340:	e01d      	b.n	800637e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fa43 	bl	80077d0 <USBD_CtlError>
            ret = USBD_FAIL;
 800634a:	2303      	movs	r3, #3
 800634c:	75fb      	strb	r3, [r7, #23]
          break;
 800634e:	e016      	b.n	800637e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d00f      	beq.n	800637c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fa36 	bl	80077d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006364:	2303      	movs	r3, #3
 8006366:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006368:	e008      	b.n	800637c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fa2f 	bl	80077d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	75fb      	strb	r3, [r7, #23]
          break;
 8006376:	e002      	b.n	800637e <USBD_CDC_Setup+0x176>
          break;
 8006378:	bf00      	nop
 800637a:	e008      	b.n	800638e <USBD_CDC_Setup+0x186>
          break;
 800637c:	bf00      	nop
      }
      break;
 800637e:	e006      	b.n	800638e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fa24 	bl	80077d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	75fb      	strb	r3, [r7, #23]
      break;
 800638c:	bf00      	nop
  }

  return (uint8_t)ret;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e04f      	b.n	800645a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	3318      	adds	r3, #24
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d029      	beq.n	800642c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	440b      	add	r3, r1
 80063e6:	3318      	adds	r3, #24
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	78f9      	ldrb	r1, [r7, #3]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	460b      	mov	r3, r1
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	1a5b      	subs	r3, r3, r1
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4403      	add	r3, r0
 80063f8:	3344      	adds	r3, #68	; 0x44
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006406:	2b00      	cmp	r3, #0
 8006408:	d110      	bne.n	800642c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3318      	adds	r3, #24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800641e:	78f9      	ldrb	r1, [r7, #3]
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 ff46 	bl	80082b6 <USBD_LL_Transmit>
 800642a:	e015      	b.n	8006458 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006454:	78fa      	ldrb	r2, [r7, #3]
 8006456:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006474:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e015      	b.n	80064b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 ff56 	bl	800833a <USBD_LL_GetRxDataSize>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064aa:	4611      	mov	r1, r2
 80064ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e01b      	b.n	800650a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <USBD_CDC_EP0_RxReady+0x50>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064e2:	2bff      	cmp	r3, #255	; 0xff
 80064e4:	d010      	beq.n	8006508 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064fc:	b292      	uxth	r2, r2
 80064fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2243      	movs	r2, #67	; 0x43
 8006520:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	200000d0 	.word	0x200000d0

08006534 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2243      	movs	r2, #67	; 0x43
 8006540:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	2000008c 	.word	0x2000008c

08006554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2243      	movs	r2, #67	; 0x43
 8006560:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006562:	4b03      	ldr	r3, [pc, #12]	; (8006570 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000114 	.word	0x20000114

08006574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	220a      	movs	r2, #10
 8006580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006582:	4b03      	ldr	r3, [pc, #12]	; (8006590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	20000048 	.word	0x20000048

08006594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e004      	b.n	80065b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065be:	b480      	push	{r7}
 80065c0:	b087      	sub	sp, #28
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065d8:	2303      	movs	r3, #3
 80065da:	e008      	b.n	80065ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006612:	2303      	movs	r3, #3
 8006614:	e004      	b.n	8006620 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800664a:	2303      	movs	r3, #3
 800664c:	e01a      	b.n	8006684 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006654:	2b00      	cmp	r3, #0
 8006656:	d114      	bne.n	8006682 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2201      	movs	r2, #1
 800665c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006676:	2181      	movs	r1, #129	; 0x81
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fe1c 	bl	80082b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e016      	b.n	80066d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7c1b      	ldrb	r3, [r3, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066bc:	2101      	movs	r1, #1
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fe1a 	bl	80082f8 <USBD_LL_PrepareReceive>
 80066c4:	e007      	b.n	80066d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066cc:	2340      	movs	r3, #64	; 0x40
 80066ce:	2101      	movs	r1, #1
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fe11 	bl	80082f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e01f      	b.n	8006738 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	79fa      	ldrb	r2, [r7, #7]
 800672a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f001 fc8d 	bl	800804c <USBD_LL_Init>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006736:	7dfb      	ldrb	r3, [r7, #23]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	e016      	b.n	8006786 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	f107 020e 	add.w	r2, r7, #14
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fca4 	bl	80080e4 <USBD_LL_Start>
 800679c:	4603      	mov	r3, r0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	4611      	mov	r1, r2
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	4798      	blx	r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	78fa      	ldrb	r2, [r7, #3]
 8006814:	4611      	mov	r1, r2
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
  }

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ff90 	bl	800775c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2b02      	cmp	r3, #2
 800685e:	d01a      	beq.n	8006896 <USBD_LL_SetupStage+0x72>
 8006860:	2b02      	cmp	r3, #2
 8006862:	d822      	bhi.n	80068aa <USBD_LL_SetupStage+0x86>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <USBD_LL_SetupStage+0x4a>
 8006868:	2b01      	cmp	r3, #1
 800686a:	d00a      	beq.n	8006882 <USBD_LL_SetupStage+0x5e>
 800686c:	e01d      	b.n	80068aa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa62 	bl	8006d40 <USBD_StdDevReq>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e020      	b.n	80068c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fac6 	bl	8006e1c <USBD_StdItfReq>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	e016      	b.n	80068c4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fb05 	bl	8006eae <USBD_StdEPReq>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e00c      	b.n	80068c4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fc73 	bl	80081a4 <USBD_LL_StallEP>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
      break;
 80068c2:	bf00      	nop
  }

  return ret;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	460b      	mov	r3, r1
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d138      	bne.n	8006954 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d14a      	bne.n	800698a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d913      	bls.n	8006928 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4293      	cmp	r3, r2
 8006918:	bf28      	it	cs
 800691a:	4613      	movcs	r3, r2
 800691c:	461a      	mov	r2, r3
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 f80f 	bl	8007944 <USBD_CtlContinueRx>
 8006926:	e030      	b.n	800698a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b03      	cmp	r3, #3
 8006932:	d10b      	bne.n	800694c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f001 f80a 	bl	8007966 <USBD_CtlSendStatus>
 8006952:	e01a      	b.n	800698a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b03      	cmp	r3, #3
 800695e:	d114      	bne.n	800698a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	7afa      	ldrb	r2, [r7, #11]
 8006976:	4611      	mov	r1, r2
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	4798      	blx	r3
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	e000      	b.n	800698c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	460b      	mov	r3, r1
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d16b      	bne.n	8006a80 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3314      	adds	r3, #20
 80069ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d156      	bne.n	8006a66 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d914      	bls.n	80069ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	1ad2      	subs	r2, r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 ff84 	bl	80078e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e0:	2300      	movs	r3, #0
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f001 fc86 	bl	80082f8 <USBD_LL_PrepareReceive>
 80069ec:	e03b      	b.n	8006a66 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d11c      	bne.n	8006a34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d316      	bcc.n	8006a34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d20f      	bcs.n	8006a34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a14:	2200      	movs	r2, #0
 8006a16:	2100      	movs	r1, #0
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 ff65 	bl	80078e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f001 fc63 	bl	80082f8 <USBD_LL_PrepareReceive>
 8006a32:	e018      	b.n	8006a66 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d10b      	bne.n	8006a58 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a58:	2180      	movs	r1, #128	; 0x80
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fba2 	bl	80081a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 ff93 	bl	800798c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d122      	bne.n	8006ab6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff fe98 	bl	80067a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a7e:	e01a      	b.n	8006ab6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d114      	bne.n	8006ab6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	7afa      	ldrb	r2, [r7, #11]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	4798      	blx	r3
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	e000      	b.n	8006ab8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e02f      	b.n	8006b54 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6852      	ldr	r2, [r2, #4]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	4611      	mov	r1, r2
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 faf8 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2240      	movs	r2, #64	; 0x40
 8006b36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 faea 	bl	800811a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	78fa      	ldrb	r2, [r7, #3]
 8006b6c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2204      	movs	r2, #4
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d106      	bne.n	8006bca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e012      	b.n	8006c14 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d10b      	bne.n	8006c12 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e014      	b.n	8006c60 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d10d      	bne.n	8006c5e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e014      	b.n	8006cac <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d10d      	bne.n	8006caa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6852      	ldr	r2, [r2, #4]
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
  }

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3301      	adds	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d20:	8a3b      	ldrh	r3, [r7, #16]
 8006d22:	021b      	lsls	r3, r3, #8
 8006d24:	b21a      	sxth	r2, r3
 8006d26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d30:	89fb      	ldrh	r3, [r7, #14]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
	...

08006d40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d005      	beq.n	8006d66 <USBD_StdDevReq+0x26>
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d853      	bhi.n	8006e06 <USBD_StdDevReq+0xc6>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <USBD_StdDevReq+0x3a>
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d14f      	bne.n	8006e06 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
      break;
 8006d78:	e04a      	b.n	8006e10 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b09      	cmp	r3, #9
 8006d80:	d83b      	bhi.n	8006dfa <USBD_StdDevReq+0xba>
 8006d82:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <USBD_StdDevReq+0x48>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006df1 	.word	0x08006df1
 8006d90:	08006dfb 	.word	0x08006dfb
 8006d94:	08006de7 	.word	0x08006de7
 8006d98:	08006dfb 	.word	0x08006dfb
 8006d9c:	08006dbb 	.word	0x08006dbb
 8006da0:	08006db1 	.word	0x08006db1
 8006da4:	08006dfb 	.word	0x08006dfb
 8006da8:	08006dd3 	.word	0x08006dd3
 8006dac:	08006dc5 	.word	0x08006dc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9de 	bl	8007174 <USBD_GetDescriptor>
          break;
 8006db8:	e024      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fb43 	bl	8007448 <USBD_SetAddress>
          break;
 8006dc2:	e01f      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fb82 	bl	80074d0 <USBD_SetConfig>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
          break;
 8006dd0:	e018      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc21 	bl	800761c <USBD_GetConfig>
          break;
 8006dda:	e013      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fc52 	bl	8007688 <USBD_GetStatus>
          break;
 8006de4:	e00e      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fc81 	bl	80076f0 <USBD_SetFeature>
          break;
 8006dee:	e009      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc90 	bl	8007718 <USBD_ClrFeature>
          break;
 8006df8:	e004      	b.n	8006e04 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fce7 	bl	80077d0 <USBD_CtlError>
          break;
 8006e02:	bf00      	nop
      }
      break;
 8006e04:	e004      	b.n	8006e10 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fce1 	bl	80077d0 <USBD_CtlError>
      break;
 8006e0e:	bf00      	nop
  }

  return ret;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d005      	beq.n	8006e42 <USBD_StdItfReq+0x26>
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d82f      	bhi.n	8006e9a <USBD_StdItfReq+0x7e>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <USBD_StdItfReq+0x26>
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d12b      	bne.n	8006e9a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d81d      	bhi.n	8006e8c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	889b      	ldrh	r3, [r3, #4]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d813      	bhi.n	8006e82 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	88db      	ldrh	r3, [r3, #6]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <USBD_StdItfReq+0x7a>
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10d      	bne.n	8006e96 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fd73 	bl	8007966 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e80:	e009      	b.n	8006e96 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fca3 	bl	80077d0 <USBD_CtlError>
          break;
 8006e8a:	e004      	b.n	8006e96 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc9e 	bl	80077d0 <USBD_CtlError>
          break;
 8006e94:	e000      	b.n	8006e98 <USBD_StdItfReq+0x7c>
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc97 	bl	80077d0 <USBD_CtlError>
      break;
 8006ea2:	bf00      	nop
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	889b      	ldrh	r3, [r3, #4]
 8006ec0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d007      	beq.n	8006ede <USBD_StdEPReq+0x30>
 8006ece:	2b40      	cmp	r3, #64	; 0x40
 8006ed0:	f200 8145 	bhi.w	800715e <USBD_StdEPReq+0x2b0>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <USBD_StdEPReq+0x44>
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	f040 8140 	bne.w	800715e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef0:	e13a      	b.n	8007168 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d007      	beq.n	8006f0a <USBD_StdEPReq+0x5c>
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	f300 8129 	bgt.w	8007152 <USBD_StdEPReq+0x2a4>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d07f      	beq.n	8007004 <USBD_StdEPReq+0x156>
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d03c      	beq.n	8006f82 <USBD_StdEPReq+0xd4>
 8006f08:	e123      	b.n	8007152 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d002      	beq.n	8006f1c <USBD_StdEPReq+0x6e>
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d016      	beq.n	8006f48 <USBD_StdEPReq+0x9a>
 8006f1a:	e02c      	b.n	8006f76 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00d      	beq.n	8006f3e <USBD_StdEPReq+0x90>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d00a      	beq.n	8006f3e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 f939 	bl	80081a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f32:	2180      	movs	r1, #128	; 0x80
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f001 f935 	bl	80081a4 <USBD_LL_StallEP>
 8006f3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f3c:	e020      	b.n	8006f80 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc45 	bl	80077d0 <USBD_CtlError>
              break;
 8006f46:	e01b      	b.n	8006f80 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10e      	bne.n	8006f6e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <USBD_StdEPReq+0xc0>
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d008      	beq.n	8006f6e <USBD_StdEPReq+0xc0>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	88db      	ldrh	r3, [r3, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f91b 	bl	80081a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fcf9 	bl	8007966 <USBD_CtlSendStatus>

              break;
 8006f74:	e004      	b.n	8006f80 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fc29 	bl	80077d0 <USBD_CtlError>
              break;
 8006f7e:	bf00      	nop
          }
          break;
 8006f80:	e0ec      	b.n	800715c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d002      	beq.n	8006f94 <USBD_StdEPReq+0xe6>
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d016      	beq.n	8006fc0 <USBD_StdEPReq+0x112>
 8006f92:	e030      	b.n	8006ff6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <USBD_StdEPReq+0x108>
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b80      	cmp	r3, #128	; 0x80
 8006f9e:	d00a      	beq.n	8006fb6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 f8fd 	bl	80081a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006faa:	2180      	movs	r1, #128	; 0x80
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 f8f9 	bl	80081a4 <USBD_LL_StallEP>
 8006fb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fb4:	e025      	b.n	8007002 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc09 	bl	80077d0 <USBD_CtlError>
              break;
 8006fbe:	e020      	b.n	8007002 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11b      	bne.n	8007000 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 f903 	bl	80081e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fcc2 	bl	8007966 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ff4:	e004      	b.n	8007000 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fbe9 	bl	80077d0 <USBD_CtlError>
              break;
 8006ffe:	e000      	b.n	8007002 <USBD_StdEPReq+0x154>
              break;
 8007000:	bf00      	nop
          }
          break;
 8007002:	e0ab      	b.n	800715c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d002      	beq.n	8007016 <USBD_StdEPReq+0x168>
 8007010:	2b03      	cmp	r3, #3
 8007012:	d032      	beq.n	800707a <USBD_StdEPReq+0x1cc>
 8007014:	e097      	b.n	8007146 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <USBD_StdEPReq+0x17e>
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d004      	beq.n	800702c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fbd3 	bl	80077d0 <USBD_CtlError>
                break;
 800702a:	e091      	b.n	8007150 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800702c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007030:	2b00      	cmp	r3, #0
 8007032:	da0b      	bge.n	800704c <USBD_StdEPReq+0x19e>
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	3310      	adds	r3, #16
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	e00b      	b.n	8007064 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	3304      	adds	r3, #4
 8007064:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2202      	movs	r2, #2
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fc1d 	bl	80078b2 <USBD_CtlSendData>
              break;
 8007078:	e06a      	b.n	8007150 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800707a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da11      	bge.n	80070a6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	f003 020f 	and.w	r2, r3, #15
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	3324      	adds	r3, #36	; 0x24
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d117      	bne.n	80070cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fb96 	bl	80077d0 <USBD_CtlError>
                  break;
 80070a4:	e054      	b.n	8007150 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070a6:	7bbb      	ldrb	r3, [r7, #14]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fb83 	bl	80077d0 <USBD_CtlError>
                  break;
 80070ca:	e041      	b.n	8007150 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da0b      	bge.n	80070ec <USBD_StdEPReq+0x23e>
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	3310      	adds	r3, #16
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	3304      	adds	r3, #4
 80070ea:	e00b      	b.n	8007104 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <USBD_StdEPReq+0x264>
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d103      	bne.n	800711a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	e00e      	b.n	8007138 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f87e 	bl	8008220 <USBD_LL_IsStallEP>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e002      	b.n	8007138 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2202      	movs	r2, #2
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fbb7 	bl	80078b2 <USBD_CtlSendData>
              break;
 8007144:	e004      	b.n	8007150 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb41 	bl	80077d0 <USBD_CtlError>
              break;
 800714e:	bf00      	nop
          }
          break;
 8007150:	e004      	b.n	800715c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fb3b 	bl	80077d0 <USBD_CtlError>
          break;
 800715a:	bf00      	nop
      }
      break;
 800715c:	e004      	b.n	8007168 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fb35 	bl	80077d0 <USBD_CtlError>
      break;
 8007166:	bf00      	nop
  }

  return ret;
 8007168:	7bfb      	ldrb	r3, [r7, #15]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	0a1b      	lsrs	r3, r3, #8
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	2b06      	cmp	r3, #6
 8007196:	f200 8128 	bhi.w	80073ea <USBD_GetDescriptor+0x276>
 800719a:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <USBD_GetDescriptor+0x2c>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	080071bd 	.word	0x080071bd
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	08007215 	.word	0x08007215
 80071ac:	080073eb 	.word	0x080073eb
 80071b0:	080073eb 	.word	0x080073eb
 80071b4:	0800738b 	.word	0x0800738b
 80071b8:	080073b7 	.word	0x080073b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
      break;
 80071d2:	e112      	b.n	80073fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	7c1b      	ldrb	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10d      	bne.n	80071f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	f107 0208 	add.w	r2, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3301      	adds	r3, #1
 80071f2:	2202      	movs	r2, #2
 80071f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80071f6:	e100      	b.n	80073fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	f107 0208 	add.w	r2, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3301      	adds	r3, #1
 800720e:	2202      	movs	r2, #2
 8007210:	701a      	strb	r2, [r3, #0]
      break;
 8007212:	e0f2      	b.n	80073fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	885b      	ldrh	r3, [r3, #2]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b05      	cmp	r3, #5
 800721c:	f200 80ac 	bhi.w	8007378 <USBD_GetDescriptor+0x204>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <USBD_GetDescriptor+0xb4>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007241 	.word	0x08007241
 800722c:	08007275 	.word	0x08007275
 8007230:	080072a9 	.word	0x080072a9
 8007234:	080072dd 	.word	0x080072dd
 8007238:	08007311 	.word	0x08007311
 800723c:	08007345 	.word	0x08007345
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00b      	beq.n	8007264 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	7c12      	ldrb	r2, [r2, #16]
 8007258:	f107 0108 	add.w	r1, r7, #8
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
 8007260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007262:	e091      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fab2 	bl	80077d0 <USBD_CtlError>
            err++;
 800726c:	7afb      	ldrb	r3, [r7, #11]
 800726e:	3301      	adds	r3, #1
 8007270:	72fb      	strb	r3, [r7, #11]
          break;
 8007272:	e089      	b.n	8007388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	7c12      	ldrb	r2, [r2, #16]
 800728c:	f107 0108 	add.w	r1, r7, #8
 8007290:	4610      	mov	r0, r2
 8007292:	4798      	blx	r3
 8007294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007296:	e077      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa98 	bl	80077d0 <USBD_CtlError>
            err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
          break;
 80072a6:	e06f      	b.n	8007388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7c12      	ldrb	r2, [r2, #16]
 80072c0:	f107 0108 	add.w	r1, r7, #8
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ca:	e05d      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa7e 	bl	80077d0 <USBD_CtlError>
            err++;
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	3301      	adds	r3, #1
 80072d8:	72fb      	strb	r3, [r7, #11]
          break;
 80072da:	e055      	b.n	8007388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00b      	beq.n	8007300 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	7c12      	ldrb	r2, [r2, #16]
 80072f4:	f107 0108 	add.w	r1, r7, #8
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
 80072fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072fe:	e043      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa64 	bl	80077d0 <USBD_CtlError>
            err++;
 8007308:	7afb      	ldrb	r3, [r7, #11]
 800730a:	3301      	adds	r3, #1
 800730c:	72fb      	strb	r3, [r7, #11]
          break;
 800730e:	e03b      	b.n	8007388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00b      	beq.n	8007334 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	7c12      	ldrb	r2, [r2, #16]
 8007328:	f107 0108 	add.w	r1, r7, #8
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
 8007330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007332:	e029      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fa4a 	bl	80077d0 <USBD_CtlError>
            err++;
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	3301      	adds	r3, #1
 8007340:	72fb      	strb	r3, [r7, #11]
          break;
 8007342:	e021      	b.n	8007388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	7c12      	ldrb	r2, [r2, #16]
 800735c:	f107 0108 	add.w	r1, r7, #8
 8007360:	4610      	mov	r0, r2
 8007362:	4798      	blx	r3
 8007364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007366:	e00f      	b.n	8007388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa30 	bl	80077d0 <USBD_CtlError>
            err++;
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	3301      	adds	r3, #1
 8007374:	72fb      	strb	r3, [r7, #11]
          break;
 8007376:	e007      	b.n	8007388 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa28 	bl	80077d0 <USBD_CtlError>
          err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007386:	bf00      	nop
      }
      break;
 8007388:	e037      	b.n	80073fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	7c1b      	ldrb	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	4610      	mov	r0, r2
 80073a0:	4798      	blx	r3
 80073a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073a4:	e029      	b.n	80073fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa11 	bl	80077d0 <USBD_CtlError>
        err++;
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	3301      	adds	r3, #1
 80073b2:	72fb      	strb	r3, [r7, #11]
      break;
 80073b4:	e021      	b.n	80073fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	7c1b      	ldrb	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10d      	bne.n	80073da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	f107 0208 	add.w	r2, r7, #8
 80073ca:	4610      	mov	r0, r2
 80073cc:	4798      	blx	r3
 80073ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	2207      	movs	r2, #7
 80073d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073d8:	e00f      	b.n	80073fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9f7 	bl	80077d0 <USBD_CtlError>
        err++;
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	3301      	adds	r3, #1
 80073e6:	72fb      	strb	r3, [r7, #11]
      break;
 80073e8:	e007      	b.n	80073fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f9ef 	bl	80077d0 <USBD_CtlError>
      err++;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	3301      	adds	r3, #1
 80073f6:	72fb      	strb	r3, [r7, #11]
      break;
 80073f8:	bf00      	nop
  }

  if (err != 0U)
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d11e      	bne.n	800743e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	88db      	ldrh	r3, [r3, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d016      	beq.n	8007436 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007408:	893b      	ldrh	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00e      	beq.n	800742c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88da      	ldrh	r2, [r3, #6]
 8007412:	893b      	ldrh	r3, [r7, #8]
 8007414:	4293      	cmp	r3, r2
 8007416:	bf28      	it	cs
 8007418:	4613      	movcs	r3, r2
 800741a:	b29b      	uxth	r3, r3
 800741c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800741e:	893b      	ldrh	r3, [r7, #8]
 8007420:	461a      	mov	r2, r3
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa44 	bl	80078b2 <USBD_CtlSendData>
 800742a:	e009      	b.n	8007440 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9ce 	bl	80077d0 <USBD_CtlError>
 8007434:	e004      	b.n	8007440 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa95 	bl	8007966 <USBD_CtlSendStatus>
 800743c:	e000      	b.n	8007440 <USBD_GetDescriptor+0x2cc>
    return;
 800743e:	bf00      	nop
  }
}
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop

08007448 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	889b      	ldrh	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d131      	bne.n	80074be <USBD_SetAddress+0x76>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88db      	ldrh	r3, [r3, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d12d      	bne.n	80074be <USBD_SetAddress+0x76>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	885b      	ldrh	r3, [r3, #2]
 8007466:	2b7f      	cmp	r3, #127	; 0x7f
 8007468:	d829      	bhi.n	80074be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	885b      	ldrh	r3, [r3, #2]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007474:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b03      	cmp	r3, #3
 8007480:	d104      	bne.n	800748c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f9a3 	bl	80077d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748a:	e01d      	b.n	80074c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7bfa      	ldrb	r2, [r7, #15]
 8007490:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 feed 	bl	8008278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa61 	bl	8007966 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d004      	beq.n	80074b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b2:	e009      	b.n	80074c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074bc:	e004      	b.n	80074c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f985 	bl	80077d0 <USBD_CtlError>
  }
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	4b4c      	ldr	r3, [pc, #304]	; (8007618 <USBD_SetConfig+0x148>)
 80074e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074e8:	4b4b      	ldr	r3, [pc, #300]	; (8007618 <USBD_SetConfig+0x148>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d905      	bls.n	80074fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f96c 	bl	80077d0 <USBD_CtlError>
    return USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e088      	b.n	800760e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d002      	beq.n	800750e <USBD_SetConfig+0x3e>
 8007508:	2b03      	cmp	r3, #3
 800750a:	d025      	beq.n	8007558 <USBD_SetConfig+0x88>
 800750c:	e071      	b.n	80075f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800750e:	4b42      	ldr	r3, [pc, #264]	; (8007618 <USBD_SetConfig+0x148>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01c      	beq.n	8007550 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007516:	4b40      	ldr	r3, [pc, #256]	; (8007618 <USBD_SetConfig+0x148>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007520:	4b3d      	ldr	r3, [pc, #244]	; (8007618 <USBD_SetConfig+0x148>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff f948 	bl	80067bc <USBD_SetClassConfig>
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f949 	bl	80077d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800753e:	e065      	b.n	800760c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa10 	bl	8007966 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2203      	movs	r2, #3
 800754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800754e:	e05d      	b.n	800760c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa08 	bl	8007966 <USBD_CtlSendStatus>
      break;
 8007556:	e059      	b.n	800760c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007558:	4b2f      	ldr	r3, [pc, #188]	; (8007618 <USBD_SetConfig+0x148>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d112      	bne.n	8007586 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007568:	4b2b      	ldr	r3, [pc, #172]	; (8007618 <USBD_SetConfig+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	461a      	mov	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007572:	4b29      	ldr	r3, [pc, #164]	; (8007618 <USBD_SetConfig+0x148>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f93b 	bl	80067f4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9f1 	bl	8007966 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007584:	e042      	b.n	800760c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <USBD_SetConfig+0x148>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d02a      	beq.n	80075ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff f929 	bl	80067f4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075a2:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <USBD_SetConfig+0x148>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ac:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <USBD_SetConfig+0x148>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff f902 	bl	80067bc <USBD_SetClassConfig>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00f      	beq.n	80075e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f903 	bl	80077d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff f90e 	bl	80067f4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80075e0:	e014      	b.n	800760c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9bf 	bl	8007966 <USBD_CtlSendStatus>
      break;
 80075e8:	e010      	b.n	800760c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9bb 	bl	8007966 <USBD_CtlSendStatus>
      break;
 80075f0:	e00c      	b.n	800760c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8eb 	bl	80077d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <USBD_SetConfig+0x148>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f8f7 	bl	80067f4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
      break;
 800760a:	bf00      	nop
  }

  return ret;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200003a0 	.word	0x200003a0

0800761c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	88db      	ldrh	r3, [r3, #6]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d004      	beq.n	8007638 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f8cd 	bl	80077d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007636:	e023      	b.n	8007680 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	dc02      	bgt.n	800764a <USBD_GetConfig+0x2e>
 8007644:	2b00      	cmp	r3, #0
 8007646:	dc03      	bgt.n	8007650 <USBD_GetConfig+0x34>
 8007648:	e015      	b.n	8007676 <USBD_GetConfig+0x5a>
 800764a:	2b03      	cmp	r3, #3
 800764c:	d00b      	beq.n	8007666 <USBD_GetConfig+0x4a>
 800764e:	e012      	b.n	8007676 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3308      	adds	r3, #8
 800765a:	2201      	movs	r2, #1
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f927 	bl	80078b2 <USBD_CtlSendData>
        break;
 8007664:	e00c      	b.n	8007680 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3304      	adds	r3, #4
 800766a:	2201      	movs	r2, #1
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f91f 	bl	80078b2 <USBD_CtlSendData>
        break;
 8007674:	e004      	b.n	8007680 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8a9 	bl	80077d0 <USBD_CtlError>
        break;
 800767e:	bf00      	nop
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007698:	b2db      	uxtb	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	2b02      	cmp	r3, #2
 800769e:	d81e      	bhi.n	80076de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d004      	beq.n	80076b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f890 	bl	80077d0 <USBD_CtlError>
        break;
 80076b0:	e01a      	b.n	80076e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f043 0202 	orr.w	r2, r3, #2
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	330c      	adds	r3, #12
 80076d2:	2202      	movs	r2, #2
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f8eb 	bl	80078b2 <USBD_CtlSendData>
      break;
 80076dc:	e004      	b.n	80076e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f875 	bl	80077d0 <USBD_CtlError>
      break;
 80076e6:	bf00      	nop
  }
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	885b      	ldrh	r3, [r3, #2]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d106      	bne.n	8007710 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f92b 	bl	8007966 <USBD_CtlSendStatus>
  }
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007728:	b2db      	uxtb	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	2b02      	cmp	r3, #2
 800772e:	d80b      	bhi.n	8007748 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d10c      	bne.n	8007752 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f910 	bl	8007966 <USBD_CtlSendStatus>
      }
      break;
 8007746:	e004      	b.n	8007752 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f840 	bl	80077d0 <USBD_CtlError>
      break;
 8007750:	e000      	b.n	8007754 <USBD_ClrFeature+0x3c>
      break;
 8007752:	bf00      	nop
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3301      	adds	r3, #1
 8007784:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff fabb 	bl	8006d02 <SWAPBYTE>
 800778c:	4603      	mov	r3, r0
 800778e:	461a      	mov	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3301      	adds	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff faae 	bl	8006d02 <SWAPBYTE>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f7ff faa1 	bl	8006d02 <SWAPBYTE>
 80077c0:	4603      	mov	r3, r0
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	80da      	strh	r2, [r3, #6]
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80077da:	2180      	movs	r1, #128	; 0x80
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fce1 	bl	80081a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80077e2:	2100      	movs	r1, #0
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fcdd 	bl	80081a4 <USBD_LL_StallEP>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b086      	sub	sp, #24
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d036      	beq.n	8007876 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800780c:	6938      	ldr	r0, [r7, #16]
 800780e:	f000 f836 	bl	800787e <USBD_GetLen>
 8007812:	4603      	mov	r3, r0
 8007814:	3301      	adds	r3, #1
 8007816:	b29b      	uxth	r3, r3
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	4413      	add	r3, r2
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	701a      	strb	r2, [r3, #0]
  idx++;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	3301      	adds	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	4413      	add	r3, r2
 8007838:	2203      	movs	r2, #3
 800783a:	701a      	strb	r2, [r3, #0]
  idx++;
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	3301      	adds	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007842:	e013      	b.n	800786c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	4413      	add	r3, r2
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	7812      	ldrb	r2, [r2, #0]
 800784e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	3301      	adds	r3, #1
 8007854:	613b      	str	r3, [r7, #16]
    idx++;
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	3301      	adds	r3, #1
 800785a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4413      	add	r3, r2
 8007862:	2200      	movs	r2, #0
 8007864:	701a      	strb	r2, [r3, #0]
    idx++;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	3301      	adds	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e7      	bne.n	8007844 <USBD_GetString+0x52>
 8007874:	e000      	b.n	8007878 <USBD_GetString+0x86>
    return;
 8007876:	bf00      	nop
  }
}
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800788e:	e005      	b.n	800789c <USBD_GetLen+0x1e>
  {
    len++;
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	3301      	adds	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	3301      	adds	r3, #1
 800789a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f5      	bne.n	8007890 <USBD_GetLen+0x12>
  }

  return len;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	2100      	movs	r1, #0
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 fcec 	bl	80082b6 <USBD_LL_Transmit>

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	2100      	movs	r1, #0
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fcdb 	bl	80082b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2203      	movs	r2, #3
 800791a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fcdf 	bl	80082f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	2100      	movs	r1, #0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fcce 	bl	80082f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b082      	sub	sp, #8
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2204      	movs	r2, #4
 8007972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007976:	2300      	movs	r3, #0
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fc9a 	bl	80082b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2205      	movs	r2, #5
 8007998:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fca8 	bl	80082f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079b8:	2200      	movs	r2, #0
 80079ba:	4912      	ldr	r1, [pc, #72]	; (8007a04 <MX_USB_DEVICE_Init+0x50>)
 80079bc:	4812      	ldr	r0, [pc, #72]	; (8007a08 <MX_USB_DEVICE_Init+0x54>)
 80079be:	f7fe fe8f 	bl	80066e0 <USBD_Init>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079c8:	f7f9 fab4 	bl	8000f34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079cc:	490f      	ldr	r1, [pc, #60]	; (8007a0c <MX_USB_DEVICE_Init+0x58>)
 80079ce:	480e      	ldr	r0, [pc, #56]	; (8007a08 <MX_USB_DEVICE_Init+0x54>)
 80079d0:	f7fe feb6 	bl	8006740 <USBD_RegisterClass>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079da:	f7f9 faab 	bl	8000f34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079de:	490c      	ldr	r1, [pc, #48]	; (8007a10 <MX_USB_DEVICE_Init+0x5c>)
 80079e0:	4809      	ldr	r0, [pc, #36]	; (8007a08 <MX_USB_DEVICE_Init+0x54>)
 80079e2:	f7fe fdd7 	bl	8006594 <USBD_CDC_RegisterInterface>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079ec:	f7f9 faa2 	bl	8000f34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f0:	4805      	ldr	r0, [pc, #20]	; (8007a08 <MX_USB_DEVICE_Init+0x54>)
 80079f2:	f7fe fecc 	bl	800678e <USBD_Start>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079fc:	f7f9 fa9a 	bl	8000f34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a00:	bf00      	nop
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	2000016c 	.word	0x2000016c
 8007a08:	200003a4 	.word	0x200003a4
 8007a0c:	20000054 	.word	0x20000054
 8007a10:	20000158 	.word	0x20000158

08007a14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4905      	ldr	r1, [pc, #20]	; (8007a30 <CDC_Init_FS+0x1c>)
 8007a1c:	4805      	ldr	r0, [pc, #20]	; (8007a34 <CDC_Init_FS+0x20>)
 8007a1e:	f7fe fdce 	bl	80065be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a22:	4905      	ldr	r1, [pc, #20]	; (8007a38 <CDC_Init_FS+0x24>)
 8007a24:	4803      	ldr	r0, [pc, #12]	; (8007a34 <CDC_Init_FS+0x20>)
 8007a26:	f7fe fde8 	bl	80065fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000e74 	.word	0x20000e74
 8007a34:	200003a4 	.word	0x200003a4
 8007a38:	20000674 	.word	0x20000674

08007a3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	6039      	str	r1, [r7, #0]
 8007a56:	71fb      	strb	r3, [r7, #7]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b23      	cmp	r3, #35	; 0x23
 8007a60:	d84a      	bhi.n	8007af8 <CDC_Control_FS+0xac>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <CDC_Control_FS+0x1c>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007af9 	.word	0x08007af9
 8007a6c:	08007af9 	.word	0x08007af9
 8007a70:	08007af9 	.word	0x08007af9
 8007a74:	08007af9 	.word	0x08007af9
 8007a78:	08007af9 	.word	0x08007af9
 8007a7c:	08007af9 	.word	0x08007af9
 8007a80:	08007af9 	.word	0x08007af9
 8007a84:	08007af9 	.word	0x08007af9
 8007a88:	08007af9 	.word	0x08007af9
 8007a8c:	08007af9 	.word	0x08007af9
 8007a90:	08007af9 	.word	0x08007af9
 8007a94:	08007af9 	.word	0x08007af9
 8007a98:	08007af9 	.word	0x08007af9
 8007a9c:	08007af9 	.word	0x08007af9
 8007aa0:	08007af9 	.word	0x08007af9
 8007aa4:	08007af9 	.word	0x08007af9
 8007aa8:	08007af9 	.word	0x08007af9
 8007aac:	08007af9 	.word	0x08007af9
 8007ab0:	08007af9 	.word	0x08007af9
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007af9 	.word	0x08007af9
 8007abc:	08007af9 	.word	0x08007af9
 8007ac0:	08007af9 	.word	0x08007af9
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007af9 	.word	0x08007af9
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007af9 	.word	0x08007af9
 8007adc:	08007af9 	.word	0x08007af9
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007af9 	.word	0x08007af9
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007af9 	.word	0x08007af9
 8007af0:	08007af9 	.word	0x08007af9
 8007af4:	08007af9 	.word	0x08007af9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007af8:	bf00      	nop
  }

  return (USBD_OK);
 8007afa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	4805      	ldr	r0, [pc, #20]	; (8007b2c <CDC_Receive_FS+0x24>)
 8007b16:	f7fe fd70 	bl	80065fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b1a:	4804      	ldr	r0, [pc, #16]	; (8007b2c <CDC_Receive_FS+0x24>)
 8007b1c:	f7fe fdb6 	bl	800668c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200003a4 	.word	0x200003a4

08007b30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b40:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <CDC_Transmit_FS+0x48>)
 8007b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e00b      	b.n	8007b6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b56:	887b      	ldrh	r3, [r7, #2]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4806      	ldr	r0, [pc, #24]	; (8007b78 <CDC_Transmit_FS+0x48>)
 8007b5e:	f7fe fd2e 	bl	80065be <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b62:	4805      	ldr	r0, [pc, #20]	; (8007b78 <CDC_Transmit_FS+0x48>)
 8007b64:	f7fe fd62 	bl	800662c <USBD_CDC_TransmitPacket>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200003a4 	.word	0x200003a4

08007b7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
	...

08007ba0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2212      	movs	r2, #18
 8007bb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bb2:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20000188 	.word	0x20000188

08007bc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	6039      	str	r1, [r7, #0]
 8007bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2204      	movs	r2, #4
 8007bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bd6:	4b03      	ldr	r3, [pc, #12]	; (8007be4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	2000019c 	.word	0x2000019c

08007be8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	4907      	ldr	r1, [pc, #28]	; (8007c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8007bfe:	4808      	ldr	r0, [pc, #32]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c00:	f7ff fdf7 	bl	80077f2 <USBD_GetString>
 8007c04:	e004      	b.n	8007c10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <USBD_FS_ProductStrDescriptor+0x34>)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c0c:	f7ff fdf1 	bl	80077f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20001674 	.word	0x20001674
 8007c20:	08008ecc 	.word	0x08008ecc

08007c24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	4904      	ldr	r1, [pc, #16]	; (8007c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c34:	4804      	ldr	r0, [pc, #16]	; (8007c48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c36:	f7ff fddc 	bl	80077f2 <USBD_GetString>
  return USBD_StrDesc;
 8007c3a:	4b02      	ldr	r3, [pc, #8]	; (8007c44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3708      	adds	r7, #8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20001674 	.word	0x20001674
 8007c48:	08008ee4 	.word	0x08008ee4

08007c4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	221a      	movs	r2, #26
 8007c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c5e:	f000 f843 	bl	8007ce8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c62:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	200001a0 	.word	0x200001a0

08007c70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	6039      	str	r1, [r7, #0]
 8007c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4907      	ldr	r1, [pc, #28]	; (8007ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c86:	4808      	ldr	r0, [pc, #32]	; (8007ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c88:	f7ff fdb3 	bl	80077f2 <USBD_GetString>
 8007c8c:	e004      	b.n	8007c98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c94:	f7ff fdad 	bl	80077f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20001674 	.word	0x20001674
 8007ca8:	08008ef8 	.word	0x08008ef8

08007cac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	6039      	str	r1, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4907      	ldr	r1, [pc, #28]	; (8007ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cc2:	4808      	ldr	r0, [pc, #32]	; (8007ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cc4:	f7ff fd95 	bl	80077f2 <USBD_GetString>
 8007cc8:	e004      	b.n	8007cd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4904      	ldr	r1, [pc, #16]	; (8007ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cce:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cd0:	f7ff fd8f 	bl	80077f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cd4:	4b02      	ldr	r3, [pc, #8]	; (8007ce0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20001674 	.word	0x20001674
 8007ce4:	08008f04 	.word	0x08008f04

08007ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <Get_SerialNum+0x44>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <Get_SerialNum+0x48>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <Get_SerialNum+0x4c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4413      	add	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d0e:	2208      	movs	r2, #8
 8007d10:	4909      	ldr	r1, [pc, #36]	; (8007d38 <Get_SerialNum+0x50>)
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f814 	bl	8007d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d18:	2204      	movs	r2, #4
 8007d1a:	4908      	ldr	r1, [pc, #32]	; (8007d3c <Get_SerialNum+0x54>)
 8007d1c:	68b8      	ldr	r0, [r7, #8]
 8007d1e:	f000 f80f 	bl	8007d40 <IntToUnicode>
  }
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	1fff7a10 	.word	0x1fff7a10
 8007d30:	1fff7a14 	.word	0x1fff7a14
 8007d34:	1fff7a18 	.word	0x1fff7a18
 8007d38:	200001a2 	.word	0x200001a2
 8007d3c:	200001b2 	.word	0x200001b2

08007d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
 8007d56:	e027      	b.n	8007da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	0f1b      	lsrs	r3, r3, #28
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d80b      	bhi.n	8007d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	440b      	add	r3, r1
 8007d70:	3230      	adds	r2, #48	; 0x30
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e00a      	b.n	8007d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	0f1b      	lsrs	r3, r3, #28
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	4619      	mov	r1, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	440b      	add	r3, r1
 8007d88:	3237      	adds	r2, #55	; 0x37
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	3301      	adds	r3, #1
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	3301      	adds	r3, #1
 8007da6:	75fb      	strb	r3, [r7, #23]
 8007da8:	7dfa      	ldrb	r2, [r7, #23]
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d3d3      	bcc.n	8007d58 <IntToUnicode+0x18>
  }
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	371c      	adds	r7, #28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
	...

08007dc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de0:	d13a      	bne.n	8007e58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007dec:	f043 0301 	orr.w	r3, r3, #1
 8007df0:	6313      	str	r3, [r2, #48]	; 0x30
 8007df2:	4b1b      	ldr	r3, [pc, #108]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e04:	2302      	movs	r3, #2
 8007e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e10:	230a      	movs	r3, #10
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e14:	f107 0314 	add.w	r3, r7, #20
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4812      	ldr	r0, [pc, #72]	; (8007e64 <HAL_PCD_MspInit+0xa4>)
 8007e1c:	f7fa f97e 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e20:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e24:	4a0e      	ldr	r2, [pc, #56]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e34:	4a0a      	ldr	r2, [pc, #40]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007e3c:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <HAL_PCD_MspInit+0xa0>)
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	2043      	movs	r0, #67	; 0x43
 8007e4e:	f7fa f92a 	bl	80020a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e52:	2043      	movs	r0, #67	; 0x43
 8007e54:	f7fa f943 	bl	80020de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3728      	adds	r7, #40	; 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40020000 	.word	0x40020000

08007e68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f7fe fcd0 	bl	8006824 <USBD_LL_SetupStage>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e9e:	78fa      	ldrb	r2, [r7, #3]
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f7fe fd0a 	bl	80068ce <USBD_LL_DataOutStage>
}
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	1a9b      	subs	r3, r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	3348      	adds	r3, #72	; 0x48
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f7fe fd53 	bl	8006994 <USBD_LL_DataInStage>
}
 8007eee:	bf00      	nop
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b082      	sub	sp, #8
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fe67 	bl	8006bd8 <USBD_LL_SOF>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d102      	bne.n	8007f2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
 8007f2a:	e008      	b.n	8007f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d102      	bne.n	8007f3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f34:	2301      	movs	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
 8007f38:	e001      	b.n	8007f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f3a:	f7f8 fffb 	bl	8000f34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe fe07 	bl	8006b5c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fe fdb3 	bl	8006ac0 <USBD_LL_Reset>
}
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fe02 	bl	8006b7c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <HAL_PCD_SuspendCallback+0x48>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	4a03      	ldr	r2, [pc, #12]	; (8007fac <HAL_PCD_SuspendCallback+0x48>)
 8007f9e:	f043 0306 	orr.w	r3, r3, #6
 8007fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	e000ed00 	.word	0xe000ed00

08007fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fdf2 	bl	8006ba8 <USBD_LL_Resume>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fde:	78fa      	ldrb	r2, [r7, #3]
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fe40 	bl	8006c68 <USBD_LL_IsoOUTIncomplete>
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fe08 	bl	8006c1c <USBD_LL_IsoINIncomplete>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fe46 	bl	8006cb4 <USBD_LL_DevConnected>
}
 8008028:	bf00      	nop
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fe43 	bl	8006cca <USBD_LL_DevDisconnected>
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d13c      	bne.n	80080d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800805c:	4a20      	ldr	r2, [pc, #128]	; (80080e0 <USBD_LL_Init+0x94>)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <USBD_LL_Init+0x94>)
 8008068:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800806c:	4b1c      	ldr	r3, [pc, #112]	; (80080e0 <USBD_LL_Init+0x94>)
 800806e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008072:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008074:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <USBD_LL_Init+0x94>)
 8008076:	2204      	movs	r2, #4
 8008078:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <USBD_LL_Init+0x94>)
 800807c:	2202      	movs	r2, #2
 800807e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008080:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <USBD_LL_Init+0x94>)
 8008082:	2200      	movs	r2, #0
 8008084:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008086:	4b16      	ldr	r3, [pc, #88]	; (80080e0 <USBD_LL_Init+0x94>)
 8008088:	2202      	movs	r2, #2
 800808a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800808c:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <USBD_LL_Init+0x94>)
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <USBD_LL_Init+0x94>)
 8008094:	2200      	movs	r2, #0
 8008096:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008098:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <USBD_LL_Init+0x94>)
 800809a:	2200      	movs	r2, #0
 800809c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <USBD_LL_Init+0x94>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80080a4:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <USBD_LL_Init+0x94>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80080aa:	480d      	ldr	r0, [pc, #52]	; (80080e0 <USBD_LL_Init+0x94>)
 80080ac:	f7fa f9eb 	bl	8002486 <HAL_PCD_Init>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80080b6:	f7f8 ff3d 	bl	8000f34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80080ba:	2180      	movs	r1, #128	; 0x80
 80080bc:	4808      	ldr	r0, [pc, #32]	; (80080e0 <USBD_LL_Init+0x94>)
 80080be:	f7fb fb48 	bl	8003752 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80080c2:	2240      	movs	r2, #64	; 0x40
 80080c4:	2100      	movs	r1, #0
 80080c6:	4806      	ldr	r0, [pc, #24]	; (80080e0 <USBD_LL_Init+0x94>)
 80080c8:	f7fb fafc 	bl	80036c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080cc:	2280      	movs	r2, #128	; 0x80
 80080ce:	2101      	movs	r1, #1
 80080d0:	4803      	ldr	r0, [pc, #12]	; (80080e0 <USBD_LL_Init+0x94>)
 80080d2:	f7fb faf7 	bl	80036c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20001874 	.word	0x20001874

080080e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fa fae0 	bl	80026c0 <HAL_PCD_Start>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f942 	bl	8008390 <USBD_Get_USB_Status>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008110:	7bbb      	ldrb	r3, [r7, #14]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	4608      	mov	r0, r1
 8008124:	4611      	mov	r1, r2
 8008126:	461a      	mov	r2, r3
 8008128:	4603      	mov	r3, r0
 800812a:	70fb      	strb	r3, [r7, #3]
 800812c:	460b      	mov	r3, r1
 800812e:	70bb      	strb	r3, [r7, #2]
 8008130:	4613      	mov	r3, r2
 8008132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008142:	78bb      	ldrb	r3, [r7, #2]
 8008144:	883a      	ldrh	r2, [r7, #0]
 8008146:	78f9      	ldrb	r1, [r7, #3]
 8008148:	f7fa fec4 	bl	8002ed4 <HAL_PCD_EP_Open>
 800814c:	4603      	mov	r3, r0
 800814e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f91c 	bl	8008390 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800815c:	7bbb      	ldrb	r3, [r7, #14]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7fa ff0d 	bl	8002fa4 <HAL_PCD_EP_Close>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f8fd 	bl	8008390 <USBD_Get_USB_Status>
 8008196:	4603      	mov	r3, r0
 8008198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800819a:	7bbb      	ldrb	r3, [r7, #14]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fa ffe5 	bl	8003192 <HAL_PCD_EP_SetStall>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f8de 	bl	8008390 <USBD_Get_USB_Status>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f7fb f82a 	bl	800325a <HAL_PCD_EP_ClrStall>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f8bf 	bl	8008390 <USBD_Get_USB_Status>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008216:	7bbb      	ldrb	r3, [r7, #14]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008238:	2b00      	cmp	r3, #0
 800823a:	da0b      	bge.n	8008254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	1a9b      	subs	r3, r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	333e      	adds	r3, #62	; 0x3e
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	e00b      	b.n	800826c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800825a:	68f9      	ldr	r1, [r7, #12]
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800826a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800826c:	4618      	mov	r0, r3
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f7fa fdf7 	bl	8002e8a <HAL_PCD_SetAddress>
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 f874 	bl	8008390 <USBD_Get_USB_Status>
 80082a8:	4603      	mov	r3, r0
 80082aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b086      	sub	sp, #24
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	460b      	mov	r3, r1
 80082c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082d4:	7af9      	ldrb	r1, [r7, #11]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	f7fa ff10 	bl	80030fe <HAL_PCD_EP_Transmit>
 80082de:	4603      	mov	r3, r0
 80082e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 f853 	bl	8008390 <USBD_Get_USB_Status>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	607a      	str	r2, [r7, #4]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	460b      	mov	r3, r1
 8008306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008316:	7af9      	ldrb	r1, [r7, #11]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	f7fa fe8c 	bl	8003038 <HAL_PCD_EP_Receive>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f832 	bl	8008390 <USBD_Get_USB_Status>
 800832c:	4603      	mov	r3, r0
 800832e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008330:	7dbb      	ldrb	r3, [r7, #22]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f7fa febc 	bl	80030ce <HAL_PCD_EP_GetRxCount>
 8008356:	4603      	mov	r3, r0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008368:	4b03      	ldr	r3, [pc, #12]	; (8008378 <USBD_static_malloc+0x18>)
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20001c7c 	.word	0x20001c7c

0800837c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]

}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d817      	bhi.n	80083d4 <USBD_Get_USB_Status+0x44>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USBD_Get_USB_Status+0x1c>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083c3 	.word	0x080083c3
 80083b4:	080083c9 	.word	0x080083c9
 80083b8:	080083cf 	.word	0x080083cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
    break;
 80083c0:	e00b      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083c2:	2303      	movs	r3, #3
 80083c4:	73fb      	strb	r3, [r7, #15]
    break;
 80083c6:	e008      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
    break;
 80083cc:	e005      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083ce:	2303      	movs	r3, #3
 80083d0:	73fb      	strb	r3, [r7, #15]
    break;
 80083d2:	e002      	b.n	80083da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	73fb      	strb	r3, [r7, #15]
    break;
 80083d8:	bf00      	nop
  }
  return usb_status;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <atoi>:
 80083e8:	220a      	movs	r2, #10
 80083ea:	2100      	movs	r1, #0
 80083ec:	f000 b8d4 	b.w	8008598 <strtol>

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	; (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	200001bc 	.word	0x200001bc

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4d0d      	ldr	r5, [pc, #52]	; (8008434 <__libc_init_array+0x38>)
 8008400:	4c0d      	ldr	r4, [pc, #52]	; (8008438 <__libc_init_array+0x3c>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	2600      	movs	r6, #0
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	4d0b      	ldr	r5, [pc, #44]	; (800843c <__libc_init_array+0x40>)
 800840e:	4c0c      	ldr	r4, [pc, #48]	; (8008440 <__libc_init_array+0x44>)
 8008410:	f000 fd1a 	bl	8008e48 <_init>
 8008414:	1b64      	subs	r4, r4, r5
 8008416:	10a4      	asrs	r4, r4, #2
 8008418:	2600      	movs	r6, #0
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	f855 3b04 	ldr.w	r3, [r5], #4
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	f855 3b04 	ldr.w	r3, [r5], #4
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	08009068 	.word	0x08009068
 8008438:	08009068 	.word	0x08009068
 800843c:	08009068 	.word	0x08009068
 8008440:	0800906c 	.word	0x0800906c

08008444 <memset>:
 8008444:	4402      	add	r2, r0
 8008446:	4603      	mov	r3, r0
 8008448:	4293      	cmp	r3, r2
 800844a:	d100      	bne.n	800844e <memset+0xa>
 800844c:	4770      	bx	lr
 800844e:	f803 1b01 	strb.w	r1, [r3], #1
 8008452:	e7f9      	b.n	8008448 <memset+0x4>

08008454 <siprintf>:
 8008454:	b40e      	push	{r1, r2, r3}
 8008456:	b500      	push	{lr}
 8008458:	b09c      	sub	sp, #112	; 0x70
 800845a:	ab1d      	add	r3, sp, #116	; 0x74
 800845c:	9002      	str	r0, [sp, #8]
 800845e:	9006      	str	r0, [sp, #24]
 8008460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008464:	4809      	ldr	r0, [pc, #36]	; (800848c <siprintf+0x38>)
 8008466:	9107      	str	r1, [sp, #28]
 8008468:	9104      	str	r1, [sp, #16]
 800846a:	4909      	ldr	r1, [pc, #36]	; (8008490 <siprintf+0x3c>)
 800846c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008470:	9105      	str	r1, [sp, #20]
 8008472:	6800      	ldr	r0, [r0, #0]
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	a902      	add	r1, sp, #8
 8008478:	f000 f8f4 	bl	8008664 <_svfiprintf_r>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	b01c      	add	sp, #112	; 0x70
 8008484:	f85d eb04 	ldr.w	lr, [sp], #4
 8008488:	b003      	add	sp, #12
 800848a:	4770      	bx	lr
 800848c:	200001bc 	.word	0x200001bc
 8008490:	ffff0208 	.word	0xffff0208

08008494 <_strtol_l.constprop.0>:
 8008494:	2b01      	cmp	r3, #1
 8008496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849a:	d001      	beq.n	80084a0 <_strtol_l.constprop.0+0xc>
 800849c:	2b24      	cmp	r3, #36	; 0x24
 800849e:	d906      	bls.n	80084ae <_strtol_l.constprop.0+0x1a>
 80084a0:	f7ff ffa6 	bl	80083f0 <__errno>
 80084a4:	2316      	movs	r3, #22
 80084a6:	6003      	str	r3, [r0, #0]
 80084a8:	2000      	movs	r0, #0
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008594 <_strtol_l.constprop.0+0x100>
 80084b2:	460d      	mov	r5, r1
 80084b4:	462e      	mov	r6, r5
 80084b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80084be:	f017 0708 	ands.w	r7, r7, #8
 80084c2:	d1f7      	bne.n	80084b4 <_strtol_l.constprop.0+0x20>
 80084c4:	2c2d      	cmp	r4, #45	; 0x2d
 80084c6:	d132      	bne.n	800852e <_strtol_l.constprop.0+0x9a>
 80084c8:	782c      	ldrb	r4, [r5, #0]
 80084ca:	2701      	movs	r7, #1
 80084cc:	1cb5      	adds	r5, r6, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d05b      	beq.n	800858a <_strtol_l.constprop.0+0xf6>
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d109      	bne.n	80084ea <_strtol_l.constprop.0+0x56>
 80084d6:	2c30      	cmp	r4, #48	; 0x30
 80084d8:	d107      	bne.n	80084ea <_strtol_l.constprop.0+0x56>
 80084da:	782c      	ldrb	r4, [r5, #0]
 80084dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084e0:	2c58      	cmp	r4, #88	; 0x58
 80084e2:	d14d      	bne.n	8008580 <_strtol_l.constprop.0+0xec>
 80084e4:	786c      	ldrb	r4, [r5, #1]
 80084e6:	2310      	movs	r3, #16
 80084e8:	3502      	adds	r5, #2
 80084ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80084f2:	f04f 0c00 	mov.w	ip, #0
 80084f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80084fa:	4666      	mov	r6, ip
 80084fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008500:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008504:	f1be 0f09 	cmp.w	lr, #9
 8008508:	d816      	bhi.n	8008538 <_strtol_l.constprop.0+0xa4>
 800850a:	4674      	mov	r4, lr
 800850c:	42a3      	cmp	r3, r4
 800850e:	dd24      	ble.n	800855a <_strtol_l.constprop.0+0xc6>
 8008510:	f1bc 0f00 	cmp.w	ip, #0
 8008514:	db1e      	blt.n	8008554 <_strtol_l.constprop.0+0xc0>
 8008516:	45b1      	cmp	r9, r6
 8008518:	d31c      	bcc.n	8008554 <_strtol_l.constprop.0+0xc0>
 800851a:	d101      	bne.n	8008520 <_strtol_l.constprop.0+0x8c>
 800851c:	45a2      	cmp	sl, r4
 800851e:	db19      	blt.n	8008554 <_strtol_l.constprop.0+0xc0>
 8008520:	fb06 4603 	mla	r6, r6, r3, r4
 8008524:	f04f 0c01 	mov.w	ip, #1
 8008528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800852c:	e7e8      	b.n	8008500 <_strtol_l.constprop.0+0x6c>
 800852e:	2c2b      	cmp	r4, #43	; 0x2b
 8008530:	bf04      	itt	eq
 8008532:	782c      	ldrbeq	r4, [r5, #0]
 8008534:	1cb5      	addeq	r5, r6, #2
 8008536:	e7ca      	b.n	80084ce <_strtol_l.constprop.0+0x3a>
 8008538:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800853c:	f1be 0f19 	cmp.w	lr, #25
 8008540:	d801      	bhi.n	8008546 <_strtol_l.constprop.0+0xb2>
 8008542:	3c37      	subs	r4, #55	; 0x37
 8008544:	e7e2      	b.n	800850c <_strtol_l.constprop.0+0x78>
 8008546:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800854a:	f1be 0f19 	cmp.w	lr, #25
 800854e:	d804      	bhi.n	800855a <_strtol_l.constprop.0+0xc6>
 8008550:	3c57      	subs	r4, #87	; 0x57
 8008552:	e7db      	b.n	800850c <_strtol_l.constprop.0+0x78>
 8008554:	f04f 3cff 	mov.w	ip, #4294967295
 8008558:	e7e6      	b.n	8008528 <_strtol_l.constprop.0+0x94>
 800855a:	f1bc 0f00 	cmp.w	ip, #0
 800855e:	da05      	bge.n	800856c <_strtol_l.constprop.0+0xd8>
 8008560:	2322      	movs	r3, #34	; 0x22
 8008562:	6003      	str	r3, [r0, #0]
 8008564:	4646      	mov	r6, r8
 8008566:	b942      	cbnz	r2, 800857a <_strtol_l.constprop.0+0xe6>
 8008568:	4630      	mov	r0, r6
 800856a:	e79e      	b.n	80084aa <_strtol_l.constprop.0+0x16>
 800856c:	b107      	cbz	r7, 8008570 <_strtol_l.constprop.0+0xdc>
 800856e:	4276      	negs	r6, r6
 8008570:	2a00      	cmp	r2, #0
 8008572:	d0f9      	beq.n	8008568 <_strtol_l.constprop.0+0xd4>
 8008574:	f1bc 0f00 	cmp.w	ip, #0
 8008578:	d000      	beq.n	800857c <_strtol_l.constprop.0+0xe8>
 800857a:	1e69      	subs	r1, r5, #1
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	e7f3      	b.n	8008568 <_strtol_l.constprop.0+0xd4>
 8008580:	2430      	movs	r4, #48	; 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1b1      	bne.n	80084ea <_strtol_l.constprop.0+0x56>
 8008586:	2308      	movs	r3, #8
 8008588:	e7af      	b.n	80084ea <_strtol_l.constprop.0+0x56>
 800858a:	2c30      	cmp	r4, #48	; 0x30
 800858c:	d0a5      	beq.n	80084da <_strtol_l.constprop.0+0x46>
 800858e:	230a      	movs	r3, #10
 8008590:	e7ab      	b.n	80084ea <_strtol_l.constprop.0+0x56>
 8008592:	bf00      	nop
 8008594:	08008f2d 	.word	0x08008f2d

08008598 <strtol>:
 8008598:	4613      	mov	r3, r2
 800859a:	460a      	mov	r2, r1
 800859c:	4601      	mov	r1, r0
 800859e:	4802      	ldr	r0, [pc, #8]	; (80085a8 <strtol+0x10>)
 80085a0:	6800      	ldr	r0, [r0, #0]
 80085a2:	f7ff bf77 	b.w	8008494 <_strtol_l.constprop.0>
 80085a6:	bf00      	nop
 80085a8:	200001bc 	.word	0x200001bc

080085ac <__ssputs_r>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	688e      	ldr	r6, [r1, #8]
 80085b2:	429e      	cmp	r6, r3
 80085b4:	4682      	mov	sl, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4690      	mov	r8, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	d838      	bhi.n	8008630 <__ssputs_r+0x84>
 80085be:	898a      	ldrh	r2, [r1, #12]
 80085c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c4:	d032      	beq.n	800862c <__ssputs_r+0x80>
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6909      	ldr	r1, [r1, #16]
 80085ca:	eba5 0901 	sub.w	r9, r5, r1
 80085ce:	6965      	ldr	r5, [r4, #20]
 80085d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d8:	3301      	adds	r3, #1
 80085da:	444b      	add	r3, r9
 80085dc:	106d      	asrs	r5, r5, #1
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf38      	it	cc
 80085e2:	461d      	movcc	r5, r3
 80085e4:	0553      	lsls	r3, r2, #21
 80085e6:	d531      	bpl.n	800864c <__ssputs_r+0xa0>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f000 fb63 	bl	8008cb4 <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b950      	cbnz	r0, 8008608 <__ssputs_r+0x5c>
 80085f2:	230c      	movs	r3, #12
 80085f4:	f8ca 3000 	str.w	r3, [sl]
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	6921      	ldr	r1, [r4, #16]
 800860a:	464a      	mov	r2, r9
 800860c:	f000 fabe 	bl	8008b8c <memcpy>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	6126      	str	r6, [r4, #16]
 800861e:	6165      	str	r5, [r4, #20]
 8008620:	444e      	add	r6, r9
 8008622:	eba5 0509 	sub.w	r5, r5, r9
 8008626:	6026      	str	r6, [r4, #0]
 8008628:	60a5      	str	r5, [r4, #8]
 800862a:	463e      	mov	r6, r7
 800862c:	42be      	cmp	r6, r7
 800862e:	d900      	bls.n	8008632 <__ssputs_r+0x86>
 8008630:	463e      	mov	r6, r7
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	4632      	mov	r2, r6
 8008636:	4641      	mov	r1, r8
 8008638:	f000 fab6 	bl	8008ba8 <memmove>
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	1b9b      	subs	r3, r3, r6
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	4433      	add	r3, r6
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	2000      	movs	r0, #0
 800864a:	e7db      	b.n	8008604 <__ssputs_r+0x58>
 800864c:	462a      	mov	r2, r5
 800864e:	f000 fba5 	bl	8008d9c <_realloc_r>
 8008652:	4606      	mov	r6, r0
 8008654:	2800      	cmp	r0, #0
 8008656:	d1e1      	bne.n	800861c <__ssputs_r+0x70>
 8008658:	6921      	ldr	r1, [r4, #16]
 800865a:	4650      	mov	r0, sl
 800865c:	f000 fabe 	bl	8008bdc <_free_r>
 8008660:	e7c7      	b.n	80085f2 <__ssputs_r+0x46>
	...

08008664 <_svfiprintf_r>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	4698      	mov	r8, r3
 800866a:	898b      	ldrh	r3, [r1, #12]
 800866c:	061b      	lsls	r3, r3, #24
 800866e:	b09d      	sub	sp, #116	; 0x74
 8008670:	4607      	mov	r7, r0
 8008672:	460d      	mov	r5, r1
 8008674:	4614      	mov	r4, r2
 8008676:	d50e      	bpl.n	8008696 <_svfiprintf_r+0x32>
 8008678:	690b      	ldr	r3, [r1, #16]
 800867a:	b963      	cbnz	r3, 8008696 <_svfiprintf_r+0x32>
 800867c:	2140      	movs	r1, #64	; 0x40
 800867e:	f000 fb19 	bl	8008cb4 <_malloc_r>
 8008682:	6028      	str	r0, [r5, #0]
 8008684:	6128      	str	r0, [r5, #16]
 8008686:	b920      	cbnz	r0, 8008692 <_svfiprintf_r+0x2e>
 8008688:	230c      	movs	r3, #12
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e0d1      	b.n	8008836 <_svfiprintf_r+0x1d2>
 8008692:	2340      	movs	r3, #64	; 0x40
 8008694:	616b      	str	r3, [r5, #20]
 8008696:	2300      	movs	r3, #0
 8008698:	9309      	str	r3, [sp, #36]	; 0x24
 800869a:	2320      	movs	r3, #32
 800869c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a4:	2330      	movs	r3, #48	; 0x30
 80086a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008850 <_svfiprintf_r+0x1ec>
 80086aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ae:	f04f 0901 	mov.w	r9, #1
 80086b2:	4623      	mov	r3, r4
 80086b4:	469a      	mov	sl, r3
 80086b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ba:	b10a      	cbz	r2, 80086c0 <_svfiprintf_r+0x5c>
 80086bc:	2a25      	cmp	r2, #37	; 0x25
 80086be:	d1f9      	bne.n	80086b4 <_svfiprintf_r+0x50>
 80086c0:	ebba 0b04 	subs.w	fp, sl, r4
 80086c4:	d00b      	beq.n	80086de <_svfiprintf_r+0x7a>
 80086c6:	465b      	mov	r3, fp
 80086c8:	4622      	mov	r2, r4
 80086ca:	4629      	mov	r1, r5
 80086cc:	4638      	mov	r0, r7
 80086ce:	f7ff ff6d 	bl	80085ac <__ssputs_r>
 80086d2:	3001      	adds	r0, #1
 80086d4:	f000 80aa 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086da:	445a      	add	r2, fp
 80086dc:	9209      	str	r2, [sp, #36]	; 0x24
 80086de:	f89a 3000 	ldrb.w	r3, [sl]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80a2 	beq.w	800882c <_svfiprintf_r+0x1c8>
 80086e8:	2300      	movs	r3, #0
 80086ea:	f04f 32ff 	mov.w	r2, #4294967295
 80086ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f2:	f10a 0a01 	add.w	sl, sl, #1
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	9307      	str	r3, [sp, #28]
 80086fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008700:	4654      	mov	r4, sl
 8008702:	2205      	movs	r2, #5
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	4851      	ldr	r0, [pc, #324]	; (8008850 <_svfiprintf_r+0x1ec>)
 800870a:	f7f7 fd61 	bl	80001d0 <memchr>
 800870e:	9a04      	ldr	r2, [sp, #16]
 8008710:	b9d8      	cbnz	r0, 800874a <_svfiprintf_r+0xe6>
 8008712:	06d0      	lsls	r0, r2, #27
 8008714:	bf44      	itt	mi
 8008716:	2320      	movmi	r3, #32
 8008718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871c:	0711      	lsls	r1, r2, #28
 800871e:	bf44      	itt	mi
 8008720:	232b      	movmi	r3, #43	; 0x2b
 8008722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008726:	f89a 3000 	ldrb.w	r3, [sl]
 800872a:	2b2a      	cmp	r3, #42	; 0x2a
 800872c:	d015      	beq.n	800875a <_svfiprintf_r+0xf6>
 800872e:	9a07      	ldr	r2, [sp, #28]
 8008730:	4654      	mov	r4, sl
 8008732:	2000      	movs	r0, #0
 8008734:	f04f 0c0a 	mov.w	ip, #10
 8008738:	4621      	mov	r1, r4
 800873a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873e:	3b30      	subs	r3, #48	; 0x30
 8008740:	2b09      	cmp	r3, #9
 8008742:	d94e      	bls.n	80087e2 <_svfiprintf_r+0x17e>
 8008744:	b1b0      	cbz	r0, 8008774 <_svfiprintf_r+0x110>
 8008746:	9207      	str	r2, [sp, #28]
 8008748:	e014      	b.n	8008774 <_svfiprintf_r+0x110>
 800874a:	eba0 0308 	sub.w	r3, r0, r8
 800874e:	fa09 f303 	lsl.w	r3, r9, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	46a2      	mov	sl, r4
 8008758:	e7d2      	b.n	8008700 <_svfiprintf_r+0x9c>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9103      	str	r1, [sp, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	bfbb      	ittet	lt
 8008766:	425b      	neglt	r3, r3
 8008768:	f042 0202 	orrlt.w	r2, r2, #2
 800876c:	9307      	strge	r3, [sp, #28]
 800876e:	9307      	strlt	r3, [sp, #28]
 8008770:	bfb8      	it	lt
 8008772:	9204      	strlt	r2, [sp, #16]
 8008774:	7823      	ldrb	r3, [r4, #0]
 8008776:	2b2e      	cmp	r3, #46	; 0x2e
 8008778:	d10c      	bne.n	8008794 <_svfiprintf_r+0x130>
 800877a:	7863      	ldrb	r3, [r4, #1]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d135      	bne.n	80087ec <_svfiprintf_r+0x188>
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9203      	str	r2, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfb8      	it	lt
 800878c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008790:	3402      	adds	r4, #2
 8008792:	9305      	str	r3, [sp, #20]
 8008794:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008860 <_svfiprintf_r+0x1fc>
 8008798:	7821      	ldrb	r1, [r4, #0]
 800879a:	2203      	movs	r2, #3
 800879c:	4650      	mov	r0, sl
 800879e:	f7f7 fd17 	bl	80001d0 <memchr>
 80087a2:	b140      	cbz	r0, 80087b6 <_svfiprintf_r+0x152>
 80087a4:	2340      	movs	r3, #64	; 0x40
 80087a6:	eba0 000a 	sub.w	r0, r0, sl
 80087aa:	fa03 f000 	lsl.w	r0, r3, r0
 80087ae:	9b04      	ldr	r3, [sp, #16]
 80087b0:	4303      	orrs	r3, r0
 80087b2:	3401      	adds	r4, #1
 80087b4:	9304      	str	r3, [sp, #16]
 80087b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ba:	4826      	ldr	r0, [pc, #152]	; (8008854 <_svfiprintf_r+0x1f0>)
 80087bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c0:	2206      	movs	r2, #6
 80087c2:	f7f7 fd05 	bl	80001d0 <memchr>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d038      	beq.n	800883c <_svfiprintf_r+0x1d8>
 80087ca:	4b23      	ldr	r3, [pc, #140]	; (8008858 <_svfiprintf_r+0x1f4>)
 80087cc:	bb1b      	cbnz	r3, 8008816 <_svfiprintf_r+0x1b2>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	3307      	adds	r3, #7
 80087d2:	f023 0307 	bic.w	r3, r3, #7
 80087d6:	3308      	adds	r3, #8
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087dc:	4433      	add	r3, r6
 80087de:	9309      	str	r3, [sp, #36]	; 0x24
 80087e0:	e767      	b.n	80086b2 <_svfiprintf_r+0x4e>
 80087e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e6:	460c      	mov	r4, r1
 80087e8:	2001      	movs	r0, #1
 80087ea:	e7a5      	b.n	8008738 <_svfiprintf_r+0xd4>
 80087ec:	2300      	movs	r3, #0
 80087ee:	3401      	adds	r4, #1
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	4619      	mov	r1, r3
 80087f4:	f04f 0c0a 	mov.w	ip, #10
 80087f8:	4620      	mov	r0, r4
 80087fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fe:	3a30      	subs	r2, #48	; 0x30
 8008800:	2a09      	cmp	r2, #9
 8008802:	d903      	bls.n	800880c <_svfiprintf_r+0x1a8>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c5      	beq.n	8008794 <_svfiprintf_r+0x130>
 8008808:	9105      	str	r1, [sp, #20]
 800880a:	e7c3      	b.n	8008794 <_svfiprintf_r+0x130>
 800880c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008810:	4604      	mov	r4, r0
 8008812:	2301      	movs	r3, #1
 8008814:	e7f0      	b.n	80087f8 <_svfiprintf_r+0x194>
 8008816:	ab03      	add	r3, sp, #12
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	462a      	mov	r2, r5
 800881c:	4b0f      	ldr	r3, [pc, #60]	; (800885c <_svfiprintf_r+0x1f8>)
 800881e:	a904      	add	r1, sp, #16
 8008820:	4638      	mov	r0, r7
 8008822:	f3af 8000 	nop.w
 8008826:	1c42      	adds	r2, r0, #1
 8008828:	4606      	mov	r6, r0
 800882a:	d1d6      	bne.n	80087da <_svfiprintf_r+0x176>
 800882c:	89ab      	ldrh	r3, [r5, #12]
 800882e:	065b      	lsls	r3, r3, #25
 8008830:	f53f af2c 	bmi.w	800868c <_svfiprintf_r+0x28>
 8008834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008836:	b01d      	add	sp, #116	; 0x74
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	ab03      	add	r3, sp, #12
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	462a      	mov	r2, r5
 8008842:	4b06      	ldr	r3, [pc, #24]	; (800885c <_svfiprintf_r+0x1f8>)
 8008844:	a904      	add	r1, sp, #16
 8008846:	4638      	mov	r0, r7
 8008848:	f000 f87a 	bl	8008940 <_printf_i>
 800884c:	e7eb      	b.n	8008826 <_svfiprintf_r+0x1c2>
 800884e:	bf00      	nop
 8008850:	0800902d 	.word	0x0800902d
 8008854:	08009037 	.word	0x08009037
 8008858:	00000000 	.word	0x00000000
 800885c:	080085ad 	.word	0x080085ad
 8008860:	08009033 	.word	0x08009033

08008864 <_printf_common>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	4616      	mov	r6, r2
 800886a:	4699      	mov	r9, r3
 800886c:	688a      	ldr	r2, [r1, #8]
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008874:	4293      	cmp	r3, r2
 8008876:	bfb8      	it	lt
 8008878:	4613      	movlt	r3, r2
 800887a:	6033      	str	r3, [r6, #0]
 800887c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008880:	4607      	mov	r7, r0
 8008882:	460c      	mov	r4, r1
 8008884:	b10a      	cbz	r2, 800888a <_printf_common+0x26>
 8008886:	3301      	adds	r3, #1
 8008888:	6033      	str	r3, [r6, #0]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	0699      	lsls	r1, r3, #26
 800888e:	bf42      	ittt	mi
 8008890:	6833      	ldrmi	r3, [r6, #0]
 8008892:	3302      	addmi	r3, #2
 8008894:	6033      	strmi	r3, [r6, #0]
 8008896:	6825      	ldr	r5, [r4, #0]
 8008898:	f015 0506 	ands.w	r5, r5, #6
 800889c:	d106      	bne.n	80088ac <_printf_common+0x48>
 800889e:	f104 0a19 	add.w	sl, r4, #25
 80088a2:	68e3      	ldr	r3, [r4, #12]
 80088a4:	6832      	ldr	r2, [r6, #0]
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	42ab      	cmp	r3, r5
 80088aa:	dc26      	bgt.n	80088fa <_printf_common+0x96>
 80088ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088b0:	1e13      	subs	r3, r2, #0
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	bf18      	it	ne
 80088b6:	2301      	movne	r3, #1
 80088b8:	0692      	lsls	r2, r2, #26
 80088ba:	d42b      	bmi.n	8008914 <_printf_common+0xb0>
 80088bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c0:	4649      	mov	r1, r9
 80088c2:	4638      	mov	r0, r7
 80088c4:	47c0      	blx	r8
 80088c6:	3001      	adds	r0, #1
 80088c8:	d01e      	beq.n	8008908 <_printf_common+0xa4>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	68e5      	ldr	r5, [r4, #12]
 80088ce:	6832      	ldr	r2, [r6, #0]
 80088d0:	f003 0306 	and.w	r3, r3, #6
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	bf08      	it	eq
 80088d8:	1aad      	subeq	r5, r5, r2
 80088da:	68a3      	ldr	r3, [r4, #8]
 80088dc:	6922      	ldr	r2, [r4, #16]
 80088de:	bf0c      	ite	eq
 80088e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088e4:	2500      	movne	r5, #0
 80088e6:	4293      	cmp	r3, r2
 80088e8:	bfc4      	itt	gt
 80088ea:	1a9b      	subgt	r3, r3, r2
 80088ec:	18ed      	addgt	r5, r5, r3
 80088ee:	2600      	movs	r6, #0
 80088f0:	341a      	adds	r4, #26
 80088f2:	42b5      	cmp	r5, r6
 80088f4:	d11a      	bne.n	800892c <_printf_common+0xc8>
 80088f6:	2000      	movs	r0, #0
 80088f8:	e008      	b.n	800890c <_printf_common+0xa8>
 80088fa:	2301      	movs	r3, #1
 80088fc:	4652      	mov	r2, sl
 80088fe:	4649      	mov	r1, r9
 8008900:	4638      	mov	r0, r7
 8008902:	47c0      	blx	r8
 8008904:	3001      	adds	r0, #1
 8008906:	d103      	bne.n	8008910 <_printf_common+0xac>
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008910:	3501      	adds	r5, #1
 8008912:	e7c6      	b.n	80088a2 <_printf_common+0x3e>
 8008914:	18e1      	adds	r1, r4, r3
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	2030      	movs	r0, #48	; 0x30
 800891a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800891e:	4422      	add	r2, r4
 8008920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008928:	3302      	adds	r3, #2
 800892a:	e7c7      	b.n	80088bc <_printf_common+0x58>
 800892c:	2301      	movs	r3, #1
 800892e:	4622      	mov	r2, r4
 8008930:	4649      	mov	r1, r9
 8008932:	4638      	mov	r0, r7
 8008934:	47c0      	blx	r8
 8008936:	3001      	adds	r0, #1
 8008938:	d0e6      	beq.n	8008908 <_printf_common+0xa4>
 800893a:	3601      	adds	r6, #1
 800893c:	e7d9      	b.n	80088f2 <_printf_common+0x8e>
	...

08008940 <_printf_i>:
 8008940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008944:	7e0f      	ldrb	r7, [r1, #24]
 8008946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008948:	2f78      	cmp	r7, #120	; 0x78
 800894a:	4691      	mov	r9, r2
 800894c:	4680      	mov	r8, r0
 800894e:	460c      	mov	r4, r1
 8008950:	469a      	mov	sl, r3
 8008952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008956:	d807      	bhi.n	8008968 <_printf_i+0x28>
 8008958:	2f62      	cmp	r7, #98	; 0x62
 800895a:	d80a      	bhi.n	8008972 <_printf_i+0x32>
 800895c:	2f00      	cmp	r7, #0
 800895e:	f000 80d8 	beq.w	8008b12 <_printf_i+0x1d2>
 8008962:	2f58      	cmp	r7, #88	; 0x58
 8008964:	f000 80a3 	beq.w	8008aae <_printf_i+0x16e>
 8008968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800896c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008970:	e03a      	b.n	80089e8 <_printf_i+0xa8>
 8008972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008976:	2b15      	cmp	r3, #21
 8008978:	d8f6      	bhi.n	8008968 <_printf_i+0x28>
 800897a:	a101      	add	r1, pc, #4	; (adr r1, 8008980 <_printf_i+0x40>)
 800897c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008980:	080089d9 	.word	0x080089d9
 8008984:	080089ed 	.word	0x080089ed
 8008988:	08008969 	.word	0x08008969
 800898c:	08008969 	.word	0x08008969
 8008990:	08008969 	.word	0x08008969
 8008994:	08008969 	.word	0x08008969
 8008998:	080089ed 	.word	0x080089ed
 800899c:	08008969 	.word	0x08008969
 80089a0:	08008969 	.word	0x08008969
 80089a4:	08008969 	.word	0x08008969
 80089a8:	08008969 	.word	0x08008969
 80089ac:	08008af9 	.word	0x08008af9
 80089b0:	08008a1d 	.word	0x08008a1d
 80089b4:	08008adb 	.word	0x08008adb
 80089b8:	08008969 	.word	0x08008969
 80089bc:	08008969 	.word	0x08008969
 80089c0:	08008b1b 	.word	0x08008b1b
 80089c4:	08008969 	.word	0x08008969
 80089c8:	08008a1d 	.word	0x08008a1d
 80089cc:	08008969 	.word	0x08008969
 80089d0:	08008969 	.word	0x08008969
 80089d4:	08008ae3 	.word	0x08008ae3
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	1d1a      	adds	r2, r3, #4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	602a      	str	r2, [r5, #0]
 80089e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0a3      	b.n	8008b34 <_printf_i+0x1f4>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	6829      	ldr	r1, [r5, #0]
 80089f0:	0606      	lsls	r6, r0, #24
 80089f2:	f101 0304 	add.w	r3, r1, #4
 80089f6:	d50a      	bpl.n	8008a0e <_printf_i+0xce>
 80089f8:	680e      	ldr	r6, [r1, #0]
 80089fa:	602b      	str	r3, [r5, #0]
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	da03      	bge.n	8008a08 <_printf_i+0xc8>
 8008a00:	232d      	movs	r3, #45	; 0x2d
 8008a02:	4276      	negs	r6, r6
 8008a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a08:	485e      	ldr	r0, [pc, #376]	; (8008b84 <_printf_i+0x244>)
 8008a0a:	230a      	movs	r3, #10
 8008a0c:	e019      	b.n	8008a42 <_printf_i+0x102>
 8008a0e:	680e      	ldr	r6, [r1, #0]
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a16:	bf18      	it	ne
 8008a18:	b236      	sxthne	r6, r6
 8008a1a:	e7ef      	b.n	80089fc <_printf_i+0xbc>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	6820      	ldr	r0, [r4, #0]
 8008a20:	1d19      	adds	r1, r3, #4
 8008a22:	6029      	str	r1, [r5, #0]
 8008a24:	0601      	lsls	r1, r0, #24
 8008a26:	d501      	bpl.n	8008a2c <_printf_i+0xec>
 8008a28:	681e      	ldr	r6, [r3, #0]
 8008a2a:	e002      	b.n	8008a32 <_printf_i+0xf2>
 8008a2c:	0646      	lsls	r6, r0, #25
 8008a2e:	d5fb      	bpl.n	8008a28 <_printf_i+0xe8>
 8008a30:	881e      	ldrh	r6, [r3, #0]
 8008a32:	4854      	ldr	r0, [pc, #336]	; (8008b84 <_printf_i+0x244>)
 8008a34:	2f6f      	cmp	r7, #111	; 0x6f
 8008a36:	bf0c      	ite	eq
 8008a38:	2308      	moveq	r3, #8
 8008a3a:	230a      	movne	r3, #10
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a42:	6865      	ldr	r5, [r4, #4]
 8008a44:	60a5      	str	r5, [r4, #8]
 8008a46:	2d00      	cmp	r5, #0
 8008a48:	bfa2      	ittt	ge
 8008a4a:	6821      	ldrge	r1, [r4, #0]
 8008a4c:	f021 0104 	bicge.w	r1, r1, #4
 8008a50:	6021      	strge	r1, [r4, #0]
 8008a52:	b90e      	cbnz	r6, 8008a58 <_printf_i+0x118>
 8008a54:	2d00      	cmp	r5, #0
 8008a56:	d04d      	beq.n	8008af4 <_printf_i+0x1b4>
 8008a58:	4615      	mov	r5, r2
 8008a5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a5e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a62:	5dc7      	ldrb	r7, [r0, r7]
 8008a64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a68:	4637      	mov	r7, r6
 8008a6a:	42bb      	cmp	r3, r7
 8008a6c:	460e      	mov	r6, r1
 8008a6e:	d9f4      	bls.n	8008a5a <_printf_i+0x11a>
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	d10b      	bne.n	8008a8c <_printf_i+0x14c>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	07de      	lsls	r6, r3, #31
 8008a78:	d508      	bpl.n	8008a8c <_printf_i+0x14c>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	6861      	ldr	r1, [r4, #4]
 8008a7e:	4299      	cmp	r1, r3
 8008a80:	bfde      	ittt	le
 8008a82:	2330      	movle	r3, #48	; 0x30
 8008a84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a8c:	1b52      	subs	r2, r2, r5
 8008a8e:	6122      	str	r2, [r4, #16]
 8008a90:	f8cd a000 	str.w	sl, [sp]
 8008a94:	464b      	mov	r3, r9
 8008a96:	aa03      	add	r2, sp, #12
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	f7ff fee2 	bl	8008864 <_printf_common>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d14c      	bne.n	8008b3e <_printf_i+0x1fe>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	b004      	add	sp, #16
 8008aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aae:	4835      	ldr	r0, [pc, #212]	; (8008b84 <_printf_i+0x244>)
 8008ab0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ab4:	6829      	ldr	r1, [r5, #0]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008abc:	6029      	str	r1, [r5, #0]
 8008abe:	061d      	lsls	r5, r3, #24
 8008ac0:	d514      	bpl.n	8008aec <_printf_i+0x1ac>
 8008ac2:	07df      	lsls	r7, r3, #31
 8008ac4:	bf44      	itt	mi
 8008ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aca:	6023      	strmi	r3, [r4, #0]
 8008acc:	b91e      	cbnz	r6, 8008ad6 <_printf_i+0x196>
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	f023 0320 	bic.w	r3, r3, #32
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	2310      	movs	r3, #16
 8008ad8:	e7b0      	b.n	8008a3c <_printf_i+0xfc>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	f043 0320 	orr.w	r3, r3, #32
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	2378      	movs	r3, #120	; 0x78
 8008ae4:	4828      	ldr	r0, [pc, #160]	; (8008b88 <_printf_i+0x248>)
 8008ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aea:	e7e3      	b.n	8008ab4 <_printf_i+0x174>
 8008aec:	0659      	lsls	r1, r3, #25
 8008aee:	bf48      	it	mi
 8008af0:	b2b6      	uxthmi	r6, r6
 8008af2:	e7e6      	b.n	8008ac2 <_printf_i+0x182>
 8008af4:	4615      	mov	r5, r2
 8008af6:	e7bb      	b.n	8008a70 <_printf_i+0x130>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	6826      	ldr	r6, [r4, #0]
 8008afc:	6961      	ldr	r1, [r4, #20]
 8008afe:	1d18      	adds	r0, r3, #4
 8008b00:	6028      	str	r0, [r5, #0]
 8008b02:	0635      	lsls	r5, r6, #24
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0x1cc>
 8008b08:	6019      	str	r1, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <_printf_i+0x1d2>
 8008b0c:	0670      	lsls	r0, r6, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0x1c8>
 8008b10:	8019      	strh	r1, [r3, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	4615      	mov	r5, r2
 8008b18:	e7ba      	b.n	8008a90 <_printf_i+0x150>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	602a      	str	r2, [r5, #0]
 8008b20:	681d      	ldr	r5, [r3, #0]
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	2100      	movs	r1, #0
 8008b26:	4628      	mov	r0, r5
 8008b28:	f7f7 fb52 	bl	80001d0 <memchr>
 8008b2c:	b108      	cbz	r0, 8008b32 <_printf_i+0x1f2>
 8008b2e:	1b40      	subs	r0, r0, r5
 8008b30:	6060      	str	r0, [r4, #4]
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	2300      	movs	r3, #0
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	e7a8      	b.n	8008a90 <_printf_i+0x150>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	462a      	mov	r2, r5
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	47d0      	blx	sl
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d0ab      	beq.n	8008aa4 <_printf_i+0x164>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	079b      	lsls	r3, r3, #30
 8008b50:	d413      	bmi.n	8008b7a <_printf_i+0x23a>
 8008b52:	68e0      	ldr	r0, [r4, #12]
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	4298      	cmp	r0, r3
 8008b58:	bfb8      	it	lt
 8008b5a:	4618      	movlt	r0, r3
 8008b5c:	e7a4      	b.n	8008aa8 <_printf_i+0x168>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4632      	mov	r2, r6
 8008b62:	4649      	mov	r1, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	47d0      	blx	sl
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d09b      	beq.n	8008aa4 <_printf_i+0x164>
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	1a5b      	subs	r3, r3, r1
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dcf2      	bgt.n	8008b5e <_printf_i+0x21e>
 8008b78:	e7eb      	b.n	8008b52 <_printf_i+0x212>
 8008b7a:	2500      	movs	r5, #0
 8008b7c:	f104 0619 	add.w	r6, r4, #25
 8008b80:	e7f5      	b.n	8008b6e <_printf_i+0x22e>
 8008b82:	bf00      	nop
 8008b84:	0800903e 	.word	0x0800903e
 8008b88:	0800904f 	.word	0x0800904f

08008b8c <memcpy>:
 8008b8c:	440a      	add	r2, r1
 8008b8e:	4291      	cmp	r1, r2
 8008b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b94:	d100      	bne.n	8008b98 <memcpy+0xc>
 8008b96:	4770      	bx	lr
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	d1f9      	bne.n	8008b9a <memcpy+0xe>
 8008ba6:	bd10      	pop	{r4, pc}

08008ba8 <memmove>:
 8008ba8:	4288      	cmp	r0, r1
 8008baa:	b510      	push	{r4, lr}
 8008bac:	eb01 0402 	add.w	r4, r1, r2
 8008bb0:	d902      	bls.n	8008bb8 <memmove+0x10>
 8008bb2:	4284      	cmp	r4, r0
 8008bb4:	4623      	mov	r3, r4
 8008bb6:	d807      	bhi.n	8008bc8 <memmove+0x20>
 8008bb8:	1e43      	subs	r3, r0, #1
 8008bba:	42a1      	cmp	r1, r4
 8008bbc:	d008      	beq.n	8008bd0 <memmove+0x28>
 8008bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bc6:	e7f8      	b.n	8008bba <memmove+0x12>
 8008bc8:	4402      	add	r2, r0
 8008bca:	4601      	mov	r1, r0
 8008bcc:	428a      	cmp	r2, r1
 8008bce:	d100      	bne.n	8008bd2 <memmove+0x2a>
 8008bd0:	bd10      	pop	{r4, pc}
 8008bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bda:	e7f7      	b.n	8008bcc <memmove+0x24>

08008bdc <_free_r>:
 8008bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bde:	2900      	cmp	r1, #0
 8008be0:	d044      	beq.n	8008c6c <_free_r+0x90>
 8008be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be6:	9001      	str	r0, [sp, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f1a1 0404 	sub.w	r4, r1, #4
 8008bee:	bfb8      	it	lt
 8008bf0:	18e4      	addlt	r4, r4, r3
 8008bf2:	f000 f913 	bl	8008e1c <__malloc_lock>
 8008bf6:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <_free_r+0x94>)
 8008bf8:	9801      	ldr	r0, [sp, #4]
 8008bfa:	6813      	ldr	r3, [r2, #0]
 8008bfc:	b933      	cbnz	r3, 8008c0c <_free_r+0x30>
 8008bfe:	6063      	str	r3, [r4, #4]
 8008c00:	6014      	str	r4, [r2, #0]
 8008c02:	b003      	add	sp, #12
 8008c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c08:	f000 b90e 	b.w	8008e28 <__malloc_unlock>
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d908      	bls.n	8008c22 <_free_r+0x46>
 8008c10:	6825      	ldr	r5, [r4, #0]
 8008c12:	1961      	adds	r1, r4, r5
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf01      	itttt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	1949      	addeq	r1, r1, r5
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	e7ed      	b.n	8008bfe <_free_r+0x22>
 8008c22:	461a      	mov	r2, r3
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b10b      	cbz	r3, 8008c2c <_free_r+0x50>
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d9fa      	bls.n	8008c22 <_free_r+0x46>
 8008c2c:	6811      	ldr	r1, [r2, #0]
 8008c2e:	1855      	adds	r5, r2, r1
 8008c30:	42a5      	cmp	r5, r4
 8008c32:	d10b      	bne.n	8008c4c <_free_r+0x70>
 8008c34:	6824      	ldr	r4, [r4, #0]
 8008c36:	4421      	add	r1, r4
 8008c38:	1854      	adds	r4, r2, r1
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	6011      	str	r1, [r2, #0]
 8008c3e:	d1e0      	bne.n	8008c02 <_free_r+0x26>
 8008c40:	681c      	ldr	r4, [r3, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	6053      	str	r3, [r2, #4]
 8008c46:	4421      	add	r1, r4
 8008c48:	6011      	str	r1, [r2, #0]
 8008c4a:	e7da      	b.n	8008c02 <_free_r+0x26>
 8008c4c:	d902      	bls.n	8008c54 <_free_r+0x78>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	6003      	str	r3, [r0, #0]
 8008c52:	e7d6      	b.n	8008c02 <_free_r+0x26>
 8008c54:	6825      	ldr	r5, [r4, #0]
 8008c56:	1961      	adds	r1, r4, r5
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	bf04      	itt	eq
 8008c5c:	6819      	ldreq	r1, [r3, #0]
 8008c5e:	685b      	ldreq	r3, [r3, #4]
 8008c60:	6063      	str	r3, [r4, #4]
 8008c62:	bf04      	itt	eq
 8008c64:	1949      	addeq	r1, r1, r5
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	6054      	str	r4, [r2, #4]
 8008c6a:	e7ca      	b.n	8008c02 <_free_r+0x26>
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bd30      	pop	{r4, r5, pc}
 8008c70:	20001e9c 	.word	0x20001e9c

08008c74 <sbrk_aligned>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0e      	ldr	r6, [pc, #56]	; (8008cb0 <sbrk_aligned+0x3c>)
 8008c78:	460c      	mov	r4, r1
 8008c7a:	6831      	ldr	r1, [r6, #0]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b911      	cbnz	r1, 8008c86 <sbrk_aligned+0x12>
 8008c80:	f000 f8bc 	bl	8008dfc <_sbrk_r>
 8008c84:	6030      	str	r0, [r6, #0]
 8008c86:	4621      	mov	r1, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 f8b7 	bl	8008dfc <_sbrk_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	d00a      	beq.n	8008ca8 <sbrk_aligned+0x34>
 8008c92:	1cc4      	adds	r4, r0, #3
 8008c94:	f024 0403 	bic.w	r4, r4, #3
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d007      	beq.n	8008cac <sbrk_aligned+0x38>
 8008c9c:	1a21      	subs	r1, r4, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f8ac 	bl	8008dfc <_sbrk_r>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d101      	bne.n	8008cac <sbrk_aligned+0x38>
 8008ca8:	f04f 34ff 	mov.w	r4, #4294967295
 8008cac:	4620      	mov	r0, r4
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	20001ea0 	.word	0x20001ea0

08008cb4 <_malloc_r>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	1ccd      	adds	r5, r1, #3
 8008cba:	f025 0503 	bic.w	r5, r5, #3
 8008cbe:	3508      	adds	r5, #8
 8008cc0:	2d0c      	cmp	r5, #12
 8008cc2:	bf38      	it	cc
 8008cc4:	250c      	movcc	r5, #12
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	4607      	mov	r7, r0
 8008cca:	db01      	blt.n	8008cd0 <_malloc_r+0x1c>
 8008ccc:	42a9      	cmp	r1, r5
 8008cce:	d905      	bls.n	8008cdc <_malloc_r+0x28>
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	2600      	movs	r6, #0
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	4e2e      	ldr	r6, [pc, #184]	; (8008d98 <_malloc_r+0xe4>)
 8008cde:	f000 f89d 	bl	8008e1c <__malloc_lock>
 8008ce2:	6833      	ldr	r3, [r6, #0]
 8008ce4:	461c      	mov	r4, r3
 8008ce6:	bb34      	cbnz	r4, 8008d36 <_malloc_r+0x82>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff ffc2 	bl	8008c74 <sbrk_aligned>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	d14d      	bne.n	8008d92 <_malloc_r+0xde>
 8008cf6:	6834      	ldr	r4, [r6, #0]
 8008cf8:	4626      	mov	r6, r4
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	d140      	bne.n	8008d80 <_malloc_r+0xcc>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	4631      	mov	r1, r6
 8008d02:	4638      	mov	r0, r7
 8008d04:	eb04 0803 	add.w	r8, r4, r3
 8008d08:	f000 f878 	bl	8008dfc <_sbrk_r>
 8008d0c:	4580      	cmp	r8, r0
 8008d0e:	d13a      	bne.n	8008d86 <_malloc_r+0xd2>
 8008d10:	6821      	ldr	r1, [r4, #0]
 8008d12:	3503      	adds	r5, #3
 8008d14:	1a6d      	subs	r5, r5, r1
 8008d16:	f025 0503 	bic.w	r5, r5, #3
 8008d1a:	3508      	adds	r5, #8
 8008d1c:	2d0c      	cmp	r5, #12
 8008d1e:	bf38      	it	cc
 8008d20:	250c      	movcc	r5, #12
 8008d22:	4629      	mov	r1, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff ffa5 	bl	8008c74 <sbrk_aligned>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	d02b      	beq.n	8008d86 <_malloc_r+0xd2>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	442b      	add	r3, r5
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	e00e      	b.n	8008d54 <_malloc_r+0xa0>
 8008d36:	6822      	ldr	r2, [r4, #0]
 8008d38:	1b52      	subs	r2, r2, r5
 8008d3a:	d41e      	bmi.n	8008d7a <_malloc_r+0xc6>
 8008d3c:	2a0b      	cmp	r2, #11
 8008d3e:	d916      	bls.n	8008d6e <_malloc_r+0xba>
 8008d40:	1961      	adds	r1, r4, r5
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	6025      	str	r5, [r4, #0]
 8008d46:	bf18      	it	ne
 8008d48:	6059      	strne	r1, [r3, #4]
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	bf08      	it	eq
 8008d4e:	6031      	streq	r1, [r6, #0]
 8008d50:	5162      	str	r2, [r4, r5]
 8008d52:	604b      	str	r3, [r1, #4]
 8008d54:	4638      	mov	r0, r7
 8008d56:	f104 060b 	add.w	r6, r4, #11
 8008d5a:	f000 f865 	bl	8008e28 <__malloc_unlock>
 8008d5e:	f026 0607 	bic.w	r6, r6, #7
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	1af2      	subs	r2, r6, r3
 8008d66:	d0b6      	beq.n	8008cd6 <_malloc_r+0x22>
 8008d68:	1b9b      	subs	r3, r3, r6
 8008d6a:	50a3      	str	r3, [r4, r2]
 8008d6c:	e7b3      	b.n	8008cd6 <_malloc_r+0x22>
 8008d6e:	6862      	ldr	r2, [r4, #4]
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	bf0c      	ite	eq
 8008d74:	6032      	streq	r2, [r6, #0]
 8008d76:	605a      	strne	r2, [r3, #4]
 8008d78:	e7ec      	b.n	8008d54 <_malloc_r+0xa0>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	6864      	ldr	r4, [r4, #4]
 8008d7e:	e7b2      	b.n	8008ce6 <_malloc_r+0x32>
 8008d80:	4634      	mov	r4, r6
 8008d82:	6876      	ldr	r6, [r6, #4]
 8008d84:	e7b9      	b.n	8008cfa <_malloc_r+0x46>
 8008d86:	230c      	movs	r3, #12
 8008d88:	603b      	str	r3, [r7, #0]
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	f000 f84c 	bl	8008e28 <__malloc_unlock>
 8008d90:	e7a1      	b.n	8008cd6 <_malloc_r+0x22>
 8008d92:	6025      	str	r5, [r4, #0]
 8008d94:	e7de      	b.n	8008d54 <_malloc_r+0xa0>
 8008d96:	bf00      	nop
 8008d98:	20001e9c 	.word	0x20001e9c

08008d9c <_realloc_r>:
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	4680      	mov	r8, r0
 8008da2:	4614      	mov	r4, r2
 8008da4:	460e      	mov	r6, r1
 8008da6:	b921      	cbnz	r1, 8008db2 <_realloc_r+0x16>
 8008da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dac:	4611      	mov	r1, r2
 8008dae:	f7ff bf81 	b.w	8008cb4 <_malloc_r>
 8008db2:	b92a      	cbnz	r2, 8008dc0 <_realloc_r+0x24>
 8008db4:	f7ff ff12 	bl	8008bdc <_free_r>
 8008db8:	4625      	mov	r5, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc0:	f000 f838 	bl	8008e34 <_malloc_usable_size_r>
 8008dc4:	4284      	cmp	r4, r0
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	d802      	bhi.n	8008dd0 <_realloc_r+0x34>
 8008dca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dce:	d812      	bhi.n	8008df6 <_realloc_r+0x5a>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7ff ff6e 	bl	8008cb4 <_malloc_r>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d0ed      	beq.n	8008dba <_realloc_r+0x1e>
 8008dde:	42bc      	cmp	r4, r7
 8008de0:	4622      	mov	r2, r4
 8008de2:	4631      	mov	r1, r6
 8008de4:	bf28      	it	cs
 8008de6:	463a      	movcs	r2, r7
 8008de8:	f7ff fed0 	bl	8008b8c <memcpy>
 8008dec:	4631      	mov	r1, r6
 8008dee:	4640      	mov	r0, r8
 8008df0:	f7ff fef4 	bl	8008bdc <_free_r>
 8008df4:	e7e1      	b.n	8008dba <_realloc_r+0x1e>
 8008df6:	4635      	mov	r5, r6
 8008df8:	e7df      	b.n	8008dba <_realloc_r+0x1e>
	...

08008dfc <_sbrk_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d06      	ldr	r5, [pc, #24]	; (8008e18 <_sbrk_r+0x1c>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	602b      	str	r3, [r5, #0]
 8008e08:	f7f8 fbf6 	bl	80015f8 <_sbrk>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_sbrk_r+0x1a>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_sbrk_r+0x1a>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20001ea4 	.word	0x20001ea4

08008e1c <__malloc_lock>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <__malloc_lock+0x8>)
 8008e1e:	f000 b811 	b.w	8008e44 <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	20001ea8 	.word	0x20001ea8

08008e28 <__malloc_unlock>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__malloc_unlock+0x8>)
 8008e2a:	f000 b80c 	b.w	8008e46 <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	20001ea8 	.word	0x20001ea8

08008e34 <_malloc_usable_size_r>:
 8008e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e38:	1f18      	subs	r0, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfbc      	itt	lt
 8008e3e:	580b      	ldrlt	r3, [r1, r0]
 8008e40:	18c0      	addlt	r0, r0, r3
 8008e42:	4770      	bx	lr

08008e44 <__retarget_lock_acquire_recursive>:
 8008e44:	4770      	bx	lr

08008e46 <__retarget_lock_release_recursive>:
 8008e46:	4770      	bx	lr

08008e48 <_init>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr

08008e54 <_fini>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	bf00      	nop
 8008e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5a:	bc08      	pop	{r3}
 8008e5c:	469e      	mov	lr, r3
 8008e5e:	4770      	bx	lr
