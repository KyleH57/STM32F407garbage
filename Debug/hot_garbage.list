
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008748  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab0  08008ab0  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab8  08008ab8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008abc  08008abc  00018abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c8c  200001f8  08008cb8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e84  08008cb8  00021e84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab4d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bdf  00000000  00000000  0003ad75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002592a  00000000  00000000  00040bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f0f  00000000  00000000  0006651a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7458  00000000  00000000  0007c429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153881  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec4  00000000  00000000  001538d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088c0 	.word	0x080088c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080088c0 	.word	0x080088c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b0ac      	sub	sp, #176	; 0xb0
 800056c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056e:	f000 ff19 	bl	80013a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f92b 	bl	80007cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f000 facb 	bl	8000b10 <MX_GPIO_Init>
	MX_ADC2_Init();
 800057a:	f000 f991 	bl	80008a0 <MX_ADC2_Init>
	MX_ADC3_Init();
 800057e:	f000 f9e1 	bl	8000944 <MX_ADC3_Init>
	MX_CAN2_Init();
 8000582:	f000 fa31 	bl	80009e8 <MX_CAN2_Init>
	MX_SPI1_Init();
 8000586:	f000 fa63 	bl	8000a50 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 800058a:	f000 fa97 	bl	8000abc <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 800058e:	f006 ff8b 	bl	80074a8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	const uint8_t spStat[3] =
 8000592:	4a83      	ldr	r2, [pc, #524]	; (80007a0 <main+0x238>)
 8000594:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	4611      	mov	r1, r2
 800059c:	8019      	strh	r1, [r3, #0]
 800059e:	3302      	adds	r3, #2
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	701a      	strb	r2, [r3, #0]
	{ 'S', 'P', '\n' };
	const uint8_t onStat[3] =
 80005a4:	4a7f      	ldr	r2, [pc, #508]	; (80007a4 <main+0x23c>)
 80005a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	4611      	mov	r1, r2
 80005ae:	8019      	strh	r1, [r3, #0]
 80005b0:	3302      	adds	r3, #2
 80005b2:	0c12      	lsrs	r2, r2, #16
 80005b4:	701a      	strb	r2, [r3, #0]
	{ 'M', '3', '\n' };
	const uint8_t offStat[3] =
 80005b6:	4a7c      	ldr	r2, [pc, #496]	; (80007a8 <main+0x240>)
 80005b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	4611      	mov	r1, r2
 80005c0:	8019      	strh	r1, [r3, #0]
 80005c2:	3302      	adds	r3, #2
 80005c4:	0c12      	lsrs	r2, r2, #16
 80005c6:	701a      	strb	r2, [r3, #0]
	{ 'M', '5', '\n' };
	const uint8_t errorMsg[3] =
 80005c8:	4a78      	ldr	r2, [pc, #480]	; (80007ac <main+0x244>)
 80005ca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ce:	6812      	ldr	r2, [r2, #0]
 80005d0:	4611      	mov	r1, r2
 80005d2:	8019      	strh	r1, [r3, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	0c12      	lsrs	r2, r2, #16
 80005d8:	701a      	strb	r2, [r3, #0]
	{ 'E', 'R', '\n' };
	char initTx[] = "11111111111111111111"; //twenty 1s
 80005da:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <main+0x248>)
 80005dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ea:	6020      	str	r0, [r4, #0]
 80005ec:	3404      	adds	r4, #4
 80005ee:	7021      	strb	r1, [r4, #0]
	uint8_t *initTxPtr = &initTx;
 80005f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	uint8_t CDCtx[8] =
 80005f8:	4a6e      	ldr	r2, [pc, #440]	; (80007b4 <main+0x24c>)
 80005fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t CDCrx[100];

	CDCrx[0] == 'a';

	char *CDCrxPtr1 = &CDCrx[2];
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	3302      	adds	r3, #2
 800060a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	uint32_t x = -99;
 800060e:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000612:	603b      	str	r3, [r7, #0]
	int rpm = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 800061a:	e008      	b.n	800062e <main+0xc6>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS(CDCrx, &x);
 800061c:	463a      	mov	r2, r7
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f006 ffea 	bl	80075fc <CDC_Receive_FS>
		HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 ff2d 	bl	8001488 <HAL_Delay>
	while (CDCrx[0] != 'i')
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	2b69      	cmp	r3, #105	; 0x69
 8000632:	d1f3      	bne.n	800061c <main+0xb4>
	}
	CDC_Transmit_FS(initTxPtr, 18);
 8000634:	2112      	movs	r1, #18
 8000636:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800063a:	f006 fff3 	bl	8007624 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Receive_FS(CDCrx, &x);
 800063e:	463a      	mov	r2, r7
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f006 ffd9 	bl	80075fc <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2102      	movs	r1, #2
 800064e:	485a      	ldr	r0, [pc, #360]	; (80007b8 <main+0x250>)
 8000650:	f001 fd4a 	bl	80020e8 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000654:	2028      	movs	r0, #40	; 0x28
 8000656:	f000 ff17 	bl	8001488 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2102      	movs	r1, #2
 800065e:	4856      	ldr	r0, [pc, #344]	; (80007b8 <main+0x250>)
 8000660:	f001 fd42 	bl	80020e8 <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	f000 ff0f 	bl	8001488 <HAL_Delay>

		int msgFail = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (CDCrx[0] == 'M')
 8000670:	793b      	ldrb	r3, [r7, #4]
 8000672:	2b4d      	cmp	r3, #77	; 0x4d
 8000674:	d13e      	bne.n	80006f4 <main+0x18c>
		{
			if (CDCrx[1] == '3')
 8000676:	797b      	ldrb	r3, [r7, #5]
 8000678:	2b33      	cmp	r3, #51	; 0x33
 800067a:	d121      	bne.n	80006c0 <main+0x158>
			{
				int temp133 = spindleFWD(&huart3);
 800067c:	484f      	ldr	r0, [pc, #316]	; (80007bc <main+0x254>)
 800067e:	f000 fba7 	bl	8000dd0 <spindleFWD>
 8000682:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
				if (temp133 > 0)
 8000686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800068a:	2b00      	cmp	r3, #0
 800068c:	dd0e      	ble.n	80006ac <main+0x144>
				{
					sprintf(errorMsg, "E%d\n", temp133);
 800068e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000692:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000696:	494a      	ldr	r1, [pc, #296]	; (80007c0 <main+0x258>)
 8000698:	4618      	mov	r0, r3
 800069a:	f007 fc55 	bl	8007f48 <siprintf>
					CDC_Transmit_FS(errorMsg, 3);
 800069e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a2:	2103      	movs	r1, #3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f006 ffbd 	bl	8007624 <CDC_Transmit_FS>
 80006aa:	e005      	b.n	80006b8 <main+0x150>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 80006ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006b0:	2103      	movs	r1, #3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 ffb6 	bl	8007624 <CDC_Transmit_FS>

				}


				HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fee5 	bl	8001488 <HAL_Delay>
 80006be:	e06b      	b.n	8000798 <main+0x230>

			}
			else if (CDCrx[1] == '5')
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	2b35      	cmp	r3, #53	; 0x35
 80006c4:	d168      	bne.n	8000798 <main+0x230>
			{
				if (spindleOff(&huart3) > 0) {
 80006c6:	483d      	ldr	r0, [pc, #244]	; (80007bc <main+0x254>)
 80006c8:	f000 fbae 	bl	8000e28 <spindleOff>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dd06      	ble.n	80006e0 <main+0x178>

					CDC_Transmit_FS(errorMsg, 3);
 80006d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006d6:	2103      	movs	r1, #3
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 ffa3 	bl	8007624 <CDC_Transmit_FS>
 80006de:	e005      	b.n	80006ec <main+0x184>
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 80006e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006e4:	2103      	movs	r1, #3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 ff9c 	bl	8007624 <CDC_Transmit_FS>
				}
				HAL_Delay(10);
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 fecb 	bl	8001488 <HAL_Delay>
 80006f2:	e051      	b.n	8000798 <main+0x230>

			}

		}
		else if (CDCrx[0] == 'S')
 80006f4:	793b      	ldrb	r3, [r7, #4]
 80006f6:	2b53      	cmp	r3, #83	; 0x53
 80006f8:	d12d      	bne.n	8000756 <main+0x1ee>
		{
			HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f000 fec4 	bl	8001488 <HAL_Delay>
			CDCrx[7] = NULL;
 8000700:	2300      	movs	r3, #0
 8000702:	72fb      	strb	r3, [r7, #11]
			//rounddown ok
			rpm = atoi(CDCrxPtr1) / 3;
 8000704:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000708:	f007 fbe8 	bl	8007edc <atoi>
 800070c:	4603      	mov	r3, r0
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <main+0x25c>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	17db      	asrs	r3, r3, #31
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			while (setFreq(rpm, &huart3))
 800071c:	e00b      	b.n	8000736 <main+0x1ce>
			{
				HAL_Delay(50);
 800071e:	2032      	movs	r0, #50	; 0x32
 8000720:	f000 feb2 	bl	8001488 <HAL_Delay>
				msgFail++;
 8000724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000728:	3301      	adds	r3, #1
 800072a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				if (msgFail > 5)
 800072e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000732:	2b05      	cmp	r3, #5
 8000734:	dc08      	bgt.n	8000748 <main+0x1e0>
			while (setFreq(rpm, &huart3))
 8000736:	4921      	ldr	r1, [pc, #132]	; (80007bc <main+0x254>)
 8000738:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800073c:	f000 fba0 	bl	8000e80 <setFreq>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1eb      	bne.n	800071e <main+0x1b6>
 8000746:	e000      	b.n	800074a <main+0x1e2>
				{
					break;
 8000748:	bf00      	nop
				}
			}
			setFreq(rpm, &huart3);
 800074a:	491c      	ldr	r1, [pc, #112]	; (80007bc <main+0x254>)
 800074c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000750:	f000 fb96 	bl	8000e80 <setFreq>
 8000754:	e020      	b.n	8000798 <main+0x230>
		}
		else if (CDCrx[0] == 'C')
 8000756:	793b      	ldrb	r3, [r7, #4]
 8000758:	2b43      	cmp	r3, #67	; 0x43
 800075a:	d01d      	beq.n	8000798 <main+0x230>
		{
			//int spindleCurrent = readCurrent10X(&huart3);
		}
		else if (CDCrx[0] == 'R')
 800075c:	793b      	ldrb	r3, [r7, #4]
 800075e:	2b52      	cmp	r3, #82	; 0x52
 8000760:	d11a      	bne.n	8000798 <main+0x230>
		{
			uint16_t spindleI = readI(&huart3);
 8000762:	4816      	ldr	r0, [pc, #88]	; (80007bc <main+0x254>)
 8000764:	f000 fb25 	bl	8000db2 <readI>
 8000768:	4603      	mov	r3, r0
 800076a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

			uint16_t spindleRPM = readRPM(&huart3);
 800076e:	4813      	ldr	r0, [pc, #76]	; (80007bc <main+0x254>)
 8000770:	f000 fb10 	bl	8000d94 <readRPM>
 8000774:	4603      	mov	r3, r0
 8000776:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c


			sprintf(CDCtx, "R%05d,%03d", spindleRPM, spindleI);
 800077a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800077e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8000782:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8000786:	4910      	ldr	r1, [pc, #64]	; (80007c8 <main+0x260>)
 8000788:	f007 fbde 	bl	8007f48 <siprintf>

			CDC_Transmit_FS(CDCtx, 5);
 800078c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000790:	2105      	movs	r1, #5
 8000792:	4618      	mov	r0, r3
 8000794:	f006 ff46 	bl	8007624 <CDC_Transmit_FS>
		else
		{

		}

		CDCrx[0] = 'a';
 8000798:	2361      	movs	r3, #97	; 0x61
 800079a:	713b      	strb	r3, [r7, #4]
	{
 800079c:	e74f      	b.n	800063e <main+0xd6>
 800079e:	bf00      	nop
 80007a0:	080088ec 	.word	0x080088ec
 80007a4:	080088f0 	.word	0x080088f0
 80007a8:	080088f4 	.word	0x080088f4
 80007ac:	080088f8 	.word	0x080088f8
 80007b0:	080088fc 	.word	0x080088fc
 80007b4:	08008914 	.word	0x08008914
 80007b8:	40020800 	.word	0x40020800
 80007bc:	20000444 	.word	0x20000444
 80007c0:	080088d8 	.word	0x080088d8
 80007c4:	55555556 	.word	0x55555556
 80007c8:	080088e0 	.word	0x080088e0

080007cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f007 fbac 	bl	8007f38 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <SystemClock_Config+0xcc>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <SystemClock_Config+0xcc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemClock_Config+0xd0>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemClock_Config+0xd0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800083c:	2308      	movs	r3, #8
 800083e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000840:	23a8      	movs	r3, #168	; 0xa8
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000848:	2307      	movs	r3, #7
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4618      	mov	r0, r3
 8000852:	f002 fde5 	bl	8003420 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800085c:	f000 f9ee 	bl	8000c3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800086c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000870:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000876:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2105      	movs	r1, #5
 800087e:	4618      	mov	r0, r3
 8000880:	f003 f846 	bl	8003910 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800088a:	f000 f9d7 	bl	8000c3c <Error_Handler>
	}
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	; 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_ADC2_Init+0x98>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_ADC2_Init+0x9c>)
 80008b6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ADC2_Init+0x98>)
 80008ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008be:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_ADC2_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_ADC2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_ADC2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_ADC2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ADC2_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ADC2_Init+0x98>)
 80008e2:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_ADC2_Init+0xa0>)
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_ADC2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_ADC2_Init+0x98>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ADC2_Init+0x98>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ADC2_Init+0x98>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC2_Init+0x98>)
 8000902:	f000 fde5 	bl	80014d0 <HAL_ADC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 800090c:	f000 f996 	bl	8000c3c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000910:	2301      	movs	r3, #1
 8000912:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_ADC2_Init+0x98>)
 8000922:	f000 fe19 	bl	8001558 <HAL_ADC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 800092c:	f000 f986 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000488 	.word	0x20000488
 800093c:	40012100 	.word	0x40012100
 8000940:	0f000001 	.word	0x0f000001

08000944 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC3_Init+0x98>)
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <MX_ADC3_Init+0x9c>)
 800095a:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_ADC3_Init+0x98>)
 800095e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000962:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_ADC3_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC3_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_ADC3_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_ADC3_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_ADC3_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_ADC3_Init+0x98>)
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_ADC3_Init+0xa0>)
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ADC3_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_ADC3_Init+0x98>)
 8000992:	2201      	movs	r2, #1
 8000994:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_ADC3_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_ADC3_Init+0x98>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_ADC3_Init+0x98>)
 80009a6:	f000 fd93 	bl	80014d0 <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80009b0:	f000 f944 	bl	8000c3c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_ADC3_Init+0x98>)
 80009c6:	f000 fdc7 	bl	8001558 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80009d0:	f000 f934 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200004f8 	.word	0x200004f8
 80009e0:	40012200 	.word	0x40012200
 80009e4:	0f000001 	.word	0x0f000001

080009e8 <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_CAN2_Init+0x60>)
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <MX_CAN2_Init+0x64>)
 80009f0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_CAN2_Init+0x60>)
 80009f4:	2210      	movs	r2, #16
 80009f6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_CAN2_Init+0x60>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_CAN2_Init+0x60>)
 8000a36:	f000 ffad 	bl	8001994 <HAL_CAN_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8000a40:	f000 f8fc 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200004d0 	.word	0x200004d0
 8000a4c:	40006800 	.word	0x40006800

08000a50 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_SPI1_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a80:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_SPI1_Init+0x64>)
 8000aa2:	f003 f92f 	bl	8003d04 <HAL_SPI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000aac:	f000 f8c6 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000540 	.word	0x20000540
 8000ab8:	40013000 	.word	0x40013000

08000abc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART3_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000acc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f003 f98f 	bl	8003e16 <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000afe:	f000 f89d 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000444 	.word	0x20000444
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a38      	ldr	r2, [pc, #224]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a31      	ldr	r2, [pc, #196]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2a      	ldr	r2, [pc, #168]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a23      	ldr	r2, [pc, #140]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_GPIO_Init+0x11c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	481e      	ldr	r0, [pc, #120]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000bb8:	f001 fa96 	bl	80020e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <MX_GPIO_Init+0x124>)
 8000bc2:	f001 fa91 	bl	80020e8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	211f      	movs	r1, #31
 8000bca:	481b      	ldr	r0, [pc, #108]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000bcc:	f001 fa8c 	bl	80020e8 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_GPIO_Init+0x120>)
 8000be8:	f001 f8e2 	bl	8001db0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000bec:	2302      	movs	r3, #2
 8000bee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_GPIO_Init+0x124>)
 8000c04:	f001 f8d4 	bl	8001db0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000c08:	231f      	movs	r3, #31
 8000c0a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_GPIO_Init+0x128>)
 8000c20:	f001 f8c6 	bl	8001db0 <HAL_GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	40020c00 	.word	0x40020c00

08000c3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <sendData8>:

uint8_t rx485[] =
{ 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A' }; //12 bytes

void sendData8(UART_HandleTypeDef *huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <sendData8+0x3c>)
 8000c56:	f001 fa47 	bl	80020e8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000c5a:	2005      	movs	r0, #5
 8000c5c:	f000 fc14 	bl	8001488 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000c60:	230a      	movs	r3, #10
 8000c62:	2208      	movs	r2, #8
 8000c64:	4908      	ldr	r1, [pc, #32]	; (8000c88 <sendData8+0x40>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f003 f922 	bl	8003eb0 <HAL_UART_Transmit>
	HAL_Delay(5);
 8000c6c:	2005      	movs	r0, #5
 8000c6e:	f000 fc0b 	bl	8001488 <HAL_Delay>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2102      	movs	r1, #2
 8000c76:	4803      	ldr	r0, [pc, #12]	; (8000c84 <sendData8+0x3c>)
 8000c78:	f001 fa36 	bl	80020e8 <HAL_GPIO_WritePin>

}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020400 	.word	0x40020400
 8000c88:	20000000 	.word	0x20000000

08000c8c <appendCRC8>:
{
	//TODO
}

void appendCRC8()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000c92:	2106      	movs	r1, #6
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <appendCRC8+0x38>)
 8000c96:	f000 f925 	bl	8000ee4 <crc_chk_value>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	781a      	ldrb	r2, [r3, #0]
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <appendCRC8+0x38>)
 8000caa:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <appendCRC8+0x38>)
 8000cb8:	71da      	strb	r2, [r3, #7]
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <checkEcho8>:
//TODO
//Check to see if we need to receive 10 bytes or not

//returns 1 if success, 0 if fail
int checkEcho8(UART_HandleTypeDef *huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, rx485, 8, 50);
 8000cd0:	2332      	movs	r3, #50	; 0x32
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	490e      	ldr	r1, [pc, #56]	; (8000d10 <checkEcho8+0x48>)
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f003 f97c 	bl	8003fd4 <HAL_UART_Receive>
	for (int i = 0; i < 8; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e00e      	b.n	8000d00 <checkEcho8+0x38>
	{
		if (wrMsg[i] != rx485[i])
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <checkEcho8+0x4c>)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <checkEcho8+0x48>)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	440b      	add	r3, r1
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d001      	beq.n	8000cfa <checkEcho8+0x32>
		{
			return i;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	e006      	b.n	8000d08 <checkEcho8+0x40>
	for (int i = 0; i < 8; i++)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	dded      	ble.n	8000ce2 <checkEcho8+0x1a>
		}
	}
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000000 	.word	0x20000000

08000d18 <rdStatusValue>:
//	//return rpmData;
//}


uint16_t rdStatusValue(UART_HandleTypeDef *huart, uint8_t statusID)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	70fb      	strb	r3, [r7, #3]
	uint16_t data;

	wrMsg[0] = 0x01;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <rdStatusValue+0x74>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <rdStatusValue+0x74>)
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <rdStatusValue+0x74>)
 8000d32:	22d0      	movs	r2, #208	; 0xd0
 8000d34:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = statusID;
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <rdStatusValue+0x74>)
 8000d38:	78fb      	ldrb	r3, [r7, #3]
 8000d3a:	70d3      	strb	r3, [r2, #3]
	wrMsg[4] = 0x00;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <rdStatusValue+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <rdStatusValue+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <rdStatusValue+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <rdStatusValue+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000d54:	f7ff ff9a 	bl	8000c8c <appendCRC8>

	sendData8(huart);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff75 	bl	8000c48 <sendData8>

	HAL_UART_Receive(huart, rx485, 7, 50);
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	2207      	movs	r2, #7
 8000d62:	490b      	ldr	r1, [pc, #44]	; (8000d90 <rdStatusValue+0x78>)
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f003 f935 	bl	8003fd4 <HAL_UART_Receive>

	data = rx485[4];
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <rdStatusValue+0x78>)
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	81fb      	strh	r3, [r7, #14]
	data <<= 8;
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	81fb      	strh	r3, [r7, #14]
	data |= rx485[5];
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <rdStatusValue+0x78>)
 8000d78:	795b      	ldrb	r3, [r3, #5]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	81fb      	strh	r3, [r7, #14]
	//*data = (uint16_t *)(rx485[3]);

	//return *data;


	return data;
 8000d82:	89fb      	ldrh	r3, [r7, #14]

}   //end of rdStatusValue()
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008

08000d94 <readRPM>:
#define VFD_PARAM_CODE_OUTPUT_I   0x01
#define VFD_PARAM_CODE_RPM   0x03


uint16_t readRPM(UART_HandleTypeDef *huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = rdStatusValue(huart, VFD_PARAM_CODE_RPM);
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffba 	bl	8000d18 <rdStatusValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	81fb      	strh	r3, [r7, #14]

	return data;
 8000da8:	89fb      	ldrh	r3, [r7, #14]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <readI>:


uint16_t readI(UART_HandleTypeDef *huart)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	uint16_t data;

	data = rdStatusValue(huart, VFD_PARAM_CODE_OUTPUT_I);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffab 	bl	8000d18 <rdStatusValue>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	81fb      	strh	r3, [r7, #14]

	return data;
 8000dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <spindleFWD>:



//sends message to turn on spindle, returns 1 if success, 0 if failed
int spindleFWD(UART_HandleTypeDef *huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <spindleFWD+0x54>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <spindleFWD+0x54>)
 8000de0:	2206      	movs	r2, #6
 8000de2:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <spindleFWD+0x54>)
 8000de6:	2210      	movs	r2, #16
 8000de8:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <spindleFWD+0x54>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <spindleFWD+0x54>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <spindleFWD+0x54>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <spindleFWD+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <spindleFWD+0x54>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000e08:	f7ff ff40 	bl	8000c8c <appendCRC8>

	sendData8(huart);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff1b 	bl	8000c48 <sendData8>

	return checkEcho8(huart);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff58 	bl	8000cc8 <checkEcho8>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000000 	.word	0x20000000

08000e28 <spindleOff>:

int spindleOff(UART_HandleTypeDef *huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <spindleOff+0x54>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <spindleOff+0x54>)
 8000e38:	2206      	movs	r2, #6
 8000e3a:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <spindleOff+0x54>)
 8000e3e:	2210      	movs	r2, #16
 8000e40:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <spindleOff+0x54>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <spindleOff+0x54>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <spindleOff+0x54>)
 8000e50:	2203      	movs	r2, #3
 8000e52:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <spindleOff+0x54>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <spindleOff+0x54>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000e60:	f7ff ff14 	bl	8000c8c <appendCRC8>

	sendData8(huart);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff feef 	bl	8000c48 <sendData8>

	return checkEcho8(huart);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff2c 	bl	8000cc8 <checkEcho8>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <setFreq>:

int setFreq(uint16_t freq, UART_HandleTypeDef *huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <setFreq+0x60>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <setFreq+0x60>)
 8000e94:	2206      	movs	r2, #6
 8000e96:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <setFreq+0x60>)
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <setFreq+0x60>)
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	0a1b      	lsrs	r3, r3, #8
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <setFreq+0x60>)
 8000eae:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <setFreq+0x60>)
 8000eb6:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <setFreq+0x60>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <setFreq+0x60>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000ec4:	f7ff fee2 	bl	8000c8c <appendCRC8>

	sendData8(huart);
 8000ec8:	6838      	ldr	r0, [r7, #0]
 8000eca:	f7ff febd 	bl	8000c48 <sendData8>

	return checkEcho8(huart);
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f7ff fefa 	bl	8000cc8 <checkEcho8>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef4:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8000ef6:	e01f      	b.n	8000f38 <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	4053      	eors	r3, r2
 8000f06:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	e011      	b.n	8000f32 <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <crc_chk_value+0x6c>)
 8000f20:	4053      	eors	r3, r2
 8000f22:	81fb      	strh	r3, [r7, #14]
 8000f24:	e002      	b.n	8000f2c <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	ddea      	ble.n	8000f0e <crc_chk_value+0x2a>
	while (length--)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	70fa      	strb	r2, [r7, #3]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1da      	bne.n	8000ef8 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000f42:	89fb      	ldrh	r3, [r7, #14]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	ffffa001 	.word	0xffffa001

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_ADC_MspInit+0xd8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a25      	ldr	r2, [pc, #148]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ffe:	2306      	movs	r3, #6
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <HAL_ADC_MspInit+0xe0>)
 8001012:	f000 fecd 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001016:	e02c      	b.n	8001072 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_ADC_MspInit+0xe4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d127      	bne.n	8001072 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 800102c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_ADC_MspInit+0xdc>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800105a:	2308      	movs	r3, #8
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_ADC_MspInit+0xe0>)
 800106e:	f000 fe9f 	bl	8001db0 <HAL_GPIO_Init>
}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40012100 	.word	0x40012100
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000
 8001088:	40012200 	.word	0x40012200

0800108c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <HAL_CAN_MspInit+0xa0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d13a      	bne.n	8001124 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_CAN_MspInit+0xa4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001102:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001114:	2309      	movs	r3, #9
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_CAN_MspInit+0xa8>)
 8001120:	f000 fe46 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40006800 	.word	0x40006800
 8001130:	40023800 	.word	0x40023800
 8001134:	40020400 	.word	0x40020400

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_SPI_MspInit+0x84>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12b      	bne.n	80011b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 8001164:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_SPI_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001192:	23f0      	movs	r3, #240	; 0xf0
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a2:	2305      	movs	r3, #5
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_SPI_MspInit+0x8c>)
 80011ae:	f000 fdff 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40013000 	.word	0x40013000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_UART_MspInit+0x84>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12c      	bne.n	8001244 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0x88>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a10      	ldr	r2, [pc, #64]	; (8001250 <HAL_UART_MspInit+0x88>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001222:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001234:	2307      	movs	r3, #7
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <HAL_UART_MspInit+0x8c>)
 8001240:	f000 fdb6 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40004800 	.word	0x40004800
 8001250:	40023800 	.word	0x40023800
 8001254:	40020400 	.word	0x40020400

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f8d0 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <OTG_FS_IRQHandler+0x10>)
 80012b2:	f001 f882 	bl	80023ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20001a6c 	.word	0x20001a6c

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f006 fdf8 	bl	8007ee4 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20020000 	.word	0x20020000
 8001320:	00000400 	.word	0x00000400
 8001324:	20000214 	.word	0x20000214
 8001328:	20001e88 	.word	0x20001e88

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd7 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f006 fdb7 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff f8f1 	bl	8000568 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001388:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001394:	08008ac0 	.word	0x08008ac0
  ldr r2, =_sbss
 8001398:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800139c:	20001e84 	.word	0x20001e84

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 fcad 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fdbc 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fcc5 	bl	8001d96 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 fc8d 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000014 	.word	0x20000014
 8001440:	2000001c 	.word	0x2000001c
 8001444:	20000018 	.word	0x20000018

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2000001c 	.word	0x2000001c
 800146c:	20000598 	.word	0x20000598

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000598 	.word	0x20000598

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000001c 	.word	0x2000001c

080014d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e033      	b.n	800154e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd58 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001516:	f023 0302 	bic.w	r3, r3, #2
 800151a:	f043 0202 	orr.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f93a 	bl	800179c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40
 800153e:	e001      	b.n	8001544 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x1c>
 8001570:	2302      	movs	r3, #2
 8001572:	e105      	b.n	8001780 <HAL_ADC_ConfigChannel+0x228>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b09      	cmp	r3, #9
 8001582:	d925      	bls.n	80015d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68d9      	ldr	r1, [r3, #12]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	3b1e      	subs	r3, #30
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68d9      	ldr	r1, [r3, #12]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4403      	add	r3, r0
 80015c2:	3b1e      	subs	r3, #30
 80015c4:	409a      	lsls	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	e022      	b.n	8001616 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6919      	ldr	r1, [r3, #16]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	2207      	movs	r2, #7
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	400a      	ands	r2, r1
 80015f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6919      	ldr	r1, [r3, #16]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	4603      	mov	r3, r0
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4403      	add	r3, r0
 800160c:	409a      	lsls	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b06      	cmp	r3, #6
 800161c:	d824      	bhi.n	8001668 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b05      	subs	r3, #5
 8001630:	221f      	movs	r2, #31
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	400a      	ands	r2, r1
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4618      	mov	r0, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	3b05      	subs	r3, #5
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
 8001666:	e04c      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d824      	bhi.n	80016ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b23      	subs	r3, #35	; 0x23
 8001682:	221f      	movs	r2, #31
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43da      	mvns	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	400a      	ands	r2, r1
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b23      	subs	r3, #35	; 0x23
 80016ac:	fa00 f203 	lsl.w	r2, r0, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
 80016b8:	e023      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	; 0x41
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	400a      	ands	r2, r1
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b41      	subs	r3, #65	; 0x41
 80016f6:	fa00 f203 	lsl.w	r2, r0, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_ADC_ConfigChannel+0x234>)
 8001704:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	; (8001790 <HAL_ADC_ConfigChannel+0x238>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d109      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1cc>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b12      	cmp	r3, #18
 8001716:	d105      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_ADC_ConfigChannel+0x238>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d123      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x21e>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b10      	cmp	r3, #16
 8001734:	d003      	beq.n	800173e <HAL_ADC_ConfigChannel+0x1e6>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b11      	cmp	r3, #17
 800173c:	d11b      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b10      	cmp	r3, #16
 8001750:	d111      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_ADC_ConfigChannel+0x23c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_ADC_ConfigChannel+0x240>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9a      	lsrs	r2, r3, #18
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001768:	e002      	b.n	8001770 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	3b01      	subs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f9      	bne.n	800176a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40012300 	.word	0x40012300
 8001790:	40012000 	.word	0x40012000
 8001794:	20000014 	.word	0x20000014
 8001798:	431bde83 	.word	0x431bde83

0800179c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a4:	4b79      	ldr	r3, [pc, #484]	; (800198c <ADC_Init+0x1f0>)
 80017a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	4a58      	ldr	r2, [pc, #352]	; (8001990 <ADC_Init+0x1f4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	e00f      	b.n	800189a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0202 	bic.w	r2, r2, #2
 80018a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
 80018b4:	005a      	lsls	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01b      	beq.n	8001900 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	3b01      	subs	r3, #1
 80018f4:	035a      	lsls	r2, r3, #13
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	e007      	b.n	8001910 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	3b01      	subs	r3, #1
 800192c:	051a      	lsls	r2, r3, #20
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001952:	025a      	lsls	r2, r3, #9
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	029a      	lsls	r2, r3, #10
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40012300 	.word	0x40012300
 8001990:	0f000001 	.word	0x0f000001

08001994 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ed      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fb6a 	bl	800108c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0202 	bic.w	r2, r2, #2
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fd52 	bl	8001470 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d0:	f7ff fd4e 	bl	8001470 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c5      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1e5      	bne.n	80019d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a14:	f7ff fd2c 	bl	8001470 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fd28 	bl	8001470 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e09f      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0e5      	beq.n	8001a1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7e1b      	ldrb	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7e5b      	ldrb	r3, [r3, #25]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e007      	b.n	8001aa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e9b      	ldrb	r3, [r3, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0220 	bic.w	r2, r2, #32
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7edb      	ldrb	r3, [r3, #27]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0210 	bic.w	r2, r2, #16
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f1b      	ldrb	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f5b      	ldrb	r3, [r3, #29]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0204 	orr.w	r2, r2, #4
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	ea42 0103 	orr.w	r1, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	; (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	; (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e16b      	b.n	80020a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 815a 	bne.w	800209e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d130      	bne.n	8001e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0201 	and.w	r2, r3, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d017      	beq.n	8001ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80b4 	beq.w	800209e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a5f      	ldr	r2, [pc, #380]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a5b      	ldr	r2, [pc, #364]	; (80020c0 <HAL_GPIO_Init+0x310>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_GPIO_Init+0x314>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <HAL_GPIO_Init+0x318>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x222>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a50      	ldr	r2, [pc, #320]	; (80020cc <HAL_GPIO_Init+0x31c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x21e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4f      	ldr	r2, [pc, #316]	; (80020d0 <HAL_GPIO_Init+0x320>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4e      	ldr	r2, [pc, #312]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	; (80020d8 <HAL_GPIO_Init+0x328>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4c      	ldr	r2, [pc, #304]	; (80020dc <HAL_GPIO_Init+0x32c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <HAL_GPIO_Init+0x330>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x20a>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00e      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fba:	2308      	movs	r3, #8
 8001fbc:	e00c      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	e00a      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x228>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4935      	ldr	r1, [pc, #212]	; (80020c0 <HAL_GPIO_Init+0x310>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_GPIO_Init+0x334>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201a:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <HAL_GPIO_Init+0x334>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002020:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_GPIO_Init+0x334>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_GPIO_Init+0x334>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_GPIO_Init+0x334>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_GPIO_Init+0x334>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_GPIO_Init+0x334>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_GPIO_Init+0x334>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f ae90 	bls.w	8001dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40020000 	.word	0x40020000
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40020c00 	.word	0x40020c00
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40021400 	.word	0x40021400
 80020dc:	40021800 	.word	0x40021800
 80020e0:	40021c00 	.word	0x40021c00
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002104:	e003      	b.n	800210e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	041a      	lsls	r2, r3, #16
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	619a      	str	r2, [r3, #24]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800211a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211c:	b08f      	sub	sp, #60	; 0x3c
 800211e:	af0a      	add	r7, sp, #40	; 0x28
 8002120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e10f      	b.n	800234c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f005 fbb4 	bl	80078b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2203      	movs	r2, #3
 8002150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fafb 	bl	8004766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	687e      	ldr	r6, [r7, #4]
 8002178:	466d      	mov	r5, sp
 800217a:	f106 0410 	add.w	r4, r6, #16
 800217e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800218a:	e885 0003 	stmia.w	r5, {r0, r1}
 800218e:	1d33      	adds	r3, r6, #4
 8002190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002192:	6838      	ldr	r0, [r7, #0]
 8002194:	f002 f9d2 	bl	800453c <USB_CoreInit>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0d0      	b.n	800234c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fae9 	bl	8004788 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	e04a      	b.n	8002252 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	333d      	adds	r3, #61	; 0x3d
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	333c      	adds	r3, #60	; 0x3c
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	b298      	uxth	r0, r3
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3342      	adds	r3, #66	; 0x42
 80021f8:	4602      	mov	r2, r0
 80021fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	333f      	adds	r3, #63	; 0x3f
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002210:	7bfa      	ldrb	r2, [r7, #15]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3344      	adds	r3, #68	; 0x44
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3348      	adds	r3, #72	; 0x48
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	3350      	adds	r3, #80	; 0x50
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3301      	adds	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3af      	bcc.n	80021bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e044      	b.n	80022ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d3b5      	bcc.n	8002262 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	687e      	ldr	r6, [r7, #4]
 80022fe:	466d      	mov	r5, sp
 8002300:	f106 0410 	add.w	r4, r6, #16
 8002304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002310:	e885 0003 	stmia.w	r5, {r0, r1}
 8002314:	1d33      	adds	r3, r6, #4
 8002316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002318:	6838      	ldr	r0, [r7, #0]
 800231a:	f002 fa5f 	bl	80047dc <USB_DevInit>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e00d      	b.n	800234c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 faa7 	bl	8005898 <USB_DevDisconnect>

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002354 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_PCD_Start+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e020      	b.n	80023b2 <HAL_PCD_Start+0x5e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	2b01      	cmp	r3, #1
 800237e:	d109      	bne.n	8002394 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002384:	2b01      	cmp	r3, #1
 8002386:	d005      	beq.n	8002394 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f002 f9d3 	bl	8004744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa57 	bl	8005856 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b08d      	sub	sp, #52	; 0x34
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fb15 	bl	8005a00 <USB_GetMode>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 839d 	bne.w	8002b18 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fa79 	bl	80058da <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8393 	beq.w	8002b16 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fa70 	bl	80058da <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d107      	bne.n	8002414 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f002 0202 	and.w	r2, r2, #2
 8002412:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fa5e 	bl	80058da <USB_ReadInterrupts>
 800241e:	4603      	mov	r3, r0
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b10      	cmp	r3, #16
 8002426:	d161      	bne.n	80024ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0210 	bic.w	r2, r2, #16
 8002436:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3304      	adds	r3, #4
 8002456:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	0c5b      	lsrs	r3, r3, #17
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	2b02      	cmp	r3, #2
 8002462:	d124      	bne.n	80024ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d035      	beq.n	80024dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800247a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6a38      	ldr	r0, [r7, #32]
 8002484:	f003 f8c4 	bl	8005610 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002494:	441a      	add	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a6:	441a      	add	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	619a      	str	r2, [r3, #24]
 80024ac:	e016      	b.n	80024dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	0c5b      	lsrs	r3, r3, #17
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d110      	bne.n	80024dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c0:	2208      	movs	r2, #8
 80024c2:	4619      	mov	r1, r3
 80024c4:	6a38      	ldr	r0, [r7, #32]
 80024c6:	f003 f8a3 	bl	8005610 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d6:	441a      	add	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0210 	orr.w	r2, r2, #16
 80024ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f9f2 	bl	80058da <USB_ReadInterrupts>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002500:	d16e      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f003 f9f8 	bl	8005900 <USB_ReadDevAllOutEpInterrupt>
 8002510:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002512:	e062      	b.n	80025da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d057      	beq.n	80025ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fa1d 	bl	8005968 <USB_ReadDevOutEPInterrupt>
 800252e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	461a      	mov	r2, r3
 8002548:	2301      	movs	r3, #1
 800254a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800254c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fdb0 	bl	80030b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00c      	beq.n	8002578 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256a:	461a      	mov	r2, r3
 800256c:	2308      	movs	r3, #8
 800256e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 feaa 	bl	80032cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800258e:	461a      	mov	r2, r3
 8002590:	2310      	movs	r3, #16
 8002592:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025aa:	461a      	mov	r2, r3
 80025ac:	2320      	movs	r3, #32
 80025ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c6:	461a      	mov	r2, r3
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3301      	adds	r3, #1
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d199      	bne.n	8002514 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 f978 	bl	80058da <USB_ReadInterrupts>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025f4:	f040 80c0 	bne.w	8002778 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 f999 	bl	8005934 <USB_ReadDevAllInEpInterrupt>
 8002602:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002608:	e0b2      	b.n	8002770 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a7 	beq.w	8002764 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f9bf 	bl	80059a4 <USB_ReadDevInEPInterrupt>
 8002626:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d057      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	2201      	movs	r2, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	69f9      	ldr	r1, [r7, #28]
 800264e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002652:	4013      	ands	r3, r2
 8002654:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d132      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3348      	adds	r3, #72	; 0x48
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4403      	add	r3, r0
 8002690:	3344      	adds	r3, #68	; 0x44
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4419      	add	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	3348      	adds	r3, #72	; 0x48
 80026a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x31c>
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	3350      	adds	r3, #80	; 0x50
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026ce:	461a      	mov	r2, r3
 80026d0:	2101      	movs	r1, #1
 80026d2:	f003 f9c7 	bl	8005a64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f005 f96a 	bl	80079b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	461a      	mov	r2, r3
 80026fa:	2308      	movs	r3, #8
 80026fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002714:	461a      	mov	r2, r3
 8002716:	2310      	movs	r3, #16
 8002718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002730:	461a      	mov	r2, r3
 8002732:	2340      	movs	r3, #64	; 0x40
 8002734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274c:	461a      	mov	r2, r3
 800274e:	2302      	movs	r3, #2
 8002750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800275c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fc1b 	bl	8002f9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	3301      	adds	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	f47f af49 	bne.w	800260a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 f8ac 	bl	80058da <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800278c:	d122      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027b4:	2100      	movs	r1, #0
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fe26 	bl	8003408 <HAL_PCDEx_LPM_Callback>
 80027bc:	e002      	b.n	80027c4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 f970 	bl	8007aa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f003 f87e 	bl	80058da <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	d112      	bne.n	8002810 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f005 f92c 	bl	8007a58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800280e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f860 	bl	80058da <USB_ReadInterrupts>
 800281a:	4603      	mov	r3, r0
 800281c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002824:	f040 80c7 	bne.w	80029b6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2110      	movs	r1, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f002 f92e 	bl	8004aa4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284c:	e056      	b.n	80028fc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285a:	461a      	mov	r2, r3
 800285c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002860:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	440a      	add	r2, r1
 8002878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800287c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002880:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	0151      	lsls	r1, r2, #5
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	440a      	add	r2, r1
 8002898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800289c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ae:	461a      	mov	r2, r3
 80028b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e6:	0151      	lsls	r1, r2, #5
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	440a      	add	r2, r1
 80028ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	3301      	adds	r3, #1
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002902:	429a      	cmp	r2, r3
 8002904:	d3a3      	bcc.n	800284e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002914:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002918:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002932:	f043 030b 	orr.w	r3, r3, #11
 8002936:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	f043 030b 	orr.w	r3, r3, #11
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	e015      	b.n	800297c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	69fa      	ldr	r2, [r7, #28]
 800295a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800295e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002962:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002966:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002976:	f043 030b 	orr.w	r3, r3, #11
 800297a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800298e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029a0:	461a      	mov	r2, r3
 80029a2:	f003 f85f 	bl	8005a64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 ff8d 	bl	80058da <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	d124      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 f823 	bl	8005a1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 f8c3 	bl	8004b66 <USB_GetDevSpeed>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681c      	ldr	r4, [r3, #0]
 80029ec:	f001 f956 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 80029f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	4620      	mov	r0, r4
 80029fc:	f001 fe00 	bl	8004600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f005 f800 	bl	8007a06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 ff5d 	bl	80058da <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d10a      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f004 ffdd 	bl	80079ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f002 0208 	and.w	r2, r2, #8
 8002a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 ff48 	bl	80058da <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a54:	d10f      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f005 f83f 	bl	8007ae4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 ff2d 	bl	80058da <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8a:	d10f      	bne.n	8002aac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f005 f812 	bl	8007ac0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ff12 	bl	80058da <USB_ReadInterrupts>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac0:	d10a      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 f820 	bl	8007b08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fefc 	bl	80058da <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d115      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f005 f810 	bl	8007b24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	e000      	b.n	8002b18 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b16:	bf00      	nop
    }
  }
}
 8002b18:	3734      	adds	r7, #52	; 0x34
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd90      	pop	{r4, r7, pc}

08002b1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_SetAddress+0x1a>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e013      	b.n	8002b60 <HAL_PCD_SetAddress+0x42>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 fe5a 	bl	800580a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	70fb      	strb	r3, [r7, #3]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	803b      	strh	r3, [r7, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	da0f      	bge.n	8002bae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3338      	adds	r3, #56	; 0x38
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	705a      	strb	r2, [r3, #1]
 8002bac:	e00f      	b.n	8002bce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bda:	883a      	ldrh	r2, [r7, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	78ba      	ldrb	r2, [r7, #2]
 8002be4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	785b      	ldrb	r3, [r3, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bf8:	78bb      	ldrb	r3, [r7, #2]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d102      	bne.n	8002c04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_PCD_EP_Open+0xaa>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e00e      	b.n	8002c30 <HAL_PCD_EP_Open+0xc8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 ffc5 	bl	8004bb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da0f      	bge.n	8002c6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	3338      	adds	r3, #56	; 0x38
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e00f      	b.n	8002c8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_PCD_EP_Close+0x6e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e00e      	b.n	8002cc4 <HAL_PCD_EP_Close+0x8c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68f9      	ldr	r1, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 f803 	bl	8004cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	607a      	str	r2, [r7, #4]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	f002 fade 	bl	8005300 <USB_EP0StartXfer>
 8002d44:	e008      	b.n	8002d58 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	6979      	ldr	r1, [r7, #20]
 8002d54:	f002 f890 	bl	8004e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 020f 	and.w	r2, r3, #15
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d84:	681b      	ldr	r3, [r3, #0]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b086      	sub	sp, #24
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3338      	adds	r3, #56	; 0x38
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dec:	7afb      	ldrb	r3, [r7, #11]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6979      	ldr	r1, [r7, #20]
 8002e04:	f002 fa7c 	bl	8005300 <USB_EP0StartXfer>
 8002e08:	e008      	b.n	8002e1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	f002 f82e 	bl	8004e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d901      	bls.n	8002e44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e050      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da0f      	bge.n	8002e6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	3338      	adds	r3, #56	; 0x38
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	705a      	strb	r2, [r3, #1]
 8002e6a:	e00d      	b.n	8002e88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_PCD_EP_SetStall+0x82>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e01e      	b.n	8002ee6 <HAL_PCD_EP_SetStall+0xc0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 fbd3 	bl	8005662 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f002 fdc4 	bl	8005a64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d901      	bls.n	8002f0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e042      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da0f      	bge.n	8002f34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	705a      	strb	r2, [r3, #1]
 8002f32:	e00f      	b.n	8002f54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_PCD_EP_ClrStall+0x86>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e00e      	b.n	8002f92 <HAL_PCD_EP_ClrStall+0xa4>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fbdb 	bl	800573e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b08a      	sub	sp, #40	; 0x28
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	3338      	adds	r3, #56	; 0x38
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d901      	bls.n	8002fd2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06c      	b.n	80030ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d902      	bls.n	8002fee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff6:	e02b      	b.n	8003050 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	429a      	cmp	r2, r3
 800300c:	d902      	bls.n	8003014 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3303      	adds	r3, #3
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68d9      	ldr	r1, [r3, #12]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800302c:	b2db      	uxtb	r3, r3
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f002 fab7 	bl	80055a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	b29b      	uxth	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	429a      	cmp	r2, r3
 8003064:	d809      	bhi.n	800307a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800306e:	429a      	cmp	r2, r3
 8003070:	d203      	bcs.n	800307a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1be      	bne.n	8002ff8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	429a      	cmp	r2, r3
 8003084:	d811      	bhi.n	80030aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	2201      	movs	r2, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	43db      	mvns	r3, r3
 80030a0:	6939      	ldr	r1, [r7, #16]
 80030a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030a6:	4013      	ands	r3, r2
 80030a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	333c      	adds	r3, #60	; 0x3c
 80030cc:	3304      	adds	r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f040 80a0 	bne.w	800322c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d015      	beq.n	8003122 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a72      	ldr	r2, [pc, #456]	; (80032c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	f240 80dd 	bls.w	80032ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80d7 	beq.w	80032ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	e0cb      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d009      	beq.n	8003140 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	2320      	movs	r3, #32
 800313c:	6093      	str	r3, [r2, #8]
 800313e:	e0bc      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	f040 80b7 	bne.w	80032ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d90f      	bls.n	8003174 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003170:	6093      	str	r3, [r2, #8]
 8003172:	e0a2      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003186:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	440b      	add	r3, r1
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800319a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4403      	add	r3, r0
 80031aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4419      	add	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d114      	bne.n	800321e <PCD_EP_OutXfrComplete_int+0x16a>
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d108      	bne.n	800321e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003216:	461a      	mov	r2, r3
 8003218:	2101      	movs	r1, #1
 800321a:	f002 fc23 	bl	8005a64 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f004 fbab 	bl	8007980 <HAL_PCD_DataOutStageCallback>
 800322a:	e046      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a26      	ldr	r2, [pc, #152]	; (80032c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d124      	bne.n	800327e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003250:	6093      	str	r3, [r2, #8]
 8003252:	e032      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f004 fb82 	bl	8007980 <HAL_PCD_DataOutStageCallback>
 800327c:	e01d      	b.n	80032ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d114      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d108      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032a6:	461a      	mov	r2, r3
 80032a8:	2100      	movs	r1, #0
 80032aa:	f002 fbdb 	bl	8005a64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 fb63 	bl	8007980 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	4f54300a 	.word	0x4f54300a
 80032c8:	4f54310a 	.word	0x4f54310a

080032cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	333c      	adds	r3, #60	; 0x3c
 80032e4:	3304      	adds	r3, #4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <PCD_EP_OutSetupPacket_int+0x88>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d90e      	bls.n	8003320 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f004 fb1b 	bl	800795c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <PCD_EP_OutSetupPacket_int+0x88>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d90c      	bls.n	8003348 <PCD_EP_OutSetupPacket_int+0x7c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003340:	461a      	mov	r2, r3
 8003342:	2101      	movs	r1, #1
 8003344:	f002 fb8e 	bl	8005a64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	4f54300a 	.word	0x4f54300a

08003358 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
 8003364:	4613      	mov	r3, r2
 8003366:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003376:	883b      	ldrh	r3, [r7, #0]
 8003378:	0419      	lsls	r1, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	430a      	orrs	r2, r1
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
 8003384:	e028      	b.n	80033d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	e00d      	b.n	80033b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	3340      	adds	r3, #64	; 0x40
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	3301      	adds	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3ec      	bcc.n	800339a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033c0:	883b      	ldrh	r3, [r7, #0]
 80033c2:	0418      	lsls	r0, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	4302      	orrs	r2, r0
 80033d0:	3340      	adds	r3, #64	; 0x40
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e264      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d075      	beq.n	800352a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343e:	4ba3      	ldr	r3, [pc, #652]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d00c      	beq.n	8003464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344a:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003452:	2b08      	cmp	r3, #8
 8003454:	d112      	bne.n	800347c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003456:	4b9d      	ldr	r3, [pc, #628]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003462:	d10b      	bne.n	800347c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	4b99      	ldr	r3, [pc, #612]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05b      	beq.n	8003528 <HAL_RCC_OscConfig+0x108>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d157      	bne.n	8003528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e23f      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d106      	bne.n	8003494 <HAL_RCC_OscConfig+0x74>
 8003486:	4b91      	ldr	r3, [pc, #580]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a90      	ldr	r2, [pc, #576]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e01d      	b.n	80034d0 <HAL_RCC_OscConfig+0xb0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x98>
 800349e:	4b8b      	ldr	r3, [pc, #556]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a8a      	ldr	r2, [pc, #552]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a87      	ldr	r2, [pc, #540]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0xb0>
 80034b8:	4b84      	ldr	r3, [pc, #528]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a83      	ldr	r2, [pc, #524]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a80      	ldr	r2, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd ffca 	bl	8001470 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd ffc6 	bl	8001470 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e204      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f2:	4b76      	ldr	r3, [pc, #472]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0xc0>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fd ffb6 	bl	8001470 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7fd ffb2 	bl	8001470 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e1f0      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0xe8>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003536:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003542:	4b62      	ldr	r3, [pc, #392]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800354a:	2b08      	cmp	r3, #8
 800354c:	d11c      	bne.n	8003588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d116      	bne.n	8003588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_RCC_OscConfig+0x152>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d001      	beq.n	8003572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1c4      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4952      	ldr	r1, [pc, #328]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003586:	e03a      	b.n	80035fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCC_OscConfig+0x2b0>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fd ff6b 	bl	8001470 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359e:	f7fd ff67 	bl	8001470 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1a5      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	4b46      	ldr	r3, [pc, #280]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b43      	ldr	r3, [pc, #268]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4940      	ldr	r1, [pc, #256]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
 80035d0:	e015      	b.n	80035fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_RCC_OscConfig+0x2b0>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fd ff4a 	bl	8001470 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fd ff46 	bl	8001470 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e184      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f2:	4b36      	ldr	r3, [pc, #216]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d030      	beq.n	800366c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d016      	beq.n	8003640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x2b4>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd ff2a 	bl	8001470 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003620:	f7fd ff26 	bl	8001470 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e164      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003632:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x200>
 800363e:	e015      	b.n	800366c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x2b4>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fd ff13 	bl	8001470 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364e:	f7fd ff0f 	bl	8001470 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e14d      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a0 	beq.w	80037ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RCC_OscConfig+0x2ac>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d121      	bne.n	80036fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <HAL_RCC_OscConfig+0x2b8>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7fd fed5 	bl	8001470 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	e011      	b.n	80036ee <HAL_RCC_OscConfig+0x2ce>
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470000 	.word	0x42470000
 80036d4:	42470e80 	.word	0x42470e80
 80036d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7fd fec8 	bl	8001470 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e106      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x4e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d106      	bne.n	8003710 <HAL_RCC_OscConfig+0x2f0>
 8003702:	4b81      	ldr	r3, [pc, #516]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a80      	ldr	r2, [pc, #512]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e01c      	b.n	800374a <HAL_RCC_OscConfig+0x32a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x312>
 8003718:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a7a      	ldr	r2, [pc, #488]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a77      	ldr	r2, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x32a>
 8003732:	4b75      	ldr	r3, [pc, #468]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a74      	ldr	r2, [pc, #464]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	4b72      	ldr	r3, [pc, #456]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a71      	ldr	r2, [pc, #452]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fd fe8d 	bl	8001470 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fe89 	bl	8001470 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0c5      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b65      	ldr	r3, [pc, #404]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCC_OscConfig+0x33a>
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fd fe77 	bl	8001470 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fe73 	bl	8001470 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0af      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4b5a      	ldr	r3, [pc, #360]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a55      	ldr	r2, [pc, #340]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 809b 	beq.w	80038fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d05c      	beq.n	800388a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d141      	bne.n	800385c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd fe47 	bl	8001470 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fe43 	bl	8001470 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e081      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f8:	4b43      	ldr	r3, [pc, #268]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	019b      	lsls	r3, r3, #6
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	4937      	ldr	r1, [pc, #220]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382e:	4b37      	ldr	r3, [pc, #220]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 8003830:	2201      	movs	r2, #1
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fd fe1c 	bl	8001470 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800383c:	f7fd fe18 	bl	8001470 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e056      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b2e      	ldr	r3, [pc, #184]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x41c>
 800385a:	e04e      	b.n	80038fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <HAL_RCC_OscConfig+0x4ec>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fd fe05 	bl	8001470 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7fd fe01 	bl	8001470 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e03f      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0x44a>
 8003888:	e037      	b.n	80038fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e032      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <HAL_RCC_OscConfig+0x4e8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d028      	beq.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d11a      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038c6:	4013      	ands	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40007000 	.word	0x40007000
 8003908:	40023800 	.word	0x40023800
 800390c:	42470060 	.word	0x42470060

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0cc      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d90c      	bls.n	800394c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e067      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4934      	ldr	r1, [pc, #208]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fd36 	bl	8001470 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fd32 	bl	8001470 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d20c      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	5ccb      	ldrb	r3, [r1, r3]
 8003aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fc96 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	08008964 	.word	0x08008964
 8003ad4:	20000014 	.word	0x20000014
 8003ad8:	20000018 	.word	0x20000018

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	2300      	movs	r3, #0
 8003aee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af4:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d00d      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x40>
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	f200 80bd 	bhi.w	8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0e:	e0b7      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b12:	60bb      	str	r3, [r7, #8]
       break;
 8003b14:	e0b7      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b16:	4b60      	ldr	r3, [pc, #384]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b18:	60bb      	str	r3, [r7, #8]
      break;
 8003b1a:	e0b4      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b1c:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b26:	4b5b      	ldr	r3, [pc, #364]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04d      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b32:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	099b      	lsrs	r3, r3, #6
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	ea02 0800 	and.w	r8, r2, r0
 8003b4a:	ea03 0901 	and.w	r9, r3, r1
 8003b4e:	4640      	mov	r0, r8
 8003b50:	4649      	mov	r1, r9
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	014b      	lsls	r3, r1, #5
 8003b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b60:	0142      	lsls	r2, r0, #5
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	ebb0 0008 	subs.w	r0, r0, r8
 8003b6a:	eb61 0109 	sbc.w	r1, r1, r9
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	018b      	lsls	r3, r1, #6
 8003b78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b7c:	0182      	lsls	r2, r0, #6
 8003b7e:	1a12      	subs	r2, r2, r0
 8003b80:	eb63 0301 	sbc.w	r3, r3, r1
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	00d9      	lsls	r1, r3, #3
 8003b8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b92:	00d0      	lsls	r0, r2, #3
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	eb12 0208 	adds.w	r2, r2, r8
 8003b9c:	eb43 0309 	adc.w	r3, r3, r9
 8003ba0:	f04f 0000 	mov.w	r0, #0
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	0299      	lsls	r1, r3, #10
 8003baa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bae:	0290      	lsls	r0, r2, #10
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	f7fc fb56 	bl	8000270 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e04a      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bde:	f04f 0100 	mov.w	r1, #0
 8003be2:	ea02 0400 	and.w	r4, r2, r0
 8003be6:	ea03 0501 	and.w	r5, r3, r1
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	014b      	lsls	r3, r1, #5
 8003bf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bfc:	0142      	lsls	r2, r0, #5
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	1b00      	subs	r0, r0, r4
 8003c04:	eb61 0105 	sbc.w	r1, r1, r5
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	018b      	lsls	r3, r1, #6
 8003c12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c16:	0182      	lsls	r2, r0, #6
 8003c18:	1a12      	subs	r2, r2, r0
 8003c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	00d9      	lsls	r1, r3, #3
 8003c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c2c:	00d0      	lsls	r0, r2, #3
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	1912      	adds	r2, r2, r4
 8003c34:	eb45 0303 	adc.w	r3, r5, r3
 8003c38:	f04f 0000 	mov.w	r0, #0
 8003c3c:	f04f 0100 	mov.w	r1, #0
 8003c40:	0299      	lsls	r1, r3, #10
 8003c42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c46:	0290      	lsls	r0, r2, #10
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	f7fc fb0a 	bl	8000270 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4613      	mov	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c82:	60bb      	str	r3, [r7, #8]
      break;
 8003c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c86:	68bb      	ldr	r3, [r7, #8]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	00f42400 	.word	0x00f42400

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000014 	.word	0x20000014

08003cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb8:	f7ff fff0 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	0a9b      	lsrs	r3, r3, #10
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	4903      	ldr	r1, [pc, #12]	; (8003cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cca:	5ccb      	ldrb	r3, [r1, r3]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	08008974 	.word	0x08008974

08003cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ce0:	f7ff ffdc 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	0b5b      	lsrs	r3, r3, #13
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	4903      	ldr	r1, [pc, #12]	; (8003d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	08008974 	.word	0x08008974

08003d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07b      	b.n	8003e0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d26:	d009      	beq.n	8003d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]
 8003d2e:	e005      	b.n	8003d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd f9ee 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0104 	and.w	r1, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0210 	and.w	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e03f      	b.n	8003ea8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd f9c3 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	; 0x24
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a6 	bl	80041ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d17c      	bne.n	8003fca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Transmit+0x2c>
 8003ed6:	88fb      	ldrh	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e075      	b.n	8003fcc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Transmit+0x3e>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e06e      	b.n	8003fcc <HAL_UART_Transmit+0x11c>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f04:	f7fd fab4 	bl	8001470 <HAL_GetTick>
 8003f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	88fa      	ldrh	r2, [r7, #6]
 8003f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	d108      	bne.n	8003f32 <HAL_UART_Transmit+0x82>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e003      	b.n	8003f3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f42:	e02a      	b.n	8003f9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f8e2 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e036      	b.n	8003fcc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	3302      	adds	r3, #2
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e007      	b.n	8003f8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1cf      	bne.n	8003f44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f8b2 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e006      	b.n	8003fcc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	f040 808c 	bne.w	800410e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_UART_Receive+0x2e>
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e084      	b.n	8004110 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_UART_Receive+0x40>
 8004010:	2302      	movs	r3, #2
 8004012:	e07d      	b.n	8004110 <HAL_UART_Receive+0x13c>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2222      	movs	r2, #34	; 0x22
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004030:	f7fd fa1e 	bl	8001470 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	88fa      	ldrh	r2, [r7, #6]
 800403a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d108      	bne.n	800405e <HAL_UART_Receive+0x8a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e003      	b.n	8004066 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800406e:	e043      	b.n	80040f8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	2120      	movs	r1, #32
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f84c 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e042      	b.n	8004110 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	b29a      	uxth	r2, r3
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3302      	adds	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	e01f      	b.n	80040ea <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d007      	beq.n	80040c4 <HAL_UART_Receive+0xf0>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_UART_Receive+0xfe>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	e008      	b.n	80040e4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	3301      	adds	r3, #1
 80040e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1b6      	bne.n	8004070 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	e02c      	b.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d028      	beq.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
 8004138:	f7fd f99a 	bl	8001470 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d21d      	bcs.n	8004184 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004156:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00f      	b.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4013      	ands	r3, r2
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	429a      	cmp	r2, r3
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	461a      	mov	r2, r3
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d0c3      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	b09f      	sub	sp, #124	; 0x7c
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c2:	68d9      	ldr	r1, [r3, #12]
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	ea40 0301 	orr.w	r3, r0, r1
 80041cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	431a      	orrs	r2, r3
 80041de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041f0:	f021 010c 	bic.w	r1, r1, #12
 80041f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fa:	430b      	orrs	r3, r1
 80041fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420a:	6999      	ldr	r1, [r3, #24]
 800420c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	ea40 0301 	orr.w	r3, r0, r1
 8004214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4bc5      	ldr	r3, [pc, #788]	; (8004530 <UART_SetConfig+0x384>)
 800421c:	429a      	cmp	r2, r3
 800421e:	d004      	beq.n	800422a <UART_SetConfig+0x7e>
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4bc3      	ldr	r3, [pc, #780]	; (8004534 <UART_SetConfig+0x388>)
 8004226:	429a      	cmp	r2, r3
 8004228:	d103      	bne.n	8004232 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800422a:	f7ff fd57 	bl	8003cdc <HAL_RCC_GetPCLK2Freq>
 800422e:	6778      	str	r0, [r7, #116]	; 0x74
 8004230:	e002      	b.n	8004238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004232:	f7ff fd3f 	bl	8003cb4 <HAL_RCC_GetPCLK1Freq>
 8004236:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004240:	f040 80b6 	bne.w	80043b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004246:	461c      	mov	r4, r3
 8004248:	f04f 0500 	mov.w	r5, #0
 800424c:	4622      	mov	r2, r4
 800424e:	462b      	mov	r3, r5
 8004250:	1891      	adds	r1, r2, r2
 8004252:	6439      	str	r1, [r7, #64]	; 0x40
 8004254:	415b      	adcs	r3, r3
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800425c:	1912      	adds	r2, r2, r4
 800425e:	eb45 0303 	adc.w	r3, r5, r3
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	00d9      	lsls	r1, r3, #3
 800426c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004270:	00d0      	lsls	r0, r2, #3
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	1911      	adds	r1, r2, r4
 8004278:	6639      	str	r1, [r7, #96]	; 0x60
 800427a:	416b      	adcs	r3, r5
 800427c:	667b      	str	r3, [r7, #100]	; 0x64
 800427e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	1891      	adds	r1, r2, r2
 800428a:	63b9      	str	r1, [r7, #56]	; 0x38
 800428c:	415b      	adcs	r3, r3
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004298:	f7fb ffea 	bl	8000270 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4ba5      	ldr	r3, [pc, #660]	; (8004538 <UART_SetConfig+0x38c>)
 80042a2:	fba3 2302 	umull	r2, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	011e      	lsls	r6, r3, #4
 80042aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ac:	461c      	mov	r4, r3
 80042ae:	f04f 0500 	mov.w	r5, #0
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	1891      	adds	r1, r2, r2
 80042b8:	6339      	str	r1, [r7, #48]	; 0x30
 80042ba:	415b      	adcs	r3, r3
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
 80042be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042c2:	1912      	adds	r2, r2, r4
 80042c4:	eb45 0303 	adc.w	r3, r5, r3
 80042c8:	f04f 0000 	mov.w	r0, #0
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	00d9      	lsls	r1, r3, #3
 80042d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042d6:	00d0      	lsls	r0, r2, #3
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	1911      	adds	r1, r2, r4
 80042de:	65b9      	str	r1, [r7, #88]	; 0x58
 80042e0:	416b      	adcs	r3, r5
 80042e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	1891      	adds	r1, r2, r2
 80042f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80042f2:	415b      	adcs	r3, r3
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80042fe:	f7fb ffb7 	bl	8000270 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <UART_SetConfig+0x38c>)
 8004308:	fba3 1302 	umull	r1, r3, r3, r2
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2164      	movs	r1, #100	; 0x64
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a87      	ldr	r2, [pc, #540]	; (8004538 <UART_SetConfig+0x38c>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004328:	441e      	add	r6, r3
 800432a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800432c:	4618      	mov	r0, r3
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	1894      	adds	r4, r2, r2
 8004338:	623c      	str	r4, [r7, #32]
 800433a:	415b      	adcs	r3, r3
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	1812      	adds	r2, r2, r0
 8004344:	eb41 0303 	adc.w	r3, r1, r3
 8004348:	f04f 0400 	mov.w	r4, #0
 800434c:	f04f 0500 	mov.w	r5, #0
 8004350:	00dd      	lsls	r5, r3, #3
 8004352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004356:	00d4      	lsls	r4, r2, #3
 8004358:	4622      	mov	r2, r4
 800435a:	462b      	mov	r3, r5
 800435c:	1814      	adds	r4, r2, r0
 800435e:	653c      	str	r4, [r7, #80]	; 0x50
 8004360:	414b      	adcs	r3, r1
 8004362:	657b      	str	r3, [r7, #84]	; 0x54
 8004364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	461a      	mov	r2, r3
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	1891      	adds	r1, r2, r2
 8004370:	61b9      	str	r1, [r7, #24]
 8004372:	415b      	adcs	r3, r3
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800437e:	f7fb ff77 	bl	8000270 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b6c      	ldr	r3, [pc, #432]	; (8004538 <UART_SetConfig+0x38c>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a67      	ldr	r2, [pc, #412]	; (8004538 <UART_SetConfig+0x38c>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 0207 	and.w	r2, r3, #7
 80043a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4432      	add	r2, r6
 80043ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ae:	e0b9      	b.n	8004524 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b2:	461c      	mov	r4, r3
 80043b4:	f04f 0500 	mov.w	r5, #0
 80043b8:	4622      	mov	r2, r4
 80043ba:	462b      	mov	r3, r5
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	415b      	adcs	r3, r3
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043c8:	1912      	adds	r2, r2, r4
 80043ca:	eb45 0303 	adc.w	r3, r5, r3
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	00d9      	lsls	r1, r3, #3
 80043d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043dc:	00d0      	lsls	r0, r2, #3
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	eb12 0804 	adds.w	r8, r2, r4
 80043e6:	eb43 0905 	adc.w	r9, r3, r5
 80043ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004402:	0082      	lsls	r2, r0, #2
 8004404:	4640      	mov	r0, r8
 8004406:	4649      	mov	r1, r9
 8004408:	f7fb ff32 	bl	8000270 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4b49      	ldr	r3, [pc, #292]	; (8004538 <UART_SetConfig+0x38c>)
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	011e      	lsls	r6, r3, #4
 800441a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800441c:	4618      	mov	r0, r3
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	1894      	adds	r4, r2, r2
 8004428:	60bc      	str	r4, [r7, #8]
 800442a:	415b      	adcs	r3, r3
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004432:	1812      	adds	r2, r2, r0
 8004434:	eb41 0303 	adc.w	r3, r1, r3
 8004438:	f04f 0400 	mov.w	r4, #0
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	00dd      	lsls	r5, r3, #3
 8004442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004446:	00d4      	lsls	r4, r2, #3
 8004448:	4622      	mov	r2, r4
 800444a:	462b      	mov	r3, r5
 800444c:	1814      	adds	r4, r2, r0
 800444e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004450:	414b      	adcs	r3, r1
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4618      	mov	r0, r3
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	008b      	lsls	r3, r1, #2
 8004468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800446c:	0082      	lsls	r2, r0, #2
 800446e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004472:	f7fb fefd 	bl	8000270 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <UART_SetConfig+0x38c>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	; 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	3332      	adds	r3, #50	; 0x32
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <UART_SetConfig+0x38c>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800449a:	441e      	add	r6, r3
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	4618      	mov	r0, r3
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	1894      	adds	r4, r2, r2
 80044aa:	603c      	str	r4, [r7, #0]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b4:	1812      	adds	r2, r2, r0
 80044b6:	eb41 0303 	adc.w	r3, r1, r3
 80044ba:	f04f 0400 	mov.w	r4, #0
 80044be:	f04f 0500 	mov.w	r5, #0
 80044c2:	00dd      	lsls	r5, r3, #3
 80044c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044c8:	00d4      	lsls	r4, r2, #3
 80044ca:	4622      	mov	r2, r4
 80044cc:	462b      	mov	r3, r5
 80044ce:	eb12 0a00 	adds.w	sl, r2, r0
 80044d2:	eb43 0b01 	adc.w	fp, r3, r1
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	008b      	lsls	r3, r1, #2
 80044ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044ee:	0082      	lsls	r2, r0, #2
 80044f0:	4650      	mov	r0, sl
 80044f2:	4659      	mov	r1, fp
 80044f4:	f7fb febc 	bl	8000270 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <UART_SetConfig+0x38c>)
 80044fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2164      	movs	r1, #100	; 0x64
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	3332      	adds	r3, #50	; 0x32
 8004510:	4a09      	ldr	r2, [pc, #36]	; (8004538 <UART_SetConfig+0x38c>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4432      	add	r2, r6
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	377c      	adds	r7, #124	; 0x7c
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f

0800453c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800453c:	b084      	sub	sp, #16
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	f107 001c 	add.w	r0, r7, #28
 800454a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	2b01      	cmp	r3, #1
 8004552:	d122      	bne.n	800459a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800457c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d105      	bne.n	800458e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fac6 	bl	8005b20 <USB_CoreReset>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	e01a      	b.n	80045d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 faba 	bl	8005b20 <USB_CoreReset>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
 80045c2:	e005      	b.n	80045d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10b      	bne.n	80045ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f043 0206 	orr.w	r2, r3, #6
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045fa:	b004      	add	sp, #16
 80045fc:	4770      	bx	lr
	...

08004600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d165      	bne.n	80046e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4a41      	ldr	r2, [pc, #260]	; (800471c <USB_SetTurnaroundTime+0x11c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d906      	bls.n	800462a <USB_SetTurnaroundTime+0x2a>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4a40      	ldr	r2, [pc, #256]	; (8004720 <USB_SetTurnaroundTime+0x120>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d202      	bcs.n	800462a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004624:	230f      	movs	r3, #15
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e062      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	4a3c      	ldr	r2, [pc, #240]	; (8004720 <USB_SetTurnaroundTime+0x120>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d306      	bcc.n	8004640 <USB_SetTurnaroundTime+0x40>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a3b      	ldr	r2, [pc, #236]	; (8004724 <USB_SetTurnaroundTime+0x124>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d202      	bcs.n	8004640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800463a:	230e      	movs	r3, #14
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e057      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a38      	ldr	r2, [pc, #224]	; (8004724 <USB_SetTurnaroundTime+0x124>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d306      	bcc.n	8004656 <USB_SetTurnaroundTime+0x56>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a37      	ldr	r2, [pc, #220]	; (8004728 <USB_SetTurnaroundTime+0x128>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d202      	bcs.n	8004656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004650:	230d      	movs	r3, #13
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e04c      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a33      	ldr	r2, [pc, #204]	; (8004728 <USB_SetTurnaroundTime+0x128>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d306      	bcc.n	800466c <USB_SetTurnaroundTime+0x6c>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a32      	ldr	r2, [pc, #200]	; (800472c <USB_SetTurnaroundTime+0x12c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d802      	bhi.n	800466c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004666:	230c      	movs	r3, #12
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e041      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a2f      	ldr	r2, [pc, #188]	; (800472c <USB_SetTurnaroundTime+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d906      	bls.n	8004682 <USB_SetTurnaroundTime+0x82>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a2e      	ldr	r2, [pc, #184]	; (8004730 <USB_SetTurnaroundTime+0x130>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d802      	bhi.n	8004682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800467c:	230b      	movs	r3, #11
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e036      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a2a      	ldr	r2, [pc, #168]	; (8004730 <USB_SetTurnaroundTime+0x130>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d906      	bls.n	8004698 <USB_SetTurnaroundTime+0x98>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <USB_SetTurnaroundTime+0x134>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d802      	bhi.n	8004698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004692:	230a      	movs	r3, #10
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e02b      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <USB_SetTurnaroundTime+0x134>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d906      	bls.n	80046ae <USB_SetTurnaroundTime+0xae>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a25      	ldr	r2, [pc, #148]	; (8004738 <USB_SetTurnaroundTime+0x138>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d202      	bcs.n	80046ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046a8:	2309      	movs	r3, #9
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e020      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4a21      	ldr	r2, [pc, #132]	; (8004738 <USB_SetTurnaroundTime+0x138>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d306      	bcc.n	80046c4 <USB_SetTurnaroundTime+0xc4>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a20      	ldr	r2, [pc, #128]	; (800473c <USB_SetTurnaroundTime+0x13c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d802      	bhi.n	80046c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046be:	2308      	movs	r3, #8
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e015      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <USB_SetTurnaroundTime+0x13c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d906      	bls.n	80046da <USB_SetTurnaroundTime+0xda>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <USB_SetTurnaroundTime+0x140>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d202      	bcs.n	80046da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046d4:	2307      	movs	r3, #7
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e00a      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046da:	2306      	movs	r3, #6
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e007      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046e6:	2309      	movs	r3, #9
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e001      	b.n	80046f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046ec:	2309      	movs	r3, #9
 80046ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	029b      	lsls	r3, r3, #10
 8004704:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	00d8acbf 	.word	0x00d8acbf
 8004720:	00e4e1c0 	.word	0x00e4e1c0
 8004724:	00f42400 	.word	0x00f42400
 8004728:	01067380 	.word	0x01067380
 800472c:	011a499f 	.word	0x011a499f
 8004730:	01312cff 	.word	0x01312cff
 8004734:	014ca43f 	.word	0x014ca43f
 8004738:	016e3600 	.word	0x016e3600
 800473c:	01a6ab1f 	.word	0x01a6ab1f
 8004740:	01e84800 	.word	0x01e84800

08004744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d106      	bne.n	80047b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	e00b      	b.n	80047cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	e001      	b.n	80047cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e003      	b.n	80047d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047cc:	2032      	movs	r0, #50	; 0x32
 80047ce:	f7fc fe5b 	bl	8001488 <HAL_Delay>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047dc:	b084      	sub	sp, #16
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e009      	b.n	8004810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3340      	adds	r3, #64	; 0x40
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3301      	adds	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	2b0e      	cmp	r3, #14
 8004814:	d9f2      	bls.n	80047fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11c      	bne.n	8004856 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482a:	f043 0302 	orr.w	r3, r3, #2
 800482e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
 8004854:	e00b      	b.n	800486e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004880:	4619      	mov	r1, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	461a      	mov	r2, r3
 800488a:	680b      	ldr	r3, [r1, #0]
 800488c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800489a:	2100      	movs	r1, #0
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f949 	bl	8004b34 <USB_SetDevSpeed>
 80048a2:	e008      	b.n	80048b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048a4:	2101      	movs	r1, #1
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f944 	bl	8004b34 <USB_SetDevSpeed>
 80048ac:	e003      	b.n	80048b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048ae:	2103      	movs	r1, #3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f93f 	bl	8004b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048b6:	2110      	movs	r1, #16
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8f3 	bl	8004aa4 <USB_FlushTxFifo>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f911 	bl	8004af0 <USB_FlushRxFifo>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ea:	461a      	mov	r2, r3
 80048ec:	2300      	movs	r3, #0
 80048ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f6:	461a      	mov	r2, r3
 80048f8:	2300      	movs	r3, #0
 80048fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e043      	b.n	800498a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004918:	d118      	bne.n	800494c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	461a      	mov	r2, r3
 800492e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e013      	b.n	800495e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	461a      	mov	r2, r3
 8004944:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e008      	b.n	800495e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497c:	461a      	mov	r2, r3
 800497e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3301      	adds	r3, #1
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3b7      	bcc.n	8004902 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e043      	b.n	8004a20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ae:	d118      	bne.n	80049e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e013      	b.n	80049f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e008      	b.n	80049f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d3b7      	bcc.n	8004998 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f043 0210 	orr.w	r2, r3, #16
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699a      	ldr	r2, [r3, #24]
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <USB_DevInit+0x2c4>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9c:	b004      	add	sp, #16
 8004a9e:	4770      	bx	lr
 8004aa0:	803c3800 	.word	0x803c3800

08004aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a09      	ldr	r2, [pc, #36]	; (8004aec <USB_FlushTxFifo+0x48>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d0f0      	beq.n	8004abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	00030d40 	.word	0x00030d40

08004af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2210      	movs	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <USB_FlushRxFifo+0x40>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d0f0      	beq.n	8004b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	00030d40 	.word	0x00030d40

08004b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0306 	and.w	r3, r3, #6
 8004b7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d102      	bne.n	8004b8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
 8004b8a:	e00a      	b.n	8004ba2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d002      	beq.n	8004b98 <USB_GetDevSpeed+0x32>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d102      	bne.n	8004b9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	75fb      	strb	r3, [r7, #23]
 8004b9c:	e001      	b.n	8004ba2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b9e:	230f      	movs	r3, #15
 8004ba0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d13a      	bne.n	8004c42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	68f9      	ldr	r1, [r7, #12]
 8004be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d155      	bne.n	8004cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	78db      	ldrb	r3, [r3, #3]
 8004c1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	059b      	lsls	r3, r3, #22
 8004c26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e036      	b.n	8004cb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c48:	69da      	ldr	r2, [r3, #28]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11a      	bne.n	8004cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	78db      	ldrb	r3, [r3, #3]
 8004c94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c96:	430b      	orrs	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
	...

08004cc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d161      	bne.n	8004da0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cf2:	d11f      	bne.n	8004d34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d54:	4013      	ands	r3, r2
 8004d56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	2101      	movs	r1, #1
 8004d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0159      	lsls	r1, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	440b      	add	r3, r1
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	4619      	mov	r1, r3
 8004d98:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <USB_DeactivateEndpoint+0x1b0>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]
 8004d9e:	e060      	b.n	8004e62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db6:	d11f      	bne.n	8004df8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	2101      	movs	r1, #1
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	43db      	mvns	r3, r3
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e18:	4013      	ands	r3, r2
 8004e1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	43db      	mvns	r3, r3
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	0159      	lsls	r1, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	440b      	add	r3, r1
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <USB_DeactivateEndpoint+0x1b4>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	ec337800 	.word	0xec337800
 8004e74:	eff37800 	.word	0xeff37800

08004e78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	f040 815c 	bne.w	8005152 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d132      	bne.n	8004f08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	0cdb      	lsrs	r3, r3, #19
 8004f02:	04db      	lsls	r3, r3, #19
 8004f04:	6113      	str	r3, [r2, #16]
 8004f06:	e074      	b.n	8004ff2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f22:	0cdb      	lsrs	r3, r3, #19
 8004f24:	04db      	lsls	r3, r3, #19
 8004f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6959      	ldr	r1, [r3, #20]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	440b      	add	r3, r1
 8004f64:	1e59      	subs	r1, r3, #1
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6e:	04d9      	lsls	r1, r3, #19
 8004f70:	4b9d      	ldr	r3, [pc, #628]	; (80051e8 <USB_EPStartXfer+0x370>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	0148      	lsls	r0, r1, #5
 8004f78:	69f9      	ldr	r1, [r7, #28]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f80:	4313      	orrs	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	0148      	lsls	r0, r1, #5
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	4401      	add	r1, r0
 8004fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d11f      	bne.n	8004ff2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d14b      	bne.n	8005090 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	78db      	ldrb	r3, [r3, #3]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d128      	bne.n	800506e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d110      	bne.n	800504e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	e00f      	b.n	800506e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e12f      	b.n	80052f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d015      	beq.n	80050e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8117 	beq.w	80052f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	2101      	movs	r1, #1
 80050d4:	fa01 f303 	lsl.w	r3, r1, r3
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050de:	4313      	orrs	r3, r2
 80050e0:	634b      	str	r3, [r1, #52]	; 0x34
 80050e2:	e105      	b.n	80052f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d110      	bne.n	8005116 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e00f      	b.n	8005136 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	b298      	uxth	r0, r3
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4603      	mov	r3, r0
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa2b 	bl	80055a6 <USB_WritePacket>
 8005150:	e0ce      	b.n	80052f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516c:	0cdb      	lsrs	r3, r3, #19
 800516e:	04db      	lsls	r3, r3, #19
 8005170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d126      	bne.n	80051ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b4:	69b9      	ldr	r1, [r7, #24]
 80051b6:	0148      	lsls	r0, r1, #5
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	4401      	add	r1, r0
 80051bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051c0:	4313      	orrs	r3, r2
 80051c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051e2:	6113      	str	r3, [r2, #16]
 80051e4:	e036      	b.n	8005254 <USB_EPStartXfer+0x3dc>
 80051e6:	bf00      	nop
 80051e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4413      	add	r3, r2
 80051f6:	1e5a      	subs	r2, r3, #1
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	8afb      	ldrh	r3, [r7, #22]
 8005212:	04d9      	lsls	r1, r3, #19
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <USB_EPStartXfer+0x484>)
 8005216:	400b      	ands	r3, r1
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	8af9      	ldrh	r1, [r7, #22]
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	0148      	lsls	r0, r1, #5
 8005248:	69f9      	ldr	r1, [r7, #28]
 800524a:	4401      	add	r1, r0
 800524c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005250:	4313      	orrs	r3, r2
 8005252:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d10d      	bne.n	8005276 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	68d9      	ldr	r1, [r3, #12]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	460a      	mov	r2, r1
 8005274:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	78db      	ldrb	r3, [r3, #3]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d128      	bne.n	80052d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528a:	2b00      	cmp	r3, #0
 800528c:	d110      	bne.n	80052b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00f      	b.n	80052d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	1ff80000 	.word	0x1ff80000

08005300 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b01      	cmp	r3, #1
 800531e:	f040 80cd 	bne.w	80054bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d132      	bne.n	8005390 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800534c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800536c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	0cdb      	lsrs	r3, r3, #19
 800538a:	04db      	lsls	r3, r3, #19
 800538c:	6113      	str	r3, [r2, #16]
 800538e:	e04e      	b.n	800542e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053aa:	0cdb      	lsrs	r3, r3, #19
 80053ac:	04db      	lsls	r3, r3, #19
 80053ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d903      	bls.n	80053e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005406:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800541e:	6939      	ldr	r1, [r7, #16]
 8005420:	0148      	lsls	r0, r1, #5
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	4401      	add	r1, r0
 8005426:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800542a:	4313      	orrs	r3, r2
 800542c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d11e      	bne.n	8005472 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e092      	b.n	8005598 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005490:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d07e      	beq.n	8005598 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	2101      	movs	r1, #1
 80054ac:	fa01 f303 	lsl.w	r3, r1, r3
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b6:	4313      	orrs	r3, r2
 80054b8:	634b      	str	r3, [r1, #52]	; 0x34
 80054ba:	e06d      	b.n	8005598 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d6:	0cdb      	lsrs	r3, r3, #19
 80054d8:	04db      	lsls	r3, r3, #19
 80054da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800552e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005546:	6939      	ldr	r1, [r7, #16]
 8005548:	0148      	lsls	r0, r1, #5
 800554a:	6979      	ldr	r1, [r7, #20]
 800554c:	4401      	add	r1, r0
 800554e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005552:	4313      	orrs	r3, r2
 8005554:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d10d      	bne.n	8005578 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68d9      	ldr	r1, [r3, #12]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	460a      	mov	r2, r1
 8005576:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005596:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b089      	sub	sp, #36	; 0x24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	4611      	mov	r1, r2
 80055b2:	461a      	mov	r2, r3
 80055b4:	460b      	mov	r3, r1
 80055b6:	71fb      	strb	r3, [r7, #7]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d11a      	bne.n	8005602 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055cc:	88bb      	ldrh	r3, [r7, #4]
 80055ce:	3303      	adds	r3, #3
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055d4:	2300      	movs	r3, #0
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e00f      	b.n	80055fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	031a      	lsls	r2, r3, #12
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e6:	461a      	mov	r2, r3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3304      	adds	r3, #4
 80055f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3eb      	bcc.n	80055da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005610:	b480      	push	{r7}
 8005612:	b089      	sub	sp, #36	; 0x24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	3303      	adds	r3, #3
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e00b      	b.n	800564c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	3304      	adds	r3, #4
 8005644:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	3301      	adds	r3, #1
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	429a      	cmp	r2, r3
 8005652:	d3ef      	bcc.n	8005634 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005654:	69fb      	ldr	r3, [r7, #28]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3724      	adds	r7, #36	; 0x24
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d12c      	bne.n	80056d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db12      	blt.n	80056b6 <USB_EPSetStall+0x54>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00f      	beq.n	80056b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e02b      	b.n	8005730 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db12      	blt.n	8005710 <USB_EPSetStall+0xae>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00f      	beq.n	8005710 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800570e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800572e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d128      	bne.n	80057ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	78db      	ldrb	r3, [r3, #3]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d003      	beq.n	800578a <USB_EPClearStall+0x4c>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d138      	bne.n	80057fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e027      	b.n	80057fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	78db      	ldrb	r3, [r3, #3]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d003      	beq.n	80057dc <USB_EPClearStall+0x9e>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d10f      	bne.n	80057fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005828:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800582c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005844:	4313      	orrs	r3, r2
 8005846:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005884:	f023 0302 	bic.w	r3, r3, #2
 8005888:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c6:	f043 0302 	orr.w	r3, r3, #2
 80058ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4013      	ands	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	4013      	ands	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	0c1b      	lsrs	r3, r3, #16
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	b29b      	uxth	r3, r3
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005996:	68bb      	ldr	r3, [r7, #8]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
 80059d4:	01db      	lsls	r3, r3, #7
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059f2:	68bb      	ldr	r3, [r7, #8]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
	...

08005a64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	333c      	adds	r3, #60	; 0x3c
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <USB_EP0_OutStart+0xb8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d90a      	bls.n	8005a9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a98:	d101      	bne.n	8005a9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e037      	b.n	8005b0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	f043 0318 	orr.w	r3, r3, #24
 8005ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ae4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ae6:	7afb      	ldrb	r3, [r7, #11]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10f      	bne.n	8005b0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	4f54300a 	.word	0x4f54300a

08005b20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <USB_CoreReset+0x64>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e01b      	b.n	8005b76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	daf2      	bge.n	8005b2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a09      	ldr	r2, [pc, #36]	; (8005b84 <USB_CoreReset+0x64>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e006      	b.n	8005b76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d0f0      	beq.n	8005b56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	00030d40 	.word	0x00030d40

08005b88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b98:	f002 f95c 	bl	8007e54 <USBD_static_malloc>
 8005b9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005bac:	2302      	movs	r3, #2
 8005bae:	e066      	b.n	8005c7e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7c1b      	ldrb	r3, [r3, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d119      	bne.n	8005bf4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	2181      	movs	r1, #129	; 0x81
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 f820 	bl	8007c0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd8:	2202      	movs	r2, #2
 8005bda:	2101      	movs	r1, #1
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f002 f816 	bl	8007c0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2210      	movs	r2, #16
 8005bee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005bf2:	e016      	b.n	8005c22 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	2181      	movs	r1, #129	; 0x81
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f002 f807 	bl	8007c0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c06:	2340      	movs	r3, #64	; 0x40
 8005c08:	2202      	movs	r2, #2
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fffe 	bl	8007c0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c22:	2308      	movs	r3, #8
 8005c24:	2203      	movs	r2, #3
 8005c26:	2182      	movs	r1, #130	; 0x82
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 fff0 	bl	8007c0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	7c1b      	ldrb	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c62:	2101      	movs	r1, #1
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f002 f8c1 	bl	8007dec <USBD_LL_PrepareReceive>
 8005c6a:	e007      	b.n	8005c7c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	2101      	movs	r1, #1
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f002 f8b8 	bl	8007dec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c92:	2181      	movs	r1, #129	; 0x81
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 ffe0 	bl	8007c5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 ffd9 	bl	8007c5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005cb0:	2182      	movs	r1, #130	; 0x82
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 ffd1 	bl	8007c5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00e      	beq.n	8005cf0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f002 f8c4 	bl	8007e70 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e0af      	b.n	8005e84 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d03f      	beq.n	8005db0 <USBD_CDC_Setup+0xb4>
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	f040 809f 	bne.w	8005e74 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	88db      	ldrh	r3, [r3, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02e      	beq.n	8005d9c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b25b      	sxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	da16      	bge.n	8005d76 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d54:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	88d2      	ldrh	r2, [r2, #6]
 8005d5a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	2b07      	cmp	r3, #7
 8005d62:	bf28      	it	cs
 8005d64:	2307      	movcs	r3, #7
 8005d66:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	89fa      	ldrh	r2, [r7, #14]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f001 fb19 	bl	80073a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d74:	e085      	b.n	8005e82 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	785a      	ldrb	r2, [r3, #1]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	88db      	ldrh	r3, [r3, #6]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	88db      	ldrh	r3, [r3, #6]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 fb32 	bl	80073fe <USBD_CtlPrepareRx>
      break;
 8005d9a:	e072      	b.n	8005e82 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	7850      	ldrb	r0, [r2, #1]
 8005da8:	2200      	movs	r2, #0
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	4798      	blx	r3
      break;
 8005dae:	e068      	b.n	8005e82 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b0b      	cmp	r3, #11
 8005db6:	d852      	bhi.n	8005e5e <USBD_CDC_Setup+0x162>
 8005db8:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <USBD_CDC_Setup+0xc4>)
 8005dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbe:	bf00      	nop
 8005dc0:	08005df1 	.word	0x08005df1
 8005dc4:	08005e6d 	.word	0x08005e6d
 8005dc8:	08005e5f 	.word	0x08005e5f
 8005dcc:	08005e5f 	.word	0x08005e5f
 8005dd0:	08005e5f 	.word	0x08005e5f
 8005dd4:	08005e5f 	.word	0x08005e5f
 8005dd8:	08005e5f 	.word	0x08005e5f
 8005ddc:	08005e5f 	.word	0x08005e5f
 8005de0:	08005e5f 	.word	0x08005e5f
 8005de4:	08005e5f 	.word	0x08005e5f
 8005de8:	08005e1b 	.word	0x08005e1b
 8005dec:	08005e45 	.word	0x08005e45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d107      	bne.n	8005e0c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dfc:	f107 030a 	add.w	r3, r7, #10
 8005e00:	2202      	movs	r2, #2
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 face 	bl	80073a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e0a:	e032      	b.n	8005e72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fa58 	bl	80072c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e14:	2303      	movs	r3, #3
 8005e16:	75fb      	strb	r3, [r7, #23]
          break;
 8005e18:	e02b      	b.n	8005e72 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d107      	bne.n	8005e36 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e26:	f107 030d 	add.w	r3, r7, #13
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 fab9 	bl	80073a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e34:	e01d      	b.n	8005e72 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fa43 	bl	80072c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	75fb      	strb	r3, [r7, #23]
          break;
 8005e42:	e016      	b.n	8005e72 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d00f      	beq.n	8005e70 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fa36 	bl	80072c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e5c:	e008      	b.n	8005e70 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fa2f 	bl	80072c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e66:	2303      	movs	r3, #3
 8005e68:	75fb      	strb	r3, [r7, #23]
          break;
 8005e6a:	e002      	b.n	8005e72 <USBD_CDC_Setup+0x176>
          break;
 8005e6c:	bf00      	nop
 8005e6e:	e008      	b.n	8005e82 <USBD_CDC_Setup+0x186>
          break;
 8005e70:	bf00      	nop
      }
      break;
 8005e72:	e006      	b.n	8005e82 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fa24 	bl	80072c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e80:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e04f      	b.n	8005f4e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d029      	beq.n	8005f20 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	3318      	adds	r3, #24
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	78f9      	ldrb	r1, [r7, #3]
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a5b      	subs	r3, r3, r1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4403      	add	r3, r0
 8005eec:	3344      	adds	r3, #68	; 0x44
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ef4:	fb03 f301 	mul.w	r3, r3, r1
 8005ef8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d110      	bne.n	8005f20 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f12:	78f9      	ldrb	r1, [r7, #3]
 8005f14:	2300      	movs	r3, #0
 8005f16:	2200      	movs	r2, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 ff46 	bl	8007daa <USBD_LL_Transmit>
 8005f1e:	e015      	b.n	8005f4c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e015      	b.n	8005fa4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f78:	78fb      	ldrb	r3, [r7, #3]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 ff56 	bl	8007e2e <USBD_LL_GetRxDataSize>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e01b      	b.n	8005ffe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <USBD_CDC_EP0_RxReady+0x50>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d010      	beq.n	8005ffc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005fe8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005ff0:	b292      	uxth	r2, r2
 8005ff2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	22ff      	movs	r2, #255	; 0xff
 8005ff8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2243      	movs	r2, #67	; 0x43
 8006014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	200000a8 	.word	0x200000a8

08006028 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2243      	movs	r2, #67	; 0x43
 8006034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006036:	4b03      	ldr	r3, [pc, #12]	; (8006044 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000064 	.word	0x20000064

08006048 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2243      	movs	r2, #67	; 0x43
 8006054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006056:	4b03      	ldr	r3, [pc, #12]	; (8006064 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	200000ec 	.word	0x200000ec

08006068 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	220a      	movs	r2, #10
 8006074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	20000020 	.word	0x20000020

08006088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	e004      	b.n	80060a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b087      	sub	sp, #28
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e008      	b.n	80060e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006106:	2303      	movs	r3, #3
 8006108:	e004      	b.n	8006114 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800613e:	2303      	movs	r3, #3
 8006140:	e01a      	b.n	8006178 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006148:	2b00      	cmp	r3, #0
 800614a:	d114      	bne.n	8006176 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2201      	movs	r2, #1
 8006150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800616a:	2181      	movs	r1, #129	; 0x81
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fe1c 	bl	8007daa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006176:	7bfb      	ldrb	r3, [r7, #15]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800618e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800619a:	2303      	movs	r3, #3
 800619c:	e016      	b.n	80061cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	7c1b      	ldrb	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061b0:	2101      	movs	r1, #1
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fe1a 	bl	8007dec <USBD_LL_PrepareReceive>
 80061b8:	e007      	b.n	80061ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	2101      	movs	r1, #1
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f001 fe11 	bl	8007dec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e01f      	b.n	800622c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	79fa      	ldrb	r2, [r7, #7]
 800621e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f001 fc8d 	bl	8007b40 <USBD_LL_Init>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]

  return ret;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006248:	2303      	movs	r3, #3
 800624a:	e016      	b.n	800627a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	f107 020e 	add.w	r2, r7, #14
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	4602      	mov	r2, r0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fca4 	bl	8007bd8 <USBD_LL_Start>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	4611      	mov	r1, r2
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	4611      	mov	r1, r2
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
  }

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff90 	bl	8007250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800633e:	461a      	mov	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	2b02      	cmp	r3, #2
 8006352:	d01a      	beq.n	800638a <USBD_LL_SetupStage+0x72>
 8006354:	2b02      	cmp	r3, #2
 8006356:	d822      	bhi.n	800639e <USBD_LL_SetupStage+0x86>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <USBD_LL_SetupStage+0x4a>
 800635c:	2b01      	cmp	r3, #1
 800635e:	d00a      	beq.n	8006376 <USBD_LL_SetupStage+0x5e>
 8006360:	e01d      	b.n	800639e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fa62 	bl	8006834 <USBD_StdDevReq>
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
      break;
 8006374:	e020      	b.n	80063b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fac6 	bl	8006910 <USBD_StdItfReq>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
      break;
 8006388:	e016      	b.n	80063b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fb05 	bl	80069a2 <USBD_StdEPReq>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	e00c      	b.n	80063b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 fc73 	bl	8007c98 <USBD_LL_StallEP>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
      break;
 80063b6:	bf00      	nop
  }

  return ret;
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	460b      	mov	r3, r1
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d138      	bne.n	8006448 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d14a      	bne.n	800647e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d913      	bls.n	800641c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	1ad2      	subs	r2, r2, r3
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	4293      	cmp	r3, r2
 800640c:	bf28      	it	cs
 800640e:	4613      	movcs	r3, r2
 8006410:	461a      	mov	r2, r3
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f001 f80f 	bl	8007438 <USBD_CtlContinueRx>
 800641a:	e030      	b.n	800647e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b03      	cmp	r3, #3
 8006426:	d10b      	bne.n	8006440 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f001 f80a 	bl	800745a <USBD_CtlSendStatus>
 8006446:	e01a      	b.n	800647e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b03      	cmp	r3, #3
 8006452:	d114      	bne.n	800647e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	7afa      	ldrb	r2, [r7, #11]
 800646a:	4611      	mov	r1, r2
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	4798      	blx	r3
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	e000      	b.n	8006480 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	460b      	mov	r3, r1
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d16b      	bne.n	8006574 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3314      	adds	r3, #20
 80064a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d156      	bne.n	800655a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d914      	bls.n	80064e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 ff84 	bl	80073dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064d4:	2300      	movs	r3, #0
 80064d6:	2200      	movs	r2, #0
 80064d8:	2100      	movs	r1, #0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f001 fc86 	bl	8007dec <USBD_LL_PrepareReceive>
 80064e0:	e03b      	b.n	800655a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d11c      	bne.n	8006528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d316      	bcc.n	8006528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006504:	429a      	cmp	r2, r3
 8006506:	d20f      	bcs.n	8006528 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 ff65 	bl	80073dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800651a:	2300      	movs	r3, #0
 800651c:	2200      	movs	r2, #0
 800651e:	2100      	movs	r1, #0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 fc63 	bl	8007dec <USBD_LL_PrepareReceive>
 8006526:	e018      	b.n	800655a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b03      	cmp	r3, #3
 8006532:	d10b      	bne.n	800654c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f001 fba2 	bl	8007c98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 ff93 	bl	8007480 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006560:	2b01      	cmp	r3, #1
 8006562:	d122      	bne.n	80065aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fe98 	bl	800629a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006572:	e01a      	b.n	80065aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b03      	cmp	r3, #3
 800657e:	d114      	bne.n	80065aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00e      	beq.n	80065aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	7afa      	ldrb	r2, [r7, #11]
 8006596:	4611      	mov	r1, r2
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	4798      	blx	r3
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	e000      	b.n	80065ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e02f      	b.n	8006648 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6852      	ldr	r2, [r2, #4]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	4611      	mov	r1, r2
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 faf8 	bl	8007c0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2240      	movs	r2, #64	; 0x40
 800662a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800662e:	2340      	movs	r3, #64	; 0x40
 8006630:	2200      	movs	r2, #0
 8006632:	2180      	movs	r1, #128	; 0x80
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 faea 	bl	8007c0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2240      	movs	r2, #64	; 0x40
 8006644:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2204      	movs	r2, #4
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d106      	bne.n	80066be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80066de:	2303      	movs	r3, #3
 80066e0:	e012      	b.n	8006708 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d10b      	bne.n	8006706 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	e014      	b.n	8006754 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b03      	cmp	r3, #3
 8006734:	d10d      	bne.n	8006752 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d007      	beq.n	8006752 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	e014      	b.n	80067a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d10d      	bne.n	800679e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	4611      	mov	r1, r2
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6852      	ldr	r2, [r2, #4]
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	4611      	mov	r1, r2
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
  }

  return USBD_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b087      	sub	sp, #28
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3301      	adds	r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006814:	8a3b      	ldrh	r3, [r7, #16]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	b21a      	sxth	r2, r3
 800681a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800681e:	4313      	orrs	r3, r2
 8006820:	b21b      	sxth	r3, r3
 8006822:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006824:	89fb      	ldrh	r3, [r7, #14]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d005      	beq.n	800685a <USBD_StdDevReq+0x26>
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d853      	bhi.n	80068fa <USBD_StdDevReq+0xc6>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00b      	beq.n	800686e <USBD_StdDevReq+0x3a>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d14f      	bne.n	80068fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
      break;
 800686c:	e04a      	b.n	8006904 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b09      	cmp	r3, #9
 8006874:	d83b      	bhi.n	80068ee <USBD_StdDevReq+0xba>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <USBD_StdDevReq+0x48>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068d1 	.word	0x080068d1
 8006880:	080068e5 	.word	0x080068e5
 8006884:	080068ef 	.word	0x080068ef
 8006888:	080068db 	.word	0x080068db
 800688c:	080068ef 	.word	0x080068ef
 8006890:	080068af 	.word	0x080068af
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068ef 	.word	0x080068ef
 800689c:	080068c7 	.word	0x080068c7
 80068a0:	080068b9 	.word	0x080068b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9de 	bl	8006c68 <USBD_GetDescriptor>
          break;
 80068ac:	e024      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb43 	bl	8006f3c <USBD_SetAddress>
          break;
 80068b6:	e01f      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fb82 	bl	8006fc4 <USBD_SetConfig>
 80068c0:	4603      	mov	r3, r0
 80068c2:	73fb      	strb	r3, [r7, #15]
          break;
 80068c4:	e018      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fc21 	bl	8007110 <USBD_GetConfig>
          break;
 80068ce:	e013      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fc52 	bl	800717c <USBD_GetStatus>
          break;
 80068d8:	e00e      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc81 	bl	80071e4 <USBD_SetFeature>
          break;
 80068e2:	e009      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fc90 	bl	800720c <USBD_ClrFeature>
          break;
 80068ec:	e004      	b.n	80068f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fce7 	bl	80072c4 <USBD_CtlError>
          break;
 80068f6:	bf00      	nop
      }
      break;
 80068f8:	e004      	b.n	8006904 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fce1 	bl	80072c4 <USBD_CtlError>
      break;
 8006902:	bf00      	nop
  }

  return ret;
 8006904:	7bfb      	ldrb	r3, [r7, #15]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop

08006910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006926:	2b40      	cmp	r3, #64	; 0x40
 8006928:	d005      	beq.n	8006936 <USBD_StdItfReq+0x26>
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d82f      	bhi.n	800698e <USBD_StdItfReq+0x7e>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <USBD_StdItfReq+0x26>
 8006932:	2b20      	cmp	r3, #32
 8006934:	d12b      	bne.n	800698e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	2b02      	cmp	r3, #2
 8006942:	d81d      	bhi.n	8006980 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	889b      	ldrh	r3, [r3, #4]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d813      	bhi.n	8006976 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	88db      	ldrh	r3, [r3, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d110      	bne.n	800698a <USBD_StdItfReq+0x7a>
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10d      	bne.n	800698a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fd73 	bl	800745a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006974:	e009      	b.n	800698a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fca3 	bl	80072c4 <USBD_CtlError>
          break;
 800697e:	e004      	b.n	800698a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc9e 	bl	80072c4 <USBD_CtlError>
          break;
 8006988:	e000      	b.n	800698c <USBD_StdItfReq+0x7c>
          break;
 800698a:	bf00      	nop
      }
      break;
 800698c:	e004      	b.n	8006998 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc97 	bl	80072c4 <USBD_CtlError>
      break;
 8006996:	bf00      	nop
  }

  return ret;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	889b      	ldrh	r3, [r3, #4]
 80069b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d007      	beq.n	80069d2 <USBD_StdEPReq+0x30>
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	f200 8145 	bhi.w	8006c52 <USBD_StdEPReq+0x2b0>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <USBD_StdEPReq+0x44>
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	f040 8140 	bne.w	8006c52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e13a      	b.n	8006c5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	785b      	ldrb	r3, [r3, #1]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d007      	beq.n	80069fe <USBD_StdEPReq+0x5c>
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	f300 8129 	bgt.w	8006c46 <USBD_StdEPReq+0x2a4>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d07f      	beq.n	8006af8 <USBD_StdEPReq+0x156>
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d03c      	beq.n	8006a76 <USBD_StdEPReq+0xd4>
 80069fc:	e123      	b.n	8006c46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d002      	beq.n	8006a10 <USBD_StdEPReq+0x6e>
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d016      	beq.n	8006a3c <USBD_StdEPReq+0x9a>
 8006a0e:	e02c      	b.n	8006a6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <USBD_StdEPReq+0x90>
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b80      	cmp	r3, #128	; 0x80
 8006a1a:	d00a      	beq.n	8006a32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f939 	bl	8007c98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f935 	bl	8007c98 <USBD_LL_StallEP>
 8006a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a30:	e020      	b.n	8006a74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc45 	bl	80072c4 <USBD_CtlError>
              break;
 8006a3a:	e01b      	b.n	8006a74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	885b      	ldrh	r3, [r3, #2]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10e      	bne.n	8006a62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <USBD_StdEPReq+0xc0>
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d008      	beq.n	8006a62 <USBD_StdEPReq+0xc0>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f91b 	bl	8007c98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fcf9 	bl	800745a <USBD_CtlSendStatus>

              break;
 8006a68:	e004      	b.n	8006a74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc29 	bl	80072c4 <USBD_CtlError>
              break;
 8006a72:	bf00      	nop
          }
          break;
 8006a74:	e0ec      	b.n	8006c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d002      	beq.n	8006a88 <USBD_StdEPReq+0xe6>
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d016      	beq.n	8006ab4 <USBD_StdEPReq+0x112>
 8006a86:	e030      	b.n	8006aea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <USBD_StdEPReq+0x108>
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d00a      	beq.n	8006aaa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a94:	7bbb      	ldrb	r3, [r7, #14]
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f8fd 	bl	8007c98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f8f9 	bl	8007c98 <USBD_LL_StallEP>
 8006aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aa8:	e025      	b.n	8006af6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc09 	bl	80072c4 <USBD_CtlError>
              break;
 8006ab2:	e020      	b.n	8006af6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11b      	bne.n	8006af4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d004      	beq.n	8006ad0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ac6:	7bbb      	ldrb	r3, [r7, #14]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f903 	bl	8007cd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fcc2 	bl	800745a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006ae8:	e004      	b.n	8006af4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fbe9 	bl	80072c4 <USBD_CtlError>
              break;
 8006af2:	e000      	b.n	8006af6 <USBD_StdEPReq+0x154>
              break;
 8006af4:	bf00      	nop
          }
          break;
 8006af6:	e0ab      	b.n	8006c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d002      	beq.n	8006b0a <USBD_StdEPReq+0x168>
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d032      	beq.n	8006b6e <USBD_StdEPReq+0x1cc>
 8006b08:	e097      	b.n	8006c3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <USBD_StdEPReq+0x17e>
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d004      	beq.n	8006b20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fbd3 	bl	80072c4 <USBD_CtlError>
                break;
 8006b1e:	e091      	b.n	8006c44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da0b      	bge.n	8006b40 <USBD_StdEPReq+0x19e>
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	3310      	adds	r3, #16
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	e00b      	b.n	8006b58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b46:	4613      	mov	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4413      	add	r3, r2
 8006b56:	3304      	adds	r3, #4
 8006b58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2202      	movs	r2, #2
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc1d 	bl	80073a6 <USBD_CtlSendData>
              break;
 8006b6c:	e06a      	b.n	8006c44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da11      	bge.n	8006b9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b76:	7bbb      	ldrb	r3, [r7, #14]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d117      	bne.n	8006bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fb96 	bl	80072c4 <USBD_CtlError>
                  break;
 8006b98:	e054      	b.n	8006c44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	f003 020f 	and.w	r2, r3, #15
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fb83 	bl	80072c4 <USBD_CtlError>
                  break;
 8006bbe:	e041      	b.n	8006c44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da0b      	bge.n	8006be0 <USBD_StdEPReq+0x23e>
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	3310      	adds	r3, #16
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	e00b      	b.n	8006bf8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <USBD_StdEPReq+0x264>
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b80      	cmp	r3, #128	; 0x80
 8006c04:	d103      	bne.n	8006c0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	e00e      	b.n	8006c2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f87e 	bl	8007d14 <USBD_LL_IsStallEP>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2201      	movs	r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	e002      	b.n	8006c2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fbb7 	bl	80073a6 <USBD_CtlSendData>
              break;
 8006c38:	e004      	b.n	8006c44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb41 	bl	80072c4 <USBD_CtlError>
              break;
 8006c42:	bf00      	nop
          }
          break;
 8006c44:	e004      	b.n	8006c50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fb3b 	bl	80072c4 <USBD_CtlError>
          break;
 8006c4e:	bf00      	nop
      }
      break;
 8006c50:	e004      	b.n	8006c5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb35 	bl	80072c4 <USBD_CtlError>
      break;
 8006c5a:	bf00      	nop
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	f200 8128 	bhi.w	8006ede <USBD_GetDescriptor+0x276>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBD_GetDescriptor+0x2c>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006edf 	.word	0x08006edf
 8006ca4:	08006edf 	.word	0x08006edf
 8006ca8:	08006e7f 	.word	0x08006e7f
 8006cac:	08006eab 	.word	0x08006eab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
      break;
 8006cc6:	e112      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cea:	e100      	b.n	8006eee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	f107 0208 	add.w	r2, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
      break;
 8006d06:	e0f2      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	885b      	ldrh	r3, [r3, #2]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	f200 80ac 	bhi.w	8006e6c <USBD_GetDescriptor+0x204>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <USBD_GetDescriptor+0xb4>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d35 	.word	0x08006d35
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d9d 	.word	0x08006d9d
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006e05 	.word	0x08006e05
 8006d30:	08006e39 	.word	0x08006e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d56:	e091      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fab2 	bl	80072c4 <USBD_CtlError>
            err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
          break;
 8006d66:	e089      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8a:	e077      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa98 	bl	80072c4 <USBD_CtlError>
            err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9a:	e06f      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dbe:	e05d      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa7e 	bl	80072c4 <USBD_CtlError>
            err++;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dce:	e055      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df2:	e043      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa64 	bl	80072c4 <USBD_CtlError>
            err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
          break;
 8006e02:	e03b      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e029      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa4a 	bl	80072c4 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e021      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e00f      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa30 	bl	80072c4 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e007      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa28 	bl	80072c4 <USBD_CtlError>
          err++;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	3301      	adds	r3, #1
 8006e78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006e7a:	bf00      	nop
      }
      break;
 8006e7c:	e037      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7c1b      	ldrb	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	f107 0208 	add.w	r2, r7, #8
 8006e92:	4610      	mov	r0, r2
 8006e94:	4798      	blx	r3
 8006e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e98:	e029      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa11 	bl	80072c4 <USBD_CtlError>
        err++;
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea8:	e021      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4798      	blx	r3
 8006ec2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	2207      	movs	r2, #7
 8006eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ecc:	e00f      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f9f7 	bl	80072c4 <USBD_CtlError>
        err++;
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	72fb      	strb	r3, [r7, #11]
      break;
 8006edc:	e007      	b.n	8006eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f9ef 	bl	80072c4 <USBD_CtlError>
      err++;
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	72fb      	strb	r3, [r7, #11]
      break;
 8006eec:	bf00      	nop
  }

  if (err != 0U)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11e      	bne.n	8006f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006efc:	893b      	ldrh	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88da      	ldrh	r2, [r3, #6]
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bf28      	it	cs
 8006f0c:	4613      	movcs	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f12:	893b      	ldrh	r3, [r7, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa44 	bl	80073a6 <USBD_CtlSendData>
 8006f1e:	e009      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9ce 	bl	80072c4 <USBD_CtlError>
 8006f28:	e004      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa95 	bl	800745a <USBD_CtlSendStatus>
 8006f30:	e000      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    return;
 8006f32:	bf00      	nop
  }
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d131      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d12d      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5c:	d829      	bhi.n	8006fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d104      	bne.n	8006f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9a3 	bl	80072c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	e01d      	b.n	8006fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7bfa      	ldrb	r2, [r7, #15]
 8006f84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 feed 	bl	8007d6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa61 	bl	800745a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	e009      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	e004      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f985 	bl	80072c4 <USBD_CtlError>
  }
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	4b4c      	ldr	r3, [pc, #304]	; (800710c <USBD_SetConfig+0x148>)
 8006fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fdc:	4b4b      	ldr	r3, [pc, #300]	; (800710c <USBD_SetConfig+0x148>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d905      	bls.n	8006ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f96c 	bl	80072c4 <USBD_CtlError>
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e088      	b.n	8007102 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d002      	beq.n	8007002 <USBD_SetConfig+0x3e>
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d025      	beq.n	800704c <USBD_SetConfig+0x88>
 8007000:	e071      	b.n	80070e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007002:	4b42      	ldr	r3, [pc, #264]	; (800710c <USBD_SetConfig+0x148>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01c      	beq.n	8007044 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800700a:	4b40      	ldr	r3, [pc, #256]	; (800710c <USBD_SetConfig+0x148>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007014:	4b3d      	ldr	r3, [pc, #244]	; (800710c <USBD_SetConfig+0x148>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff f948 	bl	80062b0 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f949 	bl	80072c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007032:	e065      	b.n	8007100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa10 	bl	800745a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2203      	movs	r2, #3
 800703e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007042:	e05d      	b.n	8007100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fa08 	bl	800745a <USBD_CtlSendStatus>
      break;
 800704a:	e059      	b.n	8007100 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800704c:	4b2f      	ldr	r3, [pc, #188]	; (800710c <USBD_SetConfig+0x148>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d112      	bne.n	800707a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800705c:	4b2b      	ldr	r3, [pc, #172]	; (800710c <USBD_SetConfig+0x148>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007066:	4b29      	ldr	r3, [pc, #164]	; (800710c <USBD_SetConfig+0x148>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff f93b 	bl	80062e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9f1 	bl	800745a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007078:	e042      	b.n	8007100 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <USBD_SetConfig+0x148>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d02a      	beq.n	80070de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff f929 	bl	80062e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007096:	4b1d      	ldr	r3, [pc, #116]	; (800710c <USBD_SetConfig+0x148>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a0:	4b1a      	ldr	r3, [pc, #104]	; (800710c <USBD_SetConfig+0x148>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff f902 	bl	80062b0 <USBD_SetClassConfig>
 80070ac:	4603      	mov	r3, r0
 80070ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f903 	bl	80072c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff f90e 	bl	80062e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070d4:	e014      	b.n	8007100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f9bf 	bl	800745a <USBD_CtlSendStatus>
      break;
 80070dc:	e010      	b.n	8007100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9bb 	bl	800745a <USBD_CtlSendStatus>
      break;
 80070e4:	e00c      	b.n	8007100 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f8eb 	bl	80072c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ee:	4b07      	ldr	r3, [pc, #28]	; (800710c <USBD_SetConfig+0x148>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff f8f7 	bl	80062e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
      break;
 80070fe:	bf00      	nop
  }

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000218 	.word	0x20000218

08007110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	88db      	ldrh	r3, [r3, #6]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d004      	beq.n	800712c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f8cd 	bl	80072c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800712a:	e023      	b.n	8007174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	dc02      	bgt.n	800713e <USBD_GetConfig+0x2e>
 8007138:	2b00      	cmp	r3, #0
 800713a:	dc03      	bgt.n	8007144 <USBD_GetConfig+0x34>
 800713c:	e015      	b.n	800716a <USBD_GetConfig+0x5a>
 800713e:	2b03      	cmp	r3, #3
 8007140:	d00b      	beq.n	800715a <USBD_GetConfig+0x4a>
 8007142:	e012      	b.n	800716a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3308      	adds	r3, #8
 800714e:	2201      	movs	r2, #1
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f927 	bl	80073a6 <USBD_CtlSendData>
        break;
 8007158:	e00c      	b.n	8007174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3304      	adds	r3, #4
 800715e:	2201      	movs	r2, #1
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f91f 	bl	80073a6 <USBD_CtlSendData>
        break;
 8007168:	e004      	b.n	8007174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8a9 	bl	80072c4 <USBD_CtlError>
        break;
 8007172:	bf00      	nop
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	2b02      	cmp	r3, #2
 8007192:	d81e      	bhi.n	80071d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	88db      	ldrh	r3, [r3, #6]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d004      	beq.n	80071a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f890 	bl	80072c4 <USBD_CtlError>
        break;
 80071a4:	e01a      	b.n	80071dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f043 0202 	orr.w	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	330c      	adds	r3, #12
 80071c6:	2202      	movs	r2, #2
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8eb 	bl	80073a6 <USBD_CtlSendData>
      break;
 80071d0:	e004      	b.n	80071dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f875 	bl	80072c4 <USBD_CtlError>
      break;
 80071da:	bf00      	nop
  }
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	885b      	ldrh	r3, [r3, #2]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d106      	bne.n	8007204 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f92b 	bl	800745a <USBD_CtlSendStatus>
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	2b02      	cmp	r3, #2
 8007222:	d80b      	bhi.n	800723c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10c      	bne.n	8007246 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f910 	bl	800745a <USBD_CtlSendStatus>
      }
      break;
 800723a:	e004      	b.n	8007246 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f840 	bl	80072c4 <USBD_CtlError>
      break;
 8007244:	e000      	b.n	8007248 <USBD_ClrFeature+0x3c>
      break;
 8007246:	bf00      	nop
  }
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	781a      	ldrb	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff fabb 	bl	80067f6 <SWAPBYTE>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff faae 	bl	80067f6 <SWAPBYTE>
 800729a:	4603      	mov	r3, r0
 800729c:	461a      	mov	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff faa1 	bl	80067f6 <SWAPBYTE>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	80da      	strh	r2, [r3, #6]
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fce1 	bl	8007c98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072d6:	2100      	movs	r1, #0
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fcdd 	bl	8007c98 <USBD_LL_StallEP>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b086      	sub	sp, #24
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d036      	beq.n	800736a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007300:	6938      	ldr	r0, [r7, #16]
 8007302:	f000 f836 	bl	8007372 <USBD_GetLen>
 8007306:	4603      	mov	r3, r0
 8007308:	3301      	adds	r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
 8007322:	3301      	adds	r3, #1
 8007324:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	4413      	add	r3, r2
 800732c:	2203      	movs	r2, #3
 800732e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	3301      	adds	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007336:	e013      	b.n	8007360 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	4413      	add	r3, r2
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	3301      	adds	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
    idx++;
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	3301      	adds	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	4413      	add	r3, r2
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
    idx++;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	3301      	adds	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e7      	bne.n	8007338 <USBD_GetString+0x52>
 8007368:	e000      	b.n	800736c <USBD_GetString+0x86>
    return;
 800736a:	bf00      	nop
  }
}
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007382:	e005      	b.n	8007390 <USBD_GetLen+0x1e>
  {
    len++;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	3301      	adds	r3, #1
 8007388:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	3301      	adds	r3, #1
 800738e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f5      	bne.n	8007384 <USBD_GetLen+0x12>
  }

  return len;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	60b9      	str	r1, [r7, #8]
 80073b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fcec 	bl	8007daa <USBD_LL_Transmit>

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	2100      	movs	r1, #0
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fcdb 	bl	8007daa <USBD_LL_Transmit>

  return USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2203      	movs	r2, #3
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	2100      	movs	r1, #0
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fcdf 	bl	8007dec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	2100      	movs	r1, #0
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fcce 	bl	8007dec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2204      	movs	r2, #4
 8007466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800746a:	2300      	movs	r3, #0
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc9a 	bl	8007daa <USBD_LL_Transmit>

  return USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2205      	movs	r2, #5
 800748c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007490:	2300      	movs	r3, #0
 8007492:	2200      	movs	r2, #0
 8007494:	2100      	movs	r1, #0
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fca8 	bl	8007dec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074ac:	2200      	movs	r2, #0
 80074ae:	4912      	ldr	r1, [pc, #72]	; (80074f8 <MX_USB_DEVICE_Init+0x50>)
 80074b0:	4812      	ldr	r0, [pc, #72]	; (80074fc <MX_USB_DEVICE_Init+0x54>)
 80074b2:	f7fe fe8f 	bl	80061d4 <USBD_Init>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074bc:	f7f9 fbbe 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074c0:	490f      	ldr	r1, [pc, #60]	; (8007500 <MX_USB_DEVICE_Init+0x58>)
 80074c2:	480e      	ldr	r0, [pc, #56]	; (80074fc <MX_USB_DEVICE_Init+0x54>)
 80074c4:	f7fe feb6 	bl	8006234 <USBD_RegisterClass>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074ce:	f7f9 fbb5 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074d2:	490c      	ldr	r1, [pc, #48]	; (8007504 <MX_USB_DEVICE_Init+0x5c>)
 80074d4:	4809      	ldr	r0, [pc, #36]	; (80074fc <MX_USB_DEVICE_Init+0x54>)
 80074d6:	f7fe fdd7 	bl	8006088 <USBD_CDC_RegisterInterface>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074e0:	f7f9 fbac 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074e4:	4805      	ldr	r0, [pc, #20]	; (80074fc <MX_USB_DEVICE_Init+0x54>)
 80074e6:	f7fe fecc 	bl	8006282 <USBD_Start>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074f0:	f7f9 fba4 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074f4:	bf00      	nop
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000144 	.word	0x20000144
 80074fc:	2000059c 	.word	0x2000059c
 8007500:	2000002c 	.word	0x2000002c
 8007504:	20000130 	.word	0x20000130

08007508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800750c:	2200      	movs	r2, #0
 800750e:	4905      	ldr	r1, [pc, #20]	; (8007524 <CDC_Init_FS+0x1c>)
 8007510:	4805      	ldr	r0, [pc, #20]	; (8007528 <CDC_Init_FS+0x20>)
 8007512:	f7fe fdce 	bl	80060b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007516:	4905      	ldr	r1, [pc, #20]	; (800752c <CDC_Init_FS+0x24>)
 8007518:	4803      	ldr	r0, [pc, #12]	; (8007528 <CDC_Init_FS+0x20>)
 800751a:	f7fe fde8 	bl	80060ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800751e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007520:	4618      	mov	r0, r3
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2000106c 	.word	0x2000106c
 8007528:	2000059c 	.word	0x2000059c
 800752c:	2000086c 	.word	0x2000086c

08007530 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007534:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007536:	4618      	mov	r0, r3
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
 800754c:	4613      	mov	r3, r2
 800754e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	2b23      	cmp	r3, #35	; 0x23
 8007554:	d84a      	bhi.n	80075ec <CDC_Control_FS+0xac>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <CDC_Control_FS+0x1c>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075ed 	.word	0x080075ed
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	080075ed 	.word	0x080075ed
 8007594:	080075ed 	.word	0x080075ed
 8007598:	080075ed 	.word	0x080075ed
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075ed 	.word	0x080075ed
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	080075ed 	.word	0x080075ed
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	080075ed 	.word	0x080075ed
 80075d0:	080075ed 	.word	0x080075ed
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075ed 	.word	0x080075ed
 80075dc:	080075ed 	.word	0x080075ed
 80075e0:	080075ed 	.word	0x080075ed
 80075e4:	080075ed 	.word	0x080075ed
 80075e8:	080075ed 	.word	0x080075ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075ec:	bf00      	nop
  }

  return (USBD_OK);
 80075ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4805      	ldr	r0, [pc, #20]	; (8007620 <CDC_Receive_FS+0x24>)
 800760a:	f7fe fd70 	bl	80060ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800760e:	4804      	ldr	r0, [pc, #16]	; (8007620 <CDC_Receive_FS+0x24>)
 8007610:	f7fe fdb6 	bl	8006180 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000059c 	.word	0x2000059c

08007624 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <CDC_Transmit_FS+0x48>)
 8007636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007646:	2301      	movs	r3, #1
 8007648:	e00b      	b.n	8007662 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4806      	ldr	r0, [pc, #24]	; (800766c <CDC_Transmit_FS+0x48>)
 8007652:	f7fe fd2e 	bl	80060b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007656:	4805      	ldr	r0, [pc, #20]	; (800766c <CDC_Transmit_FS+0x48>)
 8007658:	f7fe fd62 	bl	8006120 <USBD_CDC_TransmitPacket>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000059c 	.word	0x2000059c

08007670 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007686:	4618      	mov	r0, r3
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	6039      	str	r1, [r7, #0]
 800769e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2212      	movs	r2, #18
 80076a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076a6:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	20000160 	.word	0x20000160

080076b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2204      	movs	r2, #4
 80076c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ca:	4b03      	ldr	r3, [pc, #12]	; (80076d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20000174 	.word	0x20000174

080076dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	6039      	str	r1, [r7, #0]
 80076e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4907      	ldr	r1, [pc, #28]	; (8007710 <USBD_FS_ProductStrDescriptor+0x34>)
 80076f2:	4808      	ldr	r0, [pc, #32]	; (8007714 <USBD_FS_ProductStrDescriptor+0x38>)
 80076f4:	f7ff fdf7 	bl	80072e6 <USBD_GetString>
 80076f8:	e004      	b.n	8007704 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	4904      	ldr	r1, [pc, #16]	; (8007710 <USBD_FS_ProductStrDescriptor+0x34>)
 80076fe:	4805      	ldr	r0, [pc, #20]	; (8007714 <USBD_FS_ProductStrDescriptor+0x38>)
 8007700:	f7ff fdf1 	bl	80072e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	2000186c 	.word	0x2000186c
 8007714:	0800891c 	.word	0x0800891c

08007718 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	4904      	ldr	r1, [pc, #16]	; (8007738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007728:	4804      	ldr	r0, [pc, #16]	; (800773c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800772a:	f7ff fddc 	bl	80072e6 <USBD_GetString>
  return USBD_StrDesc;
 800772e:	4b02      	ldr	r3, [pc, #8]	; (8007738 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000186c 	.word	0x2000186c
 800773c:	08008934 	.word	0x08008934

08007740 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	4603      	mov	r3, r0
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	221a      	movs	r2, #26
 8007750:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007752:	f000 f843 	bl	80077dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007756:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000178 	.word	0x20000178

08007764 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007770:	79fb      	ldrb	r3, [r7, #7]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d105      	bne.n	8007782 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	4907      	ldr	r1, [pc, #28]	; (8007798 <USBD_FS_ConfigStrDescriptor+0x34>)
 800777a:	4808      	ldr	r0, [pc, #32]	; (800779c <USBD_FS_ConfigStrDescriptor+0x38>)
 800777c:	f7ff fdb3 	bl	80072e6 <USBD_GetString>
 8007780:	e004      	b.n	800778c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	4904      	ldr	r1, [pc, #16]	; (8007798 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007786:	4805      	ldr	r0, [pc, #20]	; (800779c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007788:	f7ff fdad 	bl	80072e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800778c:	4b02      	ldr	r3, [pc, #8]	; (8007798 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	2000186c 	.word	0x2000186c
 800779c:	08008948 	.word	0x08008948

080077a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4907      	ldr	r1, [pc, #28]	; (80077d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077b6:	4808      	ldr	r0, [pc, #32]	; (80077d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077b8:	f7ff fd95 	bl	80072e6 <USBD_GetString>
 80077bc:	e004      	b.n	80077c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077c4:	f7ff fd8f 	bl	80072e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077c8:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	2000186c 	.word	0x2000186c
 80077d8:	08008954 	.word	0x08008954

080077dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <Get_SerialNum+0x44>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077e8:	4b0e      	ldr	r3, [pc, #56]	; (8007824 <Get_SerialNum+0x48>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077ee:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <Get_SerialNum+0x4c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4413      	add	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007802:	2208      	movs	r2, #8
 8007804:	4909      	ldr	r1, [pc, #36]	; (800782c <Get_SerialNum+0x50>)
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f814 	bl	8007834 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800780c:	2204      	movs	r2, #4
 800780e:	4908      	ldr	r1, [pc, #32]	; (8007830 <Get_SerialNum+0x54>)
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f000 f80f 	bl	8007834 <IntToUnicode>
  }
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	1fff7a10 	.word	0x1fff7a10
 8007824:	1fff7a14 	.word	0x1fff7a14
 8007828:	1fff7a18 	.word	0x1fff7a18
 800782c:	2000017a 	.word	0x2000017a
 8007830:	2000018a 	.word	0x2000018a

08007834 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e027      	b.n	800789c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	0f1b      	lsrs	r3, r3, #28
 8007850:	2b09      	cmp	r3, #9
 8007852:	d80b      	bhi.n	800786c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	0f1b      	lsrs	r3, r3, #28
 8007858:	b2da      	uxtb	r2, r3
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	4619      	mov	r1, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	440b      	add	r3, r1
 8007864:	3230      	adds	r2, #48	; 0x30
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e00a      	b.n	8007882 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	0f1b      	lsrs	r3, r3, #28
 8007870:	b2da      	uxtb	r2, r3
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4619      	mov	r1, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	440b      	add	r3, r1
 800787c:	3237      	adds	r2, #55	; 0x37
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	3301      	adds	r3, #1
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4413      	add	r3, r2
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	3301      	adds	r3, #1
 800789a:	75fb      	strb	r3, [r7, #23]
 800789c:	7dfa      	ldrb	r2, [r7, #23]
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d3d3      	bcc.n	800784c <IntToUnicode+0x18>
  }
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	2200      	movs	r2, #0
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	605a      	str	r2, [r3, #4]
 80078c6:	609a      	str	r2, [r3, #8]
 80078c8:	60da      	str	r2, [r3, #12]
 80078ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078d4:	d13a      	bne.n	800794c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 80078e0:	f043 0301 	orr.w	r3, r3, #1
 80078e4:	6313      	str	r3, [r2, #48]	; 0x30
 80078e6:	4b1b      	ldr	r3, [pc, #108]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	f003 0301 	and.w	r3, r3, #1
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f8:	2302      	movs	r3, #2
 80078fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007900:	2303      	movs	r3, #3
 8007902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007904:	230a      	movs	r3, #10
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	4619      	mov	r1, r3
 800790e:	4812      	ldr	r0, [pc, #72]	; (8007958 <HAL_PCD_MspInit+0xa4>)
 8007910:	f7fa fa4e 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	4a0e      	ldr	r2, [pc, #56]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 800791a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791e:	6353      	str	r3, [r2, #52]	; 0x34
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 800792a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800792e:	6453      	str	r3, [r2, #68]	; 0x44
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <HAL_PCD_MspInit+0xa0>)
 8007932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800793c:	2200      	movs	r2, #0
 800793e:	2100      	movs	r1, #0
 8007940:	2043      	movs	r0, #67	; 0x43
 8007942:	f7fa f9fe 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007946:	2043      	movs	r0, #67	; 0x43
 8007948:	f7fa fa17 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800794c:	bf00      	nop
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40023800 	.word	0x40023800
 8007958:	40020000 	.word	0x40020000

0800795c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f7fe fcd0 	bl	8006318 <USBD_LL_SetupStage>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	4619      	mov	r1, r3
 80079aa:	f7fe fd0a 	bl	80063c2 <USBD_LL_DataOutStage>
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3348      	adds	r3, #72	; 0x48
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	4619      	mov	r1, r3
 80079de:	f7fe fd53 	bl	8006488 <USBD_LL_DataInStage>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7fe fe67 	bl	80066cc <USBD_LL_SOF>
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	e008      	b.n	8007a32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d102      	bne.n	8007a2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
 8007a2c:	e001      	b.n	8007a32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a2e:	f7f9 f905 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a38:	7bfa      	ldrb	r2, [r7, #15]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe fe07 	bl	8006650 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fdb3 	bl	80065b4 <USBD_LL_Reset>
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fe02 	bl	8006670 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a7e:	f043 0301 	orr.w	r3, r3, #1
 8007a82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <HAL_PCD_SuspendCallback+0x48>)
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <HAL_PCD_SuspendCallback+0x48>)
 8007a92:	f043 0306 	orr.w	r3, r3, #6
 8007a96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	e000ed00 	.word	0xe000ed00

08007aa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fdf2 	bl	800669c <USBD_LL_Resume>
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fe40 	bl	800675c <USBD_LL_IsoOUTIncomplete>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fe08 	bl	8006710 <USBD_LL_IsoINIncomplete>
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fe46 	bl	80067a8 <USBD_LL_DevConnected>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fe43 	bl	80067be <USBD_LL_DevDisconnected>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d13c      	bne.n	8007bca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b50:	4a20      	ldr	r2, [pc, #128]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b60:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b6e:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b70:	2202      	movs	r2, #2
 8007b72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b8c:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b9e:	480d      	ldr	r0, [pc, #52]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007ba0:	f7fa fabb 	bl	800211a <HAL_PCD_Init>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007baa:	f7f9 f847 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bae:	2180      	movs	r1, #128	; 0x80
 8007bb0:	4808      	ldr	r0, [pc, #32]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007bb2:	f7fb fc18 	bl	80033e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bb6:	2240      	movs	r2, #64	; 0x40
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4806      	ldr	r0, [pc, #24]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007bbc:	f7fb fbcc 	bl	8003358 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bc0:	2280      	movs	r2, #128	; 0x80
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <USBD_LL_Init+0x94>)
 8007bc6:	f7fb fbc7 	bl	8003358 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20001a6c 	.word	0x20001a6c

08007bd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fa fbb0 	bl	8002354 <HAL_PCD_Start>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f942 	bl	8007e84 <USBD_Get_USB_Status>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	4608      	mov	r0, r1
 8007c18:	4611      	mov	r1, r2
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	70fb      	strb	r3, [r7, #3]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70bb      	strb	r3, [r7, #2]
 8007c24:	4613      	mov	r3, r2
 8007c26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c36:	78bb      	ldrb	r3, [r7, #2]
 8007c38:	883a      	ldrh	r2, [r7, #0]
 8007c3a:	78f9      	ldrb	r1, [r7, #3]
 8007c3c:	f7fa ff94 	bl	8002b68 <HAL_PCD_EP_Open>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f91c 	bl	8007e84 <USBD_Get_USB_Status>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c74:	78fa      	ldrb	r2, [r7, #3]
 8007c76:	4611      	mov	r1, r2
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fa ffdd 	bl	8002c38 <HAL_PCD_EP_Close>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f8fd 	bl	8007e84 <USBD_Get_USB_Status>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fb f8b5 	bl	8002e26 <HAL_PCD_EP_SetStall>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f8de 	bl	8007e84 <USBD_Get_USB_Status>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fb f8fa 	bl	8002eee <HAL_PCD_EP_ClrStall>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f8bf 	bl	8007e84 <USBD_Get_USB_Status>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da0b      	bge.n	8007d48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d36:	68f9      	ldr	r1, [r7, #12]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	333e      	adds	r3, #62	; 0x3e
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	e00b      	b.n	8007d60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	1a9b      	subs	r3, r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fa fec7 	bl	8002b1e <HAL_PCD_SetAddress>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 f874 	bl	8007e84 <USBD_Get_USB_Status>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b086      	sub	sp, #24
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
 8007db6:	460b      	mov	r3, r1
 8007db8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007dc8:	7af9      	ldrb	r1, [r7, #11]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	f7fa ffe0 	bl	8002d92 <HAL_PCD_EP_Transmit>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 f853 	bl	8007e84 <USBD_Get_USB_Status>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007de2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e0a:	7af9      	ldrb	r1, [r7, #11]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	f7fa ff5c 	bl	8002ccc <HAL_PCD_EP_Receive>
 8007e14:	4603      	mov	r3, r0
 8007e16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e18:	7dfb      	ldrb	r3, [r7, #23]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f832 	bl	8007e84 <USBD_Get_USB_Status>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e24:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e40:	78fa      	ldrb	r2, [r7, #3]
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fa ff8c 	bl	8002d62 <HAL_PCD_EP_GetRxCount>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <USBD_static_malloc+0x18>)
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	2000021c 	.word	0x2000021c

08007e70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d817      	bhi.n	8007ec8 <USBD_Get_USB_Status+0x44>
 8007e98:	a201      	add	r2, pc, #4	; (adr r2, 8007ea0 <USBD_Get_USB_Status+0x1c>)
 8007e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9e:	bf00      	nop
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007eb7 	.word	0x08007eb7
 8007ea8:	08007ebd 	.word	0x08007ebd
 8007eac:	08007ec3 	.word	0x08007ec3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007eb4:	e00b      	b.n	8007ece <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eba:	e008      	b.n	8007ece <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec0:	e005      	b.n	8007ece <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec6:	e002      	b.n	8007ece <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	73fb      	strb	r3, [r7, #15]
    break;
 8007ecc:	bf00      	nop
  }
  return usb_status;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <atoi>:
 8007edc:	220a      	movs	r2, #10
 8007ede:	2100      	movs	r1, #0
 8007ee0:	f000 b8d6 	b.w	8008090 <strtol>

08007ee4 <__errno>:
 8007ee4:	4b01      	ldr	r3, [pc, #4]	; (8007eec <__errno+0x8>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000194 	.word	0x20000194

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f000 fcdc 	bl	80088c0 <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	08008ab8 	.word	0x08008ab8
 8007f2c:	08008ab8 	.word	0x08008ab8
 8007f30:	08008ab8 	.word	0x08008ab8
 8007f34:	08008abc 	.word	0x08008abc

08007f38 <memset>:
 8007f38:	4402      	add	r2, r0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memset+0xa>
 8007f40:	4770      	bx	lr
 8007f42:	f803 1b01 	strb.w	r1, [r3], #1
 8007f46:	e7f9      	b.n	8007f3c <memset+0x4>

08007f48 <siprintf>:
 8007f48:	b40e      	push	{r1, r2, r3}
 8007f4a:	b500      	push	{lr}
 8007f4c:	b09c      	sub	sp, #112	; 0x70
 8007f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f50:	9002      	str	r0, [sp, #8]
 8007f52:	9006      	str	r0, [sp, #24]
 8007f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f58:	4809      	ldr	r0, [pc, #36]	; (8007f80 <siprintf+0x38>)
 8007f5a:	9107      	str	r1, [sp, #28]
 8007f5c:	9104      	str	r1, [sp, #16]
 8007f5e:	4909      	ldr	r1, [pc, #36]	; (8007f84 <siprintf+0x3c>)
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	9105      	str	r1, [sp, #20]
 8007f66:	6800      	ldr	r0, [r0, #0]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	a902      	add	r1, sp, #8
 8007f6c:	f000 f8f6 	bl	800815c <_svfiprintf_r>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	b01c      	add	sp, #112	; 0x70
 8007f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f7c:	b003      	add	sp, #12
 8007f7e:	4770      	bx	lr
 8007f80:	20000194 	.word	0x20000194
 8007f84:	ffff0208 	.word	0xffff0208

08007f88 <_strtol_l.isra.0>:
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8e:	d001      	beq.n	8007f94 <_strtol_l.isra.0+0xc>
 8007f90:	2b24      	cmp	r3, #36	; 0x24
 8007f92:	d906      	bls.n	8007fa2 <_strtol_l.isra.0+0x1a>
 8007f94:	f7ff ffa6 	bl	8007ee4 <__errno>
 8007f98:	2316      	movs	r3, #22
 8007f9a:	6003      	str	r3, [r0, #0]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa2:	4f3a      	ldr	r7, [pc, #232]	; (800808c <_strtol_l.isra.0+0x104>)
 8007fa4:	468e      	mov	lr, r1
 8007fa6:	4676      	mov	r6, lr
 8007fa8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007fac:	5de5      	ldrb	r5, [r4, r7]
 8007fae:	f015 0508 	ands.w	r5, r5, #8
 8007fb2:	d1f8      	bne.n	8007fa6 <_strtol_l.isra.0+0x1e>
 8007fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fb6:	d134      	bne.n	8008022 <_strtol_l.isra.0+0x9a>
 8007fb8:	f89e 4000 	ldrb.w	r4, [lr]
 8007fbc:	f04f 0801 	mov.w	r8, #1
 8007fc0:	f106 0e02 	add.w	lr, r6, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d05c      	beq.n	8008082 <_strtol_l.isra.0+0xfa>
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d10c      	bne.n	8007fe6 <_strtol_l.isra.0+0x5e>
 8007fcc:	2c30      	cmp	r4, #48	; 0x30
 8007fce:	d10a      	bne.n	8007fe6 <_strtol_l.isra.0+0x5e>
 8007fd0:	f89e 4000 	ldrb.w	r4, [lr]
 8007fd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fd8:	2c58      	cmp	r4, #88	; 0x58
 8007fda:	d14d      	bne.n	8008078 <_strtol_l.isra.0+0xf0>
 8007fdc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f10e 0e02 	add.w	lr, lr, #2
 8007fe6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007fea:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007fee:	2600      	movs	r6, #0
 8007ff0:	fbbc f9f3 	udiv	r9, ip, r3
 8007ff4:	4635      	mov	r5, r6
 8007ff6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ffa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ffe:	2f09      	cmp	r7, #9
 8008000:	d818      	bhi.n	8008034 <_strtol_l.isra.0+0xac>
 8008002:	463c      	mov	r4, r7
 8008004:	42a3      	cmp	r3, r4
 8008006:	dd24      	ble.n	8008052 <_strtol_l.isra.0+0xca>
 8008008:	2e00      	cmp	r6, #0
 800800a:	db1f      	blt.n	800804c <_strtol_l.isra.0+0xc4>
 800800c:	45a9      	cmp	r9, r5
 800800e:	d31d      	bcc.n	800804c <_strtol_l.isra.0+0xc4>
 8008010:	d101      	bne.n	8008016 <_strtol_l.isra.0+0x8e>
 8008012:	45a2      	cmp	sl, r4
 8008014:	db1a      	blt.n	800804c <_strtol_l.isra.0+0xc4>
 8008016:	fb05 4503 	mla	r5, r5, r3, r4
 800801a:	2601      	movs	r6, #1
 800801c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008020:	e7eb      	b.n	8007ffa <_strtol_l.isra.0+0x72>
 8008022:	2c2b      	cmp	r4, #43	; 0x2b
 8008024:	bf08      	it	eq
 8008026:	f89e 4000 	ldrbeq.w	r4, [lr]
 800802a:	46a8      	mov	r8, r5
 800802c:	bf08      	it	eq
 800802e:	f106 0e02 	addeq.w	lr, r6, #2
 8008032:	e7c7      	b.n	8007fc4 <_strtol_l.isra.0+0x3c>
 8008034:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008038:	2f19      	cmp	r7, #25
 800803a:	d801      	bhi.n	8008040 <_strtol_l.isra.0+0xb8>
 800803c:	3c37      	subs	r4, #55	; 0x37
 800803e:	e7e1      	b.n	8008004 <_strtol_l.isra.0+0x7c>
 8008040:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008044:	2f19      	cmp	r7, #25
 8008046:	d804      	bhi.n	8008052 <_strtol_l.isra.0+0xca>
 8008048:	3c57      	subs	r4, #87	; 0x57
 800804a:	e7db      	b.n	8008004 <_strtol_l.isra.0+0x7c>
 800804c:	f04f 36ff 	mov.w	r6, #4294967295
 8008050:	e7e4      	b.n	800801c <_strtol_l.isra.0+0x94>
 8008052:	2e00      	cmp	r6, #0
 8008054:	da05      	bge.n	8008062 <_strtol_l.isra.0+0xda>
 8008056:	2322      	movs	r3, #34	; 0x22
 8008058:	6003      	str	r3, [r0, #0]
 800805a:	4665      	mov	r5, ip
 800805c:	b942      	cbnz	r2, 8008070 <_strtol_l.isra.0+0xe8>
 800805e:	4628      	mov	r0, r5
 8008060:	e79d      	b.n	8007f9e <_strtol_l.isra.0+0x16>
 8008062:	f1b8 0f00 	cmp.w	r8, #0
 8008066:	d000      	beq.n	800806a <_strtol_l.isra.0+0xe2>
 8008068:	426d      	negs	r5, r5
 800806a:	2a00      	cmp	r2, #0
 800806c:	d0f7      	beq.n	800805e <_strtol_l.isra.0+0xd6>
 800806e:	b10e      	cbz	r6, 8008074 <_strtol_l.isra.0+0xec>
 8008070:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008074:	6011      	str	r1, [r2, #0]
 8008076:	e7f2      	b.n	800805e <_strtol_l.isra.0+0xd6>
 8008078:	2430      	movs	r4, #48	; 0x30
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1b3      	bne.n	8007fe6 <_strtol_l.isra.0+0x5e>
 800807e:	2308      	movs	r3, #8
 8008080:	e7b1      	b.n	8007fe6 <_strtol_l.isra.0+0x5e>
 8008082:	2c30      	cmp	r4, #48	; 0x30
 8008084:	d0a4      	beq.n	8007fd0 <_strtol_l.isra.0+0x48>
 8008086:	230a      	movs	r3, #10
 8008088:	e7ad      	b.n	8007fe6 <_strtol_l.isra.0+0x5e>
 800808a:	bf00      	nop
 800808c:	0800897d 	.word	0x0800897d

08008090 <strtol>:
 8008090:	4613      	mov	r3, r2
 8008092:	460a      	mov	r2, r1
 8008094:	4601      	mov	r1, r0
 8008096:	4802      	ldr	r0, [pc, #8]	; (80080a0 <strtol+0x10>)
 8008098:	6800      	ldr	r0, [r0, #0]
 800809a:	f7ff bf75 	b.w	8007f88 <_strtol_l.isra.0>
 800809e:	bf00      	nop
 80080a0:	20000194 	.word	0x20000194

080080a4 <__ssputs_r>:
 80080a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	688e      	ldr	r6, [r1, #8]
 80080aa:	429e      	cmp	r6, r3
 80080ac:	4682      	mov	sl, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	4690      	mov	r8, r2
 80080b2:	461f      	mov	r7, r3
 80080b4:	d838      	bhi.n	8008128 <__ssputs_r+0x84>
 80080b6:	898a      	ldrh	r2, [r1, #12]
 80080b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080bc:	d032      	beq.n	8008124 <__ssputs_r+0x80>
 80080be:	6825      	ldr	r5, [r4, #0]
 80080c0:	6909      	ldr	r1, [r1, #16]
 80080c2:	eba5 0901 	sub.w	r9, r5, r1
 80080c6:	6965      	ldr	r5, [r4, #20]
 80080c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080d0:	3301      	adds	r3, #1
 80080d2:	444b      	add	r3, r9
 80080d4:	106d      	asrs	r5, r5, #1
 80080d6:	429d      	cmp	r5, r3
 80080d8:	bf38      	it	cc
 80080da:	461d      	movcc	r5, r3
 80080dc:	0553      	lsls	r3, r2, #21
 80080de:	d531      	bpl.n	8008144 <__ssputs_r+0xa0>
 80080e0:	4629      	mov	r1, r5
 80080e2:	f000 fb47 	bl	8008774 <_malloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	b950      	cbnz	r0, 8008100 <__ssputs_r+0x5c>
 80080ea:	230c      	movs	r3, #12
 80080ec:	f8ca 3000 	str.w	r3, [sl]
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f6:	81a3      	strh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	6921      	ldr	r1, [r4, #16]
 8008102:	464a      	mov	r2, r9
 8008104:	f000 fabe 	bl	8008684 <memcpy>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6126      	str	r6, [r4, #16]
 8008116:	6165      	str	r5, [r4, #20]
 8008118:	444e      	add	r6, r9
 800811a:	eba5 0509 	sub.w	r5, r5, r9
 800811e:	6026      	str	r6, [r4, #0]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	463e      	mov	r6, r7
 8008124:	42be      	cmp	r6, r7
 8008126:	d900      	bls.n	800812a <__ssputs_r+0x86>
 8008128:	463e      	mov	r6, r7
 800812a:	4632      	mov	r2, r6
 800812c:	6820      	ldr	r0, [r4, #0]
 800812e:	4641      	mov	r1, r8
 8008130:	f000 fab6 	bl	80086a0 <memmove>
 8008134:	68a3      	ldr	r3, [r4, #8]
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	1b9b      	subs	r3, r3, r6
 800813a:	4432      	add	r2, r6
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6022      	str	r2, [r4, #0]
 8008140:	2000      	movs	r0, #0
 8008142:	e7db      	b.n	80080fc <__ssputs_r+0x58>
 8008144:	462a      	mov	r2, r5
 8008146:	f000 fb6f 	bl	8008828 <_realloc_r>
 800814a:	4606      	mov	r6, r0
 800814c:	2800      	cmp	r0, #0
 800814e:	d1e1      	bne.n	8008114 <__ssputs_r+0x70>
 8008150:	6921      	ldr	r1, [r4, #16]
 8008152:	4650      	mov	r0, sl
 8008154:	f000 fabe 	bl	80086d4 <_free_r>
 8008158:	e7c7      	b.n	80080ea <__ssputs_r+0x46>
	...

0800815c <_svfiprintf_r>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	4698      	mov	r8, r3
 8008162:	898b      	ldrh	r3, [r1, #12]
 8008164:	061b      	lsls	r3, r3, #24
 8008166:	b09d      	sub	sp, #116	; 0x74
 8008168:	4607      	mov	r7, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4614      	mov	r4, r2
 800816e:	d50e      	bpl.n	800818e <_svfiprintf_r+0x32>
 8008170:	690b      	ldr	r3, [r1, #16]
 8008172:	b963      	cbnz	r3, 800818e <_svfiprintf_r+0x32>
 8008174:	2140      	movs	r1, #64	; 0x40
 8008176:	f000 fafd 	bl	8008774 <_malloc_r>
 800817a:	6028      	str	r0, [r5, #0]
 800817c:	6128      	str	r0, [r5, #16]
 800817e:	b920      	cbnz	r0, 800818a <_svfiprintf_r+0x2e>
 8008180:	230c      	movs	r3, #12
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e0d1      	b.n	800832e <_svfiprintf_r+0x1d2>
 800818a:	2340      	movs	r3, #64	; 0x40
 800818c:	616b      	str	r3, [r5, #20]
 800818e:	2300      	movs	r3, #0
 8008190:	9309      	str	r3, [sp, #36]	; 0x24
 8008192:	2320      	movs	r3, #32
 8008194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008198:	f8cd 800c 	str.w	r8, [sp, #12]
 800819c:	2330      	movs	r3, #48	; 0x30
 800819e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008348 <_svfiprintf_r+0x1ec>
 80081a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a6:	f04f 0901 	mov.w	r9, #1
 80081aa:	4623      	mov	r3, r4
 80081ac:	469a      	mov	sl, r3
 80081ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b2:	b10a      	cbz	r2, 80081b8 <_svfiprintf_r+0x5c>
 80081b4:	2a25      	cmp	r2, #37	; 0x25
 80081b6:	d1f9      	bne.n	80081ac <_svfiprintf_r+0x50>
 80081b8:	ebba 0b04 	subs.w	fp, sl, r4
 80081bc:	d00b      	beq.n	80081d6 <_svfiprintf_r+0x7a>
 80081be:	465b      	mov	r3, fp
 80081c0:	4622      	mov	r2, r4
 80081c2:	4629      	mov	r1, r5
 80081c4:	4638      	mov	r0, r7
 80081c6:	f7ff ff6d 	bl	80080a4 <__ssputs_r>
 80081ca:	3001      	adds	r0, #1
 80081cc:	f000 80aa 	beq.w	8008324 <_svfiprintf_r+0x1c8>
 80081d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d2:	445a      	add	r2, fp
 80081d4:	9209      	str	r2, [sp, #36]	; 0x24
 80081d6:	f89a 3000 	ldrb.w	r3, [sl]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 80a2 	beq.w	8008324 <_svfiprintf_r+0x1c8>
 80081e0:	2300      	movs	r3, #0
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295
 80081e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ea:	f10a 0a01 	add.w	sl, sl, #1
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	9307      	str	r3, [sp, #28]
 80081f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f6:	931a      	str	r3, [sp, #104]	; 0x68
 80081f8:	4654      	mov	r4, sl
 80081fa:	2205      	movs	r2, #5
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	4851      	ldr	r0, [pc, #324]	; (8008348 <_svfiprintf_r+0x1ec>)
 8008202:	f7f7 ffe5 	bl	80001d0 <memchr>
 8008206:	9a04      	ldr	r2, [sp, #16]
 8008208:	b9d8      	cbnz	r0, 8008242 <_svfiprintf_r+0xe6>
 800820a:	06d0      	lsls	r0, r2, #27
 800820c:	bf44      	itt	mi
 800820e:	2320      	movmi	r3, #32
 8008210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008214:	0711      	lsls	r1, r2, #28
 8008216:	bf44      	itt	mi
 8008218:	232b      	movmi	r3, #43	; 0x2b
 800821a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821e:	f89a 3000 	ldrb.w	r3, [sl]
 8008222:	2b2a      	cmp	r3, #42	; 0x2a
 8008224:	d015      	beq.n	8008252 <_svfiprintf_r+0xf6>
 8008226:	9a07      	ldr	r2, [sp, #28]
 8008228:	4654      	mov	r4, sl
 800822a:	2000      	movs	r0, #0
 800822c:	f04f 0c0a 	mov.w	ip, #10
 8008230:	4621      	mov	r1, r4
 8008232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008236:	3b30      	subs	r3, #48	; 0x30
 8008238:	2b09      	cmp	r3, #9
 800823a:	d94e      	bls.n	80082da <_svfiprintf_r+0x17e>
 800823c:	b1b0      	cbz	r0, 800826c <_svfiprintf_r+0x110>
 800823e:	9207      	str	r2, [sp, #28]
 8008240:	e014      	b.n	800826c <_svfiprintf_r+0x110>
 8008242:	eba0 0308 	sub.w	r3, r0, r8
 8008246:	fa09 f303 	lsl.w	r3, r9, r3
 800824a:	4313      	orrs	r3, r2
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	46a2      	mov	sl, r4
 8008250:	e7d2      	b.n	80081f8 <_svfiprintf_r+0x9c>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	1d19      	adds	r1, r3, #4
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	9103      	str	r1, [sp, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	bfbb      	ittet	lt
 800825e:	425b      	neglt	r3, r3
 8008260:	f042 0202 	orrlt.w	r2, r2, #2
 8008264:	9307      	strge	r3, [sp, #28]
 8008266:	9307      	strlt	r3, [sp, #28]
 8008268:	bfb8      	it	lt
 800826a:	9204      	strlt	r2, [sp, #16]
 800826c:	7823      	ldrb	r3, [r4, #0]
 800826e:	2b2e      	cmp	r3, #46	; 0x2e
 8008270:	d10c      	bne.n	800828c <_svfiprintf_r+0x130>
 8008272:	7863      	ldrb	r3, [r4, #1]
 8008274:	2b2a      	cmp	r3, #42	; 0x2a
 8008276:	d135      	bne.n	80082e4 <_svfiprintf_r+0x188>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	1d1a      	adds	r2, r3, #4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	9203      	str	r2, [sp, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfb8      	it	lt
 8008284:	f04f 33ff 	movlt.w	r3, #4294967295
 8008288:	3402      	adds	r4, #2
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008358 <_svfiprintf_r+0x1fc>
 8008290:	7821      	ldrb	r1, [r4, #0]
 8008292:	2203      	movs	r2, #3
 8008294:	4650      	mov	r0, sl
 8008296:	f7f7 ff9b 	bl	80001d0 <memchr>
 800829a:	b140      	cbz	r0, 80082ae <_svfiprintf_r+0x152>
 800829c:	2340      	movs	r3, #64	; 0x40
 800829e:	eba0 000a 	sub.w	r0, r0, sl
 80082a2:	fa03 f000 	lsl.w	r0, r3, r0
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	4303      	orrs	r3, r0
 80082aa:	3401      	adds	r4, #1
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b2:	4826      	ldr	r0, [pc, #152]	; (800834c <_svfiprintf_r+0x1f0>)
 80082b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b8:	2206      	movs	r2, #6
 80082ba:	f7f7 ff89 	bl	80001d0 <memchr>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d038      	beq.n	8008334 <_svfiprintf_r+0x1d8>
 80082c2:	4b23      	ldr	r3, [pc, #140]	; (8008350 <_svfiprintf_r+0x1f4>)
 80082c4:	bb1b      	cbnz	r3, 800830e <_svfiprintf_r+0x1b2>
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	3307      	adds	r3, #7
 80082ca:	f023 0307 	bic.w	r3, r3, #7
 80082ce:	3308      	adds	r3, #8
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	4433      	add	r3, r6
 80082d6:	9309      	str	r3, [sp, #36]	; 0x24
 80082d8:	e767      	b.n	80081aa <_svfiprintf_r+0x4e>
 80082da:	fb0c 3202 	mla	r2, ip, r2, r3
 80082de:	460c      	mov	r4, r1
 80082e0:	2001      	movs	r0, #1
 80082e2:	e7a5      	b.n	8008230 <_svfiprintf_r+0xd4>
 80082e4:	2300      	movs	r3, #0
 80082e6:	3401      	adds	r4, #1
 80082e8:	9305      	str	r3, [sp, #20]
 80082ea:	4619      	mov	r1, r3
 80082ec:	f04f 0c0a 	mov.w	ip, #10
 80082f0:	4620      	mov	r0, r4
 80082f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f6:	3a30      	subs	r2, #48	; 0x30
 80082f8:	2a09      	cmp	r2, #9
 80082fa:	d903      	bls.n	8008304 <_svfiprintf_r+0x1a8>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0c5      	beq.n	800828c <_svfiprintf_r+0x130>
 8008300:	9105      	str	r1, [sp, #20]
 8008302:	e7c3      	b.n	800828c <_svfiprintf_r+0x130>
 8008304:	fb0c 2101 	mla	r1, ip, r1, r2
 8008308:	4604      	mov	r4, r0
 800830a:	2301      	movs	r3, #1
 800830c:	e7f0      	b.n	80082f0 <_svfiprintf_r+0x194>
 800830e:	ab03      	add	r3, sp, #12
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	462a      	mov	r2, r5
 8008314:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <_svfiprintf_r+0x1f8>)
 8008316:	a904      	add	r1, sp, #16
 8008318:	4638      	mov	r0, r7
 800831a:	f3af 8000 	nop.w
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	4606      	mov	r6, r0
 8008322:	d1d6      	bne.n	80082d2 <_svfiprintf_r+0x176>
 8008324:	89ab      	ldrh	r3, [r5, #12]
 8008326:	065b      	lsls	r3, r3, #25
 8008328:	f53f af2c 	bmi.w	8008184 <_svfiprintf_r+0x28>
 800832c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800832e:	b01d      	add	sp, #116	; 0x74
 8008330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008334:	ab03      	add	r3, sp, #12
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	462a      	mov	r2, r5
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <_svfiprintf_r+0x1f8>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	4638      	mov	r0, r7
 8008340:	f000 f87a 	bl	8008438 <_printf_i>
 8008344:	e7eb      	b.n	800831e <_svfiprintf_r+0x1c2>
 8008346:	bf00      	nop
 8008348:	08008a7d 	.word	0x08008a7d
 800834c:	08008a87 	.word	0x08008a87
 8008350:	00000000 	.word	0x00000000
 8008354:	080080a5 	.word	0x080080a5
 8008358:	08008a83 	.word	0x08008a83

0800835c <_printf_common>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	4616      	mov	r6, r2
 8008362:	4699      	mov	r9, r3
 8008364:	688a      	ldr	r2, [r1, #8]
 8008366:	690b      	ldr	r3, [r1, #16]
 8008368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800836c:	4293      	cmp	r3, r2
 800836e:	bfb8      	it	lt
 8008370:	4613      	movlt	r3, r2
 8008372:	6033      	str	r3, [r6, #0]
 8008374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008378:	4607      	mov	r7, r0
 800837a:	460c      	mov	r4, r1
 800837c:	b10a      	cbz	r2, 8008382 <_printf_common+0x26>
 800837e:	3301      	adds	r3, #1
 8008380:	6033      	str	r3, [r6, #0]
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	0699      	lsls	r1, r3, #26
 8008386:	bf42      	ittt	mi
 8008388:	6833      	ldrmi	r3, [r6, #0]
 800838a:	3302      	addmi	r3, #2
 800838c:	6033      	strmi	r3, [r6, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	f015 0506 	ands.w	r5, r5, #6
 8008394:	d106      	bne.n	80083a4 <_printf_common+0x48>
 8008396:	f104 0a19 	add.w	sl, r4, #25
 800839a:	68e3      	ldr	r3, [r4, #12]
 800839c:	6832      	ldr	r2, [r6, #0]
 800839e:	1a9b      	subs	r3, r3, r2
 80083a0:	42ab      	cmp	r3, r5
 80083a2:	dc26      	bgt.n	80083f2 <_printf_common+0x96>
 80083a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083a8:	1e13      	subs	r3, r2, #0
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	bf18      	it	ne
 80083ae:	2301      	movne	r3, #1
 80083b0:	0692      	lsls	r2, r2, #26
 80083b2:	d42b      	bmi.n	800840c <_printf_common+0xb0>
 80083b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083b8:	4649      	mov	r1, r9
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c0      	blx	r8
 80083be:	3001      	adds	r0, #1
 80083c0:	d01e      	beq.n	8008400 <_printf_common+0xa4>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	68e5      	ldr	r5, [r4, #12]
 80083c6:	6832      	ldr	r2, [r6, #0]
 80083c8:	f003 0306 	and.w	r3, r3, #6
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	bf08      	it	eq
 80083d0:	1aad      	subeq	r5, r5, r2
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	bf0c      	ite	eq
 80083d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083dc:	2500      	movne	r5, #0
 80083de:	4293      	cmp	r3, r2
 80083e0:	bfc4      	itt	gt
 80083e2:	1a9b      	subgt	r3, r3, r2
 80083e4:	18ed      	addgt	r5, r5, r3
 80083e6:	2600      	movs	r6, #0
 80083e8:	341a      	adds	r4, #26
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	d11a      	bne.n	8008424 <_printf_common+0xc8>
 80083ee:	2000      	movs	r0, #0
 80083f0:	e008      	b.n	8008404 <_printf_common+0xa8>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4652      	mov	r2, sl
 80083f6:	4649      	mov	r1, r9
 80083f8:	4638      	mov	r0, r7
 80083fa:	47c0      	blx	r8
 80083fc:	3001      	adds	r0, #1
 80083fe:	d103      	bne.n	8008408 <_printf_common+0xac>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	3501      	adds	r5, #1
 800840a:	e7c6      	b.n	800839a <_printf_common+0x3e>
 800840c:	18e1      	adds	r1, r4, r3
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	2030      	movs	r0, #48	; 0x30
 8008412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008416:	4422      	add	r2, r4
 8008418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800841c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008420:	3302      	adds	r3, #2
 8008422:	e7c7      	b.n	80083b4 <_printf_common+0x58>
 8008424:	2301      	movs	r3, #1
 8008426:	4622      	mov	r2, r4
 8008428:	4649      	mov	r1, r9
 800842a:	4638      	mov	r0, r7
 800842c:	47c0      	blx	r8
 800842e:	3001      	adds	r0, #1
 8008430:	d0e6      	beq.n	8008400 <_printf_common+0xa4>
 8008432:	3601      	adds	r6, #1
 8008434:	e7d9      	b.n	80083ea <_printf_common+0x8e>
	...

08008438 <_printf_i>:
 8008438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4691      	mov	r9, r2
 8008440:	7e27      	ldrb	r7, [r4, #24]
 8008442:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008444:	2f78      	cmp	r7, #120	; 0x78
 8008446:	4680      	mov	r8, r0
 8008448:	469a      	mov	sl, r3
 800844a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800844e:	d807      	bhi.n	8008460 <_printf_i+0x28>
 8008450:	2f62      	cmp	r7, #98	; 0x62
 8008452:	d80a      	bhi.n	800846a <_printf_i+0x32>
 8008454:	2f00      	cmp	r7, #0
 8008456:	f000 80d8 	beq.w	800860a <_printf_i+0x1d2>
 800845a:	2f58      	cmp	r7, #88	; 0x58
 800845c:	f000 80a3 	beq.w	80085a6 <_printf_i+0x16e>
 8008460:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008468:	e03a      	b.n	80084e0 <_printf_i+0xa8>
 800846a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800846e:	2b15      	cmp	r3, #21
 8008470:	d8f6      	bhi.n	8008460 <_printf_i+0x28>
 8008472:	a001      	add	r0, pc, #4	; (adr r0, 8008478 <_printf_i+0x40>)
 8008474:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084e5 	.word	0x080084e5
 8008480:	08008461 	.word	0x08008461
 8008484:	08008461 	.word	0x08008461
 8008488:	08008461 	.word	0x08008461
 800848c:	08008461 	.word	0x08008461
 8008490:	080084e5 	.word	0x080084e5
 8008494:	08008461 	.word	0x08008461
 8008498:	08008461 	.word	0x08008461
 800849c:	08008461 	.word	0x08008461
 80084a0:	08008461 	.word	0x08008461
 80084a4:	080085f1 	.word	0x080085f1
 80084a8:	08008515 	.word	0x08008515
 80084ac:	080085d3 	.word	0x080085d3
 80084b0:	08008461 	.word	0x08008461
 80084b4:	08008461 	.word	0x08008461
 80084b8:	08008613 	.word	0x08008613
 80084bc:	08008461 	.word	0x08008461
 80084c0:	08008515 	.word	0x08008515
 80084c4:	08008461 	.word	0x08008461
 80084c8:	08008461 	.word	0x08008461
 80084cc:	080085db 	.word	0x080085db
 80084d0:	680b      	ldr	r3, [r1, #0]
 80084d2:	1d1a      	adds	r2, r3, #4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	600a      	str	r2, [r1, #0]
 80084d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0a3      	b.n	800862c <_printf_i+0x1f4>
 80084e4:	6825      	ldr	r5, [r4, #0]
 80084e6:	6808      	ldr	r0, [r1, #0]
 80084e8:	062e      	lsls	r6, r5, #24
 80084ea:	f100 0304 	add.w	r3, r0, #4
 80084ee:	d50a      	bpl.n	8008506 <_printf_i+0xce>
 80084f0:	6805      	ldr	r5, [r0, #0]
 80084f2:	600b      	str	r3, [r1, #0]
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	da03      	bge.n	8008500 <_printf_i+0xc8>
 80084f8:	232d      	movs	r3, #45	; 0x2d
 80084fa:	426d      	negs	r5, r5
 80084fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008500:	485e      	ldr	r0, [pc, #376]	; (800867c <_printf_i+0x244>)
 8008502:	230a      	movs	r3, #10
 8008504:	e019      	b.n	800853a <_printf_i+0x102>
 8008506:	f015 0f40 	tst.w	r5, #64	; 0x40
 800850a:	6805      	ldr	r5, [r0, #0]
 800850c:	600b      	str	r3, [r1, #0]
 800850e:	bf18      	it	ne
 8008510:	b22d      	sxthne	r5, r5
 8008512:	e7ef      	b.n	80084f4 <_printf_i+0xbc>
 8008514:	680b      	ldr	r3, [r1, #0]
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	1d18      	adds	r0, r3, #4
 800851a:	6008      	str	r0, [r1, #0]
 800851c:	0628      	lsls	r0, r5, #24
 800851e:	d501      	bpl.n	8008524 <_printf_i+0xec>
 8008520:	681d      	ldr	r5, [r3, #0]
 8008522:	e002      	b.n	800852a <_printf_i+0xf2>
 8008524:	0669      	lsls	r1, r5, #25
 8008526:	d5fb      	bpl.n	8008520 <_printf_i+0xe8>
 8008528:	881d      	ldrh	r5, [r3, #0]
 800852a:	4854      	ldr	r0, [pc, #336]	; (800867c <_printf_i+0x244>)
 800852c:	2f6f      	cmp	r7, #111	; 0x6f
 800852e:	bf0c      	ite	eq
 8008530:	2308      	moveq	r3, #8
 8008532:	230a      	movne	r3, #10
 8008534:	2100      	movs	r1, #0
 8008536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853a:	6866      	ldr	r6, [r4, #4]
 800853c:	60a6      	str	r6, [r4, #8]
 800853e:	2e00      	cmp	r6, #0
 8008540:	bfa2      	ittt	ge
 8008542:	6821      	ldrge	r1, [r4, #0]
 8008544:	f021 0104 	bicge.w	r1, r1, #4
 8008548:	6021      	strge	r1, [r4, #0]
 800854a:	b90d      	cbnz	r5, 8008550 <_printf_i+0x118>
 800854c:	2e00      	cmp	r6, #0
 800854e:	d04d      	beq.n	80085ec <_printf_i+0x1b4>
 8008550:	4616      	mov	r6, r2
 8008552:	fbb5 f1f3 	udiv	r1, r5, r3
 8008556:	fb03 5711 	mls	r7, r3, r1, r5
 800855a:	5dc7      	ldrb	r7, [r0, r7]
 800855c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008560:	462f      	mov	r7, r5
 8008562:	42bb      	cmp	r3, r7
 8008564:	460d      	mov	r5, r1
 8008566:	d9f4      	bls.n	8008552 <_printf_i+0x11a>
 8008568:	2b08      	cmp	r3, #8
 800856a:	d10b      	bne.n	8008584 <_printf_i+0x14c>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	07df      	lsls	r7, r3, #31
 8008570:	d508      	bpl.n	8008584 <_printf_i+0x14c>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	6861      	ldr	r1, [r4, #4]
 8008576:	4299      	cmp	r1, r3
 8008578:	bfde      	ittt	le
 800857a:	2330      	movle	r3, #48	; 0x30
 800857c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008584:	1b92      	subs	r2, r2, r6
 8008586:	6122      	str	r2, [r4, #16]
 8008588:	f8cd a000 	str.w	sl, [sp]
 800858c:	464b      	mov	r3, r9
 800858e:	aa03      	add	r2, sp, #12
 8008590:	4621      	mov	r1, r4
 8008592:	4640      	mov	r0, r8
 8008594:	f7ff fee2 	bl	800835c <_printf_common>
 8008598:	3001      	adds	r0, #1
 800859a:	d14c      	bne.n	8008636 <_printf_i+0x1fe>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	b004      	add	sp, #16
 80085a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a6:	4835      	ldr	r0, [pc, #212]	; (800867c <_printf_i+0x244>)
 80085a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	680e      	ldr	r6, [r1, #0]
 80085b0:	061f      	lsls	r7, r3, #24
 80085b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80085b6:	600e      	str	r6, [r1, #0]
 80085b8:	d514      	bpl.n	80085e4 <_printf_i+0x1ac>
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	bf44      	itt	mi
 80085be:	f043 0320 	orrmi.w	r3, r3, #32
 80085c2:	6023      	strmi	r3, [r4, #0]
 80085c4:	b91d      	cbnz	r5, 80085ce <_printf_i+0x196>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f023 0320 	bic.w	r3, r3, #32
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	2310      	movs	r3, #16
 80085d0:	e7b0      	b.n	8008534 <_printf_i+0xfc>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	f043 0320 	orr.w	r3, r3, #32
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	2378      	movs	r3, #120	; 0x78
 80085dc:	4828      	ldr	r0, [pc, #160]	; (8008680 <_printf_i+0x248>)
 80085de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e2:	e7e3      	b.n	80085ac <_printf_i+0x174>
 80085e4:	065e      	lsls	r6, r3, #25
 80085e6:	bf48      	it	mi
 80085e8:	b2ad      	uxthmi	r5, r5
 80085ea:	e7e6      	b.n	80085ba <_printf_i+0x182>
 80085ec:	4616      	mov	r6, r2
 80085ee:	e7bb      	b.n	8008568 <_printf_i+0x130>
 80085f0:	680b      	ldr	r3, [r1, #0]
 80085f2:	6826      	ldr	r6, [r4, #0]
 80085f4:	6960      	ldr	r0, [r4, #20]
 80085f6:	1d1d      	adds	r5, r3, #4
 80085f8:	600d      	str	r5, [r1, #0]
 80085fa:	0635      	lsls	r5, r6, #24
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	d501      	bpl.n	8008604 <_printf_i+0x1cc>
 8008600:	6018      	str	r0, [r3, #0]
 8008602:	e002      	b.n	800860a <_printf_i+0x1d2>
 8008604:	0671      	lsls	r1, r6, #25
 8008606:	d5fb      	bpl.n	8008600 <_printf_i+0x1c8>
 8008608:	8018      	strh	r0, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	6123      	str	r3, [r4, #16]
 800860e:	4616      	mov	r6, r2
 8008610:	e7ba      	b.n	8008588 <_printf_i+0x150>
 8008612:	680b      	ldr	r3, [r1, #0]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	600a      	str	r2, [r1, #0]
 8008618:	681e      	ldr	r6, [r3, #0]
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	2100      	movs	r1, #0
 800861e:	4630      	mov	r0, r6
 8008620:	f7f7 fdd6 	bl	80001d0 <memchr>
 8008624:	b108      	cbz	r0, 800862a <_printf_i+0x1f2>
 8008626:	1b80      	subs	r0, r0, r6
 8008628:	6060      	str	r0, [r4, #4]
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	2300      	movs	r3, #0
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	e7a8      	b.n	8008588 <_printf_i+0x150>
 8008636:	6923      	ldr	r3, [r4, #16]
 8008638:	4632      	mov	r2, r6
 800863a:	4649      	mov	r1, r9
 800863c:	4640      	mov	r0, r8
 800863e:	47d0      	blx	sl
 8008640:	3001      	adds	r0, #1
 8008642:	d0ab      	beq.n	800859c <_printf_i+0x164>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	079b      	lsls	r3, r3, #30
 8008648:	d413      	bmi.n	8008672 <_printf_i+0x23a>
 800864a:	68e0      	ldr	r0, [r4, #12]
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	4298      	cmp	r0, r3
 8008650:	bfb8      	it	lt
 8008652:	4618      	movlt	r0, r3
 8008654:	e7a4      	b.n	80085a0 <_printf_i+0x168>
 8008656:	2301      	movs	r3, #1
 8008658:	4632      	mov	r2, r6
 800865a:	4649      	mov	r1, r9
 800865c:	4640      	mov	r0, r8
 800865e:	47d0      	blx	sl
 8008660:	3001      	adds	r0, #1
 8008662:	d09b      	beq.n	800859c <_printf_i+0x164>
 8008664:	3501      	adds	r5, #1
 8008666:	68e3      	ldr	r3, [r4, #12]
 8008668:	9903      	ldr	r1, [sp, #12]
 800866a:	1a5b      	subs	r3, r3, r1
 800866c:	42ab      	cmp	r3, r5
 800866e:	dcf2      	bgt.n	8008656 <_printf_i+0x21e>
 8008670:	e7eb      	b.n	800864a <_printf_i+0x212>
 8008672:	2500      	movs	r5, #0
 8008674:	f104 0619 	add.w	r6, r4, #25
 8008678:	e7f5      	b.n	8008666 <_printf_i+0x22e>
 800867a:	bf00      	nop
 800867c:	08008a8e 	.word	0x08008a8e
 8008680:	08008a9f 	.word	0x08008a9f

08008684 <memcpy>:
 8008684:	440a      	add	r2, r1
 8008686:	4291      	cmp	r1, r2
 8008688:	f100 33ff 	add.w	r3, r0, #4294967295
 800868c:	d100      	bne.n	8008690 <memcpy+0xc>
 800868e:	4770      	bx	lr
 8008690:	b510      	push	{r4, lr}
 8008692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869a:	4291      	cmp	r1, r2
 800869c:	d1f9      	bne.n	8008692 <memcpy+0xe>
 800869e:	bd10      	pop	{r4, pc}

080086a0 <memmove>:
 80086a0:	4288      	cmp	r0, r1
 80086a2:	b510      	push	{r4, lr}
 80086a4:	eb01 0402 	add.w	r4, r1, r2
 80086a8:	d902      	bls.n	80086b0 <memmove+0x10>
 80086aa:	4284      	cmp	r4, r0
 80086ac:	4623      	mov	r3, r4
 80086ae:	d807      	bhi.n	80086c0 <memmove+0x20>
 80086b0:	1e43      	subs	r3, r0, #1
 80086b2:	42a1      	cmp	r1, r4
 80086b4:	d008      	beq.n	80086c8 <memmove+0x28>
 80086b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086be:	e7f8      	b.n	80086b2 <memmove+0x12>
 80086c0:	4402      	add	r2, r0
 80086c2:	4601      	mov	r1, r0
 80086c4:	428a      	cmp	r2, r1
 80086c6:	d100      	bne.n	80086ca <memmove+0x2a>
 80086c8:	bd10      	pop	{r4, pc}
 80086ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086d2:	e7f7      	b.n	80086c4 <memmove+0x24>

080086d4 <_free_r>:
 80086d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086d6:	2900      	cmp	r1, #0
 80086d8:	d048      	beq.n	800876c <_free_r+0x98>
 80086da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086de:	9001      	str	r0, [sp, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f1a1 0404 	sub.w	r4, r1, #4
 80086e6:	bfb8      	it	lt
 80086e8:	18e4      	addlt	r4, r4, r3
 80086ea:	f000 f8d3 	bl	8008894 <__malloc_lock>
 80086ee:	4a20      	ldr	r2, [pc, #128]	; (8008770 <_free_r+0x9c>)
 80086f0:	9801      	ldr	r0, [sp, #4]
 80086f2:	6813      	ldr	r3, [r2, #0]
 80086f4:	4615      	mov	r5, r2
 80086f6:	b933      	cbnz	r3, 8008706 <_free_r+0x32>
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	6014      	str	r4, [r2, #0]
 80086fc:	b003      	add	sp, #12
 80086fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008702:	f000 b8cd 	b.w	80088a0 <__malloc_unlock>
 8008706:	42a3      	cmp	r3, r4
 8008708:	d90b      	bls.n	8008722 <_free_r+0x4e>
 800870a:	6821      	ldr	r1, [r4, #0]
 800870c:	1862      	adds	r2, r4, r1
 800870e:	4293      	cmp	r3, r2
 8008710:	bf04      	itt	eq
 8008712:	681a      	ldreq	r2, [r3, #0]
 8008714:	685b      	ldreq	r3, [r3, #4]
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	bf04      	itt	eq
 800871a:	1852      	addeq	r2, r2, r1
 800871c:	6022      	streq	r2, [r4, #0]
 800871e:	602c      	str	r4, [r5, #0]
 8008720:	e7ec      	b.n	80086fc <_free_r+0x28>
 8008722:	461a      	mov	r2, r3
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	b10b      	cbz	r3, 800872c <_free_r+0x58>
 8008728:	42a3      	cmp	r3, r4
 800872a:	d9fa      	bls.n	8008722 <_free_r+0x4e>
 800872c:	6811      	ldr	r1, [r2, #0]
 800872e:	1855      	adds	r5, r2, r1
 8008730:	42a5      	cmp	r5, r4
 8008732:	d10b      	bne.n	800874c <_free_r+0x78>
 8008734:	6824      	ldr	r4, [r4, #0]
 8008736:	4421      	add	r1, r4
 8008738:	1854      	adds	r4, r2, r1
 800873a:	42a3      	cmp	r3, r4
 800873c:	6011      	str	r1, [r2, #0]
 800873e:	d1dd      	bne.n	80086fc <_free_r+0x28>
 8008740:	681c      	ldr	r4, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	6053      	str	r3, [r2, #4]
 8008746:	4421      	add	r1, r4
 8008748:	6011      	str	r1, [r2, #0]
 800874a:	e7d7      	b.n	80086fc <_free_r+0x28>
 800874c:	d902      	bls.n	8008754 <_free_r+0x80>
 800874e:	230c      	movs	r3, #12
 8008750:	6003      	str	r3, [r0, #0]
 8008752:	e7d3      	b.n	80086fc <_free_r+0x28>
 8008754:	6825      	ldr	r5, [r4, #0]
 8008756:	1961      	adds	r1, r4, r5
 8008758:	428b      	cmp	r3, r1
 800875a:	bf04      	itt	eq
 800875c:	6819      	ldreq	r1, [r3, #0]
 800875e:	685b      	ldreq	r3, [r3, #4]
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	bf04      	itt	eq
 8008764:	1949      	addeq	r1, r1, r5
 8008766:	6021      	streq	r1, [r4, #0]
 8008768:	6054      	str	r4, [r2, #4]
 800876a:	e7c7      	b.n	80086fc <_free_r+0x28>
 800876c:	b003      	add	sp, #12
 800876e:	bd30      	pop	{r4, r5, pc}
 8008770:	2000043c 	.word	0x2000043c

08008774 <_malloc_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	1ccd      	adds	r5, r1, #3
 8008778:	f025 0503 	bic.w	r5, r5, #3
 800877c:	3508      	adds	r5, #8
 800877e:	2d0c      	cmp	r5, #12
 8008780:	bf38      	it	cc
 8008782:	250c      	movcc	r5, #12
 8008784:	2d00      	cmp	r5, #0
 8008786:	4606      	mov	r6, r0
 8008788:	db01      	blt.n	800878e <_malloc_r+0x1a>
 800878a:	42a9      	cmp	r1, r5
 800878c:	d903      	bls.n	8008796 <_malloc_r+0x22>
 800878e:	230c      	movs	r3, #12
 8008790:	6033      	str	r3, [r6, #0]
 8008792:	2000      	movs	r0, #0
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008796:	f000 f87d 	bl	8008894 <__malloc_lock>
 800879a:	4921      	ldr	r1, [pc, #132]	; (8008820 <_malloc_r+0xac>)
 800879c:	680a      	ldr	r2, [r1, #0]
 800879e:	4614      	mov	r4, r2
 80087a0:	b99c      	cbnz	r4, 80087ca <_malloc_r+0x56>
 80087a2:	4f20      	ldr	r7, [pc, #128]	; (8008824 <_malloc_r+0xb0>)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	b923      	cbnz	r3, 80087b2 <_malloc_r+0x3e>
 80087a8:	4621      	mov	r1, r4
 80087aa:	4630      	mov	r0, r6
 80087ac:	f000 f862 	bl	8008874 <_sbrk_r>
 80087b0:	6038      	str	r0, [r7, #0]
 80087b2:	4629      	mov	r1, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 f85d 	bl	8008874 <_sbrk_r>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d123      	bne.n	8008806 <_malloc_r+0x92>
 80087be:	230c      	movs	r3, #12
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f86c 	bl	80088a0 <__malloc_unlock>
 80087c8:	e7e3      	b.n	8008792 <_malloc_r+0x1e>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	1b5b      	subs	r3, r3, r5
 80087ce:	d417      	bmi.n	8008800 <_malloc_r+0x8c>
 80087d0:	2b0b      	cmp	r3, #11
 80087d2:	d903      	bls.n	80087dc <_malloc_r+0x68>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	441c      	add	r4, r3
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	e004      	b.n	80087e6 <_malloc_r+0x72>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	42a2      	cmp	r2, r4
 80087e0:	bf0c      	ite	eq
 80087e2:	600b      	streq	r3, [r1, #0]
 80087e4:	6053      	strne	r3, [r2, #4]
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f85a 	bl	80088a0 <__malloc_unlock>
 80087ec:	f104 000b 	add.w	r0, r4, #11
 80087f0:	1d23      	adds	r3, r4, #4
 80087f2:	f020 0007 	bic.w	r0, r0, #7
 80087f6:	1ac2      	subs	r2, r0, r3
 80087f8:	d0cc      	beq.n	8008794 <_malloc_r+0x20>
 80087fa:	1a1b      	subs	r3, r3, r0
 80087fc:	50a3      	str	r3, [r4, r2]
 80087fe:	e7c9      	b.n	8008794 <_malloc_r+0x20>
 8008800:	4622      	mov	r2, r4
 8008802:	6864      	ldr	r4, [r4, #4]
 8008804:	e7cc      	b.n	80087a0 <_malloc_r+0x2c>
 8008806:	1cc4      	adds	r4, r0, #3
 8008808:	f024 0403 	bic.w	r4, r4, #3
 800880c:	42a0      	cmp	r0, r4
 800880e:	d0e3      	beq.n	80087d8 <_malloc_r+0x64>
 8008810:	1a21      	subs	r1, r4, r0
 8008812:	4630      	mov	r0, r6
 8008814:	f000 f82e 	bl	8008874 <_sbrk_r>
 8008818:	3001      	adds	r0, #1
 800881a:	d1dd      	bne.n	80087d8 <_malloc_r+0x64>
 800881c:	e7cf      	b.n	80087be <_malloc_r+0x4a>
 800881e:	bf00      	nop
 8008820:	2000043c 	.word	0x2000043c
 8008824:	20000440 	.word	0x20000440

08008828 <_realloc_r>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	4607      	mov	r7, r0
 800882c:	4614      	mov	r4, r2
 800882e:	460e      	mov	r6, r1
 8008830:	b921      	cbnz	r1, 800883c <_realloc_r+0x14>
 8008832:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008836:	4611      	mov	r1, r2
 8008838:	f7ff bf9c 	b.w	8008774 <_malloc_r>
 800883c:	b922      	cbnz	r2, 8008848 <_realloc_r+0x20>
 800883e:	f7ff ff49 	bl	80086d4 <_free_r>
 8008842:	4625      	mov	r5, r4
 8008844:	4628      	mov	r0, r5
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008848:	f000 f830 	bl	80088ac <_malloc_usable_size_r>
 800884c:	42a0      	cmp	r0, r4
 800884e:	d20f      	bcs.n	8008870 <_realloc_r+0x48>
 8008850:	4621      	mov	r1, r4
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ff8e 	bl	8008774 <_malloc_r>
 8008858:	4605      	mov	r5, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	d0f2      	beq.n	8008844 <_realloc_r+0x1c>
 800885e:	4631      	mov	r1, r6
 8008860:	4622      	mov	r2, r4
 8008862:	f7ff ff0f 	bl	8008684 <memcpy>
 8008866:	4631      	mov	r1, r6
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff ff33 	bl	80086d4 <_free_r>
 800886e:	e7e9      	b.n	8008844 <_realloc_r+0x1c>
 8008870:	4635      	mov	r5, r6
 8008872:	e7e7      	b.n	8008844 <_realloc_r+0x1c>

08008874 <_sbrk_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_sbrk_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f8 fd1e 	bl	80012c0 <_sbrk>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_sbrk_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_sbrk_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20001e74 	.word	0x20001e74

08008894 <__malloc_lock>:
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <__malloc_lock+0x8>)
 8008896:	f000 b811 	b.w	80088bc <__retarget_lock_acquire_recursive>
 800889a:	bf00      	nop
 800889c:	20001e7c 	.word	0x20001e7c

080088a0 <__malloc_unlock>:
 80088a0:	4801      	ldr	r0, [pc, #4]	; (80088a8 <__malloc_unlock+0x8>)
 80088a2:	f000 b80c 	b.w	80088be <__retarget_lock_release_recursive>
 80088a6:	bf00      	nop
 80088a8:	20001e7c 	.word	0x20001e7c

080088ac <_malloc_usable_size_r>:
 80088ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b0:	1f18      	subs	r0, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbc      	itt	lt
 80088b6:	580b      	ldrlt	r3, [r1, r0]
 80088b8:	18c0      	addlt	r0, r0, r3
 80088ba:	4770      	bx	lr

080088bc <__retarget_lock_acquire_recursive>:
 80088bc:	4770      	bx	lr

080088be <__retarget_lock_release_recursive>:
 80088be:	4770      	bx	lr

080088c0 <_init>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	bf00      	nop
 80088c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c6:	bc08      	pop	{r3}
 80088c8:	469e      	mov	lr, r3
 80088ca:	4770      	bx	lr

080088cc <_fini>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr
