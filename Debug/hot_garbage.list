
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  00020420  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  00020420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  080099d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  20000420  08009df8  00020420  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020b0  08009df8  000220b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016758  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd4  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f02  00000000  00000000  0003cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177cd  00000000  00000000  00062a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d73b8  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015161f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b8  00000000  00000000  00151670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000420 	.word	0x20000420
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097b0 	.word	0x080097b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000424 	.word	0x20000424
 80001cc:	080097b0 	.word	0x080097b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <H100spindleFWD>:
{
	DEVICE_ADDRESS = 0x01, TIMEOUT = 1000, NUM_RETRIES = 3
};

int H100spindleFWD(UART_HandleTypeDef *uart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]
	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x01, TIMEOUT, NUM_RETRIES);

	//TODO see if 0x8000 works
	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x01, TIMEOUT, NUM_RETRIES);
 8000db8:	2303      	movs	r3, #3
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f248 1222 	movw	r2, #33058	; 0x8122
 8000dc8:	2101      	movs	r1, #1
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8ba 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <H100spindleOFF>:

int H100spindleOFF(UART_HandleTypeDef *uart)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af02      	add	r7, sp, #8
 8000de0:	6078      	str	r0, [r7, #4]
	//modBusWrSingle(uart, DEVICE_ADDRESS, 0x122, 0x10, TIMEOUT, NUM_RETRIES);

	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8122, 0x10, TIMEOUT, NUM_RETRIES);
 8000de2:	2303      	movs	r3, #3
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2310      	movs	r3, #16
 8000dee:	f248 1222 	movw	r2, #33058	; 0x8122
 8000df2:	2101      	movs	r1, #1
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f8a5 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <H100SetRPM>:

int H100SetRPM(UART_HandleTypeDef *uart, int RPM)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]

	/*
	 * The data field controls the % of max frequency
	 * For example, 0x9C40 = 40,000 = 40% = 160Hz for a 400Hz motor and 320Hz for a 800Hz motor
	 */
	float percentRPM = RPM / 24000.0; //max RPM = 24000
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f7ff fb7e 	bl	8000514 <__aeabi_i2d>
 8000e18:	a316      	add	r3, pc, #88	; (adr r3, 8000e74 <H100SetRPM+0x6c>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fd0d 	bl	800083c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fdef 	bl	8000a0c <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60fb      	str	r3, [r7, #12]
	uint16_t RPM_data= (int)(percentRPM * 100000); //convert to H100 format
 8000e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e36:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000e70 <H100SetRPM+0x68>
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	817b      	strh	r3, [r7, #10]

	//uint8_t testBuff[5];
	//testBuff[0] = RPM_data >> 8;..
	//CDC_Transmit_FS(testBuff, 2);

	modBusWrSingle(uart, DEVICE_ADDRESS, 0x8121, RPM_data, TIMEOUT, NUM_RETRIES);
 8000e48:	897b      	ldrh	r3, [r7, #10]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	f248 1221 	movw	r2, #33057	; 0x8121
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f872 	bl	8000f44 <modBusWrSingle>

	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	47c35000 	.word	0x47c35000
 8000e74:	00000000 	.word	0x00000000
 8000e78:	40d77000 	.word	0x40d77000

08000e7c <crc16>:

static uint8_t modbusCRC[2] =
{ 0 };

static void crc16(unsigned char *buffer, unsigned short buffer_length)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
	unsigned char crc_hi = 0xFF; /* high CRC byte initialized */
 8000e88:	23ff      	movs	r3, #255	; 0xff
 8000e8a:	73fb      	strb	r3, [r7, #15]
	unsigned char crc_lo = 0xFF; /* low CRC byte initialized */
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	73bb      	strb	r3, [r7, #14]
	unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (buffer_length--)
 8000e90:	e013      	b.n	8000eba <crc16+0x3e>
	{
		i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	4053      	eors	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	60bb      	str	r3, [r7, #8]
		crc_hi = crc_lo ^ table_crc_hi[i];
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <crc16+0x60>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	4053      	eors	r3, r2
 8000eae:	73fb      	strb	r3, [r7, #15]
		crc_lo = table_crc_lo[i];
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <crc16+0x64>)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	73bb      	strb	r3, [r7, #14]
	while (buffer_length--)
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	807a      	strh	r2, [r7, #2]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1e6      	bne.n	8000e92 <crc16+0x16>
	}
//
//	modbusCRC[1] = crc_hi;
//	modbusCRC[0] = crc_lo;

	modbusCRC[0] = crc_hi;
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <crc16+0x68>)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	7013      	strb	r3, [r2, #0]
	modbusCRC[1] = crc_lo;
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <crc16+0x68>)
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	7053      	strb	r3, [r2, #1]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000100 	.word	0x20000100
 8000ee4:	2000043c 	.word	0x2000043c

08000ee8 <modBusTransmit>:

int modBusTransmit(UART_HandleTypeDef *uart, uint8_t *data, uint32_t timeout)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09e      	sub	sp, #120	; 0x78
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	uint8_t uselessData[100];
	while (HAL_UART_Receive(uart, uselessData, 1, 1) != HAL_TIMEOUT)
 8000ef4:	bf00      	nop
 8000ef6:	f107 0114 	add.w	r1, r7, #20
 8000efa:	2301      	movs	r3, #1
 8000efc:	2201      	movs	r2, #1
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f003 fef6 	bl	8004cf0 <HAL_UART_Receive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d1f5      	bne.n	8000ef6 <modBusTransmit+0xe>
	{
		//dump serial rx buffer of any leftover/unexpected data
	}

	//VFD runs at 19200 baud or 1.2KB/s --- 8 bytes takes ~5ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <modBusTransmit+0x58>)
 8000f10:	f001 ff54 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f001 f907 	bl	8002128 <HAL_Delay>
	//blocking transmit 15ms timeout
	HAL_UART_Transmit(uart, data, 8, 15);
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f003 fe53 	bl	8004bcc <HAL_UART_Transmit>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <modBusTransmit+0x58>)
 8000f2c:	f001 ff46 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f001 f8f9 	bl	8002128 <HAL_Delay>
	return 0;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3778      	adds	r7, #120	; 0x78
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020400 	.word	0x40020400

08000f44 <modBusWrSingle>:
 * deviceAddr
 */
int modBusWrSingle(UART_HandleTypeDef *uart, uint8_t deviceAddr,
		uint16_t registerAddr, uint16_t data, uint32_t timeout,
		uint8_t maxRetries)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4603      	mov	r3, r0
 8000f54:	72fb      	strb	r3, [r7, #11]
 8000f56:	460b      	mov	r3, r1
 8000f58:	813b      	strh	r3, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	80fb      	strh	r3, [r7, #6]
	// Create a buffer to hold the Modbus message
	uint8_t message[8];

	// Set the Modbus function code for a single register write
	message[0] = deviceAddr;
 8000f5e:	7afb      	ldrb	r3, [r7, #11]
 8000f60:	763b      	strb	r3, [r7, #24]
	message[1] = 0x06;
 8000f62:	2306      	movs	r3, #6
 8000f64:	767b      	strb	r3, [r7, #25]

	// Encode the register address and data in big-endian format
	message[2] = (registerAddr >> 8) & 0xFF;
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	76bb      	strb	r3, [r7, #26]
	message[3] = registerAddr & 0xFF;
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	76fb      	strb	r3, [r7, #27]
	message[4] = (data >> 8) & 0xFF;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	773b      	strb	r3, [r7, #28]
	message[5] = data & 0xFF;
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	777b      	strb	r3, [r7, #29]

	uint16_t crc = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	847b      	strh	r3, [r7, #34]	; 0x22
	//might be broken
	//message[7] = (crc >> 8) & 0xFF;
	//message[6] = crc & 0xFF;

	// Calculate the 16-bit Modbus RTU CRC for the message
	crc16(message, 6);
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2106      	movs	r1, #6
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff73 	bl	8000e7c <crc16>
	//might be broken
	//message[7] = (crc >> 8) & 0xFF;
	//message[6] = crc & 0xFF;

	//Lut version
	message[6] = modbusCRC[0];
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <modBusWrSingle+0xdc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	77bb      	strb	r3, [r7, #30]
	message[7] = modbusCRC[1];
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <modBusWrSingle+0xdc>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	77fb      	strb	r3, [r7, #31]
//		{
//			return MODBUS_TIMEOUT;
//		}
//	} while (!success || numTries <= maxRetries);

	int messageCorrupt = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < maxRetries; ++i)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000faa:	e02e      	b.n	800100a <modBusWrSingle+0xc6>
	{
		modBusTransmit(uart, message, MODBUS_TX_TIMEOUT);
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	2232      	movs	r2, #50	; 0x32
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff ff97 	bl	8000ee8 <modBusTransmit>
		HAL_UART_Receive(uart, rxMsg, 8, MODBUS_RX_TIMEOUT);
 8000fba:	f107 0110 	add.w	r1, r7, #16
 8000fbe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f003 fe93 	bl	8004cf0 <HAL_UART_Receive>

		for (int j = 0; j < 8; ++j)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	e011      	b.n	8000ff4 <modBusWrSingle+0xb0>
		{
			if (message[j] != rxMsg[j])
 8000fd0:	f107 0218 	add.w	r2, r7, #24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	f107 0110 	add.w	r1, r7, #16
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	440b      	add	r3, r1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d002      	beq.n	8000fee <modBusWrSingle+0xaa>
			{
				//Error!
				messageCorrupt = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
				break;
 8000fec:	e005      	b.n	8000ffa <modBusWrSingle+0xb6>
		for (int j = 0; j < 8; ++j)
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	2b07      	cmp	r3, #7
 8000ff8:	ddea      	ble.n	8000fd0 <modBusWrSingle+0x8c>
			}
		}

		if (!messageCorrupt) {
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <modBusWrSingle+0xc0>
			return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e008      	b.n	8001016 <modBusWrSingle+0xd2>
	for (int i = 0; i < maxRetries; ++i)
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	3301      	adds	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
 800100a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800100e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001010:	429a      	cmp	r2, r3
 8001012:	dbcb      	blt.n	8000fac <modBusWrSingle+0x68>
		}

	}

	return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000043c 	.word	0x2000043c

08001024 <set_headboard_solenoid_state>:
	SPINDLE_DRAWBAR_REGISTER_ADDR = 0x00,
	COOLANT_REGISTER_ADDR = 0x02
};

int set_headboard_solenoid_state(UART_HandleTypeDef *uart, uint16_t registerAddr, uint8_t state)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
	modBusWrSingle(uart, DEVICE_ADDRESS, registerAddr, state, TIMEOUT, NUM_RETRIES);
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	b29b      	uxth	r3, r3
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	2103      	movs	r1, #3
 800103c:	9101      	str	r1, [sp, #4]
 800103e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001042:	9100      	str	r1, [sp, #0]
 8001044:	2102      	movs	r1, #2
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff7c 	bl	8000f44 <modBusWrSingle>
	return 0;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <unlock_Z_axis>:

int unlock_Z_axis(UART_HandleTypeDef *uart)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af02      	add	r7, sp, #8
 800105c:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 800105e:	2303      	movs	r3, #3
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	2102      	movs	r1, #2
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff68 	bl	8000f44 <modBusWrSingle>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <lock_Z_axis>:

int lock_Z_axis(UART_HandleTypeDef *uart)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b084      	sub	sp, #16
 8001082:	af02      	add	r7, sp, #8
 8001084:	6078      	str	r0, [r7, #4]
	return modBusWrSingle(uart, DEVICE_ADDRESS, Z_AXIS_SOLENOID_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 8001086:	2303      	movs	r3, #3
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	2203      	movs	r2, #3
 8001094:	2102      	movs	r1, #2
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff54 	bl	8000f44 <modBusWrSingle>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <clamp_tool>:

void clamp_tool(UART_HandleTypeDef *uart)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af02      	add	r7, sp, #8
 80010ac:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, SPINDLE_DRAWBAR_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 80010ae:	2303      	movs	r3, #3
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	2200      	movs	r2, #0
 80010bc:	2102      	movs	r1, #2
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff40 	bl	8000f44 <modBusWrSingle>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <release_tool>:

void release_tool(UART_HandleTypeDef *uart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, SPINDLE_DRAWBAR_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 80010d4:	2303      	movs	r3, #3
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2200      	movs	r2, #0
 80010e2:	2102      	movs	r1, #2
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2d 	bl	8000f44 <modBusWrSingle>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <coolant_on>:

void coolant_on(UART_HandleTypeDef *uart)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af02      	add	r7, sp, #8
 80010f8:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, COOLANT_REGISTER_ADDR, SOLENOID_ON, TIMEOUT, NUM_RETRIES);
 80010fa:	2303      	movs	r3, #3
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	2202      	movs	r2, #2
 8001108:	2102      	movs	r1, #2
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff1a 	bl	8000f44 <modBusWrSingle>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <coolant_off>:

void coolant_off(UART_HandleTypeDef *uart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
	modBusWrSingle(uart, DEVICE_ADDRESS, COOLANT_REGISTER_ADDR, SOLENOID_OFF, TIMEOUT, NUM_RETRIES);
 8001120:	2303      	movs	r3, #3
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	2202      	movs	r2, #2
 800112e:	2102      	movs	r1, #2
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff07 	bl	8000f44 <modBusWrSingle>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b0ba      	sub	sp, #232	; 0xe8
 8001144:	af00      	add	r7, sp, #0
	int status = NO_ERROR;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800114c:	f000 ff7a 	bl	8002044 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001150:	f000 f9c6 	bl	80014e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001154:	f000 fb66 	bl	8001824 <MX_GPIO_Init>
	MX_ADC2_Init();
 8001158:	f000 fa2c 	bl	80015b4 <MX_ADC2_Init>
	MX_ADC3_Init();
 800115c:	f000 fa7c 	bl	8001658 <MX_ADC3_Init>
	MX_CAN2_Init();
 8001160:	f000 facc 	bl	80016fc <MX_CAN2_Init>
	MX_SPI1_Init();
 8001164:	f000 fafe 	bl	8001764 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 8001168:	f000 fb32 	bl	80017d0 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 800116c:	f007 f8d6 	bl	800831c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t onStat[3] =
 8001170:	4ac1      	ldr	r2, [pc, #772]	; (8001478 <main+0x338>)
 8001172:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	4611      	mov	r1, r2
 800117a:	8019      	strh	r1, [r3, #0]
 800117c:	3302      	adds	r3, #2
 800117e:	0c12      	lsrs	r2, r2, #16
 8001180:	701a      	strb	r2, [r3, #0]
	{ 'M', '3', '\n' };
	uint8_t offStat[3] =
 8001182:	4abe      	ldr	r2, [pc, #760]	; (800147c <main+0x33c>)
 8001184:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	4611      	mov	r1, r2
 800118c:	8019      	strh	r1, [r3, #0]
 800118e:	3302      	adds	r3, #2
 8001190:	0c12      	lsrs	r2, r2, #16
 8001192:	701a      	strb	r2, [r3, #0]
	{ 'M', '5', '\n' };
	uint8_t ssStat[3] =
 8001194:	4aba      	ldr	r2, [pc, #744]	; (8001480 <main+0x340>)
 8001196:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4611      	mov	r1, r2
 800119e:	8019      	strh	r1, [r3, #0]
 80011a0:	3302      	adds	r3, #2
 80011a2:	0c12      	lsrs	r2, r2, #16
 80011a4:	701a      	strb	r2, [r3, #0]
	{ 'S', 'S', '\n' };
	uint8_t ack[3] =
 80011a6:	4ab7      	ldr	r2, [pc, #732]	; (8001484 <main+0x344>)
 80011a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4611      	mov	r1, r2
 80011b0:	8019      	strh	r1, [r3, #0]
 80011b2:	3302      	adds	r3, #2
 80011b4:	0c12      	lsrs	r2, r2, #16
 80011b6:	701a      	strb	r2, [r3, #0]
	{ 'A', 'C', '\n' };
	uint8_t errorMsg[3] =
 80011b8:	4ab3      	ldr	r2, [pc, #716]	; (8001488 <main+0x348>)
 80011ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	4611      	mov	r1, r2
 80011c2:	8019      	strh	r1, [r3, #0]
 80011c4:	3302      	adds	r3, #2
 80011c6:	0c12      	lsrs	r2, r2, #16
 80011c8:	701a      	strb	r2, [r3, #0]
	{ 'E', 'R', '\n' };

	char initTx[] = "11111111111111111111"; //twenty 1s
 80011ca:	4bb0      	ldr	r3, [pc, #704]	; (800148c <main+0x34c>)
 80011cc:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80011d0:	461d      	mov	r5, r3
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011da:	6020      	str	r0, [r4, #0]
 80011dc:	3404      	adds	r4, #4
 80011de:	7021      	strb	r1, [r4, #0]

	char *initTxPtr = initTx;
 80011e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	uint8_t CDCtx[50] =
 80011e8:	4aa9      	ldr	r2, [pc, #676]	; (8001490 <main+0x350>)
 80011ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f0:	c303      	stmia	r3!, {r0, r1}
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	f107 0379 	add.w	r3, r7, #121	; 0x79
 80011f8:	2229      	movs	r2, #41	; 0x29
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 fdd5 	bl	8008dac <memset>
	{ 'A', '2', '3', '4', '5', '6', '7', '\n' };

	char CDCrx[100];

	CDCrx[0] = 'a';
 8001202:	2361      	movs	r3, #97	; 0x61
 8001204:	733b      	strb	r3, [r7, #12]

	char *CDCrxPtr1 = &CDCrx[2];
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	3302      	adds	r3, #2
 800120c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	uint32_t x = -99;
 8001210:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8001214:	60bb      	str	r3, [r7, #8]
	int rpm = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	//HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
	while (CDCrx[0] != 'i')
 800121c:	e00a      	b.n	8001234 <main+0xf4>
	{
		//if this fails to build, revert usbd_cdc_if.h and .c from github
		CDC_Receive_FS((uint8_t*) CDCrx, &x);
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f007 f921 	bl	8008470 <CDC_Receive_FS>
		HAL_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f000 ff7a 	bl	8002128 <HAL_Delay>
	while (CDCrx[0] != 'i')
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	2b69      	cmp	r3, #105	; 0x69
 8001238:	d1f1      	bne.n	800121e <main+0xde>
	}
	CDC_Transmit_FS((uint8_t*) initTxPtr, 18);
 800123a:	2112      	movs	r1, #18
 800123c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001240:	f007 f92a 	bl	8008498 <CDC_Transmit_FS>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		for (int i = 0; i < 16; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800124a:	e00b      	b.n	8001264 <main+0x124>
		{
			CDCrx[i] = 'a';
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001254:	4413      	add	r3, r2
 8001256:	2261      	movs	r2, #97	; 0x61
 8001258:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 16; i++)
 800125a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001268:	2b0f      	cmp	r3, #15
 800126a:	ddef      	ble.n	800124c <main+0x10c>
		}

		CDC_Receive_FS(CDCrx, &x);
 800126c:	f107 0208 	add.w	r2, r7, #8
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f007 f8fa 	bl	8008470 <CDC_Receive_FS>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	2102      	movs	r1, #2
 8001280:	4884      	ldr	r0, [pc, #528]	; (8001494 <main+0x354>)
 8001282:	f001 fd9b 	bl	8002dbc <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8001286:	2028      	movs	r0, #40	; 0x28
 8001288:	f000 ff4e 	bl	8002128 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	4880      	ldr	r0, [pc, #512]	; (8001494 <main+0x354>)
 8001292:	f001 fd93 	bl	8002dbc <HAL_GPIO_WritePin>
		HAL_Delay(40);
 8001296:	2028      	movs	r0, #40	; 0x28
 8001298:	f000 ff46 	bl	8002128 <HAL_Delay>

		if (CDCrx[0] == 'M')
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	2b4d      	cmp	r3, #77	; 0x4d
 80012a0:	d143      	bne.n	800132a <main+0x1ea>
		{
			if (CDCrx[1] == '3')
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	2b33      	cmp	r3, #51	; 0x33
 80012a6:	d11f      	bne.n	80012e8 <main+0x1a8>
			{
				CDC_Transmit_FS(ack, 3);
 80012a8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012ac:	2103      	movs	r1, #3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 f8f2 	bl	8008498 <CDC_Transmit_FS>

				//send the cmd to turn on the spindle
				status = H100spindleFWD(&huart3);
 80012b4:	4878      	ldr	r0, [pc, #480]	; (8001498 <main+0x358>)
 80012b6:	f7ff fd7b 	bl	8000db0 <H100spindleFWD>
 80012ba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

				//turn on blue led in headstock to lock the drawbar
				//set_headboard_solenoid_state(&huart3, 0x05, 1);

				if (status != NO_ERROR)
 80012be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <main+0x194>
				{
					CDC_Transmit_FS(errorMsg, 3);
 80012c6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012ca:	2103      	movs	r1, #3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f007 f8e3 	bl	8008498 <CDC_Transmit_FS>
 80012d2:	e005      	b.n	80012e0 <main+0x1a0>
				}
				else
				{
					CDC_Transmit_FS(onStat, 3);
 80012d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d8:	2103      	movs	r1, #3
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 f8dc 	bl	8008498 <CDC_Transmit_FS>
				}

				HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f000 ff21 	bl	8002128 <HAL_Delay>
 80012e6:	e0f5      	b.n	80014d4 <main+0x394>

			}
			else if (CDCrx[1] == '5')
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	2b35      	cmp	r3, #53	; 0x35
 80012ec:	f040 80f2 	bne.w	80014d4 <main+0x394>
			{
				CDC_Transmit_FS(ack, 3);
 80012f0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80012f4:	2103      	movs	r1, #3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 f8ce 	bl	8008498 <CDC_Transmit_FS>

				if (H100spindleOFF(&huart3) != NO_ERROR)
 80012fc:	4866      	ldr	r0, [pc, #408]	; (8001498 <main+0x358>)
 80012fe:	f7ff fd6c 	bl	8000dda <H100spindleOFF>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <main+0x1d6>
				{
					CDC_Transmit_FS(errorMsg, 3);
 8001308:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800130c:	2103      	movs	r1, #3
 800130e:	4618      	mov	r0, r3
 8001310:	f007 f8c2 	bl	8008498 <CDC_Transmit_FS>
 8001314:	e005      	b.n	8001322 <main+0x1e2>
					//turn off blue led in headstock to lock the drawbar
					//set_headboard_solenoid_state(&huart3, 0x05, 0);
				}
				else
				{
					CDC_Transmit_FS(offStat, 3);
 8001316:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800131a:	2103      	movs	r1, #3
 800131c:	4618      	mov	r0, r3
 800131e:	f007 f8bb 	bl	8008498 <CDC_Transmit_FS>
				}
				HAL_Delay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f000 ff00 	bl	8002128 <HAL_Delay>
 8001328:	e0d4      	b.n	80014d4 <main+0x394>

			}

		}
		else if (CDCrx[0] == 'S')
 800132a:	7b3b      	ldrb	r3, [r7, #12]
 800132c:	2b53      	cmp	r3, #83	; 0x53
 800132e:	d11d      	bne.n	800136c <main+0x22c>

			//expected format is S024000 for 24000 rpm or S005000 for 5000rpm

			//CDC_Transmit_FS(ack, 3);

			CDCrx[7] = 'a';
 8001330:	2361      	movs	r3, #97	; 0x61
 8001332:	74fb      	strb	r3, [r7, #19]
			//rounddown ok
			rpm = atoi(CDCrxPtr1);
 8001334:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8001338:	f007 fd0a 	bl	8008d50 <atoi>
 800133c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

			//H100SetRPM(&huart3, rpm);
			//CDC_Transmit_FS(CDCrx, 8);

			//if message fails, send error message
			if (H100SetRPM(&huart3, rpm) != 0)
 8001340:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001344:	4854      	ldr	r0, [pc, #336]	; (8001498 <main+0x358>)
 8001346:	f7ff fd5f 	bl	8000e08 <H100SetRPM>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <main+0x21e>
			{
				CDC_Transmit_FS(errorMsg, 3);
 8001350:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001354:	2103      	movs	r1, #3
 8001356:	4618      	mov	r0, r3
 8001358:	f007 f89e 	bl	8008498 <CDC_Transmit_FS>
 800135c:	e0ba      	b.n	80014d4 <main+0x394>
			}
			else
			{
				CDC_Transmit_FS(ssStat, 3);
 800135e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001362:	2103      	movs	r1, #3
 8001364:	4618      	mov	r0, r3
 8001366:	f007 f897 	bl	8008498 <CDC_Transmit_FS>
 800136a:	e0b3      	b.n	80014d4 <main+0x394>
			}

		}
		else if (CDCrx[0] == 'R')
 800136c:	7b3b      	ldrb	r3, [r7, #12]
 800136e:	2b52      	cmp	r3, #82	; 0x52
 8001370:	d14b      	bne.n	800140a <main+0x2ca>
		{
			CDC_Transmit_FS(ack, 3);
 8001372:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001376:	2103      	movs	r1, #3
 8001378:	4618      	mov	r0, r3
 800137a:	f007 f88d 	bl	8008498 <CDC_Transmit_FS>
			uint16_t spindleI;
			uint16_t spindleRPM;

			//if no errrors set vars

			switch (masterRd(&huart3, &spindle0))
 800137e:	463b      	mov	r3, r7
 8001380:	4619      	mov	r1, r3
 8001382:	4845      	ldr	r0, [pc, #276]	; (8001498 <main+0x358>)
 8001384:	f000 fb6c 	bl	8001a60 <masterRd>
 8001388:	4603      	mov	r3, r0
 800138a:	2b04      	cmp	r3, #4
 800138c:	d01a      	beq.n	80013c4 <main+0x284>
 800138e:	2b04      	cmp	r3, #4
 8001390:	dc22      	bgt.n	80013d8 <main+0x298>
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <main+0x25c>
 8001396:	2b03      	cmp	r3, #3
 8001398:	d00b      	beq.n	80013b2 <main+0x272>
 800139a:	e01d      	b.n	80013d8 <main+0x298>
			{
			case 0:
//				spindleI   = spindle0.current;
//				spindleRPM = spindle0.rpm;

				spindleI = altGetI();
 800139c:	f000 fc06 	bl	8001bac <altGetI>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				spindleRPM = altGetRPM();
 80013a6:	f000 fc0d 	bl	8001bc4 <altGetRPM>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
				break;
 80013b0:	e01b      	b.n	80013ea <main+0x2aa>
			case 3:
				//HAL_TIMEOUT
				spindleI = 777;
 80013b2:	f240 3309 	movw	r3, #777	; 0x309
 80013b6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				spindleRPM = 44666;
 80013ba:	f64a 637a 	movw	r3, #44666	; 0xae7a
 80013be:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
				break;
 80013c2:	e012      	b.n	80013ea <main+0x2aa>
			case 4:
				//CRC failed
				spindleI = 888;
 80013c4:	f44f 735e 	mov.w	r3, #888	; 0x378
 80013c8:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				spindleRPM = getRxCRC();
 80013cc:	f000 fc06 	bl	8001bdc <getRxCRC>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
				break;
 80013d6:	e008      	b.n	80013ea <main+0x2aa>
			default:
				spindleI = 999;
 80013d8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80013dc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
				spindleRPM = 44444;
 80013e0:	f64a 539c 	movw	r3, #44444	; 0xad9c
 80013e4:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
				break;
 80013e8:	bf00      	nop
			}

			//11 bytes long
			sprintf(CDCtx, "R%05d,%03d\n", spindleRPM, spindleI);
 80013ea:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	; 0xe0
 80013ee:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 80013f2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80013f6:	4929      	ldr	r1, [pc, #164]	; (800149c <main+0x35c>)
 80013f8:	f007 fce0 	bl	8008dbc <siprintf>

			CDC_Transmit_FS(CDCtx, 11);
 80013fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001400:	210b      	movs	r1, #11
 8001402:	4618      	mov	r0, r3
 8001404:	f007 f848 	bl	8008498 <CDC_Transmit_FS>
 8001408:	e064      	b.n	80014d4 <main+0x394>

			//delay needed since CDC tx is non blocking and OS is weird
			//HAL_Delay(20);
			//CDC_Transmit_FS(getCheck(), 11);
		}
		else if (CDCrx[0] == 'H')
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	2b48      	cmp	r3, #72	; 0x48
 800140e:	d15c      	bne.n	80014ca <main+0x38a>
		{
			//drawbar
			if (CDCrx[1] == '0')
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	2b30      	cmp	r3, #48	; 0x30
 8001414:	d10d      	bne.n	8001432 <main+0x2f2>
			{
				if (CDCrx[2] == '1')
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	2b31      	cmp	r3, #49	; 0x31
 800141a:	d103      	bne.n	8001424 <main+0x2e4>
				{
					release_tool(&huart3);
 800141c:	481e      	ldr	r0, [pc, #120]	; (8001498 <main+0x358>)
 800141e:	f7ff fe55 	bl	80010cc <release_tool>
 8001422:	e057      	b.n	80014d4 <main+0x394>
				}
				else if (CDCrx[2] == '0')
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	2b30      	cmp	r3, #48	; 0x30
 8001428:	d154      	bne.n	80014d4 <main+0x394>
				{
					clamp_tool(&huart3);
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <main+0x358>)
 800142c:	f7ff fe3b 	bl	80010a6 <clamp_tool>
 8001430:	e050      	b.n	80014d4 <main+0x394>
				}

			}
			else if (CDCrx[1] == '2')
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	2b32      	cmp	r3, #50	; 0x32
 8001436:	d10d      	bne.n	8001454 <main+0x314>
			{
				if (CDCrx[2] == '1')
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b31      	cmp	r3, #49	; 0x31
 800143c:	d103      	bne.n	8001446 <main+0x306>
				{
					coolant_on(&huart3);
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <main+0x358>)
 8001440:	f7ff fe57 	bl	80010f2 <coolant_on>
 8001444:	e046      	b.n	80014d4 <main+0x394>
				}
				else if (CDCrx[2] == '0')
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	2b30      	cmp	r3, #48	; 0x30
 800144a:	d143      	bne.n	80014d4 <main+0x394>
				{
					coolant_off(&huart3);
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <main+0x358>)
 800144e:	f7ff fe63 	bl	8001118 <coolant_off>
 8001452:	e03f      	b.n	80014d4 <main+0x394>
				}
			}
			else if (CDCrx[1] == '3')
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	2b33      	cmp	r3, #51	; 0x33
 8001458:	d122      	bne.n	80014a0 <main+0x360>
			{
				if (CDCrx[2] == '1')
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	2b31      	cmp	r3, #49	; 0x31
 800145e:	d103      	bne.n	8001468 <main+0x328>
				{
					unlock_Z_axis(&huart3);
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <main+0x358>)
 8001462:	f7ff fdf8 	bl	8001056 <unlock_Z_axis>
 8001466:	e035      	b.n	80014d4 <main+0x394>
				}
				else if (CDCrx[2] == '0')
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	2b30      	cmp	r3, #48	; 0x30
 800146c:	d132      	bne.n	80014d4 <main+0x394>
				{
					lock_Z_axis(&huart3);
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <main+0x358>)
 8001470:	f7ff fe05 	bl	800107e <lock_Z_axis>
 8001474:	e02e      	b.n	80014d4 <main+0x394>
 8001476:	bf00      	nop
 8001478:	080097d4 	.word	0x080097d4
 800147c:	080097d8 	.word	0x080097d8
 8001480:	080097dc 	.word	0x080097dc
 8001484:	080097e0 	.word	0x080097e0
 8001488:	080097e4 	.word	0x080097e4
 800148c:	080097e8 	.word	0x080097e8
 8001490:	08009800 	.word	0x08009800
 8001494:	40020800 	.word	0x40020800
 8001498:	20000550 	.word	0x20000550
 800149c:	080097c8 	.word	0x080097c8
				}

			}
			else if (CDCrx[1] == '5')
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	2b35      	cmp	r3, #53	; 0x35
 80014a4:	d116      	bne.n	80014d4 <main+0x394>
			{
				if (CDCrx[2] == '1')
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b31      	cmp	r3, #49	; 0x31
 80014aa:	d105      	bne.n	80014b8 <main+0x378>
				{
					set_headboard_solenoid_state(&huart3, 0x05, 1);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2105      	movs	r1, #5
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <main+0x39c>)
 80014b2:	f7ff fdb7 	bl	8001024 <set_headboard_solenoid_state>
 80014b6:	e00d      	b.n	80014d4 <main+0x394>
				}
				else if (CDCrx[2] == '0')
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	2b30      	cmp	r3, #48	; 0x30
 80014bc:	d10a      	bne.n	80014d4 <main+0x394>
				{
					set_headboard_solenoid_state(&huart3, 0x05, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <main+0x39c>)
 80014c4:	f7ff fdae 	bl	8001024 <set_headboard_solenoid_state>
 80014c8:	e004      	b.n	80014d4 <main+0x394>
				}

			}

		}
		else if (CDCrx[0] == 'q')
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	2b71      	cmp	r3, #113	; 0x71
 80014ce:	d101      	bne.n	80014d4 <main+0x394>
		{
			//reboot
			HAL_NVIC_SystemReset();
 80014d0:	f001 fac7 	bl	8002a62 <HAL_NVIC_SystemReset>
		}
		//reset buffer
		CDCrx[0] = 'a';
 80014d4:	2361      	movs	r3, #97	; 0x61
 80014d6:	733b      	strb	r3, [r7, #12]
		for (int i = 0; i < 16; i++)
 80014d8:	e6b4      	b.n	8001244 <main+0x104>
 80014da:	bf00      	nop
 80014dc:	20000550 	.word	0x20000550

080014e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2230      	movs	r2, #48	; 0x30
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f007 fc5c 	bl	8008dac <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <SystemClock_Config+0xcc>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <SystemClock_Config+0xcc>)
 800150e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b25      	ldr	r3, [pc, #148]	; (80015ac <SystemClock_Config+0xcc>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <SystemClock_Config+0xd0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SystemClock_Config+0xd0>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <SystemClock_Config+0xd0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001550:	2308      	movs	r3, #8
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001554:	23a8      	movs	r3, #168	; 0xa8
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001558:	2302      	movs	r3, #2
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800155c:	2307      	movs	r3, #7
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fdc5 	bl	80040f4 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001570:	f000 f9ee 	bl	8001950 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001580:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001584:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2105      	movs	r1, #5
 8001592:	4618      	mov	r0, r3
 8001594:	f003 f826 	bl	80045e4 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800159e:	f000 f9d7 	bl	8001950 <Error_Handler>
	}
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 80015ba:	463b      	mov	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_ADC2_Init+0x98>)
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <MX_ADC2_Init+0x9c>)
 80015ca:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_ADC2_Init+0x98>)
 80015ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d2:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_ADC2_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_ADC2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_ADC2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_ADC2_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_ADC2_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_ADC2_Init+0x98>)
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <MX_ADC2_Init+0xa0>)
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fa:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_ADC2_Init+0x98>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_ADC2_Init+0x98>)
 8001602:	2201      	movs	r2, #1
 8001604:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_ADC2_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_ADC2_Init+0x98>)
 8001610:	2201      	movs	r2, #1
 8001612:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_ADC2_Init+0x98>)
 8001616:	f000 fdab 	bl	8002170 <HAL_ADC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8001620:	f000 f996 	bl	8001950 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_ADC2_Init+0x98>)
 8001636:	f000 fddf 	bl	80021f8 <HAL_ADC_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 8001640:	f000 f986 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000440 	.word	0x20000440
 8001650:	40012100 	.word	0x40012100
 8001654:	0f000001 	.word	0x0f000001

08001658 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800165e:	463b      	mov	r3, r7
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_ADC3_Init+0x98>)
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <MX_ADC3_Init+0x9c>)
 800166e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_ADC3_Init+0x98>)
 8001672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001676:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <MX_ADC3_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_ADC3_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_ADC3_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_ADC3_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_ADC3_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_ADC3_Init+0x98>)
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <MX_ADC3_Init+0xa0>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016ba:	f000 fd59 	bl	8002170 <HAL_ADC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 80016c4:	f000 f944 	bl	8001950 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80016c8:	2303      	movs	r3, #3
 80016ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC3_Init+0x98>)
 80016da:	f000 fd8d 	bl	80021f8 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 80016e4:	f000 f934 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000488 	.word	0x20000488
 80016f4:	40012200 	.word	0x40012200
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_CAN2_Init+0x60>)
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <MX_CAN2_Init+0x64>)
 8001704:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_CAN2_Init+0x60>)
 8001708:	2210      	movs	r2, #16
 800170a:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_CAN2_Init+0x60>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_CAN2_Init+0x60>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_CAN2_Init+0x60>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_CAN2_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <MX_CAN2_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_CAN2_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_CAN2_Init+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_CAN2_Init+0x60>)
 8001738:	2200      	movs	r2, #0
 800173a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_CAN2_Init+0x60>)
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_CAN2_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_CAN2_Init+0x60>)
 800174a:	f000 ff73 	bl	8002634 <HAL_CAN_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_CAN2_Init+0x5c>
	{
		Error_Handler();
 8001754:	f000 f8fc 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200004d0 	.word	0x200004d0
 8001760:	40006800 	.word	0x40006800

08001764 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI1_Init+0x64>)
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_SPI1_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI1_Init+0x64>)
 8001790:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001794:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI1_Init+0x64>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_SPI1_Init+0x64>)
 80017b6:	f003 f933 	bl	8004a20 <HAL_SPI_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80017c0:	f000 f8c6 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200004f8 	.word	0x200004f8
 80017cc:	40013000 	.word	0x40013000

080017d0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART3_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 19200;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017dc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80017e0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART3_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART3_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART3_UART_Init+0x4c>)
 8001808:	f003 f993 	bl	8004b32 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001812:	f000 f89d 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000550 	.word	0x20000550
 8001820:	40004800 	.word	0x40004800

08001824 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b40      	ldr	r3, [pc, #256]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <MX_GPIO_Init+0x11c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <MX_GPIO_Init+0x11c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a38      	ldr	r2, [pc, #224]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a31      	ldr	r2, [pc, #196]	; (8001940 <MX_GPIO_Init+0x11c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <MX_GPIO_Init+0x11c>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_GPIO_Init+0x11c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_GPIO_Init+0x11c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <MX_GPIO_Init+0x11c>)
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_GPIO_Init+0x11c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2102      	movs	r1, #2
 80018ca:	481e      	ldr	r0, [pc, #120]	; (8001944 <MX_GPIO_Init+0x120>)
 80018cc:	f001 fa76 	bl	8002dbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	481c      	ldr	r0, [pc, #112]	; (8001948 <MX_GPIO_Init+0x124>)
 80018d6:	f001 fa71 	bl	8002dbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80018da:	2200      	movs	r2, #0
 80018dc:	211f      	movs	r1, #31
 80018de:	481b      	ldr	r0, [pc, #108]	; (800194c <MX_GPIO_Init+0x128>)
 80018e0:	f001 fa6c 	bl	8002dbc <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 80018e4:	2302      	movs	r3, #2
 80018e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4812      	ldr	r0, [pc, #72]	; (8001944 <MX_GPIO_Init+0x120>)
 80018fc:	f001 f8c2 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8001900:	2302      	movs	r3, #2
 8001902:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	; (8001948 <MX_GPIO_Init+0x124>)
 8001918:	f001 f8b4 	bl	8002a84 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 800191c:	231f      	movs	r3, #31
 800191e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_GPIO_Init+0x128>)
 8001934:	f001 f8a6 	bl	8002a84 <HAL_GPIO_Init>

}
 8001938:	bf00      	nop
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40020800 	.word	0x40020800
 8001948:	40020400 	.word	0x40020400
 800194c:	40020c00 	.word	0x40020c00

08001950 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001958:	e7fe      	b.n	8001958 <Error_Handler+0x8>
	...

0800195c <sendData8>:

uint16_t packetCRC;
uint16_t rxCRC;

void sendData8(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	while(HAL_UART_Receive(huart, rx485, 1, 1) != HAL_TIMEOUT)
 8001964:	bf00      	nop
 8001966:	2301      	movs	r3, #1
 8001968:	2201      	movs	r2, #1
 800196a:	490f      	ldr	r1, [pc, #60]	; (80019a8 <sendData8+0x4c>)
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f003 f9bf 	bl	8004cf0 <HAL_UART_Receive>
 8001972:	4603      	mov	r3, r0
 8001974:	2b03      	cmp	r3, #3
 8001976:	d1f6      	bne.n	8001966 <sendData8+0xa>
		//dump serial rx buffer of any leftover/unexpected data
	}


	//VFD runs at 9600 baud or 1.2KB/s --- 8 bytes takes ~10ms
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	2102      	movs	r1, #2
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <sendData8+0x50>)
 800197e:	f001 fa1d 	bl	8002dbc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001982:	2005      	movs	r0, #5
 8001984:	f000 fbd0 	bl	8002128 <HAL_Delay>

	//blocking transmit 15ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 15);
 8001988:	230f      	movs	r3, #15
 800198a:	2208      	movs	r2, #8
 800198c:	4908      	ldr	r1, [pc, #32]	; (80019b0 <sendData8+0x54>)
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f003 f91c 	bl	8004bcc <HAL_UART_Transmit>
	//HAL_Delay(5);
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2102      	movs	r1, #2
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <sendData8+0x50>)
 800199a:	f001 fa0f 	bl	8002dbc <HAL_GPIO_WritePin>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000208 	.word	0x20000208
 80019ac:	40020400 	.word	0x40020400
 80019b0:	20000200 	.word	0x20000200

080019b4 <appendCRC8>:


void appendCRC8()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 80019ba:	2106      	movs	r1, #6
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <appendCRC8+0x38>)
 80019be:	f000 f817 	bl	80019f0 <crc_chk_value>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 80019c8:	1cbb      	adds	r3, r7, #2
 80019ca:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <appendCRC8+0x38>)
 80019d2:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b03      	ldr	r3, [pc, #12]	; (80019ec <appendCRC8+0x38>)
 80019e0:	71da      	strb	r2, [r3, #7]
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000200 	.word	0x20000200

080019f0 <crc_chk_value>:

	return checkEcho8(huart);
}

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 80019fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a00:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--)
 8001a02:	e01f      	b.n	8001a44 <crc_chk_value+0x54>
	{
		crc_value ^= *data_value++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	4053      	eors	r3, r2
 8001a12:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	e011      	b.n	8001a3e <crc_chk_value+0x4e>
		{
			if (crc_value & 0x0001)
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <crc_chk_value+0x6c>)
 8001a2c:	4053      	eors	r3, r2
 8001a2e:	81fb      	strh	r3, [r7, #14]
 8001a30:	e002      	b.n	8001a38 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	ddea      	ble.n	8001a1a <crc_chk_value+0x2a>
	while (length--)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	1e5a      	subs	r2, r3, #1
 8001a48:	70fa      	strb	r2, [r7, #3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1da      	bne.n	8001a04 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8001a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	ffffa001 	.word	0xffffa001

08001a60 <masterRd>:
{
	return wrMsg;
}

int masterRd(UART_HandleTypeDef *huart, struct SpindleData *spindle0)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

	wrMsg[0] = 0x01;
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <masterRd+0x134>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x03;
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <masterRd+0x134>)
 8001a72:	2203      	movs	r2, #3
 8001a74:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0xD0;
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <masterRd+0x134>)
 8001a78:	22d0      	movs	r2, #208	; 0xd0
 8001a7a:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8001a7c:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <masterRd+0x134>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <masterRd+0x134>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <masterRd+0x134>)
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <masterRd+0x134>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8001a94:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <masterRd+0x134>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8001a9a:	f7ff ff8b 	bl	80019b4 <appendCRC8>


	sendData8(huart);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff5c 	bl	800195c <sendData8>

	//TODO check for rx errors
	if(HAL_UART_Receive(huart, rx485, 11, 200) == HAL_TIMEOUT)
 8001aa4:	23c8      	movs	r3, #200	; 0xc8
 8001aa6:	220b      	movs	r2, #11
 8001aa8:	493b      	ldr	r1, [pc, #236]	; (8001b98 <masterRd+0x138>)
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f003 f920 	bl	8004cf0 <HAL_UART_Receive>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d101      	bne.n	8001aba <masterRd+0x5a>
	{
		return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e068      	b.n	8001b8c <masterRd+0x12c>
	}

	rxCRC = crc_chk_value(rx485, 9);
 8001aba:	2109      	movs	r1, #9
 8001abc:	4836      	ldr	r0, [pc, #216]	; (8001b98 <masterRd+0x138>)
 8001abe:	f7ff ff97 	bl	80019f0 <crc_chk_value>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <masterRd+0x13c>)
 8001ac8:	801a      	strh	r2, [r3, #0]


	//lmao its midnight and i realized endinenness is fuc ked
	packetCRC = (rx485[10] << 8) | rx485[9];
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <masterRd+0x138>)
 8001acc:	7a9b      	ldrb	r3, [r3, #10]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <masterRd+0x138>)
 8001ad4:	7a5b      	ldrb	r3, [r3, #9]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <masterRd+0x140>)
 8001ae0:	801a      	strh	r2, [r3, #0]


	if (packetCRC != rxCRC)
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <masterRd+0x140>)
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <masterRd+0x13c>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <masterRd+0x92>
	{
		//error code 4 - CRC failed
		return 4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	e04c      	b.n	8001b8c <masterRd+0x12c>

//	spindle0->current = rx485[3];
//	spindle0->current <<= 8;
//	spindle0->current |= rx485[4];

	spindle0->current = (rx485[3] << 8) | rx485[4];
 8001af2:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <masterRd+0x138>)
 8001af4:	78db      	ldrb	r3, [r3, #3]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <masterRd+0x138>)
 8001afc:	791b      	ldrb	r3, [r3, #4]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	801a      	strh	r2, [r3, #0]

	//TODO delete whichever method doesnt work
	altI = (rx485[3] << 8) | rx485[4];
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <masterRd+0x138>)
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <masterRd+0x138>)
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <masterRd+0x144>)
 8001b20:	801a      	strh	r2, [r3, #0]

	spindle0->voltage = rx485[5];
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <masterRd+0x138>)
 8001b24:	795b      	ldrb	r3, [r3, #5]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	805a      	strh	r2, [r3, #2]
	spindle0->voltage <<= 8;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	885b      	ldrh	r3, [r3, #2]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	805a      	strh	r2, [r3, #2]
	spindle0->voltage |= rx485[6];
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	885a      	ldrh	r2, [r3, #2]
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <masterRd+0x138>)
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	805a      	strh	r2, [r3, #2]

	spindle0->rpm = rx485[7];
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <masterRd+0x138>)
 8001b4c:	79db      	ldrb	r3, [r3, #7]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	809a      	strh	r2, [r3, #4]
	spindle0->rpm <<= 8;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	809a      	strh	r2, [r3, #4]
	spindle0->rpm |= rx485[8];
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	889a      	ldrh	r2, [r3, #4]
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <masterRd+0x138>)
 8001b66:	7a1b      	ldrb	r3, [r3, #8]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	809a      	strh	r2, [r3, #4]

	//TODO delete whichever method doesnt work
	altRPM = (rx485[7] << 8) | rx485[8];
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <masterRd+0x138>)
 8001b74:	79db      	ldrb	r3, [r3, #7]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <masterRd+0x138>)
 8001b7c:	7a1b      	ldrb	r3, [r3, #8]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <masterRd+0x148>)
 8001b88:	801a      	strh	r2, [r3, #0]
	return 0;
 8001b8a:	2300      	movs	r3, #0

}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000200 	.word	0x20000200
 8001b98:	20000208 	.word	0x20000208
 8001b9c:	2000059a 	.word	0x2000059a
 8001ba0:	20000598 	.word	0x20000598
 8001ba4:	20000596 	.word	0x20000596
 8001ba8:	20000594 	.word	0x20000594

08001bac <altGetI>:


uint16_t altGetI()
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
	return altI;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <altGetI+0x14>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000596 	.word	0x20000596

08001bc4 <altGetRPM>:
uint16_t altGetRPM()
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	return altRPM;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <altGetRPM+0x14>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000594 	.word	0x20000594

08001bdc <getRxCRC>:
{
	return packetCRC;
}

uint16_t getRxCRC()
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return rxCRC;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <getRxCRC+0x14>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000059a 	.word	0x2000059a

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <HAL_ADC_MspInit+0xd8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d128      	bne.n	8001cb8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a2c      	ldr	r2, [pc, #176]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481c      	ldr	r0, [pc, #112]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001cb2:	f000 fee7 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cb6:	e02c      	b.n	8001d12 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_ADC_MspInit+0xe4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d127      	bne.n	8001d12 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0xdc>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0xe0>)
 8001d0e:	f000 feb9 	bl	8002a84 <HAL_GPIO_Init>
}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40012100 	.word	0x40012100
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40012200 	.word	0x40012200

08001d2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_CAN_MspInit+0xa0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d13a      	bne.n	8001dc4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_CAN_MspInit+0xa4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001da2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001db4:	2309      	movs	r3, #9
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_CAN_MspInit+0xa8>)
 8001dc0:	f000 fe60 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40006800 	.word	0x40006800
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_SPI_MspInit+0x84>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d12b      	bne.n	8001e52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_SPI_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e32:	23f0      	movs	r3, #240	; 0xf0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e42:	2305      	movs	r3, #5
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <HAL_SPI_MspInit+0x8c>)
 8001e4e:	f000 fe19 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40013000 	.word	0x40013000
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000

08001e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_UART_MspInit+0x84>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12c      	bne.n	8001ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_UART_MspInit+0x88>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ec2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_UART_MspInit+0x8c>)
 8001ee0:	f000 fdd0 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40004800 	.word	0x40004800
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f8d0 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <OTG_FS_IRQHandler+0x10>)
 8001f52:	f001 f89c 	bl	800308e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001a78 	.word	0x20001a78

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f006 fee2 	bl	8008d58 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20020000 	.word	0x20020000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	2000059c 	.word	0x2000059c
 8001fc8:	200020b0 	.word	0x200020b0

08001fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <SystemInit+0x20>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <SystemInit+0x20>)
 8001fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002028 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800200c:	4c0b      	ldr	r4, [pc, #44]	; (800203c <LoopFillZerobss+0x26>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800201a:	f7ff ffd7 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201e:	f006 fea1 	bl	8008d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002022:	f7ff f88d 	bl	8001140 <main>
  bx  lr    
 8002026:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002028:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800202c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002030:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8002034:	080099d8 	.word	0x080099d8
  ldr r2, =_sbss
 8002038:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800203c:	200020b0 	.word	0x200020b0

08002040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC_IRQHandler>
	...

08002044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_Init+0x40>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_Init+0x40>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_Init+0x40>)
 800205a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x40>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 fcc3 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fdbc 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023c00 	.word	0x40023c00

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fcdf 	bl	8002a6a <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 fca3 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000023c 	.word	0x2000023c
 80020e0:	20000244 	.word	0x20000244
 80020e4:	20000240 	.word	0x20000240

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000244 	.word	0x20000244
 800210c:	200005a0 	.word	0x200005a0

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	200005a0 	.word	0x200005a0

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000244 	.word	0x20000244

08002170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fd58 	bl	8001c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f93a 	bl	800243c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c>
 8002210:	2302      	movs	r3, #2
 8002212:	e105      	b.n	8002420 <HAL_ADC_ConfigChannel+0x228>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d925      	bls.n	8002270 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68d9      	ldr	r1, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	4603      	mov	r3, r0
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4403      	add	r3, r0
 8002262:	3b1e      	subs	r3, #30
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	e022      	b.n	80022b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	2207      	movs	r2, #7
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4403      	add	r3, r0
 80022ac:	409a      	lsls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d824      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b05      	subs	r3, #5
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
 8002306:	e04c      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d824      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b23      	subs	r3, #35	; 0x23
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43da      	mvns	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	400a      	ands	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b23      	subs	r3, #35	; 0x23
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e023      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b41      	subs	r3, #65	; 0x41
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	400a      	ands	r2, r1
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b41      	subs	r3, #65	; 0x41
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_ADC_ConfigChannel+0x234>)
 80023a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_ADC_ConfigChannel+0x238>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_ADC_ConfigChannel+0x238>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d123      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d003      	beq.n	80023de <HAL_ADC_ConfigChannel+0x1e6>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b11      	cmp	r3, #17
 80023dc:	d11b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d111      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_ADC_ConfigChannel+0x23c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_ADC_ConfigChannel+0x240>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9a      	lsrs	r2, r3, #18
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002408:	e002      	b.n	8002410 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40012300 	.word	0x40012300
 8002430:	40012000 	.word	0x40012000
 8002434:	2000023c 	.word	0x2000023c
 8002438:	431bde83 	.word	0x431bde83

0800243c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <ADC_Init+0x1f0>)
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	4a58      	ldr	r2, [pc, #352]	; (8002630 <ADC_Init+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00f      	b.n	800253a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0202 	bic.w	r2, r2, #2
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	035a      	lsls	r2, r3, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	051a      	lsls	r2, r3, #20
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f2:	025a      	lsls	r2, r3, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	029a      	lsls	r2, r3, #10
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40012300 	.word	0x40012300
 8002630:	0f000001 	.word	0x0f000001

08002634 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0ed      	b.n	8002822 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fb6a 	bl	8001d2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0202 	bic.w	r2, r2, #2
 8002666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7ff fd52 	bl	8002110 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800266e:	e012      	b.n	8002696 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002670:	f7ff fd4e 	bl	8002110 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b0a      	cmp	r3, #10
 800267c:	d90b      	bls.n	8002696 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0c5      	b.n	8002822 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e5      	bne.n	8002670 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026b4:	f7ff fd2c 	bl	8002110 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ba:	e012      	b.n	80026e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026bc:	f7ff fd28 	bl	8002110 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d90b      	bls.n	80026e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2205      	movs	r2, #5
 80026da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e09f      	b.n	8002822 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0e5      	beq.n	80026bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7e1b      	ldrb	r3, [r3, #24]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e007      	b.n	800271a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7e5b      	ldrb	r3, [r3, #25]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e007      	b.n	8002744 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	7e9b      	ldrb	r3, [r3, #26]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d108      	bne.n	800275e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0220 	orr.w	r2, r2, #32
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e007      	b.n	800276e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0220 	bic.w	r2, r2, #32
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7edb      	ldrb	r3, [r3, #27]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d108      	bne.n	8002788 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0210 	bic.w	r2, r2, #16
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e007      	b.n	8002798 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0210 	orr.w	r2, r2, #16
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7f1b      	ldrb	r3, [r3, #28]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0208 	bic.w	r2, r2, #8
 80027c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7f5b      	ldrb	r3, [r3, #29]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d108      	bne.n	80027dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0204 	orr.w	r2, r2, #4
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e007      	b.n	80027ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	ea42 0103 	orr.w	r1, r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	bf00      	nop
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	db0b      	blt.n	80028ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <__NVIC_EnableIRQ+0x38>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2001      	movs	r0, #1
 80028b2:	fa00 f202 	lsl.w	r2, r0, r2
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800298c:	f3bf 8f4f 	dsb	sy
}
 8002990:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <__NVIC_SystemReset+0x24>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800299a:	4904      	ldr	r1, [pc, #16]	; (80029ac <__NVIC_SystemReset+0x24>)
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_SystemReset+0x28>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80029a2:	f3bf 8f4f 	dsb	sy
}
 80029a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <__NVIC_SystemReset+0x20>
 80029ac:	e000ed00 	.word	0xe000ed00
 80029b0:	05fa0004 	.word	0x05fa0004

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff78 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff13 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff28 	bl	8002874 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff78 	bl	8002920 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff47 	bl	80028cc <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff1b 	bl	8002890 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002a66:	f7ff ff8f 	bl	8002988 <__NVIC_SystemReset>

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff9e 	bl	80029b4 <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e16b      	b.n	8002d78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 815a 	bne.w	8002d72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80b4 	beq.w	8002d72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a5b      	ldr	r2, [pc, #364]	; (8002d94 <HAL_GPIO_Init+0x310>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_GPIO_Init+0x314>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02b      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x318>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d025      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_GPIO_Init+0x31c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01f      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d019      	beq.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_GPIO_Init+0x216>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00d      	beq.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_GPIO_Init+0x32c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <HAL_GPIO_Init+0x20e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_GPIO_Init+0x20a>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e00e      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	e00c      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002caa:	2300      	movs	r3, #0
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f002 0203 	and.w	r2, r2, #3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x310>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cee:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f ae90 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40021400 	.word	0x40021400
 8002db0:	40021800 	.word	0x40021800
 8002db4:	40021c00 	.word	0x40021c00
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df0:	b08f      	sub	sp, #60	; 0x3c
 8002df2:	af0a      	add	r7, sp, #40	; 0x28
 8002df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e10f      	b.n	8003020 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 fc84 	bl	8008728 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2203      	movs	r2, #3
 8002e24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fbcb 	bl	80055da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	687e      	ldr	r6, [r7, #4]
 8002e4c:	466d      	mov	r5, sp
 8002e4e:	f106 0410 	add.w	r4, r6, #16
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e62:	1d33      	adds	r3, r6, #4
 8002e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e66:	6838      	ldr	r0, [r7, #0]
 8002e68:	f002 faa2 	bl	80053b0 <USB_CoreInit>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0d0      	b.n	8003020 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fbb9 	bl	80055fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e04a      	b.n	8002f26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	333d      	adds	r3, #61	; 0x3d
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	333c      	adds	r3, #60	; 0x3c
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	b298      	uxth	r0, r3
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3342      	adds	r3, #66	; 0x42
 8002ecc:	4602      	mov	r2, r0
 8002ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3344      	adds	r3, #68	; 0x44
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3348      	adds	r3, #72	; 0x48
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3350      	adds	r3, #80	; 0x50
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	3301      	adds	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3af      	bcc.n	8002e90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e044      	b.n	8002fc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	7bfa      	ldrb	r2, [r7, #15]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d3b5      	bcc.n	8002f36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	687e      	ldr	r6, [r7, #4]
 8002fd2:	466d      	mov	r5, sp
 8002fd4:	f106 0410 	add.w	r4, r6, #16
 8002fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe8:	1d33      	adds	r3, r6, #4
 8002fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fec:	6838      	ldr	r0, [r7, #0]
 8002fee:	f002 fb2f 	bl	8005650 <USB_DevInit>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00d      	b.n	8003020 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f003 fb77 	bl	800670c <USB_DevDisconnect>

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003028 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_PCD_Start+0x1c>
 8003040:	2302      	movs	r3, #2
 8003042:	e020      	b.n	8003086 <HAL_PCD_Start+0x5e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	2b01      	cmp	r3, #1
 8003052:	d109      	bne.n	8003068 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003058:	2b01      	cmp	r3, #1
 800305a:	d005      	beq.n	8003068 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f002 faa3 	bl	80055b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f003 fb27 	bl	80066ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800308e:	b590      	push	{r4, r7, lr}
 8003090:	b08d      	sub	sp, #52	; 0x34
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 fbe5 	bl	8006874 <USB_GetMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 839d 	bne.w	80037ec <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 fb49 	bl	800674e <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8393 	beq.w	80037ea <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f003 fb40 	bl	800674e <USB_ReadInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d107      	bne.n	80030e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f002 0202 	and.w	r2, r2, #2
 80030e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 fb2e 	bl	800674e <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d161      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0210 	bic.w	r2, r2, #16
 800310a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f003 020f 	and.w	r2, r3, #15
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	0c5b      	lsrs	r3, r3, #17
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	2b02      	cmp	r3, #2
 8003136:	d124      	bne.n	8003182 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d035      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800314e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	6a38      	ldr	r0, [r7, #32]
 8003158:	f003 f994 	bl	8006484 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003168:	441a      	add	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317a:	441a      	add	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	619a      	str	r2, [r3, #24]
 8003180:	e016      	b.n	80031b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	0c5b      	lsrs	r3, r3, #17
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	2b06      	cmp	r3, #6
 800318c:	d110      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003194:	2208      	movs	r2, #8
 8003196:	4619      	mov	r1, r3
 8003198:	6a38      	ldr	r0, [r7, #32]
 800319a:	f003 f973 	bl	8006484 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031aa:	441a      	add	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0210 	orr.w	r2, r2, #16
 80031be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fac2 	bl	800674e <USB_ReadInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031d4:	d16e      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fac8 	bl	8006774 <USB_ReadDevAllOutEpInterrupt>
 80031e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031e6:	e062      	b.n	80032ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d057      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 faed 	bl	80067dc <USB_ReadDevOutEPInterrupt>
 8003202:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321a:	461a      	mov	r2, r3
 800321c:	2301      	movs	r3, #1
 800321e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fdb0 	bl	8003d88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2308      	movs	r3, #8
 8003242:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 feaa 	bl	8003fa0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2310      	movs	r3, #16
 8003266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2320      	movs	r3, #32
 8003282:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	461a      	mov	r2, r3
 800329c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d199      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 fa48 	bl	800674e <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032c8:	f040 80c0 	bne.w	800344c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fa69 	bl	80067a8 <USB_ReadDevAllInEpInterrupt>
 80032d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032dc:	e0b2      	b.n	8003444 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a7 	beq.w	8003438 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 fa8f 	bl	8006818 <USB_ReadDevInEPInterrupt>
 80032fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d057      	beq.n	80033b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	2201      	movs	r2, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	69f9      	ldr	r1, [r7, #28]
 8003322:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003326:	4013      	ands	r3, r2
 8003328:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	461a      	mov	r2, r3
 8003338:	2301      	movs	r3, #1
 800333a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d132      	bne.n	80033aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	3348      	adds	r3, #72	; 0x48
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4403      	add	r3, r0
 8003364:	3344      	adds	r3, #68	; 0x44
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4419      	add	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4403      	add	r3, r0
 8003378:	3348      	adds	r3, #72	; 0x48
 800337a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <HAL_PCD_IRQHandler+0x31c>
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3350      	adds	r3, #80	; 0x50
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033a2:	461a      	mov	r2, r3
 80033a4:	2101      	movs	r1, #1
 80033a6:	f003 fa97 	bl	80068d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f005 fa3a 	bl	800882a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	461a      	mov	r2, r3
 80033ce:	2308      	movs	r3, #8
 80033d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	461a      	mov	r2, r3
 80033ea:	2310      	movs	r3, #16
 80033ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	461a      	mov	r2, r3
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	2302      	movs	r3, #2
 8003424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fc1b 	bl	8003c6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	3301      	adds	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2b00      	cmp	r3, #0
 8003448:	f47f af49 	bne.w	80032de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 f97c 	bl	800674e <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003460:	d122      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800347c:	2b01      	cmp	r3, #1
 800347e:	d108      	bne.n	8003492 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003488:	2100      	movs	r1, #0
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fe26 	bl	80040dc <HAL_PCDEx_LPM_Callback>
 8003490:	e002      	b.n	8003498 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f005 fa40 	bl	8008918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 f94e 	bl	800674e <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034bc:	d112      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f005 f9fc 	bl	80088cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034e2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 f930 	bl	800674e <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	f040 80c7 	bne.w	800368a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2110      	movs	r1, #16
 8003516:	4618      	mov	r0, r3
 8003518:	f002 f9fe 	bl	8005918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003520:	e056      	b.n	80035d0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	461a      	mov	r2, r3
 8003530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003534:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	440a      	add	r2, r1
 800354c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003550:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003554:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003566:	0151      	lsls	r1, r2, #5
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	440a      	add	r2, r1
 800356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003574:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	461a      	mov	r2, r3
 8003584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003588:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	3301      	adds	r3, #1
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3a3      	bcc.n	8003522 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003606:	f043 030b 	orr.w	r3, r3, #11
 800360a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361c:	f043 030b 	orr.w	r3, r3, #11
 8003620:	6453      	str	r3, [r2, #68]	; 0x44
 8003622:	e015      	b.n	8003650 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003636:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800363a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364a:	f043 030b 	orr.w	r3, r3, #11
 800364e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003662:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003674:	461a      	mov	r2, r3
 8003676:	f003 f92f 	bl	80068d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 f85d 	bl	800674e <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d124      	bne.n	80036ea <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f003 f8f3 	bl	8006890 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 f993 	bl	80059da <USB_GetDevSpeed>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681c      	ldr	r4, [r3, #0]
 80036c0:	f001 f97a 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80036c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	4620      	mov	r0, r4
 80036d0:	f001 fed0 	bl	8005474 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f005 f8d0 	bl	800887a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 f82d 	bl	800674e <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d10a      	bne.n	8003714 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f005 f8ad 	bl	800885e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f002 0208 	and.w	r2, r2, #8
 8003712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 f818 	bl	800674e <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003728:	d10f      	bne.n	800374a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f005 f90f 	bl	8008958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fffd 	bl	800674e <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375e:	d10f      	bne.n	8003780 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f005 f8e2 	bl	8008934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800377e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f002 ffe2 	bl	800674e <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003794:	d10a      	bne.n	80037ac <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 f8f0 	bl	800897c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 ffcc 	bl	800674e <USB_ReadInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d115      	bne.n	80037ec <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f005 f8e0 	bl	8008998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	e000      	b.n	80037ec <HAL_PCD_IRQHandler+0x75e>
      return;
 80037ea:	bf00      	nop
    }
  }
}
 80037ec:	3734      	adds	r7, #52	; 0x34
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}

080037f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_SetAddress+0x1a>
 8003808:	2302      	movs	r3, #2
 800380a:	e013      	b.n	8003834 <HAL_PCD_SetAddress+0x42>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f002 ff2a 	bl	800667e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	70fb      	strb	r3, [r7, #3]
 800384e:	460b      	mov	r3, r1
 8003850:	803b      	strh	r3, [r7, #0]
 8003852:	4613      	mov	r3, r2
 8003854:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800385a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da0f      	bge.n	8003882 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	705a      	strb	r2, [r3, #1]
 8003880:	e00f      	b.n	80038a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038ae:	883a      	ldrh	r2, [r7, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	78ba      	ldrb	r2, [r7, #2]
 80038b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038cc:	78bb      	ldrb	r3, [r7, #2]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d102      	bne.n	80038d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_PCD_EP_Open+0xaa>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e00e      	b.n	8003904 <HAL_PCD_EP_Open+0xc8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f002 f895 	bl	8005a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003902:	7afb      	ldrb	r3, [r7, #11]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003918:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391c:	2b00      	cmp	r3, #0
 800391e:	da0f      	bge.n	8003940 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 020f 	and.w	r2, r3, #15
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3338      	adds	r3, #56	; 0x38
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	705a      	strb	r2, [r3, #1]
 800393e:	e00f      	b.n	8003960 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_PCD_EP_Close+0x6e>
 8003976:	2302      	movs	r3, #2
 8003978:	e00e      	b.n	8003998 <HAL_PCD_EP_Close+0x8c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	4618      	mov	r0, r3
 800398a:	f002 f8d3 	bl	8005b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	460b      	mov	r3, r1
 80039ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b0:	7afb      	ldrb	r3, [r7, #11]
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	3304      	adds	r3, #4
 80039c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e2:	7afb      	ldrb	r3, [r7, #11]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d102      	bne.n	80039fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	f002 fbae 	bl	8006174 <USB_EP0StartXfer>
 8003a18:	e008      	b.n	8003a2c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	f002 f960 	bl	8005cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 020f 	and.w	r2, r3, #15
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a58:	681b      	ldr	r3, [r3, #0]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	460b      	mov	r3, r1
 8003a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a76:	7afb      	ldrb	r3, [r7, #11]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	3338      	adds	r3, #56	; 0x38
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	f002 fb4c 	bl	8006174 <USB_EP0StartXfer>
 8003adc:	e008      	b.n	8003af0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	f002 f8fe 	bl	8005cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d901      	bls.n	8003b18 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e050      	b.n	8003bba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da0f      	bge.n	8003b40 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 020f 	and.w	r2, r3, #15
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	3338      	adds	r3, #56	; 0x38
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	3304      	adds	r3, #4
 8003b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	705a      	strb	r2, [r3, #1]
 8003b3e:	e00d      	b.n	8003b5c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	3304      	adds	r3, #4
 8003b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_PCD_EP_SetStall+0x82>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e01e      	b.n	8003bba <HAL_PCD_EP_SetStall+0xc0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fca3 	bl	80064d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b2d9      	uxtb	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003baa:	461a      	mov	r2, r3
 8003bac:	f002 fe94 	bl	80068d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	f003 020f 	and.w	r2, r3, #15
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d901      	bls.n	8003be0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e042      	b.n	8003c66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	da0f      	bge.n	8003c08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	f003 020f 	and.w	r2, r3, #15
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	3338      	adds	r3, #56	; 0x38
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	705a      	strb	r2, [r3, #1]
 8003c06:	e00f      	b.n	8003c28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_PCD_EP_ClrStall+0x86>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e00e      	b.n	8003c66 <HAL_PCD_EP_ClrStall+0xa4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f002 fcab 	bl	80065b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b08a      	sub	sp, #40	; 0x28
 8003c72:	af02      	add	r7, sp, #8
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d901      	bls.n	8003ca6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06c      	b.n	8003d80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d902      	bls.n	8003cc2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3303      	adds	r3, #3
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cca:	e02b      	b.n	8003d24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d902      	bls.n	8003ce8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3303      	adds	r3, #3
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	68d9      	ldr	r1, [r3, #12]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f002 fb87 	bl	800641a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	441a      	add	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	441a      	add	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d809      	bhi.n	8003d4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d203      	bcs.n	8003d4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1be      	bne.n	8003ccc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d811      	bhi.n	8003d7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	333c      	adds	r3, #60	; 0x3c
 8003da0:	3304      	adds	r3, #4
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f040 80a0 	bne.w	8003f00 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	f240 80dd 	bls.w	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80d7 	beq.w	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	6093      	str	r3, [r2, #8]
 8003df4:	e0cb      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2320      	movs	r3, #32
 8003e10:	6093      	str	r3, [r2, #8]
 8003e12:	e0bc      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 80b7 	bne.w	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a5d      	ldr	r2, [pc, #372]	; (8003f98 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d90f      	bls.n	8003e48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e44:	6093      	str	r3, [r2, #8]
 8003e46:	e0a2      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	0159      	lsls	r1, r3, #5
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	440b      	add	r3, r1
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4403      	add	r3, r0
 8003e7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4403      	add	r3, r0
 8003ea6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4419      	add	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4403      	add	r3, r0
 8003ebc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ec0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d114      	bne.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eea:	461a      	mov	r2, r3
 8003eec:	2101      	movs	r1, #1
 8003eee:	f002 fcf3 	bl	80068d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f004 fc7b 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
 8003efe:	e046      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <PCD_EP_OutXfrComplete_int+0x214>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d124      	bne.n	8003f52 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f24:	6093      	str	r3, [r2, #8]
 8003f26:	e032      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2320      	movs	r3, #32
 8003f42:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	4619      	mov	r1, r3
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f004 fc52 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
 8003f50:	e01d      	b.n	8003f8e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d114      	bne.n	8003f82 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f002 fcab 	bl	80068d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f004 fc33 	bl	80087f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	4f54300a 	.word	0x4f54300a
 8003f9c:	4f54310a 	.word	0x4f54310a

08003fa0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	333c      	adds	r3, #60	; 0x3c
 8003fb8:	3304      	adds	r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a15      	ldr	r2, [pc, #84]	; (8004028 <PCD_EP_OutSetupPacket_int+0x88>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d90e      	bls.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f004 fbeb 	bl	80087d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d90c      	bls.n	800401c <PCD_EP_OutSetupPacket_int+0x7c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d108      	bne.n	800401c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004014:	461a      	mov	r2, r3
 8004016:	2101      	movs	r1, #1
 8004018:	f002 fc5e 	bl	80068d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	4f54300a 	.word	0x4f54300a

0800402c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
 8004038:	4613      	mov	r3, r2
 800403a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800404a:	883b      	ldrh	r3, [r7, #0]
 800404c:	0419      	lsls	r1, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	430a      	orrs	r2, r1
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
 8004058:	e028      	b.n	80040ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4413      	add	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e00d      	b.n	800408a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	3340      	adds	r3, #64	; 0x40
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	0c1b      	lsrs	r3, r3, #16
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4413      	add	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	3301      	adds	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	7bfa      	ldrb	r2, [r7, #15]
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	3b01      	subs	r3, #1
 8004090:	429a      	cmp	r2, r3
 8004092:	d3ec      	bcc.n	800406e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004094:	883b      	ldrh	r3, [r7, #0]
 8004096:	0418      	lsls	r0, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	3b01      	subs	r3, #1
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	4302      	orrs	r2, r0
 80040a4:	3340      	adds	r3, #64	; 0x40
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e267      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d075      	beq.n	80041fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004112:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00c      	beq.n	8004138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004126:	2b08      	cmp	r3, #8
 8004128:	d112      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004136:	d10b      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b7e      	ldr	r3, [pc, #504]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05b      	beq.n	80041fc <HAL_RCC_OscConfig+0x108>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d157      	bne.n	80041fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e242      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d106      	bne.n	8004168 <HAL_RCC_OscConfig+0x74>
 800415a:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a75      	ldr	r2, [pc, #468]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e01d      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x98>
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6f      	ldr	r2, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b6d      	ldr	r3, [pc, #436]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6c      	ldr	r2, [pc, #432]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 800418c:	4b69      	ldr	r3, [pc, #420]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a68      	ldr	r2, [pc, #416]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fd ffb0 	bl	8002110 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd ffac 	bl	8002110 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e207      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0xc0>
 80041d2:	e014      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd ff9c 	bl	8002110 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fd ff98 	bl	8002110 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1f3      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	4b51      	ldr	r3, [pc, #324]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0xe8>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d11c      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b44      	ldr	r3, [pc, #272]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1c7      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4937      	ldr	r1, [pc, #220]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	e03a      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x244>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fd ff51 	bl	8002110 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004272:	f7fd ff4d 	bl	8002110 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e1a8      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4925      	ldr	r1, [pc, #148]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	e015      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x244>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd ff30 	bl	8002110 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fd ff2c 	bl	8002110 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e187      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d036      	beq.n	800434c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x248>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd ff10 	bl	8002110 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fd ff0c 	bl	8002110 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e167      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x200>
 8004312:	e01b      	b.n	800434c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_OscConfig+0x248>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fd fef9 	bl	8002110 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	e00e      	b.n	8004340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004322:	f7fd fef5 	bl	8002110 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d907      	bls.n	8004340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e150      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004334:	40023800 	.word	0x40023800
 8004338:	42470000 	.word	0x42470000
 800433c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ea      	bne.n	8004322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8097 	beq.w	8004488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b7a      	ldr	r3, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b77      	ldr	r3, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004396:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a2:	f7fd feb5 	bl	8002110 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fd feb1 	bl	8002110 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e10c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x2ea>
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a63      	ldr	r2, [pc, #396]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e01c      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x30c>
 80043e6:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a5b      	ldr	r2, [pc, #364]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 8004400:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a57      	ldr	r2, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
 800440c:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a54      	ldr	r2, [pc, #336]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0304 	bic.w	r3, r3, #4
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fd fe76 	bl	8002110 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fd fe72 	bl	8002110 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0cb      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ee      	beq.n	8004428 <HAL_RCC_OscConfig+0x334>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fd fe60 	bl	8002110 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd fe5c 	bl	8002110 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0b5      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ee      	bne.n	8004454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b39      	ldr	r3, [pc, #228]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a1 	beq.w	80045d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004492:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d05c      	beq.n	8004558 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d141      	bne.n	800452a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x478>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd fe30 	bl	8002110 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fe2c 	bl	8002110 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e087      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	491b      	ldr	r1, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x478>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fd fe05 	bl	8002110 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7fd fe01 	bl	8002110 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e05c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x416>
 8004528:	e054      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_OscConfig+0x478>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fd fdee 	bl	8002110 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004538:	f7fd fdea 	bl	8002110 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e045      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x444>
 8004556:	e03d      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e038      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000
 800456c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x4ec>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d028      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d121      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d11a      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800

080045e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0cc      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d90c      	bls.n	8004620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b8      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800465a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465c:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	494d      	ldr	r1, [pc, #308]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d044      	beq.n	8004704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d119      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e067      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4934      	ldr	r1, [pc, #208]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fd fd1c 	bl	8002110 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fd fd18 	bl	8002110 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d20c      	bcs.n	800472c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e032      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4916      	ldr	r1, [pc, #88]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800476a:	f000 f821 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490a      	ldr	r1, [pc, #40]	; (80047a4 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fc7c 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023c00 	.word	0x40023c00
 80047a0:	40023800 	.word	0x40023800
 80047a4:	0800987c 	.word	0x0800987c
 80047a8:	2000023c 	.word	0x2000023c
 80047ac:	20000240 	.word	0x20000240

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b094      	sub	sp, #80	; 0x50
 80047b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	2300      	movs	r3, #0
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	2300      	movs	r3, #0
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c8:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d00d      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x40>
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	f200 80e1 	bhi.w	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x34>
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d003      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x3a>
 80047e2:	e0db      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e4:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047e8:	e0db      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ea:	4b72      	ldr	r3, [pc, #456]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ee:	e0d8      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f0:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fa:	4b6d      	ldr	r3, [pc, #436]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004810:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
 800481e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	0159      	lsls	r1, r3, #5
 8004830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004834:	0150      	lsls	r0, r2, #5
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4621      	mov	r1, r4
 800483c:	1a51      	subs	r1, r2, r1
 800483e:	6139      	str	r1, [r7, #16]
 8004840:	4629      	mov	r1, r5
 8004842:	eb63 0301 	sbc.w	r3, r3, r1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004854:	4659      	mov	r1, fp
 8004856:	018b      	lsls	r3, r1, #6
 8004858:	4651      	mov	r1, sl
 800485a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485e:	4651      	mov	r1, sl
 8004860:	018a      	lsls	r2, r1, #6
 8004862:	4651      	mov	r1, sl
 8004864:	ebb2 0801 	subs.w	r8, r2, r1
 8004868:	4659      	mov	r1, fp
 800486a:	eb63 0901 	sbc.w	r9, r3, r1
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004882:	4690      	mov	r8, r2
 8004884:	4699      	mov	r9, r3
 8004886:	4623      	mov	r3, r4
 8004888:	eb18 0303 	adds.w	r3, r8, r3
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	462b      	mov	r3, r5
 8004890:	eb49 0303 	adc.w	r3, r9, r3
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048a2:	4629      	mov	r1, r5
 80048a4:	028b      	lsls	r3, r1, #10
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ac:	4621      	mov	r1, r4
 80048ae:	028a      	lsls	r2, r1, #10
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048c0:	f7fc f8f4 	bl	8000aac <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	e058      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	4611      	mov	r1, r2
 80048da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	f04f 0000 	mov.w	r0, #0
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fa:	0150      	lsls	r0, r2, #5
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4641      	mov	r1, r8
 8004902:	ebb2 0a01 	subs.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb63 0b01 	sbc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800491c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004920:	ebb2 040a 	subs.w	r4, r2, sl
 8004924:	eb63 050b 	sbc.w	r5, r3, fp
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	464b      	mov	r3, r9
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004956:	4629      	mov	r1, r5
 8004958:	028b      	lsls	r3, r1, #10
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004960:	4621      	mov	r1, r4
 8004962:	028a      	lsls	r2, r1, #10
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	61fa      	str	r2, [r7, #28]
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	f7fc f89a 	bl	8000aac <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3750      	adds	r7, #80	; 0x50
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <HAL_RCC_GetHCLKFreq+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000023c 	.word	0x2000023c

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff0 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	0800988c 	.word	0x0800988c

080049f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049fc:	f7ff ffdc 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0b5b      	lsrs	r3, r3, #13
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	0800988c 	.word	0x0800988c

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07b      	b.n	8004b2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd f9b0 	bl	8001dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	0c1b      	lsrs	r3, r3, #16
 8004af6:	f003 0104 	and.w	r1, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0210 	and.w	r2, r3, #16
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e03f      	b.n	8004bc4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fd f985 	bl	8001e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2224      	movs	r2, #36	; 0x24
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b74:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9a6 	bl	8004ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b9a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004baa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d17c      	bne.n	8004ce6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_UART_Transmit+0x2c>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e075      	b.n	8004ce8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Transmit+0x3e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e06e      	b.n	8004ce8 <HAL_UART_Transmit+0x11c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2221      	movs	r2, #33	; 0x21
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c20:	f7fd fa76 	bl	8002110 <HAL_GetTick>
 8004c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d108      	bne.n	8004c4e <HAL_UART_Transmit+0x82>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e003      	b.n	8004c56 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c5e:	e02a      	b.n	8004cb6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f8e2 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e036      	b.n	8004ce8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c8e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	3302      	adds	r3, #2
 8004c94:	61bb      	str	r3, [r7, #24]
 8004c96:	e007      	b.n	8004ca8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1cf      	bne.n	8004c60 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2140      	movs	r1, #64	; 0x40
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f8b2 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e006      	b.n	8004ce8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e000      	b.n	8004ce8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ce6:	2302      	movs	r3, #2
  }
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	f040 808c 	bne.w	8004e2a <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_UART_Receive+0x2e>
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e084      	b.n	8004e2c <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Receive+0x40>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e07d      	b.n	8004e2c <HAL_UART_Receive+0x13c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2222      	movs	r2, #34	; 0x22
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d4c:	f7fd f9e0 	bl	8002110 <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d108      	bne.n	8004d7a <HAL_UART_Receive+0x8a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e003      	b.n	8004d82 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d8a:	e043      	b.n	8004e14 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2120      	movs	r1, #32
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f84c 	bl	8004e34 <UART_WaitOnFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e042      	b.n	8004e2c <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10c      	bne.n	8004dc6 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e01f      	b.n	8004e06 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d007      	beq.n	8004de0 <HAL_UART_Receive+0xf0>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_UART_Receive+0xfe>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e008      	b.n	8004e00 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1b6      	bne.n	8004d8c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e44:	e02c      	b.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d028      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e54:	f7fd f95c 	bl	8002110 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d21d      	bcs.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695a      	ldr	r2, [r3, #20]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0201 	bic.w	r2, r2, #1
 8004e82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e00f      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d0c3      	beq.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b0c0      	sub	sp, #256	; 0x100
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	ea40 0301 	orr.w	r3, r0, r1
 8004ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f20:	f021 010c 	bic.w	r1, r1, #12
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	6999      	ldr	r1, [r3, #24]
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	ea40 0301 	orr.w	r3, r0, r1
 8004f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b8f      	ldr	r3, [pc, #572]	; (8005194 <UART_SetConfig+0x2cc>)
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d005      	beq.n	8004f68 <UART_SetConfig+0xa0>
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <UART_SetConfig+0x2d0>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d104      	bne.n	8004f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7ff fd46 	bl	80049f8 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f70:	e003      	b.n	8004f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7ff fd2d 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8004f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	f040 810c 	bne.w	80051a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004faa:	4621      	mov	r1, r4
 8004fac:	eb12 0801 	adds.w	r8, r2, r1
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	eb43 0901 	adc.w	r9, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb18 0303 	adds.w	r3, r8, r3
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fd8:	462b      	mov	r3, r5
 8004fda:	eb49 0303 	adc.w	r3, r9, r3
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	18db      	adds	r3, r3, r3
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	657b      	str	r3, [r7, #84]	; 0x54
 8005004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800500c:	f7fb fd4e 	bl	8000aac <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b61      	ldr	r3, [pc, #388]	; (800519c <UART_SetConfig+0x2d4>)
 8005016:	fba3 2302 	umull	r2, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	011c      	lsls	r4, r3, #4
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800502c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	64b9      	str	r1, [r7, #72]	; 0x48
 8005038:	415b      	adcs	r3, r3
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005040:	4641      	mov	r1, r8
 8005042:	eb12 0a01 	adds.w	sl, r2, r1
 8005046:	4649      	mov	r1, r9
 8005048:	eb43 0b01 	adc.w	fp, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800505c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005060:	4692      	mov	sl, r2
 8005062:	469b      	mov	fp, r3
 8005064:	4643      	mov	r3, r8
 8005066:	eb1a 0303 	adds.w	r3, sl, r3
 800506a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800506e:	464b      	mov	r3, r9
 8005070:	eb4b 0303 	adc.w	r3, fp, r3
 8005074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800508c:	460b      	mov	r3, r1
 800508e:	18db      	adds	r3, r3, r3
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	4613      	mov	r3, r2
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
 800509a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800509e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050a2:	f7fb fd03 	bl	8000aac <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <UART_SetConfig+0x2d4>)
 80050ae:	fba3 2301 	umull	r2, r3, r3, r1
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2264      	movs	r2, #100	; 0x64
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	1acb      	subs	r3, r1, r3
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <UART_SetConfig+0x2d4>)
 80050c4:	fba3 2302 	umull	r2, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ec:	415b      	adcs	r3, r3
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6339      	str	r1, [r7, #48]	; 0x30
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005148:	460b      	mov	r3, r1
 800514a:	18db      	adds	r3, r3, r3
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	4613      	mov	r3, r2
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800515e:	f7fb fca5 	bl	8000aac <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x2d4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	; 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	3332      	adds	r3, #50	; 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x2d4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 0207 	and.w	r2, r3, #7
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005190:	e105      	b.n	800539e <UART_SetConfig+0x4d6>
 8005192:	bf00      	nop
 8005194:	40011000 	.word	0x40011000
 8005198:	40011400 	.word	0x40011400
 800519c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051b2:	4642      	mov	r2, r8
 80051b4:	464b      	mov	r3, r9
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	6239      	str	r1, [r7, #32]
 80051ba:	415b      	adcs	r3, r3
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c2:	4641      	mov	r1, r8
 80051c4:	1854      	adds	r4, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0501 	adc.w	r5, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051e8:	464b      	mov	r3, r9
 80051ea:	eb45 0303 	adc.w	r3, r5, r3
 80051ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800520e:	4629      	mov	r1, r5
 8005210:	008b      	lsls	r3, r1, #2
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005218:	4621      	mov	r1, r4
 800521a:	008a      	lsls	r2, r1, #2
 800521c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005220:	f7fb fc44 	bl	8000aac <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4b60      	ldr	r3, [pc, #384]	; (80053ac <UART_SetConfig+0x4e4>)
 800522a:	fba3 2302 	umull	r2, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	011c      	lsls	r4, r3, #4
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	61b9      	str	r1, [r7, #24]
 800524c:	415b      	adcs	r3, r3
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6139      	str	r1, [r7, #16]
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	67bb      	str	r3, [r7, #120]	; 0x78
 800529e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052ac:	4649      	mov	r1, r9
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b6:	4641      	mov	r1, r8
 80052b8:	008a      	lsls	r2, r1, #2
 80052ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052be:	f7fb fbf5 	bl	8000aac <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b39      	ldr	r3, [pc, #228]	; (80053ac <UART_SetConfig+0x4e4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a34      	ldr	r2, [pc, #208]	; (80053ac <UART_SetConfig+0x4e4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e6:	441c      	add	r4, r3
 80052e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ec:	2200      	movs	r2, #0
 80052ee:	673b      	str	r3, [r7, #112]	; 0x70
 80052f0:	677a      	str	r2, [r7, #116]	; 0x74
 80052f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052f6:	4642      	mov	r2, r8
 80052f8:	464b      	mov	r3, r9
 80052fa:	1891      	adds	r1, r2, r2
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	415b      	adcs	r3, r3
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005306:	4641      	mov	r1, r8
 8005308:	1851      	adds	r1, r2, r1
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	4649      	mov	r1, r9
 800530e:	414b      	adcs	r3, r1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800531e:	4659      	mov	r1, fp
 8005320:	00cb      	lsls	r3, r1, #3
 8005322:	4651      	mov	r1, sl
 8005324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005328:	4651      	mov	r1, sl
 800532a:	00ca      	lsls	r2, r1, #3
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	4603      	mov	r3, r0
 8005332:	4642      	mov	r2, r8
 8005334:	189b      	adds	r3, r3, r2
 8005336:	66bb      	str	r3, [r7, #104]	; 0x68
 8005338:	464b      	mov	r3, r9
 800533a:	460a      	mov	r2, r1
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	663b      	str	r3, [r7, #96]	; 0x60
 800534c:	667a      	str	r2, [r7, #100]	; 0x64
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800535a:	4649      	mov	r1, r9
 800535c:	008b      	lsls	r3, r1, #2
 800535e:	4641      	mov	r1, r8
 8005360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005364:	4641      	mov	r1, r8
 8005366:	008a      	lsls	r2, r1, #2
 8005368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800536c:	f7fb fb9e 	bl	8000aac <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <UART_SetConfig+0x4e4>)
 8005376:	fba3 1302 	umull	r1, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	2164      	movs	r1, #100	; 0x64
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	3332      	adds	r3, #50	; 0x32
 8005388:	4a08      	ldr	r2, [pc, #32]	; (80053ac <UART_SetConfig+0x4e4>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	f003 020f 	and.w	r2, r3, #15
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4422      	add	r2, r4
 800539c:	609a      	str	r2, [r3, #8]
}
 800539e:	bf00      	nop
 80053a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053aa:	bf00      	nop
 80053ac:	51eb851f 	.word	0x51eb851f

080053b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 001c 	add.w	r0, r7, #28
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d122      	bne.n	800540e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fac6 	bl	8006994 <USB_CoreReset>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e01a      	b.n	8005444 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 faba 	bl	8006994 <USB_CoreReset>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
 8005436:	e005      	b.n	8005444 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10b      	bne.n	8005462 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f043 0206 	orr.w	r2, r3, #6
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800546e:	b004      	add	sp, #16
 8005470:	4770      	bx	lr
	...

08005474 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d165      	bne.n	8005554 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a41      	ldr	r2, [pc, #260]	; (8005590 <USB_SetTurnaroundTime+0x11c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d906      	bls.n	800549e <USB_SetTurnaroundTime+0x2a>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a40      	ldr	r2, [pc, #256]	; (8005594 <USB_SetTurnaroundTime+0x120>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d202      	bcs.n	800549e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005498:	230f      	movs	r3, #15
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e062      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a3c      	ldr	r2, [pc, #240]	; (8005594 <USB_SetTurnaroundTime+0x120>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d306      	bcc.n	80054b4 <USB_SetTurnaroundTime+0x40>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a3b      	ldr	r2, [pc, #236]	; (8005598 <USB_SetTurnaroundTime+0x124>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d202      	bcs.n	80054b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054ae:	230e      	movs	r3, #14
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e057      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a38      	ldr	r2, [pc, #224]	; (8005598 <USB_SetTurnaroundTime+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d306      	bcc.n	80054ca <USB_SetTurnaroundTime+0x56>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <USB_SetTurnaroundTime+0x128>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d202      	bcs.n	80054ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054c4:	230d      	movs	r3, #13
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e04c      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a33      	ldr	r2, [pc, #204]	; (800559c <USB_SetTurnaroundTime+0x128>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d306      	bcc.n	80054e0 <USB_SetTurnaroundTime+0x6c>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <USB_SetTurnaroundTime+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d802      	bhi.n	80054e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054da:	230c      	movs	r3, #12
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e041      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <USB_SetTurnaroundTime+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d906      	bls.n	80054f6 <USB_SetTurnaroundTime+0x82>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a2e      	ldr	r2, [pc, #184]	; (80055a4 <USB_SetTurnaroundTime+0x130>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054f0:	230b      	movs	r3, #11
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e036      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <USB_SetTurnaroundTime+0x130>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d906      	bls.n	800550c <USB_SetTurnaroundTime+0x98>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a29      	ldr	r2, [pc, #164]	; (80055a8 <USB_SetTurnaroundTime+0x134>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d802      	bhi.n	800550c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005506:	230a      	movs	r3, #10
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e02b      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <USB_SetTurnaroundTime+0x134>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d906      	bls.n	8005522 <USB_SetTurnaroundTime+0xae>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a25      	ldr	r2, [pc, #148]	; (80055ac <USB_SetTurnaroundTime+0x138>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d202      	bcs.n	8005522 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800551c:	2309      	movs	r3, #9
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e020      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4a21      	ldr	r2, [pc, #132]	; (80055ac <USB_SetTurnaroundTime+0x138>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d306      	bcc.n	8005538 <USB_SetTurnaroundTime+0xc4>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <USB_SetTurnaroundTime+0x13c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d802      	bhi.n	8005538 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005532:	2308      	movs	r3, #8
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e015      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <USB_SetTurnaroundTime+0x13c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d906      	bls.n	800554e <USB_SetTurnaroundTime+0xda>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <USB_SetTurnaroundTime+0x140>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d202      	bcs.n	800554e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005548:	2307      	movs	r3, #7
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e00a      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800554e:	2306      	movs	r3, #6
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e007      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800555a:	2309      	movs	r3, #9
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e001      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005560:	2309      	movs	r3, #9
 8005562:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	00d8acbf 	.word	0x00d8acbf
 8005594:	00e4e1c0 	.word	0x00e4e1c0
 8005598:	00f42400 	.word	0x00f42400
 800559c:	01067380 	.word	0x01067380
 80055a0:	011a499f 	.word	0x011a499f
 80055a4:	01312cff 	.word	0x01312cff
 80055a8:	014ca43f 	.word	0x014ca43f
 80055ac:	016e3600 	.word	0x016e3600
 80055b0:	01a6ab1f 	.word	0x01a6ab1f
 80055b4:	01e84800 	.word	0x01e84800

080055b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d106      	bne.n	8005628 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]
 8005626:	e00b      	b.n	8005640 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	e001      	b.n	8005640 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e003      	b.n	8005648 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005640:	2032      	movs	r0, #50	; 0x32
 8005642:	f7fc fd71 	bl	8002128 <HAL_Delay>

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005650:	b084      	sub	sp, #16
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800565e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	e009      	b.n	8005684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3340      	adds	r3, #64	; 0x40
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3301      	adds	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b0e      	cmp	r3, #14
 8005688:	d9f2      	bls.n	8005670 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11c      	bne.n	80056ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
 80056c8:	e00b      	b.n	80056e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056e8:	461a      	mov	r2, r3
 80056ea:	2300      	movs	r3, #0
 80056ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	4619      	mov	r1, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fc:	461a      	mov	r2, r3
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b01      	cmp	r3, #1
 8005706:	d10c      	bne.n	8005722 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d104      	bne.n	8005718 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800570e:	2100      	movs	r1, #0
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f949 	bl	80059a8 <USB_SetDevSpeed>
 8005716:	e008      	b.n	800572a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005718:	2101      	movs	r1, #1
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f944 	bl	80059a8 <USB_SetDevSpeed>
 8005720:	e003      	b.n	800572a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005722:	2103      	movs	r1, #3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f93f 	bl	80059a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800572a:	2110      	movs	r1, #16
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8f3 	bl	8005918 <USB_FlushTxFifo>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f911 	bl	8005964 <USB_FlushRxFifo>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	461a      	mov	r2, r3
 8005754:	2300      	movs	r3, #0
 8005756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	461a      	mov	r2, r3
 800576c:	2300      	movs	r3, #0
 800576e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e043      	b.n	80057fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800578c:	d118      	bne.n	80057c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e013      	b.n	80057d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	461a      	mov	r2, r3
 80057b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	3301      	adds	r3, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	429a      	cmp	r2, r3
 8005804:	d3b7      	bcc.n	8005776 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e043      	b.n	8005894 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005822:	d118      	bne.n	8005856 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e013      	b.n	8005868 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	e008      	b.n	8005868 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800588c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	429a      	cmp	r2, r3
 800589a:	d3b7      	bcc.n	800580c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f043 0210 	orr.w	r2, r3, #16
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <USB_DevInit+0x2c4>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 0208 	orr.w	r2, r3, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d107      	bne.n	8005904 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	f043 0304 	orr.w	r3, r3, #4
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005910:	b004      	add	sp, #16
 8005912:	4770      	bx	lr
 8005914:	803c3800 	.word	0x803c3800

08005918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	019b      	lsls	r3, r3, #6
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3301      	adds	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a09      	ldr	r2, [pc, #36]	; (8005960 <USB_FlushTxFifo+0x48>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e006      	b.n	8005952 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b20      	cmp	r3, #32
 800594e:	d0f0      	beq.n	8005932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	00030d40 	.word	0x00030d40

08005964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2210      	movs	r2, #16
 8005974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <USB_FlushRxFifo+0x40>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d0f0      	beq.n	8005976 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	00030d40 	.word	0x00030d40

080059a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	68f9      	ldr	r1, [r7, #12]
 80059c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b087      	sub	sp, #28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0306 	and.w	r3, r3, #6
 80059f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	e00a      	b.n	8005a16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d002      	beq.n	8005a0c <USB_GetDevSpeed+0x32>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b06      	cmp	r3, #6
 8005a0a:	d102      	bne.n	8005a12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	75fb      	strb	r3, [r7, #23]
 8005a10:	e001      	b.n	8005a16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a12:	230f      	movs	r3, #15
 8005a14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d13a      	bne.n	8005ab6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	69da      	ldr	r2, [r3, #28]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d155      	bne.n	8005b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	059b      	lsls	r3, r3, #22
 8005a9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	e036      	b.n	8005b24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d11a      	bne.n	8005b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	78db      	ldrb	r3, [r3, #3]
 8005b08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d161      	bne.n	8005c14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b66:	d11f      	bne.n	8005ba8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bec:	4013      	ands	r3, r2
 8005bee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	0159      	lsls	r1, r3, #5
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	440b      	add	r3, r1
 8005c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4b35      	ldr	r3, [pc, #212]	; (8005ce4 <USB_DeactivateEndpoint+0x1b0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	600b      	str	r3, [r1, #0]
 8005c12:	e060      	b.n	8005cd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2a:	d11f      	bne.n	8005c6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	f003 030f 	and.w	r3, r3, #15
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	43db      	mvns	r3, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	0159      	lsls	r1, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	440b      	add	r3, r1
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <USB_DeactivateEndpoint+0x1b4>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	ec337800 	.word	0xec337800
 8005ce8:	eff37800 	.word	0xeff37800

08005cec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	; 0x28
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	f040 815c 	bne.w	8005fc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d132      	bne.n	8005d7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	0cdb      	lsrs	r3, r3, #19
 8005d76:	04db      	lsls	r3, r3, #19
 8005d78:	6113      	str	r3, [r2, #16]
 8005d7a:	e074      	b.n	8005e66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	0cdb      	lsrs	r3, r3, #19
 8005d98:	04db      	lsls	r3, r3, #19
 8005d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6959      	ldr	r1, [r3, #20]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	1e59      	subs	r1, r3, #1
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de2:	04d9      	lsls	r1, r3, #19
 8005de4:	4b9d      	ldr	r3, [pc, #628]	; (800605c <USB_EPStartXfer+0x370>)
 8005de6:	400b      	ands	r3, r1
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	0148      	lsls	r0, r1, #5
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	4401      	add	r1, r0
 8005df0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0e:	69b9      	ldr	r1, [r7, #24]
 8005e10:	0148      	lsls	r0, r1, #5
 8005e12:	69f9      	ldr	r1, [r7, #28]
 8005e14:	4401      	add	r1, r0
 8005e16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	78db      	ldrb	r3, [r3, #3]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d11f      	bne.n	8005e66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d14b      	bne.n	8005f04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d128      	bne.n	8005ee2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d110      	bne.n	8005ec2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	e00f      	b.n	8005ee2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	e12f      	b.n	8006164 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	78db      	ldrb	r3, [r3, #3]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d015      	beq.n	8005f58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8117 	beq.w	8006164 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 030f 	and.w	r3, r3, #15
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	69f9      	ldr	r1, [r7, #28]
 8005f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f52:	4313      	orrs	r3, r2
 8005f54:	634b      	str	r3, [r1, #52]	; 0x34
 8005f56:	e105      	b.n	8006164 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e00f      	b.n	8005faa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	68d9      	ldr	r1, [r3, #12]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	b298      	uxth	r0, r3
 8005fb8:	79fb      	ldrb	r3, [r7, #7]
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fa2b 	bl	800641a <USB_WritePacket>
 8005fc4:	e0ce      	b.n	8006164 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe0:	0cdb      	lsrs	r3, r3, #19
 8005fe2:	04db      	lsls	r3, r3, #19
 8005fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d126      	bne.n	8006060 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	0148      	lsls	r0, r1, #5
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	4401      	add	r1, r0
 8006030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006034:	4313      	orrs	r3, r2
 8006036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006056:	6113      	str	r3, [r2, #16]
 8006058:	e036      	b.n	80060c8 <USB_EPStartXfer+0x3dc>
 800605a:	bf00      	nop
 800605c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	695a      	ldr	r2, [r3, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4413      	add	r3, r2
 800606a:	1e5a      	subs	r2, r3, #1
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	fbb2 f3f3 	udiv	r3, r2, r3
 8006074:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	8afb      	ldrh	r3, [r7, #22]
 8006086:	04d9      	lsls	r1, r3, #19
 8006088:	4b39      	ldr	r3, [pc, #228]	; (8006170 <USB_EPStartXfer+0x484>)
 800608a:	400b      	ands	r3, r1
 800608c:	69b9      	ldr	r1, [r7, #24]
 800608e:	0148      	lsls	r0, r1, #5
 8006090:	69f9      	ldr	r1, [r7, #28]
 8006092:	4401      	add	r1, r0
 8006094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006098:	4313      	orrs	r3, r2
 800609a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	8af9      	ldrh	r1, [r7, #22]
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	0148      	lsls	r0, r1, #5
 80060bc:	69f9      	ldr	r1, [r7, #28]
 80060be:	4401      	add	r1, r0
 80060c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060c4:	4313      	orrs	r3, r2
 80060c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d10d      	bne.n	80060ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68d9      	ldr	r1, [r3, #12]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	460a      	mov	r2, r1
 80060e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	78db      	ldrb	r3, [r3, #3]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d128      	bne.n	8006144 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d110      	bne.n	8006124 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e00f      	b.n	8006144 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006142:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	1ff80000 	.word	0x1ff80000

08006174 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 80cd 	bne.w	8006330 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d132      	bne.n	8006204 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	0cdb      	lsrs	r3, r3, #19
 80061fe:	04db      	lsls	r3, r3, #19
 8006200:	6113      	str	r3, [r2, #16]
 8006202:	e04e      	b.n	80062a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	0cdb      	lsrs	r3, r3, #19
 8006220:	04db      	lsls	r3, r3, #19
 8006222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006242:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006246:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	429a      	cmp	r2, r3
 8006252:	d903      	bls.n	800625c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	689a      	ldr	r2, [r3, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800627a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006292:	6939      	ldr	r1, [r7, #16]
 8006294:	0148      	lsls	r0, r1, #5
 8006296:	6979      	ldr	r1, [r7, #20]
 8006298:	4401      	add	r1, r0
 800629a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800629e:	4313      	orrs	r3, r2
 80062a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d11e      	bne.n	80062e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	461a      	mov	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e092      	b.n	800640c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006304:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d07e      	beq.n	800640c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	2101      	movs	r1, #1
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	6979      	ldr	r1, [r7, #20]
 8006326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800632a:	4313      	orrs	r3, r2
 800632c:	634b      	str	r3, [r1, #52]	; 0x34
 800632e:	e06d      	b.n	800640c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634a:	0cdb      	lsrs	r3, r3, #19
 800634c:	04db      	lsls	r3, r3, #19
 800634e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800636e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006372:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	0148      	lsls	r0, r1, #5
 80063be:	6979      	ldr	r1, [r7, #20]
 80063c0:	4401      	add	r1, r0
 80063c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063c6:	4313      	orrs	r3, r2
 80063c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10d      	bne.n	80063ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	68d9      	ldr	r1, [r3, #12]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e8:	460a      	mov	r2, r1
 80063ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800640a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800641a:	b480      	push	{r7}
 800641c:	b089      	sub	sp, #36	; 0x24
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	4611      	mov	r1, r2
 8006426:	461a      	mov	r2, r3
 8006428:	460b      	mov	r3, r1
 800642a:	71fb      	strb	r3, [r7, #7]
 800642c:	4613      	mov	r3, r2
 800642e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11a      	bne.n	8006476 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006440:	88bb      	ldrh	r3, [r7, #4]
 8006442:	3303      	adds	r3, #3
 8006444:	089b      	lsrs	r3, r3, #2
 8006446:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e00f      	b.n	800646e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	031a      	lsls	r2, r3, #12
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800645a:	461a      	mov	r2, r3
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	3304      	adds	r3, #4
 8006466:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	3301      	adds	r3, #1
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d3eb      	bcc.n	800644e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3724      	adds	r7, #36	; 0x24
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800649a:	88fb      	ldrh	r3, [r7, #6]
 800649c:	3303      	adds	r3, #3
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e00b      	b.n	80064c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3304      	adds	r3, #4
 80064b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3301      	adds	r3, #1
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d3ef      	bcc.n	80064a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064c8:	69fb      	ldr	r3, [r7, #28]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3724      	adds	r7, #36	; 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d12c      	bne.n	800654c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db12      	blt.n	800652a <USB_EPSetStall+0x54>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00f      	beq.n	800652a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006528:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e02b      	b.n	80065a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	db12      	blt.n	8006584 <USB_EPSetStall+0xae>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006582:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d128      	bne.n	8006620 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	78db      	ldrb	r3, [r3, #3]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d003      	beq.n	80065fe <USB_EPClearStall+0x4c>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	78db      	ldrb	r3, [r3, #3]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d138      	bne.n	8006670 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e027      	b.n	8006670 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800663e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	78db      	ldrb	r3, [r3, #3]
 8006644:	2b03      	cmp	r3, #3
 8006646:	d003      	beq.n	8006650 <USB_EPClearStall+0x9e>
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	78db      	ldrb	r3, [r3, #3]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d10f      	bne.n	8006670 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800666e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800669c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	78fb      	ldrb	r3, [r7, #3]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066f8:	f023 0302 	bic.w	r3, r3, #2
 80066fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800673a:	f043 0302 	orr.w	r3, r3, #2
 800673e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4013      	ands	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006766:	68fb      	ldr	r3, [r7, #12]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	4013      	ands	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	0c1b      	lsrs	r3, r3, #16
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	b29b      	uxth	r3, r3
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800680a:	68bb      	ldr	r3, [r7, #8]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	01db      	lsls	r3, r3, #7
 800684a:	b2db      	uxtb	r3, r3
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4013      	ands	r3, r2
 8006864:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006866:	68bb      	ldr	r3, [r7, #8]
}
 8006868:	4618      	mov	r0, r3
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0301 	and.w	r3, r3, #1
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	460b      	mov	r3, r1
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	333c      	adds	r3, #60	; 0x3c
 80068ee:	3304      	adds	r3, #4
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4a26      	ldr	r2, [pc, #152]	; (8006990 <USB_EP0_OutStart+0xb8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d90a      	bls.n	8006912 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690c:	d101      	bne.n	8006912 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	e037      	b.n	8006982 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	461a      	mov	r2, r3
 800691a:	2300      	movs	r3, #0
 800691c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006940:	f043 0318 	orr.w	r3, r3, #24
 8006944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006954:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006958:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d10f      	bne.n	8006980 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800697e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	4f54300a 	.word	0x4f54300a

08006994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <USB_CoreReset+0x64>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d901      	bls.n	80069b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e01b      	b.n	80069ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	daf2      	bge.n	80069a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a09      	ldr	r2, [pc, #36]	; (80069f8 <USB_CoreReset+0x64>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d901      	bls.n	80069dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e006      	b.n	80069ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d0f0      	beq.n	80069ca <USB_CoreReset+0x36>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	00030d40 	.word	0x00030d40

080069fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a0c:	f002 f95c 	bl	8008cc8 <USBD_static_malloc>
 8006a10:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a20:	2302      	movs	r3, #2
 8006a22:	e066      	b.n	8006af2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	7c1b      	ldrb	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d119      	bne.n	8006a68 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a38:	2202      	movs	r2, #2
 8006a3a:	2181      	movs	r1, #129	; 0x81
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 f820 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	2101      	movs	r1, #1
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 f816 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2210      	movs	r2, #16
 8006a62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006a66:	e016      	b.n	8006a96 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	2181      	movs	r1, #129	; 0x81
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f002 f807 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	2101      	movs	r1, #1
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fffe 	bl	8008a82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2210      	movs	r2, #16
 8006a92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a96:	2308      	movs	r3, #8
 8006a98:	2203      	movs	r2, #3
 8006a9a:	2182      	movs	r1, #130	; 0x82
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fff0 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1b      	ldrb	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f002 f8c1 	bl	8008c60 <USBD_LL_PrepareReceive>
 8006ade:	e007      	b.n	8006af0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f002 f8b8 	bl	8008c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b06:	2181      	movs	r1, #129	; 0x81
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 ffe0 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b14:	2101      	movs	r1, #1
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 ffd9 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b24:	2182      	movs	r1, #130	; 0x82
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 ffd1 	bl	8008ace <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b56:	4618      	mov	r0, r3
 8006b58:	f002 f8c4 	bl	8008ce4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e0af      	b.n	8006cf8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03f      	beq.n	8006c24 <USBD_CDC_Setup+0xb4>
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	f040 809f 	bne.w	8006ce8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88db      	ldrh	r3, [r3, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d02e      	beq.n	8006c10 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	b25b      	sxtb	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da16      	bge.n	8006bea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006bc8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	88d2      	ldrh	r2, [r2, #6]
 8006bce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	88db      	ldrh	r3, [r3, #6]
 8006bd4:	2b07      	cmp	r3, #7
 8006bd6:	bf28      	it	cs
 8006bd8:	2307      	movcs	r3, #7
 8006bda:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	89fa      	ldrh	r2, [r7, #14]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fb19 	bl	800821a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006be8:	e085      	b.n	8006cf6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785a      	ldrb	r2, [r3, #1]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c00:	6939      	ldr	r1, [r7, #16]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	88db      	ldrh	r3, [r3, #6]
 8006c06:	461a      	mov	r2, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fb32 	bl	8008272 <USBD_CtlPrepareRx>
      break;
 8006c0e:	e072      	b.n	8006cf6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	7850      	ldrb	r0, [r2, #1]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	4798      	blx	r3
      break;
 8006c22:	e068      	b.n	8006cf6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b0b      	cmp	r3, #11
 8006c2a:	d852      	bhi.n	8006cd2 <USBD_CDC_Setup+0x162>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <USBD_CDC_Setup+0xc4>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006ce1 	.word	0x08006ce1
 8006c3c:	08006cd3 	.word	0x08006cd3
 8006c40:	08006cd3 	.word	0x08006cd3
 8006c44:	08006cd3 	.word	0x08006cd3
 8006c48:	08006cd3 	.word	0x08006cd3
 8006c4c:	08006cd3 	.word	0x08006cd3
 8006c50:	08006cd3 	.word	0x08006cd3
 8006c54:	08006cd3 	.word	0x08006cd3
 8006c58:	08006cd3 	.word	0x08006cd3
 8006c5c:	08006c8f 	.word	0x08006c8f
 8006c60:	08006cb9 	.word	0x08006cb9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d107      	bne.n	8006c80 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c70:	f107 030a 	add.w	r3, r7, #10
 8006c74:	2202      	movs	r2, #2
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 face 	bl	800821a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c7e:	e032      	b.n	8006ce6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 fa58 	bl	8008138 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8c:	e02b      	b.n	8006ce6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d107      	bne.n	8006caa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c9a:	f107 030d 	add.w	r3, r7, #13
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fab9 	bl	800821a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca8:	e01d      	b.n	8006ce6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fa43 	bl	8008138 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cb6:	e016      	b.n	8006ce6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d00f      	beq.n	8006ce4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fa36 	bl	8008138 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cd0:	e008      	b.n	8006ce4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fa2f 	bl	8008138 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cde:	e002      	b.n	8006ce6 <USBD_CDC_Setup+0x176>
          break;
 8006ce0:	bf00      	nop
 8006ce2:	e008      	b.n	8006cf6 <USBD_CDC_Setup+0x186>
          break;
 8006ce4:	bf00      	nop
      }
      break;
 8006ce6:	e006      	b.n	8006cf6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fa24 	bl	8008138 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e04f      	b.n	8006dc2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3318      	adds	r3, #24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d029      	beq.n	8006d94 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	3318      	adds	r3, #24
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	78f9      	ldrb	r1, [r7, #3]
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	460b      	mov	r3, r1
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	1a5b      	subs	r3, r3, r1
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4403      	add	r3, r0
 8006d60:	3344      	adds	r3, #68	; 0x44
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	440b      	add	r3, r1
 8006d80:	3318      	adds	r3, #24
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d86:	78f9      	ldrb	r1, [r7, #3]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 ff46 	bl	8008c1e <USBD_LL_Transmit>
 8006d92:	e015      	b.n	8006dc0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006dbc:	78fa      	ldrb	r2, [r7, #3]
 8006dbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ddc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e015      	b.n	8006e18 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff56 	bl	8008ca2 <USBD_LL_GetRxDataSize>
 8006df6:	4602      	mov	r2, r0
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e12:	4611      	mov	r1, r2
 8006e14:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e01b      	b.n	8006e72 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d015      	beq.n	8006e70 <USBD_CDC_EP0_RxReady+0x50>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e4a:	2bff      	cmp	r3, #255	; 0xff
 8006e4c:	d010      	beq.n	8006e70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e64:	b292      	uxth	r2, r2
 8006e66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	22ff      	movs	r2, #255	; 0xff
 8006e6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2243      	movs	r2, #67	; 0x43
 8006e88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006e8a:	4b03      	ldr	r3, [pc, #12]	; (8006e98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	200002d0 	.word	0x200002d0

08006e9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2243      	movs	r2, #67	; 0x43
 8006ea8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	2000028c 	.word	0x2000028c

08006ebc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2243      	movs	r2, #67	; 0x43
 8006ec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006eca:	4b03      	ldr	r3, [pc, #12]	; (8006ed8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20000314 	.word	0x20000314

08006edc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006eea:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20000248 	.word	0x20000248

08006efc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e004      	b.n	8006f1a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b087      	sub	sp, #28
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f38:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e008      	b.n	8006f56 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e004      	b.n	8006f88 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e01a      	b.n	8006fec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d114      	bne.n	8006fea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fde:	2181      	movs	r1, #129	; 0x81
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 fe1c 	bl	8008c1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	e016      	b.n	8007040 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7c1b      	ldrb	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007024:	2101      	movs	r1, #1
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fe1a 	bl	8008c60 <USBD_LL_PrepareReceive>
 800702c:	e007      	b.n	800703e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	2101      	movs	r1, #1
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fe11 	bl	8008c60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	e01f      	b.n	80070a0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	79fa      	ldrb	r2, [r7, #7]
 8007092:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 fc8d 	bl	80089b4 <USBD_LL_Init>
 800709a:	4603      	mov	r3, r0
 800709c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070b2:	2300      	movs	r3, #0
 80070b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e016      	b.n	80070ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	f107 020e 	add.w	r2, r7, #14
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	4602      	mov	r2, r0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fca4 	bl	8008a4c <USBD_LL_Start>
 8007104:	4603      	mov	r3, r0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	4611      	mov	r1, r2
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
  }

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 ff90 	bl	80080c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d01a      	beq.n	80071fe <USBD_LL_SetupStage+0x72>
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d822      	bhi.n	8007212 <USBD_LL_SetupStage+0x86>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <USBD_LL_SetupStage+0x4a>
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d00a      	beq.n	80071ea <USBD_LL_SetupStage+0x5e>
 80071d4:	e01d      	b.n	8007212 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa62 	bl	80076a8 <USBD_StdDevReq>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]
      break;
 80071e8:	e020      	b.n	800722c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071f0:	4619      	mov	r1, r3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fac6 	bl	8007784 <USBD_StdItfReq>
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e016      	b.n	800722c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb05 	bl	8007816 <USBD_StdEPReq>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e00c      	b.n	800722c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007218:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fc73 	bl	8008b0c <USBD_LL_StallEP>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
      break;
 800722a:	bf00      	nop
  }

  return ret;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	460b      	mov	r3, r1
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007244:	7afb      	ldrb	r3, [r7, #11]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d138      	bne.n	80072bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007250:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007258:	2b03      	cmp	r3, #3
 800725a:	d14a      	bne.n	80072f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d913      	bls.n	8007290 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4293      	cmp	r3, r2
 8007280:	bf28      	it	cs
 8007282:	4613      	movcs	r3, r2
 8007284:	461a      	mov	r2, r3
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 f80f 	bl	80082ac <USBD_CtlContinueRx>
 800728e:	e030      	b.n	80072f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b03      	cmp	r3, #3
 800729a:	d10b      	bne.n	80072b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f001 f80a 	bl	80082ce <USBD_CtlSendStatus>
 80072ba:	e01a      	b.n	80072f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d114      	bne.n	80072f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00e      	beq.n	80072f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	7afa      	ldrb	r2, [r7, #11]
 80072de:	4611      	mov	r1, r2
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	4798      	blx	r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	e000      	b.n	80072f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	460b      	mov	r3, r1
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d16b      	bne.n	80073e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3314      	adds	r3, #20
 8007314:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800731c:	2b02      	cmp	r3, #2
 800731e:	d156      	bne.n	80073ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	429a      	cmp	r2, r3
 800732a:	d914      	bls.n	8007356 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	461a      	mov	r2, r3
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 ff84 	bl	8008250 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007348:	2300      	movs	r3, #0
 800734a:	2200      	movs	r2, #0
 800734c:	2100      	movs	r1, #0
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f001 fc86 	bl	8008c60 <USBD_LL_PrepareReceive>
 8007354:	e03b      	b.n	80073ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	d11c      	bne.n	800739c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800736a:	429a      	cmp	r2, r3
 800736c:	d316      	bcc.n	800739c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007378:	429a      	cmp	r2, r3
 800737a:	d20f      	bcs.n	800739c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800737c:	2200      	movs	r2, #0
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 ff65 	bl	8008250 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800738e:	2300      	movs	r3, #0
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f001 fc63 	bl	8008c60 <USBD_LL_PrepareReceive>
 800739a:	e018      	b.n	80073ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d10b      	bne.n	80073c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 fba2 	bl	8008b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 ff93 	bl	80082f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d122      	bne.n	800741e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fe98 	bl	800710e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073e6:	e01a      	b.n	800741e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d114      	bne.n	800741e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00e      	beq.n	800741e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	7afa      	ldrb	r2, [r7, #11]
 800740a:	4611      	mov	r1, r2
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	4798      	blx	r3
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	e000      	b.n	8007420 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	e02f      	b.n	80074bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00f      	beq.n	8007486 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6852      	ldr	r2, [r2, #4]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	4611      	mov	r1, r2
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007486:	2340      	movs	r3, #64	; 0x40
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 faf8 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2240      	movs	r2, #64	; 0x40
 800749e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a2:	2340      	movs	r3, #64	; 0x40
 80074a4:	2200      	movs	r2, #0
 80074a6:	2180      	movs	r1, #128	; 0x80
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 faea 	bl	8008a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2204      	movs	r2, #4
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b04      	cmp	r3, #4
 8007522:	d106      	bne.n	8007532 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800752a:	b2da      	uxtb	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007552:	2303      	movs	r3, #3
 8007554:	e012      	b.n	800757c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b03      	cmp	r3, #3
 8007560:	d10b      	bne.n	800757a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	e014      	b.n	80075c8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d10d      	bne.n	80075c6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	4611      	mov	r1, r2
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e014      	b.n	8007614 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d10d      	bne.n	8007612 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6852      	ldr	r2, [r2, #4]
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	4611      	mov	r1, r2
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
  }

  return USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800766a:	b480      	push	{r7}
 800766c:	b087      	sub	sp, #28
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	3301      	adds	r3, #1
 8007680:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007688:	8a3b      	ldrh	r3, [r7, #16]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	b21a      	sxth	r2, r3
 800768e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007692:	4313      	orrs	r3, r2
 8007694:	b21b      	sxth	r3, r3
 8007696:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007698:	89fb      	ldrh	r3, [r7, #14]
}
 800769a:	4618      	mov	r0, r3
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076be:	2b40      	cmp	r3, #64	; 0x40
 80076c0:	d005      	beq.n	80076ce <USBD_StdDevReq+0x26>
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d853      	bhi.n	800776e <USBD_StdDevReq+0xc6>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00b      	beq.n	80076e2 <USBD_StdDevReq+0x3a>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d14f      	bne.n	800776e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
      break;
 80076e0:	e04a      	b.n	8007778 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b09      	cmp	r3, #9
 80076e8:	d83b      	bhi.n	8007762 <USBD_StdDevReq+0xba>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <USBD_StdDevReq+0x48>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007745 	.word	0x08007745
 80076f4:	08007759 	.word	0x08007759
 80076f8:	08007763 	.word	0x08007763
 80076fc:	0800774f 	.word	0x0800774f
 8007700:	08007763 	.word	0x08007763
 8007704:	08007723 	.word	0x08007723
 8007708:	08007719 	.word	0x08007719
 800770c:	08007763 	.word	0x08007763
 8007710:	0800773b 	.word	0x0800773b
 8007714:	0800772d 	.word	0x0800772d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f9de 	bl	8007adc <USBD_GetDescriptor>
          break;
 8007720:	e024      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fb43 	bl	8007db0 <USBD_SetAddress>
          break;
 800772a:	e01f      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fb82 	bl	8007e38 <USBD_SetConfig>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]
          break;
 8007738:	e018      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fc21 	bl	8007f84 <USBD_GetConfig>
          break;
 8007742:	e013      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc52 	bl	8007ff0 <USBD_GetStatus>
          break;
 800774c:	e00e      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fc81 	bl	8008058 <USBD_SetFeature>
          break;
 8007756:	e009      	b.n	800776c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc90 	bl	8008080 <USBD_ClrFeature>
          break;
 8007760:	e004      	b.n	800776c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fce7 	bl	8008138 <USBD_CtlError>
          break;
 800776a:	bf00      	nop
      }
      break;
 800776c:	e004      	b.n	8007778 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fce1 	bl	8008138 <USBD_CtlError>
      break;
 8007776:	bf00      	nop
  }

  return ret;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop

08007784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d005      	beq.n	80077aa <USBD_StdItfReq+0x26>
 800779e:	2b40      	cmp	r3, #64	; 0x40
 80077a0:	d82f      	bhi.n	8007802 <USBD_StdItfReq+0x7e>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <USBD_StdItfReq+0x26>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d12b      	bne.n	8007802 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d81d      	bhi.n	80077f4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	889b      	ldrh	r3, [r3, #4]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d813      	bhi.n	80077ea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	88db      	ldrh	r3, [r3, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d110      	bne.n	80077fe <USBD_StdItfReq+0x7a>
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fd73 	bl	80082ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077e8:	e009      	b.n	80077fe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fca3 	bl	8008138 <USBD_CtlError>
          break;
 80077f2:	e004      	b.n	80077fe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc9e 	bl	8008138 <USBD_CtlError>
          break;
 80077fc:	e000      	b.n	8007800 <USBD_StdItfReq+0x7c>
          break;
 80077fe:	bf00      	nop
      }
      break;
 8007800:	e004      	b.n	800780c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc97 	bl	8008138 <USBD_CtlError>
      break;
 800780a:	bf00      	nop
  }

  return ret;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	889b      	ldrh	r3, [r3, #4]
 8007828:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d007      	beq.n	8007846 <USBD_StdEPReq+0x30>
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	f200 8145 	bhi.w	8007ac6 <USBD_StdEPReq+0x2b0>
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00c      	beq.n	800785a <USBD_StdEPReq+0x44>
 8007840:	2b20      	cmp	r3, #32
 8007842:	f040 8140 	bne.w	8007ac6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
      break;
 8007858:	e13a      	b.n	8007ad0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d007      	beq.n	8007872 <USBD_StdEPReq+0x5c>
 8007862:	2b03      	cmp	r3, #3
 8007864:	f300 8129 	bgt.w	8007aba <USBD_StdEPReq+0x2a4>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d07f      	beq.n	800796c <USBD_StdEPReq+0x156>
 800786c:	2b01      	cmp	r3, #1
 800786e:	d03c      	beq.n	80078ea <USBD_StdEPReq+0xd4>
 8007870:	e123      	b.n	8007aba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d002      	beq.n	8007884 <USBD_StdEPReq+0x6e>
 800787e:	2b03      	cmp	r3, #3
 8007880:	d016      	beq.n	80078b0 <USBD_StdEPReq+0x9a>
 8007882:	e02c      	b.n	80078de <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <USBD_StdEPReq+0x90>
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	d00a      	beq.n	80078a6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f939 	bl	8008b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f935 	bl	8008b0c <USBD_LL_StallEP>
 80078a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078a4:	e020      	b.n	80078e8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc45 	bl	8008138 <USBD_CtlError>
              break;
 80078ae:	e01b      	b.n	80078e8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <USBD_StdEPReq+0xc0>
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d008      	beq.n	80078d6 <USBD_StdEPReq+0xc0>
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	88db      	ldrh	r3, [r3, #6]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 f91b 	bl	8008b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fcf9 	bl	80082ce <USBD_CtlSendStatus>

              break;
 80078dc:	e004      	b.n	80078e8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc29 	bl	8008138 <USBD_CtlError>
              break;
 80078e6:	bf00      	nop
          }
          break;
 80078e8:	e0ec      	b.n	8007ac4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0xe6>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d016      	beq.n	8007928 <USBD_StdEPReq+0x112>
 80078fa:	e030      	b.n	800795e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <USBD_StdEPReq+0x108>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d00a      	beq.n	800791e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 f8fd 	bl	8008b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f8f9 	bl	8008b0c <USBD_LL_StallEP>
 800791a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800791c:	e025      	b.n	800796a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fc09 	bl	8008138 <USBD_CtlError>
              break;
 8007926:	e020      	b.n	800796a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	885b      	ldrh	r3, [r3, #2]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d11b      	bne.n	8007968 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	2b00      	cmp	r3, #0
 8007938:	d004      	beq.n	8007944 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f903 	bl	8008b4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fcc2 	bl	80082ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800795c:	e004      	b.n	8007968 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 fbe9 	bl	8008138 <USBD_CtlError>
              break;
 8007966:	e000      	b.n	800796a <USBD_StdEPReq+0x154>
              break;
 8007968:	bf00      	nop
          }
          break;
 800796a:	e0ab      	b.n	8007ac4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d002      	beq.n	800797e <USBD_StdEPReq+0x168>
 8007978:	2b03      	cmp	r3, #3
 800797a:	d032      	beq.n	80079e2 <USBD_StdEPReq+0x1cc>
 800797c:	e097      	b.n	8007aae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <USBD_StdEPReq+0x17e>
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b80      	cmp	r3, #128	; 0x80
 8007988:	d004      	beq.n	8007994 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fbd3 	bl	8008138 <USBD_CtlError>
                break;
 8007992:	e091      	b.n	8007ab8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	da0b      	bge.n	80079b4 <USBD_StdEPReq+0x19e>
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	3310      	adds	r3, #16
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	4413      	add	r3, r2
 80079b0:	3304      	adds	r3, #4
 80079b2:	e00b      	b.n	80079cc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	3304      	adds	r3, #4
 80079cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2202      	movs	r2, #2
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fc1d 	bl	800821a <USBD_CtlSendData>
              break;
 80079e0:	e06a      	b.n	8007ab8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da11      	bge.n	8007a0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	f003 020f 	and.w	r2, r3, #15
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	3324      	adds	r3, #36	; 0x24
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d117      	bne.n	8007a34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fb96 	bl	8008138 <USBD_CtlError>
                  break;
 8007a0c:	e054      	b.n	8007ab8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	f003 020f 	and.w	r2, r3, #15
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb83 	bl	8008138 <USBD_CtlError>
                  break;
 8007a32:	e041      	b.n	8007ab8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0b      	bge.n	8007a54 <USBD_StdEPReq+0x23e>
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	e00b      	b.n	8007a6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <USBD_StdEPReq+0x264>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d103      	bne.n	8007a82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e00e      	b.n	8007aa0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 f87e 	bl	8008b88 <USBD_LL_IsStallEP>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2201      	movs	r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e002      	b.n	8007aa0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fbb7 	bl	800821a <USBD_CtlSendData>
              break;
 8007aac:	e004      	b.n	8007ab8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fb41 	bl	8008138 <USBD_CtlError>
              break;
 8007ab6:	bf00      	nop
          }
          break;
 8007ab8:	e004      	b.n	8007ac4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fb3b 	bl	8008138 <USBD_CtlError>
          break;
 8007ac2:	bf00      	nop
      }
      break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fb35 	bl	8008138 <USBD_CtlError>
      break;
 8007ace:	bf00      	nop
  }

  return ret;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	2b06      	cmp	r3, #6
 8007afe:	f200 8128 	bhi.w	8007d52 <USBD_GetDescriptor+0x276>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <USBD_GetDescriptor+0x2c>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b25 	.word	0x08007b25
 8007b0c:	08007b3d 	.word	0x08007b3d
 8007b10:	08007b7d 	.word	0x08007b7d
 8007b14:	08007d53 	.word	0x08007d53
 8007b18:	08007d53 	.word	0x08007d53
 8007b1c:	08007cf3 	.word	0x08007cf3
 8007b20:	08007d1f 	.word	0x08007d1f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
      break;
 8007b3a:	e112      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7c1b      	ldrb	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10d      	bne.n	8007b60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b5e:	e100      	b.n	8007d62 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	f107 0208 	add.w	r2, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	2202      	movs	r2, #2
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	e0f2      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	885b      	ldrh	r3, [r3, #2]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b05      	cmp	r3, #5
 8007b84:	f200 80ac 	bhi.w	8007ce0 <USBD_GetDescriptor+0x204>
 8007b88:	a201      	add	r2, pc, #4	; (adr r2, 8007b90 <USBD_GetDescriptor+0xb4>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ba9 	.word	0x08007ba9
 8007b94:	08007bdd 	.word	0x08007bdd
 8007b98:	08007c11 	.word	0x08007c11
 8007b9c:	08007c45 	.word	0x08007c45
 8007ba0:	08007c79 	.word	0x08007c79
 8007ba4:	08007cad 	.word	0x08007cad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	7c12      	ldrb	r2, [r2, #16]
 8007bc0:	f107 0108 	add.w	r1, r7, #8
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
 8007bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bca:	e091      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fab2 	bl	8008138 <USBD_CtlError>
            err++;
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bda:	e089      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	7c12      	ldrb	r2, [r2, #16]
 8007bf4:	f107 0108 	add.w	r1, r7, #8
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4798      	blx	r3
 8007bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bfe:	e077      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fa98 	bl	8008138 <USBD_CtlError>
            err++;
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c0e:	e06f      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00b      	beq.n	8007c34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	7c12      	ldrb	r2, [r2, #16]
 8007c28:	f107 0108 	add.w	r1, r7, #8
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
 8007c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c32:	e05d      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa7e 	bl	8008138 <USBD_CtlError>
            err++;
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	72fb      	strb	r3, [r7, #11]
          break;
 8007c42:	e055      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	7c12      	ldrb	r2, [r2, #16]
 8007c5c:	f107 0108 	add.w	r1, r7, #8
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c66:	e043      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fa64 	bl	8008138 <USBD_CtlError>
            err++;
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	3301      	adds	r3, #1
 8007c74:	72fb      	strb	r3, [r7, #11]
          break;
 8007c76:	e03b      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	7c12      	ldrb	r2, [r2, #16]
 8007c90:	f107 0108 	add.w	r1, r7, #8
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
 8007c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9a:	e029      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa4a 	bl	8008138 <USBD_CtlError>
            err++;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8007caa:	e021      	b.n	8007cf0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cce:	e00f      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa30 	bl	8008138 <USBD_CtlError>
            err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cde:	e007      	b.n	8007cf0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa28 	bl	8008138 <USBD_CtlError>
          err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007cee:	bf00      	nop
      }
      break;
 8007cf0:	e037      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7c1b      	ldrb	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	f107 0208 	add.w	r2, r7, #8
 8007d06:	4610      	mov	r0, r2
 8007d08:	4798      	blx	r3
 8007d0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0c:	e029      	b.n	8007d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fa11 	bl	8008138 <USBD_CtlError>
        err++;
 8007d16:	7afb      	ldrb	r3, [r7, #11]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1c:	e021      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7c1b      	ldrb	r3, [r3, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10d      	bne.n	8007d42 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	f107 0208 	add.w	r2, r7, #8
 8007d32:	4610      	mov	r0, r2
 8007d34:	4798      	blx	r3
 8007d36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	2207      	movs	r2, #7
 8007d3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d40:	e00f      	b.n	8007d62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f9f7 	bl	8008138 <USBD_CtlError>
        err++;
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d50:	e007      	b.n	8007d62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9ef 	bl	8008138 <USBD_CtlError>
      err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	bf00      	nop
  }

  if (err != 0U)
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11e      	bne.n	8007da6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	88db      	ldrh	r3, [r3, #6]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d016      	beq.n	8007d9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d70:	893b      	ldrh	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00e      	beq.n	8007d94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	88da      	ldrh	r2, [r3, #6]
 8007d7a:	893b      	ldrh	r3, [r7, #8]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	bf28      	it	cs
 8007d80:	4613      	movcs	r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d86:	893b      	ldrh	r3, [r7, #8]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	68f9      	ldr	r1, [r7, #12]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fa44 	bl	800821a <USBD_CtlSendData>
 8007d92:	e009      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9ce 	bl	8008138 <USBD_CtlError>
 8007d9c:	e004      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa95 	bl	80082ce <USBD_CtlSendStatus>
 8007da4:	e000      	b.n	8007da8 <USBD_GetDescriptor+0x2cc>
    return;
 8007da6:	bf00      	nop
  }
}
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop

08007db0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	889b      	ldrh	r3, [r3, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d131      	bne.n	8007e26 <USBD_SetAddress+0x76>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d12d      	bne.n	8007e26 <USBD_SetAddress+0x76>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	2b7f      	cmp	r3, #127	; 0x7f
 8007dd0:	d829      	bhi.n	8007e26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ddc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d104      	bne.n	8007df4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f9a3 	bl	8008138 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df2:	e01d      	b.n	8007e30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	7bfa      	ldrb	r2, [r7, #15]
 8007df8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 feed 	bl	8008be0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa61 	bl	80082ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d004      	beq.n	8007e1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	e009      	b.n	8007e30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e004      	b.n	8007e30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f985 	bl	8008138 <USBD_CtlError>
  }
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	885b      	ldrh	r3, [r3, #2]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	4b4c      	ldr	r3, [pc, #304]	; (8007f80 <USBD_SetConfig+0x148>)
 8007e4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e50:	4b4b      	ldr	r3, [pc, #300]	; (8007f80 <USBD_SetConfig+0x148>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d905      	bls.n	8007e64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f96c 	bl	8008138 <USBD_CtlError>
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e088      	b.n	8007f76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d002      	beq.n	8007e76 <USBD_SetConfig+0x3e>
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d025      	beq.n	8007ec0 <USBD_SetConfig+0x88>
 8007e74:	e071      	b.n	8007f5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e76:	4b42      	ldr	r3, [pc, #264]	; (8007f80 <USBD_SetConfig+0x148>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01c      	beq.n	8007eb8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007e7e:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <USBD_SetConfig+0x148>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e88:	4b3d      	ldr	r3, [pc, #244]	; (8007f80 <USBD_SetConfig+0x148>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff f948 	bl	8007124 <USBD_SetClassConfig>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d004      	beq.n	8007ea8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f949 	bl	8008138 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ea6:	e065      	b.n	8007f74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fa10 	bl	80082ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007eb6:	e05d      	b.n	8007f74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa08 	bl	80082ce <USBD_CtlSendStatus>
      break;
 8007ebe:	e059      	b.n	8007f74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	; (8007f80 <USBD_SetConfig+0x148>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d112      	bne.n	8007eee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ed0:	4b2b      	ldr	r3, [pc, #172]	; (8007f80 <USBD_SetConfig+0x148>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eda:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <USBD_SetConfig+0x148>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff f93b 	bl	800715c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9f1 	bl	80082ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eec:	e042      	b.n	8007f74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007eee:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <USBD_SetConfig+0x148>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d02a      	beq.n	8007f52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff f929 	bl	800715c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f0a:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <USBD_SetConfig+0x148>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f14:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <USBD_SetConfig+0x148>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff f902 	bl	8007124 <USBD_SetClassConfig>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f903 	bl	8008138 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f90e 	bl	800715c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f48:	e014      	b.n	8007f74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9bf 	bl	80082ce <USBD_CtlSendStatus>
      break;
 8007f50:	e010      	b.n	8007f74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f9bb 	bl	80082ce <USBD_CtlSendStatus>
      break;
 8007f58:	e00c      	b.n	8007f74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f8eb 	bl	8008138 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f62:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <USBD_SetConfig+0x148>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff f8f7 	bl	800715c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	bf00      	nop
  }

  return ret;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200005a4 	.word	0x200005a4

08007f84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d004      	beq.n	8007fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8cd 	bl	8008138 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f9e:	e023      	b.n	8007fe8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	dc02      	bgt.n	8007fb2 <USBD_GetConfig+0x2e>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc03      	bgt.n	8007fb8 <USBD_GetConfig+0x34>
 8007fb0:	e015      	b.n	8007fde <USBD_GetConfig+0x5a>
 8007fb2:	2b03      	cmp	r3, #3
 8007fb4:	d00b      	beq.n	8007fce <USBD_GetConfig+0x4a>
 8007fb6:	e012      	b.n	8007fde <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f927 	bl	800821a <USBD_CtlSendData>
        break;
 8007fcc:	e00c      	b.n	8007fe8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f91f 	bl	800821a <USBD_CtlSendData>
        break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8a9 	bl	8008138 <USBD_CtlError>
        break;
 8007fe6:	bf00      	nop
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	2b02      	cmp	r3, #2
 8008006:	d81e      	bhi.n	8008046 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d004      	beq.n	800801a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f890 	bl	8008138 <USBD_CtlError>
        break;
 8008018:	e01a      	b.n	8008050 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f043 0202 	orr.w	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	330c      	adds	r3, #12
 800803a:	2202      	movs	r2, #2
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8eb 	bl	800821a <USBD_CtlSendData>
      break;
 8008044:	e004      	b.n	8008050 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f875 	bl	8008138 <USBD_CtlError>
      break;
 800804e:	bf00      	nop
  }
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d106      	bne.n	8008078 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f92b 	bl	80082ce <USBD_CtlSendStatus>
  }
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	b2db      	uxtb	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	2b02      	cmp	r3, #2
 8008096:	d80b      	bhi.n	80080b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	885b      	ldrh	r3, [r3, #2]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10c      	bne.n	80080ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f910 	bl	80082ce <USBD_CtlSendStatus>
      }
      break;
 80080ae:	e004      	b.n	80080ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f840 	bl	8008138 <USBD_CtlError>
      break;
 80080b8:	e000      	b.n	80080bc <USBD_ClrFeature+0x3c>
      break;
 80080ba:	bf00      	nop
  }
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff fabb 	bl	800766a <SWAPBYTE>
 80080f4:	4603      	mov	r3, r0
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff faae 	bl	800766a <SWAPBYTE>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3301      	adds	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7ff faa1 	bl	800766a <SWAPBYTE>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	80da      	strh	r2, [r3, #6]
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fce1 	bl	8008b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800814a:	2100      	movs	r1, #0
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fcdd 	bl	8008b0c <USBD_LL_StallEP>
}
 8008152:	bf00      	nop
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b086      	sub	sp, #24
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d036      	beq.n	80081de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008174:	6938      	ldr	r0, [r7, #16]
 8008176:	f000 f836 	bl	80081e6 <USBD_GetLen>
 800817a:	4603      	mov	r3, r0
 800817c:	3301      	adds	r3, #1
 800817e:	b29b      	uxth	r3, r3
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	7812      	ldrb	r2, [r2, #0]
 8008192:	701a      	strb	r2, [r3, #0]
  idx++;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	3301      	adds	r3, #1
 8008198:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4413      	add	r3, r2
 80081a0:	2203      	movs	r2, #3
 80081a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	3301      	adds	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081aa:	e013      	b.n	80081d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	7812      	ldrb	r2, [r2, #0]
 80081b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	3301      	adds	r3, #1
 80081bc:	613b      	str	r3, [r7, #16]
    idx++;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	3301      	adds	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	3301      	adds	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e7      	bne.n	80081ac <USBD_GetString+0x52>
 80081dc:	e000      	b.n	80081e0 <USBD_GetString+0x86>
    return;
 80081de:	bf00      	nop
  }
}
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081f6:	e005      	b.n	8008204 <USBD_GetLen+0x1e>
  {
    len++;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	3301      	adds	r3, #1
 80081fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3301      	adds	r3, #1
 8008202:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f5      	bne.n	80081f8 <USBD_GetLen+0x12>
  }

  return len;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2202      	movs	r2, #2
 800822a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	2100      	movs	r1, #0
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 fcec 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	2100      	movs	r1, #0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 fcdb 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2203      	movs	r2, #3
 8008282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	2100      	movs	r1, #0
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fcdf 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fcce 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2204      	movs	r2, #4
 80082da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082de:	2300      	movs	r3, #0
 80082e0:	2200      	movs	r2, #0
 80082e2:	2100      	movs	r1, #0
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fc9a 	bl	8008c1e <USBD_LL_Transmit>

  return USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2205      	movs	r2, #5
 8008300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008304:	2300      	movs	r3, #0
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fca8 	bl	8008c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008320:	2200      	movs	r2, #0
 8008322:	4912      	ldr	r1, [pc, #72]	; (800836c <MX_USB_DEVICE_Init+0x50>)
 8008324:	4812      	ldr	r0, [pc, #72]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 8008326:	f7fe fe8f 	bl	8007048 <USBD_Init>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008330:	f7f9 fb0e 	bl	8001950 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008334:	490f      	ldr	r1, [pc, #60]	; (8008374 <MX_USB_DEVICE_Init+0x58>)
 8008336:	480e      	ldr	r0, [pc, #56]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 8008338:	f7fe feb6 	bl	80070a8 <USBD_RegisterClass>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008342:	f7f9 fb05 	bl	8001950 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008346:	490c      	ldr	r1, [pc, #48]	; (8008378 <MX_USB_DEVICE_Init+0x5c>)
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 800834a:	f7fe fdd7 	bl	8006efc <USBD_CDC_RegisterInterface>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008354:	f7f9 fafc 	bl	8001950 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008358:	4805      	ldr	r0, [pc, #20]	; (8008370 <MX_USB_DEVICE_Init+0x54>)
 800835a:	f7fe fecc 	bl	80070f6 <USBD_Start>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008364:	f7f9 faf4 	bl	8001950 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}
 800836c:	2000036c 	.word	0x2000036c
 8008370:	200005a8 	.word	0x200005a8
 8008374:	20000254 	.word	0x20000254
 8008378:	20000358 	.word	0x20000358

0800837c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008380:	2200      	movs	r2, #0
 8008382:	4905      	ldr	r1, [pc, #20]	; (8008398 <CDC_Init_FS+0x1c>)
 8008384:	4805      	ldr	r0, [pc, #20]	; (800839c <CDC_Init_FS+0x20>)
 8008386:	f7fe fdce 	bl	8006f26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800838a:	4905      	ldr	r1, [pc, #20]	; (80083a0 <CDC_Init_FS+0x24>)
 800838c:	4803      	ldr	r0, [pc, #12]	; (800839c <CDC_Init_FS+0x20>)
 800838e:	f7fe fde8 	bl	8006f62 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008394:	4618      	mov	r0, r3
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20001078 	.word	0x20001078
 800839c:	200005a8 	.word	0x200005a8
 80083a0:	20000878 	.word	0x20000878

080083a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
 80083c0:	4613      	mov	r3, r2
 80083c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	2b23      	cmp	r3, #35	; 0x23
 80083c8:	d84a      	bhi.n	8008460 <CDC_Control_FS+0xac>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <CDC_Control_FS+0x1c>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	08008461 	.word	0x08008461
 80083d4:	08008461 	.word	0x08008461
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008461 	.word	0x08008461
 80083e0:	08008461 	.word	0x08008461
 80083e4:	08008461 	.word	0x08008461
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008461 	.word	0x08008461
 80083f0:	08008461 	.word	0x08008461
 80083f4:	08008461 	.word	0x08008461
 80083f8:	08008461 	.word	0x08008461
 80083fc:	08008461 	.word	0x08008461
 8008400:	08008461 	.word	0x08008461
 8008404:	08008461 	.word	0x08008461
 8008408:	08008461 	.word	0x08008461
 800840c:	08008461 	.word	0x08008461
 8008410:	08008461 	.word	0x08008461
 8008414:	08008461 	.word	0x08008461
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008461 	.word	0x08008461
 8008428:	08008461 	.word	0x08008461
 800842c:	08008461 	.word	0x08008461
 8008430:	08008461 	.word	0x08008461
 8008434:	08008461 	.word	0x08008461
 8008438:	08008461 	.word	0x08008461
 800843c:	08008461 	.word	0x08008461
 8008440:	08008461 	.word	0x08008461
 8008444:	08008461 	.word	0x08008461
 8008448:	08008461 	.word	0x08008461
 800844c:	08008461 	.word	0x08008461
 8008450:	08008461 	.word	0x08008461
 8008454:	08008461 	.word	0x08008461
 8008458:	08008461 	.word	0x08008461
 800845c:	08008461 	.word	0x08008461
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008460:	bf00      	nop
  }

  return (USBD_OK);
 8008462:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <CDC_Receive_FS+0x24>)
 800847e:	f7fe fd70 	bl	8006f62 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008482:	4804      	ldr	r0, [pc, #16]	; (8008494 <CDC_Receive_FS+0x24>)
 8008484:	f7fe fdb6 	bl	8006ff4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008488:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200005a8 	.word	0x200005a8

08008498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e00b      	b.n	80084d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	461a      	mov	r2, r3
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	4806      	ldr	r0, [pc, #24]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084c6:	f7fe fd2e 	bl	8006f26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084ca:	4805      	ldr	r0, [pc, #20]	; (80084e0 <CDC_Transmit_FS+0x48>)
 80084cc:	f7fe fd62 	bl	8006f94 <USBD_CDC_TransmitPacket>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200005a8 	.word	0x200005a8

080084e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
	...

08008508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2212      	movs	r2, #18
 8008518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800851a:	4b03      	ldr	r3, [pc, #12]	; (8008528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	20000388 	.word	0x20000388

0800852c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2204      	movs	r2, #4
 800853c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800853e:	4b03      	ldr	r3, [pc, #12]	; (800854c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	2000039c 	.word	0x2000039c

08008550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	4603      	mov	r3, r0
 8008558:	6039      	str	r1, [r7, #0]
 800855a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4907      	ldr	r1, [pc, #28]	; (8008584 <USBD_FS_ProductStrDescriptor+0x34>)
 8008566:	4808      	ldr	r0, [pc, #32]	; (8008588 <USBD_FS_ProductStrDescriptor+0x38>)
 8008568:	f7ff fdf7 	bl	800815a <USBD_GetString>
 800856c:	e004      	b.n	8008578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4904      	ldr	r1, [pc, #16]	; (8008584 <USBD_FS_ProductStrDescriptor+0x34>)
 8008572:	4805      	ldr	r0, [pc, #20]	; (8008588 <USBD_FS_ProductStrDescriptor+0x38>)
 8008574:	f7ff fdf1 	bl	800815a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008578:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20001878 	.word	0x20001878
 8008588:	08009834 	.word	0x08009834

0800858c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	4904      	ldr	r1, [pc, #16]	; (80085ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800859c:	4804      	ldr	r0, [pc, #16]	; (80085b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800859e:	f7ff fddc 	bl	800815a <USBD_GetString>
  return USBD_StrDesc;
 80085a2:	4b02      	ldr	r3, [pc, #8]	; (80085ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20001878 	.word	0x20001878
 80085b0:	0800984c 	.word	0x0800984c

080085b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	6039      	str	r1, [r7, #0]
 80085be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	221a      	movs	r2, #26
 80085c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085c6:	f000 f843 	bl	8008650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085ca:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200003a0 	.word	0x200003a0

080085d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	6039      	str	r1, [r7, #0]
 80085e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4907      	ldr	r1, [pc, #28]	; (800860c <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ee:	4808      	ldr	r0, [pc, #32]	; (8008610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f0:	f7ff fdb3 	bl	800815a <USBD_GetString>
 80085f4:	e004      	b.n	8008600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	4904      	ldr	r1, [pc, #16]	; (800860c <USBD_FS_ConfigStrDescriptor+0x34>)
 80085fa:	4805      	ldr	r0, [pc, #20]	; (8008610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085fc:	f7ff fdad 	bl	800815a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20001878 	.word	0x20001878
 8008610:	08009860 	.word	0x08009860

08008614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	4603      	mov	r3, r0
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008620:	79fb      	ldrb	r3, [r7, #7]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d105      	bne.n	8008632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4907      	ldr	r1, [pc, #28]	; (8008648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862a:	4808      	ldr	r0, [pc, #32]	; (800864c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800862c:	f7ff fd95 	bl	800815a <USBD_GetString>
 8008630:	e004      	b.n	800863c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4904      	ldr	r1, [pc, #16]	; (8008648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008636:	4805      	ldr	r0, [pc, #20]	; (800864c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008638:	f7ff fd8f 	bl	800815a <USBD_GetString>
  }
  return USBD_StrDesc;
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20001878 	.word	0x20001878
 800864c:	0800986c 	.word	0x0800986c

08008650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <Get_SerialNum+0x44>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <Get_SerialNum+0x48>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008662:	4b0e      	ldr	r3, [pc, #56]	; (800869c <Get_SerialNum+0x4c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d009      	beq.n	800868a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008676:	2208      	movs	r2, #8
 8008678:	4909      	ldr	r1, [pc, #36]	; (80086a0 <Get_SerialNum+0x50>)
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f814 	bl	80086a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008680:	2204      	movs	r2, #4
 8008682:	4908      	ldr	r1, [pc, #32]	; (80086a4 <Get_SerialNum+0x54>)
 8008684:	68b8      	ldr	r0, [r7, #8]
 8008686:	f000 f80f 	bl	80086a8 <IntToUnicode>
  }
}
 800868a:	bf00      	nop
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	1fff7a10 	.word	0x1fff7a10
 8008698:	1fff7a14 	.word	0x1fff7a14
 800869c:	1fff7a18 	.word	0x1fff7a18
 80086a0:	200003a2 	.word	0x200003a2
 80086a4:	200003b2 	.word	0x200003b2

080086a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]
 80086be:	e027      	b.n	8008710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	0f1b      	lsrs	r3, r3, #28
 80086c4:	2b09      	cmp	r3, #9
 80086c6:	d80b      	bhi.n	80086e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	0f1b      	lsrs	r3, r3, #28
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4619      	mov	r1, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	440b      	add	r3, r1
 80086d8:	3230      	adds	r2, #48	; 0x30
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e00a      	b.n	80086f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0f1b      	lsrs	r3, r3, #28
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4619      	mov	r1, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	440b      	add	r3, r1
 80086f0:	3237      	adds	r2, #55	; 0x37
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	3301      	adds	r3, #1
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	2200      	movs	r2, #0
 8008708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	3301      	adds	r3, #1
 800870e:	75fb      	strb	r3, [r7, #23]
 8008710:	7dfa      	ldrb	r2, [r7, #23]
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	429a      	cmp	r2, r3
 8008716:	d3d3      	bcc.n	80086c0 <IntToUnicode+0x18>
  }
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
	...

08008728 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	609a      	str	r2, [r3, #8]
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008748:	d13a      	bne.n	80087c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800874a:	2300      	movs	r3, #0
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	4a1d      	ldr	r2, [pc, #116]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	6313      	str	r3, [r2, #48]	; 0x30
 800875a:	4b1b      	ldr	r3, [pc, #108]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008766:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800876a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800876c:	2302      	movs	r3, #2
 800876e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008774:	2303      	movs	r3, #3
 8008776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008778:	230a      	movs	r3, #10
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877c:	f107 0314 	add.w	r3, r7, #20
 8008780:	4619      	mov	r1, r3
 8008782:	4812      	ldr	r0, [pc, #72]	; (80087cc <HAL_PCD_MspInit+0xa4>)
 8008784:	f7fa f97e 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	4a0e      	ldr	r2, [pc, #56]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	6353      	str	r3, [r2, #52]	; 0x34
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	4a0a      	ldr	r2, [pc, #40]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 800879e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087a2:	6453      	str	r3, [r2, #68]	; 0x44
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <HAL_PCD_MspInit+0xa0>)
 80087a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087b0:	2200      	movs	r2, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	2043      	movs	r0, #67	; 0x43
 80087b6:	f7fa f92a 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087ba:	2043      	movs	r0, #67	; 0x43
 80087bc:	f7fa f943 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087c0:	bf00      	nop
 80087c2:	3728      	adds	r7, #40	; 0x28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40020000 	.word	0x40020000

080087d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7fe fcd0 	bl	800718c <USBD_LL_SetupStage>
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	4613      	mov	r3, r2
 800880c:	00db      	lsls	r3, r3, #3
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	4619      	mov	r1, r3
 800881e:	f7fe fd0a 	bl	8007236 <USBD_LL_DataOutStage>
}
 8008822:	bf00      	nop
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800883c:	78fa      	ldrb	r2, [r7, #3]
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	3348      	adds	r3, #72	; 0x48
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4619      	mov	r1, r3
 8008852:	f7fe fd53 	bl	80072fc <USBD_LL_DataInStage>
}
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fe67 	bl	8007540 <USBD_LL_SOF>
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008882:	2301      	movs	r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e008      	b.n	80088a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d102      	bne.n	80088a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
 80088a0:	e001      	b.n	80088a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088a2:	f7f9 f855 	bl	8001950 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088ac:	7bfa      	ldrb	r2, [r7, #15]
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fe fe07 	bl	80074c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fdb3 	bl	8007428 <USBD_LL_Reset>
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
	...

080088cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fe02 	bl	80074e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <HAL_PCD_SuspendCallback+0x48>)
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	4a03      	ldr	r2, [pc, #12]	; (8008914 <HAL_PCD_SuspendCallback+0x48>)
 8008906:	f043 0306 	orr.w	r3, r3, #6
 800890a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	e000ed00 	.word	0xe000ed00

08008918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fdf2 	bl	8007510 <USBD_LL_Resume>
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fe40 	bl	80075d0 <USBD_LL_IsoOUTIncomplete>
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	460b      	mov	r3, r1
 8008962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	4611      	mov	r1, r2
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe fe08 	bl	8007584 <USBD_LL_IsoINIncomplete>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fe46 	bl	800761c <USBD_LL_DevConnected>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fe43 	bl	8007632 <USBD_LL_DevDisconnected>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d13c      	bne.n	8008a3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089c4:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <USBD_LL_Init+0x94>)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a1e      	ldr	r2, [pc, #120]	; (8008a48 <USBD_LL_Init+0x94>)
 80089d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089d4:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <USBD_LL_Init+0x94>)
 80089d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80089da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089dc:	4b1a      	ldr	r3, [pc, #104]	; (8008a48 <USBD_LL_Init+0x94>)
 80089de:	2204      	movs	r2, #4
 80089e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089e2:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <USBD_LL_Init+0x94>)
 80089e4:	2202      	movs	r2, #2
 80089e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <USBD_LL_Init+0x94>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089ee:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <USBD_LL_Init+0x94>)
 80089f0:	2202      	movs	r2, #2
 80089f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <USBD_LL_Init+0x94>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <USBD_LL_Init+0x94>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a06:	4b10      	ldr	r3, [pc, #64]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a12:	480d      	ldr	r0, [pc, #52]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a14:	f7fa f9eb 	bl	8002dee <HAL_PCD_Init>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a1e:	f7f8 ff97 	bl	8001950 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	4808      	ldr	r0, [pc, #32]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a26:	f7fb fb48 	bl	80040ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a2a:	2240      	movs	r2, #64	; 0x40
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4806      	ldr	r0, [pc, #24]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a30:	f7fb fafc 	bl	800402c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a34:	2280      	movs	r2, #128	; 0x80
 8008a36:	2101      	movs	r1, #1
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <USBD_LL_Init+0x94>)
 8008a3a:	f7fb faf7 	bl	800402c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20001a78 	.word	0x20001a78

08008a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fa fae0 	bl	8003028 <HAL_PCD_Start>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f942 	bl	8008cf8 <USBD_Get_USB_Status>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	70fb      	strb	r3, [r7, #3]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70bb      	strb	r3, [r7, #2]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008aaa:	78bb      	ldrb	r3, [r7, #2]
 8008aac:	883a      	ldrh	r2, [r7, #0]
 8008aae:	78f9      	ldrb	r1, [r7, #3]
 8008ab0:	f7fa fec4 	bl	800383c <HAL_PCD_EP_Open>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f91c 	bl	8008cf8 <USBD_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fa ff0d 	bl	800390c <HAL_PCD_EP_Close>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f8fd 	bl	8008cf8 <USBD_Get_USB_Status>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fa ffe5 	bl	8003afa <HAL_PCD_EP_SetStall>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f8de 	bl	8008cf8 <USBD_Get_USB_Status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	4611      	mov	r1, r2
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fb f82a 	bl	8003bc2 <HAL_PCD_EP_ClrStall>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 f8bf 	bl	8008cf8 <USBD_Get_USB_Status>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da0b      	bge.n	8008bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	4613      	mov	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	333e      	adds	r3, #62	; 0x3e
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	e00b      	b.n	8008bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bfa:	78fa      	ldrb	r2, [r7, #3]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fa fdf7 	bl	80037f2 <HAL_PCD_SetAddress>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f874 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c3c:	7af9      	ldrb	r1, [r7, #11]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	f7fa ff10 	bl	8003a66 <HAL_PCD_EP_Transmit>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 f853 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3718      	adds	r7, #24
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	607a      	str	r2, [r7, #4]
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c7e:	7af9      	ldrb	r1, [r7, #11]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	f7fa fe8c 	bl	80039a0 <HAL_PCD_EP_Receive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f832 	bl	8008cf8 <USBD_Get_USB_Status>
 8008c94:	4603      	mov	r3, r0
 8008c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	460b      	mov	r3, r1
 8008cac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cb4:	78fa      	ldrb	r2, [r7, #3]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7fa febc 	bl	8003a36 <HAL_PCD_EP_GetRxCount>
 8008cbe:	4603      	mov	r3, r0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cd0:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_static_malloc+0x18>)
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20001e80 	.word	0x20001e80

08008ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d817      	bhi.n	8008d3c <USBD_Get_USB_Status+0x44>
 8008d0c:	a201      	add	r2, pc, #4	; (adr r2, 8008d14 <USBD_Get_USB_Status+0x1c>)
 8008d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d12:	bf00      	nop
 8008d14:	08008d25 	.word	0x08008d25
 8008d18:	08008d2b 	.word	0x08008d2b
 8008d1c:	08008d31 	.word	0x08008d31
 8008d20:	08008d37 	.word	0x08008d37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e00b      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	e008      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    break;
 8008d34:	e005      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d36:	2303      	movs	r3, #3
 8008d38:	73fb      	strb	r3, [r7, #15]
    break;
 8008d3a:	e002      	b.n	8008d42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d40:	bf00      	nop
  }
  return usb_status;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <atoi>:
 8008d50:	220a      	movs	r2, #10
 8008d52:	2100      	movs	r1, #0
 8008d54:	f000 b8d4 	b.w	8008f00 <strtol>

08008d58 <__errno>:
 8008d58:	4b01      	ldr	r3, [pc, #4]	; (8008d60 <__errno+0x8>)
 8008d5a:	6818      	ldr	r0, [r3, #0]
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	200003bc 	.word	0x200003bc

08008d64 <__libc_init_array>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	4d0d      	ldr	r5, [pc, #52]	; (8008d9c <__libc_init_array+0x38>)
 8008d68:	4c0d      	ldr	r4, [pc, #52]	; (8008da0 <__libc_init_array+0x3c>)
 8008d6a:	1b64      	subs	r4, r4, r5
 8008d6c:	10a4      	asrs	r4, r4, #2
 8008d6e:	2600      	movs	r6, #0
 8008d70:	42a6      	cmp	r6, r4
 8008d72:	d109      	bne.n	8008d88 <__libc_init_array+0x24>
 8008d74:	4d0b      	ldr	r5, [pc, #44]	; (8008da4 <__libc_init_array+0x40>)
 8008d76:	4c0c      	ldr	r4, [pc, #48]	; (8008da8 <__libc_init_array+0x44>)
 8008d78:	f000 fd1a 	bl	80097b0 <_init>
 8008d7c:	1b64      	subs	r4, r4, r5
 8008d7e:	10a4      	asrs	r4, r4, #2
 8008d80:	2600      	movs	r6, #0
 8008d82:	42a6      	cmp	r6, r4
 8008d84:	d105      	bne.n	8008d92 <__libc_init_array+0x2e>
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d8c:	4798      	blx	r3
 8008d8e:	3601      	adds	r6, #1
 8008d90:	e7ee      	b.n	8008d70 <__libc_init_array+0xc>
 8008d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d96:	4798      	blx	r3
 8008d98:	3601      	adds	r6, #1
 8008d9a:	e7f2      	b.n	8008d82 <__libc_init_array+0x1e>
 8008d9c:	080099d0 	.word	0x080099d0
 8008da0:	080099d0 	.word	0x080099d0
 8008da4:	080099d0 	.word	0x080099d0
 8008da8:	080099d4 	.word	0x080099d4

08008dac <memset>:
 8008dac:	4402      	add	r2, r0
 8008dae:	4603      	mov	r3, r0
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d100      	bne.n	8008db6 <memset+0xa>
 8008db4:	4770      	bx	lr
 8008db6:	f803 1b01 	strb.w	r1, [r3], #1
 8008dba:	e7f9      	b.n	8008db0 <memset+0x4>

08008dbc <siprintf>:
 8008dbc:	b40e      	push	{r1, r2, r3}
 8008dbe:	b500      	push	{lr}
 8008dc0:	b09c      	sub	sp, #112	; 0x70
 8008dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8008dc4:	9002      	str	r0, [sp, #8]
 8008dc6:	9006      	str	r0, [sp, #24]
 8008dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dcc:	4809      	ldr	r0, [pc, #36]	; (8008df4 <siprintf+0x38>)
 8008dce:	9107      	str	r1, [sp, #28]
 8008dd0:	9104      	str	r1, [sp, #16]
 8008dd2:	4909      	ldr	r1, [pc, #36]	; (8008df8 <siprintf+0x3c>)
 8008dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd8:	9105      	str	r1, [sp, #20]
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	a902      	add	r1, sp, #8
 8008de0:	f000 f8f4 	bl	8008fcc <_svfiprintf_r>
 8008de4:	9b02      	ldr	r3, [sp, #8]
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
 8008dea:	b01c      	add	sp, #112	; 0x70
 8008dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008df0:	b003      	add	sp, #12
 8008df2:	4770      	bx	lr
 8008df4:	200003bc 	.word	0x200003bc
 8008df8:	ffff0208 	.word	0xffff0208

08008dfc <_strtol_l.constprop.0>:
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e02:	d001      	beq.n	8008e08 <_strtol_l.constprop.0+0xc>
 8008e04:	2b24      	cmp	r3, #36	; 0x24
 8008e06:	d906      	bls.n	8008e16 <_strtol_l.constprop.0+0x1a>
 8008e08:	f7ff ffa6 	bl	8008d58 <__errno>
 8008e0c:	2316      	movs	r3, #22
 8008e0e:	6003      	str	r3, [r0, #0]
 8008e10:	2000      	movs	r0, #0
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008efc <_strtol_l.constprop.0+0x100>
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	462e      	mov	r6, r5
 8008e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e22:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008e26:	f017 0708 	ands.w	r7, r7, #8
 8008e2a:	d1f7      	bne.n	8008e1c <_strtol_l.constprop.0+0x20>
 8008e2c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e2e:	d132      	bne.n	8008e96 <_strtol_l.constprop.0+0x9a>
 8008e30:	782c      	ldrb	r4, [r5, #0]
 8008e32:	2701      	movs	r7, #1
 8008e34:	1cb5      	adds	r5, r6, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d05b      	beq.n	8008ef2 <_strtol_l.constprop.0+0xf6>
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d109      	bne.n	8008e52 <_strtol_l.constprop.0+0x56>
 8008e3e:	2c30      	cmp	r4, #48	; 0x30
 8008e40:	d107      	bne.n	8008e52 <_strtol_l.constprop.0+0x56>
 8008e42:	782c      	ldrb	r4, [r5, #0]
 8008e44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e48:	2c58      	cmp	r4, #88	; 0x58
 8008e4a:	d14d      	bne.n	8008ee8 <_strtol_l.constprop.0+0xec>
 8008e4c:	786c      	ldrb	r4, [r5, #1]
 8008e4e:	2310      	movs	r3, #16
 8008e50:	3502      	adds	r5, #2
 8008e52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e56:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e5a:	f04f 0c00 	mov.w	ip, #0
 8008e5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e62:	4666      	mov	r6, ip
 8008e64:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e68:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008e6c:	f1be 0f09 	cmp.w	lr, #9
 8008e70:	d816      	bhi.n	8008ea0 <_strtol_l.constprop.0+0xa4>
 8008e72:	4674      	mov	r4, lr
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	dd24      	ble.n	8008ec2 <_strtol_l.constprop.0+0xc6>
 8008e78:	f1bc 0f00 	cmp.w	ip, #0
 8008e7c:	db1e      	blt.n	8008ebc <_strtol_l.constprop.0+0xc0>
 8008e7e:	45b1      	cmp	r9, r6
 8008e80:	d31c      	bcc.n	8008ebc <_strtol_l.constprop.0+0xc0>
 8008e82:	d101      	bne.n	8008e88 <_strtol_l.constprop.0+0x8c>
 8008e84:	45a2      	cmp	sl, r4
 8008e86:	db19      	blt.n	8008ebc <_strtol_l.constprop.0+0xc0>
 8008e88:	fb06 4603 	mla	r6, r6, r3, r4
 8008e8c:	f04f 0c01 	mov.w	ip, #1
 8008e90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e94:	e7e8      	b.n	8008e68 <_strtol_l.constprop.0+0x6c>
 8008e96:	2c2b      	cmp	r4, #43	; 0x2b
 8008e98:	bf04      	itt	eq
 8008e9a:	782c      	ldrbeq	r4, [r5, #0]
 8008e9c:	1cb5      	addeq	r5, r6, #2
 8008e9e:	e7ca      	b.n	8008e36 <_strtol_l.constprop.0+0x3a>
 8008ea0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ea4:	f1be 0f19 	cmp.w	lr, #25
 8008ea8:	d801      	bhi.n	8008eae <_strtol_l.constprop.0+0xb2>
 8008eaa:	3c37      	subs	r4, #55	; 0x37
 8008eac:	e7e2      	b.n	8008e74 <_strtol_l.constprop.0+0x78>
 8008eae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008eb2:	f1be 0f19 	cmp.w	lr, #25
 8008eb6:	d804      	bhi.n	8008ec2 <_strtol_l.constprop.0+0xc6>
 8008eb8:	3c57      	subs	r4, #87	; 0x57
 8008eba:	e7db      	b.n	8008e74 <_strtol_l.constprop.0+0x78>
 8008ebc:	f04f 3cff 	mov.w	ip, #4294967295
 8008ec0:	e7e6      	b.n	8008e90 <_strtol_l.constprop.0+0x94>
 8008ec2:	f1bc 0f00 	cmp.w	ip, #0
 8008ec6:	da05      	bge.n	8008ed4 <_strtol_l.constprop.0+0xd8>
 8008ec8:	2322      	movs	r3, #34	; 0x22
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	4646      	mov	r6, r8
 8008ece:	b942      	cbnz	r2, 8008ee2 <_strtol_l.constprop.0+0xe6>
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	e79e      	b.n	8008e12 <_strtol_l.constprop.0+0x16>
 8008ed4:	b107      	cbz	r7, 8008ed8 <_strtol_l.constprop.0+0xdc>
 8008ed6:	4276      	negs	r6, r6
 8008ed8:	2a00      	cmp	r2, #0
 8008eda:	d0f9      	beq.n	8008ed0 <_strtol_l.constprop.0+0xd4>
 8008edc:	f1bc 0f00 	cmp.w	ip, #0
 8008ee0:	d000      	beq.n	8008ee4 <_strtol_l.constprop.0+0xe8>
 8008ee2:	1e69      	subs	r1, r5, #1
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	e7f3      	b.n	8008ed0 <_strtol_l.constprop.0+0xd4>
 8008ee8:	2430      	movs	r4, #48	; 0x30
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1b1      	bne.n	8008e52 <_strtol_l.constprop.0+0x56>
 8008eee:	2308      	movs	r3, #8
 8008ef0:	e7af      	b.n	8008e52 <_strtol_l.constprop.0+0x56>
 8008ef2:	2c30      	cmp	r4, #48	; 0x30
 8008ef4:	d0a5      	beq.n	8008e42 <_strtol_l.constprop.0+0x46>
 8008ef6:	230a      	movs	r3, #10
 8008ef8:	e7ab      	b.n	8008e52 <_strtol_l.constprop.0+0x56>
 8008efa:	bf00      	nop
 8008efc:	08009895 	.word	0x08009895

08008f00 <strtol>:
 8008f00:	4613      	mov	r3, r2
 8008f02:	460a      	mov	r2, r1
 8008f04:	4601      	mov	r1, r0
 8008f06:	4802      	ldr	r0, [pc, #8]	; (8008f10 <strtol+0x10>)
 8008f08:	6800      	ldr	r0, [r0, #0]
 8008f0a:	f7ff bf77 	b.w	8008dfc <_strtol_l.constprop.0>
 8008f0e:	bf00      	nop
 8008f10:	200003bc 	.word	0x200003bc

08008f14 <__ssputs_r>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	688e      	ldr	r6, [r1, #8]
 8008f1a:	429e      	cmp	r6, r3
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4690      	mov	r8, r2
 8008f22:	461f      	mov	r7, r3
 8008f24:	d838      	bhi.n	8008f98 <__ssputs_r+0x84>
 8008f26:	898a      	ldrh	r2, [r1, #12]
 8008f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f2c:	d032      	beq.n	8008f94 <__ssputs_r+0x80>
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	6909      	ldr	r1, [r1, #16]
 8008f32:	eba5 0901 	sub.w	r9, r5, r1
 8008f36:	6965      	ldr	r5, [r4, #20]
 8008f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f40:	3301      	adds	r3, #1
 8008f42:	444b      	add	r3, r9
 8008f44:	106d      	asrs	r5, r5, #1
 8008f46:	429d      	cmp	r5, r3
 8008f48:	bf38      	it	cc
 8008f4a:	461d      	movcc	r5, r3
 8008f4c:	0553      	lsls	r3, r2, #21
 8008f4e:	d531      	bpl.n	8008fb4 <__ssputs_r+0xa0>
 8008f50:	4629      	mov	r1, r5
 8008f52:	f000 fb63 	bl	800961c <_malloc_r>
 8008f56:	4606      	mov	r6, r0
 8008f58:	b950      	cbnz	r0, 8008f70 <__ssputs_r+0x5c>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	f8ca 3000 	str.w	r3, [sl]
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f70:	6921      	ldr	r1, [r4, #16]
 8008f72:	464a      	mov	r2, r9
 8008f74:	f000 fabe 	bl	80094f4 <memcpy>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	6126      	str	r6, [r4, #16]
 8008f86:	6165      	str	r5, [r4, #20]
 8008f88:	444e      	add	r6, r9
 8008f8a:	eba5 0509 	sub.w	r5, r5, r9
 8008f8e:	6026      	str	r6, [r4, #0]
 8008f90:	60a5      	str	r5, [r4, #8]
 8008f92:	463e      	mov	r6, r7
 8008f94:	42be      	cmp	r6, r7
 8008f96:	d900      	bls.n	8008f9a <__ssputs_r+0x86>
 8008f98:	463e      	mov	r6, r7
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	4641      	mov	r1, r8
 8008fa0:	f000 fab6 	bl	8009510 <memmove>
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	1b9b      	subs	r3, r3, r6
 8008fa8:	60a3      	str	r3, [r4, #8]
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	4433      	add	r3, r6
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7db      	b.n	8008f6c <__ssputs_r+0x58>
 8008fb4:	462a      	mov	r2, r5
 8008fb6:	f000 fba5 	bl	8009704 <_realloc_r>
 8008fba:	4606      	mov	r6, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d1e1      	bne.n	8008f84 <__ssputs_r+0x70>
 8008fc0:	6921      	ldr	r1, [r4, #16]
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f000 fabe 	bl	8009544 <_free_r>
 8008fc8:	e7c7      	b.n	8008f5a <__ssputs_r+0x46>
	...

08008fcc <_svfiprintf_r>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4698      	mov	r8, r3
 8008fd2:	898b      	ldrh	r3, [r1, #12]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	b09d      	sub	sp, #116	; 0x74
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	d50e      	bpl.n	8008ffe <_svfiprintf_r+0x32>
 8008fe0:	690b      	ldr	r3, [r1, #16]
 8008fe2:	b963      	cbnz	r3, 8008ffe <_svfiprintf_r+0x32>
 8008fe4:	2140      	movs	r1, #64	; 0x40
 8008fe6:	f000 fb19 	bl	800961c <_malloc_r>
 8008fea:	6028      	str	r0, [r5, #0]
 8008fec:	6128      	str	r0, [r5, #16]
 8008fee:	b920      	cbnz	r0, 8008ffa <_svfiprintf_r+0x2e>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e0d1      	b.n	800919e <_svfiprintf_r+0x1d2>
 8008ffa:	2340      	movs	r3, #64	; 0x40
 8008ffc:	616b      	str	r3, [r5, #20]
 8008ffe:	2300      	movs	r3, #0
 8009000:	9309      	str	r3, [sp, #36]	; 0x24
 8009002:	2320      	movs	r3, #32
 8009004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009008:	f8cd 800c 	str.w	r8, [sp, #12]
 800900c:	2330      	movs	r3, #48	; 0x30
 800900e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091b8 <_svfiprintf_r+0x1ec>
 8009012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009016:	f04f 0901 	mov.w	r9, #1
 800901a:	4623      	mov	r3, r4
 800901c:	469a      	mov	sl, r3
 800901e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009022:	b10a      	cbz	r2, 8009028 <_svfiprintf_r+0x5c>
 8009024:	2a25      	cmp	r2, #37	; 0x25
 8009026:	d1f9      	bne.n	800901c <_svfiprintf_r+0x50>
 8009028:	ebba 0b04 	subs.w	fp, sl, r4
 800902c:	d00b      	beq.n	8009046 <_svfiprintf_r+0x7a>
 800902e:	465b      	mov	r3, fp
 8009030:	4622      	mov	r2, r4
 8009032:	4629      	mov	r1, r5
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ff6d 	bl	8008f14 <__ssputs_r>
 800903a:	3001      	adds	r0, #1
 800903c:	f000 80aa 	beq.w	8009194 <_svfiprintf_r+0x1c8>
 8009040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009042:	445a      	add	r2, fp
 8009044:	9209      	str	r2, [sp, #36]	; 0x24
 8009046:	f89a 3000 	ldrb.w	r3, [sl]
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80a2 	beq.w	8009194 <_svfiprintf_r+0x1c8>
 8009050:	2300      	movs	r3, #0
 8009052:	f04f 32ff 	mov.w	r2, #4294967295
 8009056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905a:	f10a 0a01 	add.w	sl, sl, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009066:	931a      	str	r3, [sp, #104]	; 0x68
 8009068:	4654      	mov	r4, sl
 800906a:	2205      	movs	r2, #5
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	4851      	ldr	r0, [pc, #324]	; (80091b8 <_svfiprintf_r+0x1ec>)
 8009072:	f7f7 f8ad 	bl	80001d0 <memchr>
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	b9d8      	cbnz	r0, 80090b2 <_svfiprintf_r+0xe6>
 800907a:	06d0      	lsls	r0, r2, #27
 800907c:	bf44      	itt	mi
 800907e:	2320      	movmi	r3, #32
 8009080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009084:	0711      	lsls	r1, r2, #28
 8009086:	bf44      	itt	mi
 8009088:	232b      	movmi	r3, #43	; 0x2b
 800908a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908e:	f89a 3000 	ldrb.w	r3, [sl]
 8009092:	2b2a      	cmp	r3, #42	; 0x2a
 8009094:	d015      	beq.n	80090c2 <_svfiprintf_r+0xf6>
 8009096:	9a07      	ldr	r2, [sp, #28]
 8009098:	4654      	mov	r4, sl
 800909a:	2000      	movs	r0, #0
 800909c:	f04f 0c0a 	mov.w	ip, #10
 80090a0:	4621      	mov	r1, r4
 80090a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a6:	3b30      	subs	r3, #48	; 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d94e      	bls.n	800914a <_svfiprintf_r+0x17e>
 80090ac:	b1b0      	cbz	r0, 80090dc <_svfiprintf_r+0x110>
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	e014      	b.n	80090dc <_svfiprintf_r+0x110>
 80090b2:	eba0 0308 	sub.w	r3, r0, r8
 80090b6:	fa09 f303 	lsl.w	r3, r9, r3
 80090ba:	4313      	orrs	r3, r2
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	46a2      	mov	sl, r4
 80090c0:	e7d2      	b.n	8009068 <_svfiprintf_r+0x9c>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d19      	adds	r1, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9103      	str	r1, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfbb      	ittet	lt
 80090ce:	425b      	neglt	r3, r3
 80090d0:	f042 0202 	orrlt.w	r2, r2, #2
 80090d4:	9307      	strge	r3, [sp, #28]
 80090d6:	9307      	strlt	r3, [sp, #28]
 80090d8:	bfb8      	it	lt
 80090da:	9204      	strlt	r2, [sp, #16]
 80090dc:	7823      	ldrb	r3, [r4, #0]
 80090de:	2b2e      	cmp	r3, #46	; 0x2e
 80090e0:	d10c      	bne.n	80090fc <_svfiprintf_r+0x130>
 80090e2:	7863      	ldrb	r3, [r4, #1]
 80090e4:	2b2a      	cmp	r3, #42	; 0x2a
 80090e6:	d135      	bne.n	8009154 <_svfiprintf_r+0x188>
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	9203      	str	r2, [sp, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	bfb8      	it	lt
 80090f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f8:	3402      	adds	r4, #2
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091c8 <_svfiprintf_r+0x1fc>
 8009100:	7821      	ldrb	r1, [r4, #0]
 8009102:	2203      	movs	r2, #3
 8009104:	4650      	mov	r0, sl
 8009106:	f7f7 f863 	bl	80001d0 <memchr>
 800910a:	b140      	cbz	r0, 800911e <_svfiprintf_r+0x152>
 800910c:	2340      	movs	r3, #64	; 0x40
 800910e:	eba0 000a 	sub.w	r0, r0, sl
 8009112:	fa03 f000 	lsl.w	r0, r3, r0
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	4303      	orrs	r3, r0
 800911a:	3401      	adds	r4, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	4826      	ldr	r0, [pc, #152]	; (80091bc <_svfiprintf_r+0x1f0>)
 8009124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009128:	2206      	movs	r2, #6
 800912a:	f7f7 f851 	bl	80001d0 <memchr>
 800912e:	2800      	cmp	r0, #0
 8009130:	d038      	beq.n	80091a4 <_svfiprintf_r+0x1d8>
 8009132:	4b23      	ldr	r3, [pc, #140]	; (80091c0 <_svfiprintf_r+0x1f4>)
 8009134:	bb1b      	cbnz	r3, 800917e <_svfiprintf_r+0x1b2>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	3307      	adds	r3, #7
 800913a:	f023 0307 	bic.w	r3, r3, #7
 800913e:	3308      	adds	r3, #8
 8009140:	9303      	str	r3, [sp, #12]
 8009142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009144:	4433      	add	r3, r6
 8009146:	9309      	str	r3, [sp, #36]	; 0x24
 8009148:	e767      	b.n	800901a <_svfiprintf_r+0x4e>
 800914a:	fb0c 3202 	mla	r2, ip, r2, r3
 800914e:	460c      	mov	r4, r1
 8009150:	2001      	movs	r0, #1
 8009152:	e7a5      	b.n	80090a0 <_svfiprintf_r+0xd4>
 8009154:	2300      	movs	r3, #0
 8009156:	3401      	adds	r4, #1
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	4619      	mov	r1, r3
 800915c:	f04f 0c0a 	mov.w	ip, #10
 8009160:	4620      	mov	r0, r4
 8009162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009166:	3a30      	subs	r2, #48	; 0x30
 8009168:	2a09      	cmp	r2, #9
 800916a:	d903      	bls.n	8009174 <_svfiprintf_r+0x1a8>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0c5      	beq.n	80090fc <_svfiprintf_r+0x130>
 8009170:	9105      	str	r1, [sp, #20]
 8009172:	e7c3      	b.n	80090fc <_svfiprintf_r+0x130>
 8009174:	fb0c 2101 	mla	r1, ip, r1, r2
 8009178:	4604      	mov	r4, r0
 800917a:	2301      	movs	r3, #1
 800917c:	e7f0      	b.n	8009160 <_svfiprintf_r+0x194>
 800917e:	ab03      	add	r3, sp, #12
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	462a      	mov	r2, r5
 8009184:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <_svfiprintf_r+0x1f8>)
 8009186:	a904      	add	r1, sp, #16
 8009188:	4638      	mov	r0, r7
 800918a:	f3af 8000 	nop.w
 800918e:	1c42      	adds	r2, r0, #1
 8009190:	4606      	mov	r6, r0
 8009192:	d1d6      	bne.n	8009142 <_svfiprintf_r+0x176>
 8009194:	89ab      	ldrh	r3, [r5, #12]
 8009196:	065b      	lsls	r3, r3, #25
 8009198:	f53f af2c 	bmi.w	8008ff4 <_svfiprintf_r+0x28>
 800919c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800919e:	b01d      	add	sp, #116	; 0x74
 80091a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a4:	ab03      	add	r3, sp, #12
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	462a      	mov	r2, r5
 80091aa:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <_svfiprintf_r+0x1f8>)
 80091ac:	a904      	add	r1, sp, #16
 80091ae:	4638      	mov	r0, r7
 80091b0:	f000 f87a 	bl	80092a8 <_printf_i>
 80091b4:	e7eb      	b.n	800918e <_svfiprintf_r+0x1c2>
 80091b6:	bf00      	nop
 80091b8:	08009995 	.word	0x08009995
 80091bc:	0800999f 	.word	0x0800999f
 80091c0:	00000000 	.word	0x00000000
 80091c4:	08008f15 	.word	0x08008f15
 80091c8:	0800999b 	.word	0x0800999b

080091cc <_printf_common>:
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	4616      	mov	r6, r2
 80091d2:	4699      	mov	r9, r3
 80091d4:	688a      	ldr	r2, [r1, #8]
 80091d6:	690b      	ldr	r3, [r1, #16]
 80091d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091dc:	4293      	cmp	r3, r2
 80091de:	bfb8      	it	lt
 80091e0:	4613      	movlt	r3, r2
 80091e2:	6033      	str	r3, [r6, #0]
 80091e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091e8:	4607      	mov	r7, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b10a      	cbz	r2, 80091f2 <_printf_common+0x26>
 80091ee:	3301      	adds	r3, #1
 80091f0:	6033      	str	r3, [r6, #0]
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	0699      	lsls	r1, r3, #26
 80091f6:	bf42      	ittt	mi
 80091f8:	6833      	ldrmi	r3, [r6, #0]
 80091fa:	3302      	addmi	r3, #2
 80091fc:	6033      	strmi	r3, [r6, #0]
 80091fe:	6825      	ldr	r5, [r4, #0]
 8009200:	f015 0506 	ands.w	r5, r5, #6
 8009204:	d106      	bne.n	8009214 <_printf_common+0x48>
 8009206:	f104 0a19 	add.w	sl, r4, #25
 800920a:	68e3      	ldr	r3, [r4, #12]
 800920c:	6832      	ldr	r2, [r6, #0]
 800920e:	1a9b      	subs	r3, r3, r2
 8009210:	42ab      	cmp	r3, r5
 8009212:	dc26      	bgt.n	8009262 <_printf_common+0x96>
 8009214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009218:	1e13      	subs	r3, r2, #0
 800921a:	6822      	ldr	r2, [r4, #0]
 800921c:	bf18      	it	ne
 800921e:	2301      	movne	r3, #1
 8009220:	0692      	lsls	r2, r2, #26
 8009222:	d42b      	bmi.n	800927c <_printf_common+0xb0>
 8009224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009228:	4649      	mov	r1, r9
 800922a:	4638      	mov	r0, r7
 800922c:	47c0      	blx	r8
 800922e:	3001      	adds	r0, #1
 8009230:	d01e      	beq.n	8009270 <_printf_common+0xa4>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	68e5      	ldr	r5, [r4, #12]
 8009236:	6832      	ldr	r2, [r6, #0]
 8009238:	f003 0306 	and.w	r3, r3, #6
 800923c:	2b04      	cmp	r3, #4
 800923e:	bf08      	it	eq
 8009240:	1aad      	subeq	r5, r5, r2
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	bf0c      	ite	eq
 8009248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800924c:	2500      	movne	r5, #0
 800924e:	4293      	cmp	r3, r2
 8009250:	bfc4      	itt	gt
 8009252:	1a9b      	subgt	r3, r3, r2
 8009254:	18ed      	addgt	r5, r5, r3
 8009256:	2600      	movs	r6, #0
 8009258:	341a      	adds	r4, #26
 800925a:	42b5      	cmp	r5, r6
 800925c:	d11a      	bne.n	8009294 <_printf_common+0xc8>
 800925e:	2000      	movs	r0, #0
 8009260:	e008      	b.n	8009274 <_printf_common+0xa8>
 8009262:	2301      	movs	r3, #1
 8009264:	4652      	mov	r2, sl
 8009266:	4649      	mov	r1, r9
 8009268:	4638      	mov	r0, r7
 800926a:	47c0      	blx	r8
 800926c:	3001      	adds	r0, #1
 800926e:	d103      	bne.n	8009278 <_printf_common+0xac>
 8009270:	f04f 30ff 	mov.w	r0, #4294967295
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	3501      	adds	r5, #1
 800927a:	e7c6      	b.n	800920a <_printf_common+0x3e>
 800927c:	18e1      	adds	r1, r4, r3
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	2030      	movs	r0, #48	; 0x30
 8009282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009286:	4422      	add	r2, r4
 8009288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800928c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009290:	3302      	adds	r3, #2
 8009292:	e7c7      	b.n	8009224 <_printf_common+0x58>
 8009294:	2301      	movs	r3, #1
 8009296:	4622      	mov	r2, r4
 8009298:	4649      	mov	r1, r9
 800929a:	4638      	mov	r0, r7
 800929c:	47c0      	blx	r8
 800929e:	3001      	adds	r0, #1
 80092a0:	d0e6      	beq.n	8009270 <_printf_common+0xa4>
 80092a2:	3601      	adds	r6, #1
 80092a4:	e7d9      	b.n	800925a <_printf_common+0x8e>
	...

080092a8 <_printf_i>:
 80092a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	7e0f      	ldrb	r7, [r1, #24]
 80092ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092b0:	2f78      	cmp	r7, #120	; 0x78
 80092b2:	4691      	mov	r9, r2
 80092b4:	4680      	mov	r8, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	469a      	mov	sl, r3
 80092ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092be:	d807      	bhi.n	80092d0 <_printf_i+0x28>
 80092c0:	2f62      	cmp	r7, #98	; 0x62
 80092c2:	d80a      	bhi.n	80092da <_printf_i+0x32>
 80092c4:	2f00      	cmp	r7, #0
 80092c6:	f000 80d8 	beq.w	800947a <_printf_i+0x1d2>
 80092ca:	2f58      	cmp	r7, #88	; 0x58
 80092cc:	f000 80a3 	beq.w	8009416 <_printf_i+0x16e>
 80092d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092d8:	e03a      	b.n	8009350 <_printf_i+0xa8>
 80092da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092de:	2b15      	cmp	r3, #21
 80092e0:	d8f6      	bhi.n	80092d0 <_printf_i+0x28>
 80092e2:	a101      	add	r1, pc, #4	; (adr r1, 80092e8 <_printf_i+0x40>)
 80092e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092e8:	08009341 	.word	0x08009341
 80092ec:	08009355 	.word	0x08009355
 80092f0:	080092d1 	.word	0x080092d1
 80092f4:	080092d1 	.word	0x080092d1
 80092f8:	080092d1 	.word	0x080092d1
 80092fc:	080092d1 	.word	0x080092d1
 8009300:	08009355 	.word	0x08009355
 8009304:	080092d1 	.word	0x080092d1
 8009308:	080092d1 	.word	0x080092d1
 800930c:	080092d1 	.word	0x080092d1
 8009310:	080092d1 	.word	0x080092d1
 8009314:	08009461 	.word	0x08009461
 8009318:	08009385 	.word	0x08009385
 800931c:	08009443 	.word	0x08009443
 8009320:	080092d1 	.word	0x080092d1
 8009324:	080092d1 	.word	0x080092d1
 8009328:	08009483 	.word	0x08009483
 800932c:	080092d1 	.word	0x080092d1
 8009330:	08009385 	.word	0x08009385
 8009334:	080092d1 	.word	0x080092d1
 8009338:	080092d1 	.word	0x080092d1
 800933c:	0800944b 	.word	0x0800944b
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	1d1a      	adds	r2, r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	602a      	str	r2, [r5, #0]
 8009348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800934c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009350:	2301      	movs	r3, #1
 8009352:	e0a3      	b.n	800949c <_printf_i+0x1f4>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	6829      	ldr	r1, [r5, #0]
 8009358:	0606      	lsls	r6, r0, #24
 800935a:	f101 0304 	add.w	r3, r1, #4
 800935e:	d50a      	bpl.n	8009376 <_printf_i+0xce>
 8009360:	680e      	ldr	r6, [r1, #0]
 8009362:	602b      	str	r3, [r5, #0]
 8009364:	2e00      	cmp	r6, #0
 8009366:	da03      	bge.n	8009370 <_printf_i+0xc8>
 8009368:	232d      	movs	r3, #45	; 0x2d
 800936a:	4276      	negs	r6, r6
 800936c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009370:	485e      	ldr	r0, [pc, #376]	; (80094ec <_printf_i+0x244>)
 8009372:	230a      	movs	r3, #10
 8009374:	e019      	b.n	80093aa <_printf_i+0x102>
 8009376:	680e      	ldr	r6, [r1, #0]
 8009378:	602b      	str	r3, [r5, #0]
 800937a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800937e:	bf18      	it	ne
 8009380:	b236      	sxthne	r6, r6
 8009382:	e7ef      	b.n	8009364 <_printf_i+0xbc>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	1d19      	adds	r1, r3, #4
 800938a:	6029      	str	r1, [r5, #0]
 800938c:	0601      	lsls	r1, r0, #24
 800938e:	d501      	bpl.n	8009394 <_printf_i+0xec>
 8009390:	681e      	ldr	r6, [r3, #0]
 8009392:	e002      	b.n	800939a <_printf_i+0xf2>
 8009394:	0646      	lsls	r6, r0, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0xe8>
 8009398:	881e      	ldrh	r6, [r3, #0]
 800939a:	4854      	ldr	r0, [pc, #336]	; (80094ec <_printf_i+0x244>)
 800939c:	2f6f      	cmp	r7, #111	; 0x6f
 800939e:	bf0c      	ite	eq
 80093a0:	2308      	moveq	r3, #8
 80093a2:	230a      	movne	r3, #10
 80093a4:	2100      	movs	r1, #0
 80093a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093aa:	6865      	ldr	r5, [r4, #4]
 80093ac:	60a5      	str	r5, [r4, #8]
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	bfa2      	ittt	ge
 80093b2:	6821      	ldrge	r1, [r4, #0]
 80093b4:	f021 0104 	bicge.w	r1, r1, #4
 80093b8:	6021      	strge	r1, [r4, #0]
 80093ba:	b90e      	cbnz	r6, 80093c0 <_printf_i+0x118>
 80093bc:	2d00      	cmp	r5, #0
 80093be:	d04d      	beq.n	800945c <_printf_i+0x1b4>
 80093c0:	4615      	mov	r5, r2
 80093c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80093c6:	fb03 6711 	mls	r7, r3, r1, r6
 80093ca:	5dc7      	ldrb	r7, [r0, r7]
 80093cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093d0:	4637      	mov	r7, r6
 80093d2:	42bb      	cmp	r3, r7
 80093d4:	460e      	mov	r6, r1
 80093d6:	d9f4      	bls.n	80093c2 <_printf_i+0x11a>
 80093d8:	2b08      	cmp	r3, #8
 80093da:	d10b      	bne.n	80093f4 <_printf_i+0x14c>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	07de      	lsls	r6, r3, #31
 80093e0:	d508      	bpl.n	80093f4 <_printf_i+0x14c>
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	6861      	ldr	r1, [r4, #4]
 80093e6:	4299      	cmp	r1, r3
 80093e8:	bfde      	ittt	le
 80093ea:	2330      	movle	r3, #48	; 0x30
 80093ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093f4:	1b52      	subs	r2, r2, r5
 80093f6:	6122      	str	r2, [r4, #16]
 80093f8:	f8cd a000 	str.w	sl, [sp]
 80093fc:	464b      	mov	r3, r9
 80093fe:	aa03      	add	r2, sp, #12
 8009400:	4621      	mov	r1, r4
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff fee2 	bl	80091cc <_printf_common>
 8009408:	3001      	adds	r0, #1
 800940a:	d14c      	bne.n	80094a6 <_printf_i+0x1fe>
 800940c:	f04f 30ff 	mov.w	r0, #4294967295
 8009410:	b004      	add	sp, #16
 8009412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009416:	4835      	ldr	r0, [pc, #212]	; (80094ec <_printf_i+0x244>)
 8009418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800941c:	6829      	ldr	r1, [r5, #0]
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f851 6b04 	ldr.w	r6, [r1], #4
 8009424:	6029      	str	r1, [r5, #0]
 8009426:	061d      	lsls	r5, r3, #24
 8009428:	d514      	bpl.n	8009454 <_printf_i+0x1ac>
 800942a:	07df      	lsls	r7, r3, #31
 800942c:	bf44      	itt	mi
 800942e:	f043 0320 	orrmi.w	r3, r3, #32
 8009432:	6023      	strmi	r3, [r4, #0]
 8009434:	b91e      	cbnz	r6, 800943e <_printf_i+0x196>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f023 0320 	bic.w	r3, r3, #32
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	2310      	movs	r3, #16
 8009440:	e7b0      	b.n	80093a4 <_printf_i+0xfc>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	f043 0320 	orr.w	r3, r3, #32
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	2378      	movs	r3, #120	; 0x78
 800944c:	4828      	ldr	r0, [pc, #160]	; (80094f0 <_printf_i+0x248>)
 800944e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009452:	e7e3      	b.n	800941c <_printf_i+0x174>
 8009454:	0659      	lsls	r1, r3, #25
 8009456:	bf48      	it	mi
 8009458:	b2b6      	uxthmi	r6, r6
 800945a:	e7e6      	b.n	800942a <_printf_i+0x182>
 800945c:	4615      	mov	r5, r2
 800945e:	e7bb      	b.n	80093d8 <_printf_i+0x130>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	6826      	ldr	r6, [r4, #0]
 8009464:	6961      	ldr	r1, [r4, #20]
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	6028      	str	r0, [r5, #0]
 800946a:	0635      	lsls	r5, r6, #24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	d501      	bpl.n	8009474 <_printf_i+0x1cc>
 8009470:	6019      	str	r1, [r3, #0]
 8009472:	e002      	b.n	800947a <_printf_i+0x1d2>
 8009474:	0670      	lsls	r0, r6, #25
 8009476:	d5fb      	bpl.n	8009470 <_printf_i+0x1c8>
 8009478:	8019      	strh	r1, [r3, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	6123      	str	r3, [r4, #16]
 800947e:	4615      	mov	r5, r2
 8009480:	e7ba      	b.n	80093f8 <_printf_i+0x150>
 8009482:	682b      	ldr	r3, [r5, #0]
 8009484:	1d1a      	adds	r2, r3, #4
 8009486:	602a      	str	r2, [r5, #0]
 8009488:	681d      	ldr	r5, [r3, #0]
 800948a:	6862      	ldr	r2, [r4, #4]
 800948c:	2100      	movs	r1, #0
 800948e:	4628      	mov	r0, r5
 8009490:	f7f6 fe9e 	bl	80001d0 <memchr>
 8009494:	b108      	cbz	r0, 800949a <_printf_i+0x1f2>
 8009496:	1b40      	subs	r0, r0, r5
 8009498:	6060      	str	r0, [r4, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	2300      	movs	r3, #0
 80094a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094a4:	e7a8      	b.n	80093f8 <_printf_i+0x150>
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	462a      	mov	r2, r5
 80094aa:	4649      	mov	r1, r9
 80094ac:	4640      	mov	r0, r8
 80094ae:	47d0      	blx	sl
 80094b0:	3001      	adds	r0, #1
 80094b2:	d0ab      	beq.n	800940c <_printf_i+0x164>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	079b      	lsls	r3, r3, #30
 80094b8:	d413      	bmi.n	80094e2 <_printf_i+0x23a>
 80094ba:	68e0      	ldr	r0, [r4, #12]
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	4298      	cmp	r0, r3
 80094c0:	bfb8      	it	lt
 80094c2:	4618      	movlt	r0, r3
 80094c4:	e7a4      	b.n	8009410 <_printf_i+0x168>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4632      	mov	r2, r6
 80094ca:	4649      	mov	r1, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	47d0      	blx	sl
 80094d0:	3001      	adds	r0, #1
 80094d2:	d09b      	beq.n	800940c <_printf_i+0x164>
 80094d4:	3501      	adds	r5, #1
 80094d6:	68e3      	ldr	r3, [r4, #12]
 80094d8:	9903      	ldr	r1, [sp, #12]
 80094da:	1a5b      	subs	r3, r3, r1
 80094dc:	42ab      	cmp	r3, r5
 80094de:	dcf2      	bgt.n	80094c6 <_printf_i+0x21e>
 80094e0:	e7eb      	b.n	80094ba <_printf_i+0x212>
 80094e2:	2500      	movs	r5, #0
 80094e4:	f104 0619 	add.w	r6, r4, #25
 80094e8:	e7f5      	b.n	80094d6 <_printf_i+0x22e>
 80094ea:	bf00      	nop
 80094ec:	080099a6 	.word	0x080099a6
 80094f0:	080099b7 	.word	0x080099b7

080094f4 <memcpy>:
 80094f4:	440a      	add	r2, r1
 80094f6:	4291      	cmp	r1, r2
 80094f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80094fc:	d100      	bne.n	8009500 <memcpy+0xc>
 80094fe:	4770      	bx	lr
 8009500:	b510      	push	{r4, lr}
 8009502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800950a:	4291      	cmp	r1, r2
 800950c:	d1f9      	bne.n	8009502 <memcpy+0xe>
 800950e:	bd10      	pop	{r4, pc}

08009510 <memmove>:
 8009510:	4288      	cmp	r0, r1
 8009512:	b510      	push	{r4, lr}
 8009514:	eb01 0402 	add.w	r4, r1, r2
 8009518:	d902      	bls.n	8009520 <memmove+0x10>
 800951a:	4284      	cmp	r4, r0
 800951c:	4623      	mov	r3, r4
 800951e:	d807      	bhi.n	8009530 <memmove+0x20>
 8009520:	1e43      	subs	r3, r0, #1
 8009522:	42a1      	cmp	r1, r4
 8009524:	d008      	beq.n	8009538 <memmove+0x28>
 8009526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800952a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800952e:	e7f8      	b.n	8009522 <memmove+0x12>
 8009530:	4402      	add	r2, r0
 8009532:	4601      	mov	r1, r0
 8009534:	428a      	cmp	r2, r1
 8009536:	d100      	bne.n	800953a <memmove+0x2a>
 8009538:	bd10      	pop	{r4, pc}
 800953a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800953e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009542:	e7f7      	b.n	8009534 <memmove+0x24>

08009544 <_free_r>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	2900      	cmp	r1, #0
 8009548:	d044      	beq.n	80095d4 <_free_r+0x90>
 800954a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954e:	9001      	str	r0, [sp, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f1a1 0404 	sub.w	r4, r1, #4
 8009556:	bfb8      	it	lt
 8009558:	18e4      	addlt	r4, r4, r3
 800955a:	f000 f913 	bl	8009784 <__malloc_lock>
 800955e:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <_free_r+0x94>)
 8009560:	9801      	ldr	r0, [sp, #4]
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	b933      	cbnz	r3, 8009574 <_free_r+0x30>
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	6014      	str	r4, [r2, #0]
 800956a:	b003      	add	sp, #12
 800956c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009570:	f000 b90e 	b.w	8009790 <__malloc_unlock>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d908      	bls.n	800958a <_free_r+0x46>
 8009578:	6825      	ldr	r5, [r4, #0]
 800957a:	1961      	adds	r1, r4, r5
 800957c:	428b      	cmp	r3, r1
 800957e:	bf01      	itttt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	1949      	addeq	r1, r1, r5
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	e7ed      	b.n	8009566 <_free_r+0x22>
 800958a:	461a      	mov	r2, r3
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	b10b      	cbz	r3, 8009594 <_free_r+0x50>
 8009590:	42a3      	cmp	r3, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x46>
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	1855      	adds	r5, r2, r1
 8009598:	42a5      	cmp	r5, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x70>
 800959c:	6824      	ldr	r4, [r4, #0]
 800959e:	4421      	add	r1, r4
 80095a0:	1854      	adds	r4, r2, r1
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	d1e0      	bne.n	800956a <_free_r+0x26>
 80095a8:	681c      	ldr	r4, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	6053      	str	r3, [r2, #4]
 80095ae:	4421      	add	r1, r4
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	e7da      	b.n	800956a <_free_r+0x26>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x78>
 80095b6:	230c      	movs	r3, #12
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	e7d6      	b.n	800956a <_free_r+0x26>
 80095bc:	6825      	ldr	r5, [r4, #0]
 80095be:	1961      	adds	r1, r4, r5
 80095c0:	428b      	cmp	r3, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6819      	ldreq	r1, [r3, #0]
 80095c6:	685b      	ldreq	r3, [r3, #4]
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1949      	addeq	r1, r1, r5
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	6054      	str	r4, [r2, #4]
 80095d2:	e7ca      	b.n	800956a <_free_r+0x26>
 80095d4:	b003      	add	sp, #12
 80095d6:	bd30      	pop	{r4, r5, pc}
 80095d8:	200020a0 	.word	0x200020a0

080095dc <sbrk_aligned>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	4e0e      	ldr	r6, [pc, #56]	; (8009618 <sbrk_aligned+0x3c>)
 80095e0:	460c      	mov	r4, r1
 80095e2:	6831      	ldr	r1, [r6, #0]
 80095e4:	4605      	mov	r5, r0
 80095e6:	b911      	cbnz	r1, 80095ee <sbrk_aligned+0x12>
 80095e8:	f000 f8bc 	bl	8009764 <_sbrk_r>
 80095ec:	6030      	str	r0, [r6, #0]
 80095ee:	4621      	mov	r1, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	f000 f8b7 	bl	8009764 <_sbrk_r>
 80095f6:	1c43      	adds	r3, r0, #1
 80095f8:	d00a      	beq.n	8009610 <sbrk_aligned+0x34>
 80095fa:	1cc4      	adds	r4, r0, #3
 80095fc:	f024 0403 	bic.w	r4, r4, #3
 8009600:	42a0      	cmp	r0, r4
 8009602:	d007      	beq.n	8009614 <sbrk_aligned+0x38>
 8009604:	1a21      	subs	r1, r4, r0
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f8ac 	bl	8009764 <_sbrk_r>
 800960c:	3001      	adds	r0, #1
 800960e:	d101      	bne.n	8009614 <sbrk_aligned+0x38>
 8009610:	f04f 34ff 	mov.w	r4, #4294967295
 8009614:	4620      	mov	r0, r4
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	200020a4 	.word	0x200020a4

0800961c <_malloc_r>:
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	1ccd      	adds	r5, r1, #3
 8009622:	f025 0503 	bic.w	r5, r5, #3
 8009626:	3508      	adds	r5, #8
 8009628:	2d0c      	cmp	r5, #12
 800962a:	bf38      	it	cc
 800962c:	250c      	movcc	r5, #12
 800962e:	2d00      	cmp	r5, #0
 8009630:	4607      	mov	r7, r0
 8009632:	db01      	blt.n	8009638 <_malloc_r+0x1c>
 8009634:	42a9      	cmp	r1, r5
 8009636:	d905      	bls.n	8009644 <_malloc_r+0x28>
 8009638:	230c      	movs	r3, #12
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	2600      	movs	r6, #0
 800963e:	4630      	mov	r0, r6
 8009640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009644:	4e2e      	ldr	r6, [pc, #184]	; (8009700 <_malloc_r+0xe4>)
 8009646:	f000 f89d 	bl	8009784 <__malloc_lock>
 800964a:	6833      	ldr	r3, [r6, #0]
 800964c:	461c      	mov	r4, r3
 800964e:	bb34      	cbnz	r4, 800969e <_malloc_r+0x82>
 8009650:	4629      	mov	r1, r5
 8009652:	4638      	mov	r0, r7
 8009654:	f7ff ffc2 	bl	80095dc <sbrk_aligned>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	4604      	mov	r4, r0
 800965c:	d14d      	bne.n	80096fa <_malloc_r+0xde>
 800965e:	6834      	ldr	r4, [r6, #0]
 8009660:	4626      	mov	r6, r4
 8009662:	2e00      	cmp	r6, #0
 8009664:	d140      	bne.n	80096e8 <_malloc_r+0xcc>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	4631      	mov	r1, r6
 800966a:	4638      	mov	r0, r7
 800966c:	eb04 0803 	add.w	r8, r4, r3
 8009670:	f000 f878 	bl	8009764 <_sbrk_r>
 8009674:	4580      	cmp	r8, r0
 8009676:	d13a      	bne.n	80096ee <_malloc_r+0xd2>
 8009678:	6821      	ldr	r1, [r4, #0]
 800967a:	3503      	adds	r5, #3
 800967c:	1a6d      	subs	r5, r5, r1
 800967e:	f025 0503 	bic.w	r5, r5, #3
 8009682:	3508      	adds	r5, #8
 8009684:	2d0c      	cmp	r5, #12
 8009686:	bf38      	it	cc
 8009688:	250c      	movcc	r5, #12
 800968a:	4629      	mov	r1, r5
 800968c:	4638      	mov	r0, r7
 800968e:	f7ff ffa5 	bl	80095dc <sbrk_aligned>
 8009692:	3001      	adds	r0, #1
 8009694:	d02b      	beq.n	80096ee <_malloc_r+0xd2>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	442b      	add	r3, r5
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	e00e      	b.n	80096bc <_malloc_r+0xa0>
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	1b52      	subs	r2, r2, r5
 80096a2:	d41e      	bmi.n	80096e2 <_malloc_r+0xc6>
 80096a4:	2a0b      	cmp	r2, #11
 80096a6:	d916      	bls.n	80096d6 <_malloc_r+0xba>
 80096a8:	1961      	adds	r1, r4, r5
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	6025      	str	r5, [r4, #0]
 80096ae:	bf18      	it	ne
 80096b0:	6059      	strne	r1, [r3, #4]
 80096b2:	6863      	ldr	r3, [r4, #4]
 80096b4:	bf08      	it	eq
 80096b6:	6031      	streq	r1, [r6, #0]
 80096b8:	5162      	str	r2, [r4, r5]
 80096ba:	604b      	str	r3, [r1, #4]
 80096bc:	4638      	mov	r0, r7
 80096be:	f104 060b 	add.w	r6, r4, #11
 80096c2:	f000 f865 	bl	8009790 <__malloc_unlock>
 80096c6:	f026 0607 	bic.w	r6, r6, #7
 80096ca:	1d23      	adds	r3, r4, #4
 80096cc:	1af2      	subs	r2, r6, r3
 80096ce:	d0b6      	beq.n	800963e <_malloc_r+0x22>
 80096d0:	1b9b      	subs	r3, r3, r6
 80096d2:	50a3      	str	r3, [r4, r2]
 80096d4:	e7b3      	b.n	800963e <_malloc_r+0x22>
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	42a3      	cmp	r3, r4
 80096da:	bf0c      	ite	eq
 80096dc:	6032      	streq	r2, [r6, #0]
 80096de:	605a      	strne	r2, [r3, #4]
 80096e0:	e7ec      	b.n	80096bc <_malloc_r+0xa0>
 80096e2:	4623      	mov	r3, r4
 80096e4:	6864      	ldr	r4, [r4, #4]
 80096e6:	e7b2      	b.n	800964e <_malloc_r+0x32>
 80096e8:	4634      	mov	r4, r6
 80096ea:	6876      	ldr	r6, [r6, #4]
 80096ec:	e7b9      	b.n	8009662 <_malloc_r+0x46>
 80096ee:	230c      	movs	r3, #12
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4638      	mov	r0, r7
 80096f4:	f000 f84c 	bl	8009790 <__malloc_unlock>
 80096f8:	e7a1      	b.n	800963e <_malloc_r+0x22>
 80096fa:	6025      	str	r5, [r4, #0]
 80096fc:	e7de      	b.n	80096bc <_malloc_r+0xa0>
 80096fe:	bf00      	nop
 8009700:	200020a0 	.word	0x200020a0

08009704 <_realloc_r>:
 8009704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009708:	4680      	mov	r8, r0
 800970a:	4614      	mov	r4, r2
 800970c:	460e      	mov	r6, r1
 800970e:	b921      	cbnz	r1, 800971a <_realloc_r+0x16>
 8009710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	4611      	mov	r1, r2
 8009716:	f7ff bf81 	b.w	800961c <_malloc_r>
 800971a:	b92a      	cbnz	r2, 8009728 <_realloc_r+0x24>
 800971c:	f7ff ff12 	bl	8009544 <_free_r>
 8009720:	4625      	mov	r5, r4
 8009722:	4628      	mov	r0, r5
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	f000 f838 	bl	800979c <_malloc_usable_size_r>
 800972c:	4284      	cmp	r4, r0
 800972e:	4607      	mov	r7, r0
 8009730:	d802      	bhi.n	8009738 <_realloc_r+0x34>
 8009732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009736:	d812      	bhi.n	800975e <_realloc_r+0x5a>
 8009738:	4621      	mov	r1, r4
 800973a:	4640      	mov	r0, r8
 800973c:	f7ff ff6e 	bl	800961c <_malloc_r>
 8009740:	4605      	mov	r5, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	d0ed      	beq.n	8009722 <_realloc_r+0x1e>
 8009746:	42bc      	cmp	r4, r7
 8009748:	4622      	mov	r2, r4
 800974a:	4631      	mov	r1, r6
 800974c:	bf28      	it	cs
 800974e:	463a      	movcs	r2, r7
 8009750:	f7ff fed0 	bl	80094f4 <memcpy>
 8009754:	4631      	mov	r1, r6
 8009756:	4640      	mov	r0, r8
 8009758:	f7ff fef4 	bl	8009544 <_free_r>
 800975c:	e7e1      	b.n	8009722 <_realloc_r+0x1e>
 800975e:	4635      	mov	r5, r6
 8009760:	e7df      	b.n	8009722 <_realloc_r+0x1e>
	...

08009764 <_sbrk_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d06      	ldr	r5, [pc, #24]	; (8009780 <_sbrk_r+0x1c>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	602b      	str	r3, [r5, #0]
 8009770:	f7f8 fbf6 	bl	8001f60 <_sbrk>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	d102      	bne.n	800977e <_sbrk_r+0x1a>
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	b103      	cbz	r3, 800977e <_sbrk_r+0x1a>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	200020a8 	.word	0x200020a8

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	; (800978c <__malloc_lock+0x8>)
 8009786:	f000 b811 	b.w	80097ac <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	200020ac 	.word	0x200020ac

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	; (8009798 <__malloc_unlock+0x8>)
 8009792:	f000 b80c 	b.w	80097ae <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	200020ac 	.word	0x200020ac

0800979c <_malloc_usable_size_r>:
 800979c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a0:	1f18      	subs	r0, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfbc      	itt	lt
 80097a6:	580b      	ldrlt	r3, [r1, r0]
 80097a8:	18c0      	addlt	r0, r0, r3
 80097aa:	4770      	bx	lr

080097ac <__retarget_lock_acquire_recursive>:
 80097ac:	4770      	bx	lr

080097ae <__retarget_lock_release_recursive>:
 80097ae:	4770      	bx	lr

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
