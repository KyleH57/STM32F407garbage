
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007804  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  20000180  08007b8c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001df0  08007b8c  00021df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019076  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f6  00000000  00000000  00039226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  0003db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025342  00000000  00000000  0003eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014fbe  00000000  00000000  00063eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6dd5  00000000  00000000  00078e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014fc5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004800  00000000  00000000  0014fcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007974 	.word	0x08007974

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007974 	.word	0x08007974

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc8d 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f85b 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f9fb 	bl	80008c8 <MX_GPIO_Init>
  MX_ADC2_Init();
 80004d2:	f000 f8c1 	bl	8000658 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004d6:	f000 f911 	bl	80006fc <MX_ADC3_Init>
  MX_CAN2_Init();
 80004da:	f000 f961 	bl	80007a0 <MX_CAN2_Init>
  MX_SPI1_Init();
 80004de:	f000 f993 	bl	8000808 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80004e2:	f000 f9c7 	bl	8000874 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004e6:	f006 fcff 	bl	8006ee8 <MX_USB_DEVICE_Init>
  static unsigned short pin_state = 0;




   uint8_t txBuf[8] = {'A','2','3','4','5','6','7','\n'};
 80004ea:	4a20      	ldr	r2, [pc, #128]	; (800056c <main+0xac>)
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f4:	e883 0003 	stmia.w	r3, {r0, r1}
   uint8_t rxBuf[8] = {'N','o','D','a','t','a','?','\n'};
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <main+0xb0>)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000500:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pin_state = !pin_state;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <main+0xb4>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	bf0c      	ite	eq
 800050c:	2301      	moveq	r3, #1
 800050e:	2300      	movne	r3, #0
 8000510:	b2db      	uxtb	r3, r3
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <main+0xb4>)
 8000516:	801a      	strh	r2, [r3, #0]
	  // write pin state
	  // NOTE: You can in turn use HAL_GPIO_TogglePin
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <main+0xb4>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	2102      	movs	r1, #2
 8000522:	4815      	ldr	r0, [pc, #84]	; (8000578 <main+0xb8>)
 8000524:	f001 fb00 	bl	8001b28 <HAL_GPIO_WritePin>
	  // synchronous delay for 500 ms
	  HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f000 fccc 	bl	8000ec8 <HAL_Delay>



	  //HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
	  HAL_Delay(3);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 fcc9 	bl	8000ec8 <HAL_Delay>

	  //blocking transmit
	  HAL_UART_Transmit(&huart3, txBuf, 8, 10);
 8000536:	f107 010c 	add.w	r1, r7, #12
 800053a:	230a      	movs	r3, #10
 800053c:	2208      	movs	r2, #8
 800053e:	480f      	ldr	r0, [pc, #60]	; (800057c <main+0xbc>)
 8000540:	f003 f9d6 	bl	80038f0 <HAL_UART_Transmit>
	  //HAL_Delay(3);

	  HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0xc0>)
 800054a:	f001 faed 	bl	8001b28 <HAL_GPIO_WritePin>

	  hStatus = HAL_UART_Receive(&huart3, rxBuf, 8, 1000);
 800054e:	1d39      	adds	r1, r7, #4
 8000550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000554:	2208      	movs	r2, #8
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <main+0xbc>)
 8000558:	f003 fa5c 	bl	8003a14 <HAL_UART_Receive>
 800055c:	4603      	mov	r3, r0
 800055e:	75fb      	strb	r3, [r7, #23]

	  //HAL_UART_Receive(&huart3, rxBuf, 8, 10);

	  CDC_Transmit_FS(rxBuf,8);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2108      	movs	r1, #8
 8000564:	4618      	mov	r0, r3
 8000566:	f006 fd7d 	bl	8007064 <CDC_Transmit_FS>
  {
 800056a:	e7cb      	b.n	8000504 <main+0x44>
 800056c:	0800798c 	.word	0x0800798c
 8000570:	08007994 	.word	0x08007994
 8000574:	2000019c 	.word	0x2000019c
 8000578:	40020800 	.word	0x40020800
 800057c:	200003c0 	.word	0x200003c0
 8000580:	40020400 	.word	0x40020400

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f007 f9e6 	bl	8007964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fc29 	bl	8002e60 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f9ee 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fe8a 	bl	8003350 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f9d7 	bl	80009f4 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC2_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_ADC2_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC2_Init+0x98>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC2_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC2_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC2_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC2_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_ADC2_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ADC2_Init+0x98>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_ADC2_Init+0xa0>)
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006ba:	f000 fc29 	bl	8000f10 <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 f996 	bl	80009f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC2_Init+0x98>)
 80006da:	f000 fc5d 	bl	8000f98 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 f986 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000404 	.word	0x20000404
 80006f4:	40012100 	.word	0x40012100
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC3_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC3_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC3_Init+0x98>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC3_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC3_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC3_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC3_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC3_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_ADC3_Init+0x98>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC3_Init+0xa0>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC3_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ADC3_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC3_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC3_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC3_Init+0x98>)
 800075e:	f000 fbd7 	bl	8000f10 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f944 	bl	80009f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800076c:	2303      	movs	r3, #3
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC3_Init+0x98>)
 800077e:	f000 fc0b 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 f934 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000474 	.word	0x20000474
 8000798:	40012200 	.word	0x40012200
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_CAN2_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_CAN2_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_CAN2_Init+0x60>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_CAN2_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_CAN2_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_CAN2_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_CAN2_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_CAN2_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_CAN2_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_CAN2_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_CAN2_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_CAN2_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_CAN2_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_CAN2_Init+0x60>)
 80007ee:	f000 fdf1 	bl	80013d4 <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f8fc 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000044c 	.word	0x2000044c
 8000804:	40006800 	.word	0x40006800

08000808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI1_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI1_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI1_Init+0x64>)
 8000834:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI1_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI1_Init+0x64>)
 800085a:	f002 ff73 	bl	8003744 <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f8c6 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200004bc 	.word	0x200004bc
 8000870:	40013000 	.word	0x40013000

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END   USART3_Init 1 */

  huart3.Instance = USART3;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART3_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate     = 9600;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits     = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity       = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode         = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	f002 ffd3 	bl	8003856 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f89d 	bl	80009f4 <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END   USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200003c0 	.word	0x200003c0
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <MX_GPIO_Init+0x11c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <MX_GPIO_Init+0x11c>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b3d      	ldr	r3, [pc, #244]	; (80009e4 <MX_GPIO_Init+0x11c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a38      	ldr	r2, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <MX_GPIO_Init+0x11c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x11c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a2a      	ldr	r2, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x11c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x11c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <MX_GPIO_Init+0x120>)
 8000970:	f001 f8da 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2102      	movs	r1, #2
 8000978:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x124>)
 800097a:	f001 f8d5 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800097e:	2200      	movs	r2, #0
 8000980:	211f      	movs	r1, #31
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <MX_GPIO_Init+0x128>)
 8000984:	f001 f8d0 	bl	8001b28 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000988:	2302      	movs	r3, #2
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4812      	ldr	r0, [pc, #72]	; (80009e8 <MX_GPIO_Init+0x120>)
 80009a0:	f000 ff26 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485EN_Pin */
  GPIO_InitStruct.Pin = RS485EN_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_GPIO_Init+0x124>)
 80009bc:	f000 ff18 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009c0:	231f      	movs	r3, #31
 80009c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_GPIO_Init+0x128>)
 80009d8:	f000 ff0a 	bl	80017f0 <HAL_GPIO_Init>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020c00 	.word	0x40020c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <HAL_ADC_MspInit+0xd8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d128      	bne.n	8000ac4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <HAL_ADC_MspInit+0xe0>)
 8000abe:	f000 fe97 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000ac2:	e02c      	b.n	8000b1e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <HAL_ADC_MspInit+0xe4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d127      	bne.n	8000b1e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_ADC_MspInit+0xdc>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b06:	2308      	movs	r3, #8
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_ADC_MspInit+0xe0>)
 8000b1a:	f000 fe69 	bl	80017f0 <HAL_GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012100 	.word	0x40012100
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40012200 	.word	0x40012200

08000b38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <HAL_CAN_MspInit+0xa0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d13a      	bne.n	8000bd0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_CAN_MspInit+0xa4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000bae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_CAN_MspInit+0xa8>)
 8000bcc:	f000 fe10 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40006800 	.word	0x40006800
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_SPI_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c3e:	23f0      	movs	r3, #240	; 0xf0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f000 fdc9 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_UART_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12c      	bne.n	8000cf0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0x8c>)
 8000cec:	f000 fd80 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f89a 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f001 f84c 	bl	8001dfa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200019e8 	.word	0x200019e8

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dba:	f7ff ffd7 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f006 fdad 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fb7d 	bl	80004c0 <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000dd4:	08007a0c 	.word	0x08007a0c
  ldr r2, =_sbss
 8000dd8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ddc:	20001df0 	.word	0x20001df0

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_Init+0x40>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_Init+0x40>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x40>)
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 fcad 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fdf2 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fcc5 	bl	80017d6 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 fc8d 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000514 	.word	0x20000514

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000514 	.word	0x20000514

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e033      	b.n	8000f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fd8e 	bl	8000a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d118      	bne.n	8000f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f56:	f023 0302 	bic.w	r3, r3, #2
 8000f5a:	f043 0202 	orr.w	r2, r3, #2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f93a 	bl	80011dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f023 0303 	bic.w	r3, r3, #3
 8000f76:	f043 0201 	orr.w	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7e:	e001      	b.n	8000f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1c>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e105      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x228>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d925      	bls.n	8001010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68d9      	ldr	r1, [r3, #12]
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3b1e      	subs	r3, #30
 8000fda:	2207      	movs	r2, #7
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68d9      	ldr	r1, [r3, #12]
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4403      	add	r3, r0
 8001002:	3b1e      	subs	r3, #30
 8001004:	409a      	lsls	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	e022      	b.n	8001056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6919      	ldr	r1, [r3, #16]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	2207      	movs	r2, #7
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	400a      	ands	r2, r1
 8001032:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6919      	ldr	r1, [r3, #16]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	4603      	mov	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4403      	add	r3, r0
 800104c:	409a      	lsls	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b06      	cmp	r3, #6
 800105c:	d824      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	3b05      	subs	r3, #5
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b05      	subs	r3, #5
 800109a:	fa00 f203 	lsl.w	r2, r0, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
 80010a6:	e04c      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b0c      	cmp	r3, #12
 80010ae:	d824      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	3b23      	subs	r3, #35	; 0x23
 80010c2:	221f      	movs	r2, #31
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43da      	mvns	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	400a      	ands	r2, r1
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b23      	subs	r3, #35	; 0x23
 80010ec:	fa00 f203 	lsl.w	r2, r0, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
 80010f8:	e023      	b.n	8001142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b41      	subs	r3, #65	; 0x41
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	400a      	ands	r2, r1
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	3b41      	subs	r3, #65	; 0x41
 8001136:	fa00 f203 	lsl.w	r2, r0, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_ADC_ConfigChannel+0x234>)
 8001144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_ADC_ConfigChannel+0x238>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d109      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b12      	cmp	r3, #18
 8001156:	d105      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_ADC_ConfigChannel+0x238>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d123      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b10      	cmp	r3, #16
 8001174:	d003      	beq.n	800117e <HAL_ADC_ConfigChannel+0x1e6>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b11      	cmp	r3, #17
 800117c:	d11b      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d111      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_ADC_ConfigChannel+0x240>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9a      	lsrs	r2, r3, #18
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011a8:	e002      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40012300 	.word	0x40012300
 80011d0:	40012000 	.word	0x40012000
 80011d4:	20000000 	.word	0x20000000
 80011d8:	431bde83 	.word	0x431bde83

080011dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <ADC_Init+0x1f0>)
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	021a      	lsls	r2, r3, #8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001256:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6899      	ldr	r1, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	4a58      	ldr	r2, [pc, #352]	; (80013d0 <ADC_Init+0x1f4>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d022      	beq.n	80012ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001282:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6899      	ldr	r1, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6899      	ldr	r1, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e00f      	b.n	80012da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0202 	bic.w	r2, r2, #2
 80012e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
 80012f4:	005a      	lsls	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01b      	beq.n	8001340 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001316:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001326:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6859      	ldr	r1, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	3b01      	subs	r3, #1
 8001334:	035a      	lsls	r2, r3, #13
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e007      	b.n	8001350 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800134e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	3b01      	subs	r3, #1
 800136c:	051a      	lsls	r2, r3, #20
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6899      	ldr	r1, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001392:	025a      	lsls	r2, r3, #9
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6899      	ldr	r1, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	029a      	lsls	r2, r3, #10
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40012300 	.word	0x40012300
 80013d0:	0f000001 	.word	0x0f000001

080013d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0ed      	b.n	80015c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fba0 	bl	8000b38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0202 	bic.w	r2, r2, #2
 8001406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff fd52 	bl	8000eb0 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140e:	e012      	b.n	8001436 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001410:	f7ff fd4e 	bl	8000eb0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d90b      	bls.n	8001436 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2205      	movs	r2, #5
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0c5      	b.n	80015c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e5      	bne.n	8001410 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001454:	f7ff fd2c 	bl	8000eb0 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800145a:	e012      	b.n	8001482 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145c:	f7ff fd28 	bl	8000eb0 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b0a      	cmp	r3, #10
 8001468:	d90b      	bls.n	8001482 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2205      	movs	r2, #5
 800147a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e09f      	b.n	80015c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0e5      	beq.n	800145c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d108      	bne.n	80014aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e007      	b.n	80014ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7e5b      	ldrb	r3, [r3, #25]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e007      	b.n	80014e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e9b      	ldrb	r3, [r3, #26]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0220 	orr.w	r2, r2, #32
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e007      	b.n	800150e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0220 	bic.w	r2, r2, #32
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7edb      	ldrb	r3, [r3, #27]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0210 	bic.w	r2, r2, #16
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e007      	b.n	8001538 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0210 	orr.w	r2, r2, #16
 8001536:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7f1b      	ldrb	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d108      	bne.n	8001552 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0208 	orr.w	r2, r2, #8
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e007      	b.n	8001562 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0208 	bic.w	r2, r2, #8
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7f5b      	ldrb	r3, [r3, #29]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0204 	orr.w	r2, r2, #4
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e007      	b.n	800158c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0204 	bic.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	ea42 0103 	orr.w	r1, r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	; (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff3e 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff8e 	bl	80016c0 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5d 	bl	800166c <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff31 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	e16b      	b.n	8001ae4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 815a 	bne.w	8001ade <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d005      	beq.n	8001842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183e:	2b02      	cmp	r3, #2
 8001840:	d130      	bne.n	80018a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001878:	2201      	movs	r2, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 0201 	and.w	r2, r3, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d017      	beq.n	80018e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d123      	bne.n	8001934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	69b9      	ldr	r1, [r7, #24]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80b4 	beq.w	8001ade <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b60      	ldr	r3, [pc, #384]	; (8001afc <HAL_GPIO_Init+0x30c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a5f      	ldr	r2, [pc, #380]	; (8001afc <HAL_GPIO_Init+0x30c>)
 8001980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_GPIO_Init+0x30c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001992:	4a5b      	ldr	r2, [pc, #364]	; (8001b00 <HAL_GPIO_Init+0x310>)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_GPIO_Init+0x314>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d02b      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_GPIO_Init+0x318>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d025      	beq.n	8001a12 <HAL_GPIO_Init+0x222>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <HAL_GPIO_Init+0x31c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01f      	beq.n	8001a0e <HAL_GPIO_Init+0x21e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x320>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x21a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_GPIO_Init+0x324>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x216>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_GPIO_Init+0x328>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x212>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x32c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x20e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4b      	ldr	r2, [pc, #300]	; (8001b20 <HAL_GPIO_Init+0x330>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x20a>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e00e      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 80019fa:	2308      	movs	r3, #8
 80019fc:	e00c      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 80019fe:	2306      	movs	r3, #6
 8001a00:	e00a      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a02:	2305      	movs	r3, #5
 8001a04:	e008      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a06:	2304      	movs	r3, #4
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e004      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e002      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x228>
 8001a16:	2300      	movs	r3, #0
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f002 0203 	and.w	r2, r2, #3
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	4093      	lsls	r3, r2
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a28:	4935      	ldr	r1, [pc, #212]	; (8001b00 <HAL_GPIO_Init+0x310>)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	089b      	lsrs	r3, r3, #2
 8001a2e:	3302      	adds	r3, #2
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a5a:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a84:	4a27      	ldr	r2, [pc, #156]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad8:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_GPIO_Init+0x334>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b0f      	cmp	r3, #15
 8001ae8:	f67f ae90 	bls.w	800180c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40013800 	.word	0x40013800
 8001b04:	40020000 	.word	0x40020000
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800
 8001b20:	40021c00 	.word	0x40021c00
 8001b24:	40013c00 	.word	0x40013c00

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b44:	e003      	b.n	8001b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	041a      	lsls	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5c:	b08f      	sub	sp, #60	; 0x3c
 8001b5e:	af0a      	add	r7, sp, #40	; 0x28
 8001b60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e10f      	b.n	8001d8c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 fbb4 	bl	80072f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f002 fafb 	bl	80041a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	687e      	ldr	r6, [r7, #4]
 8001bb8:	466d      	mov	r5, sp
 8001bba:	f106 0410 	add.w	r4, r6, #16
 8001bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bce:	1d33      	adds	r3, r6, #4
 8001bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f002 f9d2 	bl	8003f7c <USB_CoreInit>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d0      	b.n	8001d8c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 fae9 	bl	80041c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e04a      	b.n	8001c92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333d      	adds	r3, #61	; 0x3d
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	333c      	adds	r3, #60	; 0x3c
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	b298      	uxth	r0, r3
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	4602      	mov	r2, r0
 8001c3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	333f      	adds	r3, #63	; 0x3f
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3344      	adds	r3, #68	; 0x44
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3348      	adds	r3, #72	; 0x48
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	3350      	adds	r3, #80	; 0x50
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3af      	bcc.n	8001bfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e044      	b.n	8001d2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	1a9b      	subs	r3, r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001cca:	7bfa      	ldrb	r2, [r7, #15]
 8001ccc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3b5      	bcc.n	8001ca2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	687e      	ldr	r6, [r7, #4]
 8001d3e:	466d      	mov	r5, sp
 8001d40:	f106 0410 	add.w	r4, r6, #16
 8001d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d50:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d54:	1d33      	adds	r3, r6, #4
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f002 fa5f 	bl	800421c <USB_DevInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e00d      	b.n	8001d8c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 faa7 	bl	80052d8 <USB_DevDisconnect>

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_Start+0x1c>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e020      	b.n	8001df2 <HAL_PCD_Start+0x5e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d109      	bne.n	8001dd4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d005      	beq.n	8001dd4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 f9d3 	bl	8004184 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fa57 	bl	8005296 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dfa:	b590      	push	{r4, r7, lr}
 8001dfc:	b08d      	sub	sp, #52	; 0x34
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fb15 	bl	8005440 <USB_GetMode>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f040 839d 	bne.w	8002558 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fa79 	bl	800531a <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8393 	beq.w	8002556 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fa70 	bl	800531a <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 0202 	and.w	r2, r2, #2
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fa5e 	bl	800531a <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d161      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	0c5b      	lsrs	r3, r3, #17
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d124      	bne.n	8001eee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d035      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6a38      	ldr	r0, [r7, #32]
 8001ec4:	f003 f8c4 	bl	8005050 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed4:	441a      	add	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee6:	441a      	add	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	619a      	str	r2, [r3, #24]
 8001eec:	e016      	b.n	8001f1c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	0c5b      	lsrs	r3, r3, #17
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d110      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f00:	2208      	movs	r2, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	6a38      	ldr	r0, [r7, #32]
 8001f06:	f003 f8a3 	bl	8005050 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	441a      	add	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f9f2 	bl	800531a <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f40:	d16e      	bne.n	8002020 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 f9f8 	bl	8005340 <USB_ReadDevAllOutEpInterrupt>
 8001f50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f52:	e062      	b.n	800201a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d057      	beq.n	800200e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fa1d 	bl	80053a8 <USB_ReadDevOutEPInterrupt>
 8001f6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	2301      	movs	r3, #1
 8001f8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fdb0 	bl	8002af4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001faa:	461a      	mov	r2, r3
 8001fac:	2308      	movs	r3, #8
 8001fae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 feaa 	bl	8002d0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2310      	movs	r3, #16
 8001fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fea:	461a      	mov	r2, r3
 8001fec:	2320      	movs	r3, #32
 8001fee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	3301      	adds	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d199      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f003 f978 	bl	800531a <USB_ReadInterrupts>
 800202a:	4603      	mov	r3, r0
 800202c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002034:	f040 80c0 	bne.w	80021b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f999 	bl	8005374 <USB_ReadDevAllInEpInterrupt>
 8002042:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002048:	e0b2      	b.n	80021b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a7 	beq.w	80021a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f003 f9bf 	bl	80053e4 <USB_ReadDevInEPInterrupt>
 8002066:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d057      	beq.n	8002122 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	69f9      	ldr	r1, [r7, #28]
 800208e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002092:	4013      	ands	r3, r2
 8002094:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a2:	461a      	mov	r2, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d132      	bne.n	8002116 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3348      	adds	r3, #72	; 0x48
 80020c0:	6819      	ldr	r1, [r3, #0]
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4403      	add	r3, r0
 80020d0:	3344      	adds	r3, #68	; 0x44
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4419      	add	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4403      	add	r3, r0
 80020e4:	3348      	adds	r3, #72	; 0x48
 80020e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d113      	bne.n	8002116 <HAL_PCD_IRQHandler+0x31c>
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3350      	adds	r3, #80	; 0x50
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d108      	bne.n	8002116 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800210e:	461a      	mov	r2, r3
 8002110:	2101      	movs	r1, #1
 8002112:	f003 f9c7 	bl	80054a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f005 f96a 	bl	80073f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	015a      	lsls	r2, r3, #5
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002138:	461a      	mov	r2, r3
 800213a:	2308      	movs	r3, #8
 800213c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002154:	461a      	mov	r2, r3
 8002156:	2310      	movs	r3, #16
 8002158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002170:	461a      	mov	r2, r3
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800218c:	461a      	mov	r2, r3
 800218e:	2302      	movs	r3, #2
 8002190:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800219c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fc1b 	bl	80029da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	3301      	adds	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f af49 	bne.w	800204a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 f8ac 	bl	800531a <USB_ReadInterrupts>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021cc:	d122      	bne.n	8002214 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d108      	bne.n	80021fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021f4:	2100      	movs	r1, #0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fe26 	bl	8002e48 <HAL_PCDEx_LPM_Callback>
 80021fc:	e002      	b.n	8002204 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f005 f970 	bl	80074e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f003 f87e 	bl	800531a <USB_ReadInterrupts>
 800221e:	4603      	mov	r3, r0
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002228:	d112      	bne.n	8002250 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f005 f92c 	bl	8007498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800224e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f003 f860 	bl	800531a <USB_ReadInterrupts>
 800225a:	4603      	mov	r3, r0
 800225c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002264:	f040 80c7 	bne.w	80023f6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2110      	movs	r1, #16
 8002282:	4618      	mov	r0, r3
 8002284:	f002 f92e 	bl	80044e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228c:	e056      	b.n	800233c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	0151      	lsls	r1, r2, #5
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	440a      	add	r2, r1
 80022b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	440a      	add	r2, r1
 800230c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002310:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002314:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002326:	0151      	lsls	r1, r2, #5
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	440a      	add	r2, r1
 800232c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002334:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	3301      	adds	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002342:	429a      	cmp	r2, r3
 8002344:	d3a3      	bcc.n	800228e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002354:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002358:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002372:	f043 030b 	orr.w	r3, r3, #11
 8002376:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002388:	f043 030b 	orr.w	r3, r3, #11
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	e015      	b.n	80023bc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	69fa      	ldr	r2, [r7, #28]
 800239a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80023a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b6:	f043 030b 	orr.w	r3, r3, #11
 80023ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023e0:	461a      	mov	r2, r3
 80023e2:	f003 f85f 	bl	80054a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 ff8d 	bl	800531a <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240a:	d124      	bne.n	8002456 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f003 f823 	bl	800545c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f002 f8c3 	bl	80045a6 <USB_GetDevSpeed>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681c      	ldr	r4, [r3, #0]
 800242c:	f001 f956 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8002430:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4620      	mov	r0, r4
 800243c:	f001 fe00 	bl	8004040 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f005 f800 	bl	8007446 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002454:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f002 ff5d 	bl	800531a <USB_ReadInterrupts>
 8002460:	4603      	mov	r3, r0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d10a      	bne.n	8002480 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f004 ffdd 	bl	800742a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f002 0208 	and.w	r2, r2, #8
 800247e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 ff48 	bl	800531a <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002494:	d10f      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f005 f83f 	bl	8007524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 ff2d 	bl	800531a <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ca:	d10f      	bne.n	80024ec <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 f812 	bl	8007500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80024ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 ff12 	bl	800531a <USB_ReadInterrupts>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d10a      	bne.n	8002518 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f005 f820 	bl	8007548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fefc 	bl	800531a <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d115      	bne.n	8002558 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 f810 	bl	8007564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e000      	b.n	8002558 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002556:	bf00      	nop
    }
  }
}
 8002558:	3734      	adds	r7, #52	; 0x34
 800255a:	46bd      	mov	sp, r7
 800255c:	bd90      	pop	{r4, r7, pc}

0800255e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_PCD_SetAddress+0x1a>
 8002574:	2302      	movs	r3, #2
 8002576:	e013      	b.n	80025a0 <HAL_PCD_SetAddress+0x42>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fe5a 	bl	800524a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	70fb      	strb	r3, [r7, #3]
 80025ba:	460b      	mov	r3, r1
 80025bc:	803b      	strh	r3, [r7, #0]
 80025be:	4613      	mov	r3, r2
 80025c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da0f      	bge.n	80025ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3338      	adds	r3, #56	; 0x38
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	705a      	strb	r2, [r3, #1]
 80025ec:	e00f      	b.n	800260e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800261a:	883a      	ldrh	r2, [r7, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	78ba      	ldrb	r2, [r7, #2]
 8002624:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002638:	78bb      	ldrb	r3, [r7, #2]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d102      	bne.n	8002644 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_PCD_EP_Open+0xaa>
 800264e:	2302      	movs	r3, #2
 8002650:	e00e      	b.n	8002670 <HAL_PCD_EP_Open+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	f001 ffc5 	bl	80045f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800266e:	7afb      	ldrb	r3, [r7, #11]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da0f      	bge.n	80026ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	3338      	adds	r3, #56	; 0x38
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	3304      	adds	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	705a      	strb	r2, [r3, #1]
 80026aa:	e00f      	b.n	80026cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_PCD_EP_Close+0x6e>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e00e      	b.n	8002704 <HAL_PCD_EP_Close+0x8c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 f803 	bl	8004700 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	460b      	mov	r3, r1
 800271a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	f003 020f 	and.w	r2, r3, #15
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	f003 030f 	and.w	r3, r3, #15
 8002754:	b2da      	uxtb	r2, r3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d102      	bne.n	8002768 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	f002 fade 	bl	8004d40 <USB_EP0StartXfer>
 8002784:	e008      	b.n	8002798 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	6979      	ldr	r1, [r7, #20]
 8002794:	f002 f890 	bl	80048b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	f003 020f 	and.w	r2, r3, #15
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80027c4:	681b      	ldr	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	460b      	mov	r3, r1
 80027e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3338      	adds	r3, #56	; 0x38
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2201      	movs	r2, #1
 8002810:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002812:	7afb      	ldrb	r3, [r7, #11]
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	b2da      	uxtb	r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d102      	bne.n	800282c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	f002 fa7c 	bl	8004d40 <USB_EP0StartXfer>
 8002848:	e008      	b.n	800285c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	6979      	ldr	r1, [r7, #20]
 8002858:	f002 f82e 	bl	80048b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d901      	bls.n	8002884 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e050      	b.n	8002926 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da0f      	bge.n	80028ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3338      	adds	r3, #56	; 0x38
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
 80028aa:	e00d      	b.n	80028c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_PCD_EP_SetStall+0x82>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e01e      	b.n	8002926 <HAL_PCD_EP_SetStall+0xc0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68f9      	ldr	r1, [r7, #12]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fbd3 	bl	80050a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	b2d9      	uxtb	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002916:	461a      	mov	r2, r3
 8002918:	f002 fdc4 	bl	80054a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d901      	bls.n	800294c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e042      	b.n	80029d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800294c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002950:	2b00      	cmp	r3, #0
 8002952:	da0f      	bge.n	8002974 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	3338      	adds	r3, #56	; 0x38
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2201      	movs	r2, #1
 8002970:	705a      	strb	r2, [r3, #1]
 8002972:	e00f      	b.n	8002994 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_PCD_EP_ClrStall+0x86>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e00e      	b.n	80029d2 <HAL_PCD_EP_ClrStall+0xa4>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68f9      	ldr	r1, [r7, #12]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fbdb 	bl	800517e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b08a      	sub	sp, #40	; 0x28
 80029de:	af02      	add	r7, sp, #8
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	3338      	adds	r3, #56	; 0x38
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d901      	bls.n	8002a12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06c      	b.n	8002aec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d902      	bls.n	8002a2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3303      	adds	r3, #3
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a36:	e02b      	b.n	8002a90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d902      	bls.n	8002a54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3303      	adds	r3, #3
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68d9      	ldr	r1, [r3, #12]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4603      	mov	r3, r0
 8002a72:	6978      	ldr	r0, [r7, #20]
 8002a74:	f002 fab7 	bl	8004fe6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d809      	bhi.n	8002aba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d203      	bcs.n	8002aba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1be      	bne.n	8002a38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d811      	bhi.n	8002aea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	2201      	movs	r2, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	6939      	ldr	r1, [r7, #16]
 8002ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	333c      	adds	r3, #60	; 0x3c
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f040 80a0 	bne.w	8002c6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a72      	ldr	r2, [pc, #456]	; (8002d04 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	f240 80dd 	bls.w	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80d7 	beq.w	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	e0cb      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	6093      	str	r3, [r2, #8]
 8002b7e:	e0bc      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 80b7 	bne.w	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <PCD_EP_OutXfrComplete_int+0x210>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d90f      	bls.n	8002bb4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	015a      	lsls	r2, r3, #5
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002baa:	461a      	mov	r2, r3
 8002bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb0:	6093      	str	r3, [r2, #8]
 8002bb2:	e0a2      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bc6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002bda:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002bee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4403      	add	r3, r0
 8002c12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4419      	add	r1, r3
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4403      	add	r3, r0
 8002c28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d114      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x16a>
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c56:	461a      	mov	r2, r3
 8002c58:	2101      	movs	r1, #1
 8002c5a:	f002 fc23 	bl	80054a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f004 fbab 	bl	80073c0 <HAL_PCD_DataOutStageCallback>
 8002c6a:	e046      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <PCD_EP_OutXfrComplete_int+0x214>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d124      	bne.n	8002cbe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	015a      	lsls	r2, r3, #5
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4413      	add	r3, r2
 8002c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c90:	6093      	str	r3, [r2, #8]
 8002c92:	e032      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002caa:	461a      	mov	r2, r3
 8002cac:	2320      	movs	r3, #32
 8002cae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f004 fb82 	bl	80073c0 <HAL_PCD_DataOutStageCallback>
 8002cbc:	e01d      	b.n	8002cfa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d114      	bne.n	8002cee <PCD_EP_OutXfrComplete_int+0x1fa>
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d108      	bne.n	8002cee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2100      	movs	r1, #0
 8002cea:	f002 fbdb 	bl	80054a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f004 fb63 	bl	80073c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	4f54300a 	.word	0x4f54300a
 8002d08:	4f54310a 	.word	0x4f54310a

08002d0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	333c      	adds	r3, #60	; 0x3c
 8002d24:	3304      	adds	r3, #4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a15      	ldr	r2, [pc, #84]	; (8002d94 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d90e      	bls.n	8002d60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f004 fb1b 	bl	800739c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d90c      	bls.n	8002d88 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d108      	bne.n	8002d88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d80:	461a      	mov	r2, r3
 8002d82:	2101      	movs	r1, #1
 8002d84:	f002 fb8e 	bl	80054a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	4f54300a 	.word	0x4f54300a

08002d98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
 8002da4:	4613      	mov	r3, r2
 8002da6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002db6:	883b      	ldrh	r3, [r7, #0]
 8002db8:	0419      	lsls	r1, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dc4:	e028      	b.n	8002e18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e00d      	b.n	8002df6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	3340      	adds	r3, #64	; 0x40
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4413      	add	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3301      	adds	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d3ec      	bcc.n	8002dda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e00:	883b      	ldrh	r3, [r7, #0]
 8002e02:	0418      	lsls	r0, r3, #16
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4302      	orrs	r2, r0
 8002e10:	3340      	adds	r3, #64	; 0x40
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e264      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d075      	beq.n	8002f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7e:	4ba3      	ldr	r3, [pc, #652]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d00c      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e8a:	4ba0      	ldr	r3, [pc, #640]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e96:	4b9d      	ldr	r3, [pc, #628]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea2:	d10b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea4:	4b99      	ldr	r3, [pc, #612]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d05b      	beq.n	8002f68 <HAL_RCC_OscConfig+0x108>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d157      	bne.n	8002f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e23f      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x74>
 8002ec6:	4b91      	ldr	r3, [pc, #580]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a8a      	ldr	r2, [pc, #552]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a83      	ldr	r2, [pc, #524]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fd ffca 	bl	8000eb0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fd ffc6 	bl	8000eb0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e204      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xc0>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fd ffb6 	bl	8000eb0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fd ffb2 	bl	8000eb0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1f0      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0xe8>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b62      	ldr	r3, [pc, #392]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d001      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e1c4      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	4b56      	ldr	r3, [pc, #344]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4952      	ldr	r1, [pc, #328]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	e03a      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d020      	beq.n	8003012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fd0:	4b4f      	ldr	r3, [pc, #316]	; (8003110 <HAL_RCC_OscConfig+0x2b0>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fd ff6b 	bl	8000eb0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fde:	f7fd ff67 	bl	8000eb0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e1a5      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4940      	ldr	r1, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]
 8003010:	e015      	b.n	800303e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003012:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x2b0>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fd ff4a 	bl	8000eb0 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003020:	f7fd ff46 	bl	8000eb0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e184      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d030      	beq.n	80030ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCC_OscConfig+0x2b4>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fd ff2a 	bl	8000eb0 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003060:	f7fd ff26 	bl	8000eb0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e164      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x200>
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x2b4>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fd ff13 	bl	8000eb0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308e:	f7fd ff0f 	bl	8000eb0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e14d      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b1a      	ldr	r3, [pc, #104]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a0 	beq.w	80031fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d121      	bne.n	800313a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_RCC_OscConfig+0x2b8>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fd fed5 	bl	8000eb0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e011      	b.n	800312e <HAL_RCC_OscConfig+0x2ce>
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	42470000 	.word	0x42470000
 8003114:	42470e80 	.word	0x42470e80
 8003118:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7fd fec8 	bl	8000eb0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e106      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_OscConfig+0x4e4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x2f0>
 8003142:	4b81      	ldr	r3, [pc, #516]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x32a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003158:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x32a>
 8003172:	4b75      	ldr	r3, [pc, #468]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	4a74      	ldr	r2, [pc, #464]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fd fe8d 	bl	8000eb0 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fd fe89 	bl	8000eb0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0c5      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x33a>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fd fe77 	bl	8000eb0 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fd fe73 	bl	8000eb0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0af      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a55      	ldr	r2, [pc, #340]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 809b 	beq.w	800333a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d05c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d141      	bne.n	800329c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003218:	4b4c      	ldr	r3, [pc, #304]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fd fe47 	bl	8000eb0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003226:	f7fd fe43 	bl	8000eb0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e081      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	3b01      	subs	r3, #1
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	4937      	ldr	r1, [pc, #220]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 800326a:	4313      	orrs	r3, r2
 800326c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326e:	4b37      	ldr	r3, [pc, #220]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd fe1c 	bl	8000eb0 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd fe18 	bl	8000eb0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e056      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x41c>
 800329a:	e04e      	b.n	800333a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fd fe05 	bl	8000eb0 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7fd fe01 	bl	8000eb0 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e03f      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCC_OscConfig+0x44a>
 80032c8:	e037      	b.n	800333a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e032      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_RCC_OscConfig+0x4e8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d028      	beq.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d121      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d11a      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003306:	4013      	ands	r3, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40007000 	.word	0x40007000
 8003348:	40023800 	.word	0x40023800
 800334c:	42470060 	.word	0x42470060

08003350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0cc      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d90c      	bls.n	800338c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b65      	ldr	r3, [pc, #404]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0b8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	494d      	ldr	r1, [pc, #308]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d044      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d119      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e07f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d003      	beq.n	800340e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800340a:	2b03      	cmp	r3, #3
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b3f      	ldr	r3, [pc, #252]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e06f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e067      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4934      	ldr	r1, [pc, #208]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fd fd36 	bl	8000eb0 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fd fd32 	bl	8000eb0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e04f      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d20c      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e032      	b.n	80034fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4916      	ldr	r1, [pc, #88]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d6:	f000 f821 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	fa22 f303 	lsr.w	r3, r2, r3
 80034ee:	4a09      	ldr	r2, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fc96 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023c00 	.word	0x40023c00
 800350c:	40023800 	.word	0x40023800
 8003510:	080079e4 	.word	0x080079e4
 8003514:	20000000 	.word	0x20000000
 8003518:	20000004 	.word	0x20000004

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	2300      	movs	r3, #0
 800352e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003534:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	2b08      	cmp	r3, #8
 800353e:	d00d      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x40>
 8003540:	2b08      	cmp	r3, #8
 8003542:	f200 80bd 	bhi.w	80036c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x34>
 800354a:	2b04      	cmp	r3, #4
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x3a>
 800354e:	e0b7      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003552:	60bb      	str	r3, [r7, #8]
       break;
 8003554:	e0b7      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003556:	4b60      	ldr	r3, [pc, #384]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003558:	60bb      	str	r3, [r7, #8]
      break;
 800355a:	e0b4      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800355c:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003564:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d04d      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	461a      	mov	r2, r3
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003582:	f04f 0100 	mov.w	r1, #0
 8003586:	ea02 0800 	and.w	r8, r2, r0
 800358a:	ea03 0901 	and.w	r9, r3, r1
 800358e:	4640      	mov	r0, r8
 8003590:	4649      	mov	r1, r9
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	014b      	lsls	r3, r1, #5
 800359c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035a0:	0142      	lsls	r2, r0, #5
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	ebb0 0008 	subs.w	r0, r0, r8
 80035aa:	eb61 0109 	sbc.w	r1, r1, r9
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	018b      	lsls	r3, r1, #6
 80035b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035bc:	0182      	lsls	r2, r0, #6
 80035be:	1a12      	subs	r2, r2, r0
 80035c0:	eb63 0301 	sbc.w	r3, r3, r1
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	00d9      	lsls	r1, r3, #3
 80035ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d2:	00d0      	lsls	r0, r2, #3
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	eb12 0208 	adds.w	r2, r2, r8
 80035dc:	eb43 0309 	adc.w	r3, r3, r9
 80035e0:	f04f 0000 	mov.w	r0, #0
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	0299      	lsls	r1, r3, #10
 80035ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035ee:	0290      	lsls	r0, r2, #10
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f7fc fde2 	bl	80001c8 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e04a      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	461a      	mov	r2, r3
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	ea02 0400 	and.w	r4, r2, r0
 8003626:	ea03 0501 	and.w	r5, r3, r1
 800362a:	4620      	mov	r0, r4
 800362c:	4629      	mov	r1, r5
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	014b      	lsls	r3, r1, #5
 8003638:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800363c:	0142      	lsls	r2, r0, #5
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	1b00      	subs	r0, r0, r4
 8003644:	eb61 0105 	sbc.w	r1, r1, r5
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	018b      	lsls	r3, r1, #6
 8003652:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003656:	0182      	lsls	r2, r0, #6
 8003658:	1a12      	subs	r2, r2, r0
 800365a:	eb63 0301 	sbc.w	r3, r3, r1
 800365e:	f04f 0000 	mov.w	r0, #0
 8003662:	f04f 0100 	mov.w	r1, #0
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800366c:	00d0      	lsls	r0, r2, #3
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	1912      	adds	r2, r2, r4
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0299      	lsls	r1, r3, #10
 8003682:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003686:	0290      	lsls	r0, r2, #10
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f7fc fd96 	bl	80001c8 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	3301      	adds	r3, #1
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036c2:	60bb      	str	r3, [r7, #8]
      break;
 80036c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c6:	68bb      	ldr	r3, [r7, #8]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	080079f4 	.word	0x080079f4

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003720:	f7ff ffdc 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	080079f4 	.word	0x080079f4

08003744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e07b      	b.n	800384e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003766:	d009      	beq.n	800377c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	61da      	str	r2, [r3, #28]
 800376e:	e005      	b.n	800377c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fa24 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	ea42 0103 	orr.w	r1, r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0104 	and.w	r1, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f003 0210 	and.w	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e03f      	b.n	80038e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd f9f9 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2224      	movs	r2, #36	; 0x24
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003898:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9a6 	bl	8003bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	; 0x28
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d17c      	bne.n	8003a0a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2c>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e075      	b.n	8003a0c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_UART_Transmit+0x3e>
 800392a:	2302      	movs	r3, #2
 800392c:	e06e      	b.n	8003a0c <HAL_UART_Transmit+0x11c>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2221      	movs	r2, #33	; 0x21
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003944:	f7fd fab4 	bl	8000eb0 <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d108      	bne.n	8003972 <HAL_UART_Transmit+0x82>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e003      	b.n	800397a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003982:	e02a      	b.n	80039da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f8e2 	bl	8003b58 <UART_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e036      	b.n	8003a0c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3302      	adds	r3, #2
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e007      	b.n	80039cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	781a      	ldrb	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1cf      	bne.n	8003984 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2200      	movs	r2, #0
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f8b2 	bl	8003b58 <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e006      	b.n	8003a0c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	f040 808c 	bne.w	8003b4e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_UART_Receive+0x2e>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e084      	b.n	8003b50 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Receive+0x40>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e07d      	b.n	8003b50 <HAL_UART_Receive+0x13c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2222      	movs	r2, #34	; 0x22
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fa1e 	bl	8000eb0 <HAL_GetTick>
 8003a74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8a:	d108      	bne.n	8003a9e <HAL_UART_Receive+0x8a>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e003      	b.n	8003aa6 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003aae:	e043      	b.n	8003b38 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f84c 	bl	8003b58 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e042      	b.n	8003b50 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10c      	bne.n	8003aea <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	e01f      	b.n	8003b2a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d007      	beq.n	8003b04 <HAL_UART_Receive+0xf0>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_UART_Receive+0xfe>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e008      	b.n	8003b24 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3301      	adds	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1b6      	bne.n	8003ab0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	e02c      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d028      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b78:	f7fd f99a 	bl	8000eb0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d21d      	bcs.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00f      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d0c3      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	b09f      	sub	sp, #124	; 0x7c
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	ea40 0301 	orr.w	r3, r0, r1
 8003c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c30:	f021 010c 	bic.w	r1, r1, #12
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	6999      	ldr	r1, [r3, #24]
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	ea40 0301 	orr.w	r3, r0, r1
 8003c54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4bc5      	ldr	r3, [pc, #788]	; (8003f70 <UART_SetConfig+0x384>)
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d004      	beq.n	8003c6a <UART_SetConfig+0x7e>
 8003c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4bc3      	ldr	r3, [pc, #780]	; (8003f74 <UART_SetConfig+0x388>)
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d103      	bne.n	8003c72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c6a:	f7ff fd57 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8003c6e:	6778      	str	r0, [r7, #116]	; 0x74
 8003c70:	e002      	b.n	8003c78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c72:	f7ff fd3f 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8003c76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c80:	f040 80b6 	bne.w	8003df0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c86:	461c      	mov	r4, r3
 8003c88:	f04f 0500 	mov.w	r5, #0
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	462b      	mov	r3, r5
 8003c90:	1891      	adds	r1, r2, r2
 8003c92:	6439      	str	r1, [r7, #64]	; 0x40
 8003c94:	415b      	adcs	r3, r3
 8003c96:	647b      	str	r3, [r7, #68]	; 0x44
 8003c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c9c:	1912      	adds	r2, r2, r4
 8003c9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	00d9      	lsls	r1, r3, #3
 8003cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cb0:	00d0      	lsls	r0, r2, #3
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	1911      	adds	r1, r2, r4
 8003cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8003cba:	416b      	adcs	r3, r5
 8003cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003cd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003cd8:	f7fc fa76 	bl	80001c8 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4ba5      	ldr	r3, [pc, #660]	; (8003f78 <UART_SetConfig+0x38c>)
 8003ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	011e      	lsls	r6, r3, #4
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	461c      	mov	r4, r3
 8003cee:	f04f 0500 	mov.w	r5, #0
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	1891      	adds	r1, r2, r2
 8003cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cfa:	415b      	adcs	r3, r3
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d02:	1912      	adds	r2, r2, r4
 8003d04:	eb45 0303 	adc.w	r3, r5, r3
 8003d08:	f04f 0000 	mov.w	r0, #0
 8003d0c:	f04f 0100 	mov.w	r1, #0
 8003d10:	00d9      	lsls	r1, r3, #3
 8003d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d16:	00d0      	lsls	r0, r2, #3
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	1911      	adds	r1, r2, r4
 8003d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d20:	416b      	adcs	r3, r5
 8003d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	1891      	adds	r1, r2, r2
 8003d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d32:	415b      	adcs	r3, r3
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d3e:	f7fc fa43 	bl	80001c8 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <UART_SetConfig+0x38c>)
 8003d48:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	2164      	movs	r1, #100	; 0x64
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3332      	adds	r3, #50	; 0x32
 8003d5a:	4a87      	ldr	r2, [pc, #540]	; (8003f78 <UART_SetConfig+0x38c>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d68:	441e      	add	r6, r3
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	1894      	adds	r4, r2, r2
 8003d78:	623c      	str	r4, [r7, #32]
 8003d7a:	415b      	adcs	r3, r3
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d82:	1812      	adds	r2, r2, r0
 8003d84:	eb41 0303 	adc.w	r3, r1, r3
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	f04f 0500 	mov.w	r5, #0
 8003d90:	00dd      	lsls	r5, r3, #3
 8003d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d96:	00d4      	lsls	r4, r2, #3
 8003d98:	4622      	mov	r2, r4
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	1814      	adds	r4, r2, r0
 8003d9e:	653c      	str	r4, [r7, #80]	; 0x50
 8003da0:	414b      	adcs	r3, r1
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	1891      	adds	r1, r2, r2
 8003db0:	61b9      	str	r1, [r7, #24]
 8003db2:	415b      	adcs	r3, r3
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dbe:	f7fc fa03 	bl	80001c8 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <UART_SetConfig+0x38c>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	; 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	3332      	adds	r3, #50	; 0x32
 8003dda:	4a67      	ldr	r2, [pc, #412]	; (8003f78 <UART_SetConfig+0x38c>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 0207 	and.w	r2, r3, #7
 8003de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4432      	add	r2, r6
 8003dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dee:	e0b9      	b.n	8003f64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	461c      	mov	r4, r3
 8003df4:	f04f 0500 	mov.w	r5, #0
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	1891      	adds	r1, r2, r2
 8003dfe:	6139      	str	r1, [r7, #16]
 8003e00:	415b      	adcs	r3, r3
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e08:	1912      	adds	r2, r2, r4
 8003e0a:	eb45 0303 	adc.w	r3, r5, r3
 8003e0e:	f04f 0000 	mov.w	r0, #0
 8003e12:	f04f 0100 	mov.w	r1, #0
 8003e16:	00d9      	lsls	r1, r3, #3
 8003e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e1c:	00d0      	lsls	r0, r2, #3
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	eb12 0804 	adds.w	r8, r2, r4
 8003e26:	eb43 0905 	adc.w	r9, r3, r5
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	008b      	lsls	r3, r1, #2
 8003e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e42:	0082      	lsls	r2, r0, #2
 8003e44:	4640      	mov	r0, r8
 8003e46:	4649      	mov	r1, r9
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <UART_SetConfig+0x38c>)
 8003e52:	fba3 2302 	umull	r2, r3, r3, r2
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	011e      	lsls	r6, r3, #4
 8003e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	1894      	adds	r4, r2, r2
 8003e68:	60bc      	str	r4, [r7, #8]
 8003e6a:	415b      	adcs	r3, r3
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e72:	1812      	adds	r2, r2, r0
 8003e74:	eb41 0303 	adc.w	r3, r1, r3
 8003e78:	f04f 0400 	mov.w	r4, #0
 8003e7c:	f04f 0500 	mov.w	r5, #0
 8003e80:	00dd      	lsls	r5, r3, #3
 8003e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e86:	00d4      	lsls	r4, r2, #3
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	1814      	adds	r4, r2, r0
 8003e8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e90:	414b      	adcs	r3, r1
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	008b      	lsls	r3, r1, #2
 8003ea8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eac:	0082      	lsls	r2, r0, #2
 8003eae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003eb2:	f7fc f989 	bl	80001c8 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <UART_SetConfig+0x38c>)
 8003ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	3332      	adds	r3, #50	; 0x32
 8003ece:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <UART_SetConfig+0x38c>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eda:	441e      	add	r6, r3
 8003edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	1894      	adds	r4, r2, r2
 8003eea:	603c      	str	r4, [r7, #0]
 8003eec:	415b      	adcs	r3, r3
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef4:	1812      	adds	r2, r2, r0
 8003ef6:	eb41 0303 	adc.w	r3, r1, r3
 8003efa:	f04f 0400 	mov.w	r4, #0
 8003efe:	f04f 0500 	mov.w	r5, #0
 8003f02:	00dd      	lsls	r5, r3, #3
 8003f04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f08:	00d4      	lsls	r4, r2, #3
 8003f0a:	4622      	mov	r2, r4
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f12:	eb43 0b01 	adc.w	fp, r3, r1
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f04f 0100 	mov.w	r1, #0
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	008b      	lsls	r3, r1, #2
 8003f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f2e:	0082      	lsls	r2, r0, #2
 8003f30:	4650      	mov	r0, sl
 8003f32:	4659      	mov	r1, fp
 8003f34:	f7fc f948 	bl	80001c8 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <UART_SetConfig+0x38c>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <UART_SetConfig+0x38c>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 020f 	and.w	r2, r3, #15
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4432      	add	r2, r6
 8003f62:	609a      	str	r2, [r3, #8]
}
 8003f64:	bf00      	nop
 8003f66:	377c      	adds	r7, #124	; 0x7c
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	bf00      	nop
 8003f70:	40011000 	.word	0x40011000
 8003f74:	40011400 	.word	0x40011400
 8003f78:	51eb851f 	.word	0x51eb851f

08003f7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	f107 001c 	add.w	r0, r7, #28
 8003f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d122      	bne.n	8003fda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 fac6 	bl	8005560 <USB_CoreReset>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
 8003fd8:	e01a      	b.n	8004010 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 faba 	bl	8005560 <USB_CoreReset>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
 8004002:	e005      	b.n	8004010 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	2b01      	cmp	r3, #1
 8004014:	d10b      	bne.n	800402e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f043 0206 	orr.w	r2, r3, #6
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800403a:	b004      	add	sp, #16
 800403c:	4770      	bx	lr
	...

08004040 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d165      	bne.n	8004120 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a41      	ldr	r2, [pc, #260]	; (800415c <USB_SetTurnaroundTime+0x11c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d906      	bls.n	800406a <USB_SetTurnaroundTime+0x2a>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <USB_SetTurnaroundTime+0x120>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d202      	bcs.n	800406a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004064:	230f      	movs	r3, #15
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e062      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a3c      	ldr	r2, [pc, #240]	; (8004160 <USB_SetTurnaroundTime+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d306      	bcc.n	8004080 <USB_SetTurnaroundTime+0x40>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <USB_SetTurnaroundTime+0x124>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d202      	bcs.n	8004080 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800407a:	230e      	movs	r3, #14
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e057      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a38      	ldr	r2, [pc, #224]	; (8004164 <USB_SetTurnaroundTime+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d306      	bcc.n	8004096 <USB_SetTurnaroundTime+0x56>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	4a37      	ldr	r2, [pc, #220]	; (8004168 <USB_SetTurnaroundTime+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d202      	bcs.n	8004096 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004090:	230d      	movs	r3, #13
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	e04c      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a33      	ldr	r2, [pc, #204]	; (8004168 <USB_SetTurnaroundTime+0x128>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d306      	bcc.n	80040ac <USB_SetTurnaroundTime+0x6c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <USB_SetTurnaroundTime+0x12c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d802      	bhi.n	80040ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040a6:	230c      	movs	r3, #12
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e041      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4a2f      	ldr	r2, [pc, #188]	; (800416c <USB_SetTurnaroundTime+0x12c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d906      	bls.n	80040c2 <USB_SetTurnaroundTime+0x82>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4a2e      	ldr	r2, [pc, #184]	; (8004170 <USB_SetTurnaroundTime+0x130>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d802      	bhi.n	80040c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80040bc:	230b      	movs	r3, #11
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e036      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <USB_SetTurnaroundTime+0x130>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <USB_SetTurnaroundTime+0x98>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <USB_SetTurnaroundTime+0x134>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d802      	bhi.n	80040d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80040d2:	230a      	movs	r3, #10
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e02b      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a26      	ldr	r2, [pc, #152]	; (8004174 <USB_SetTurnaroundTime+0x134>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d906      	bls.n	80040ee <USB_SetTurnaroundTime+0xae>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <USB_SetTurnaroundTime+0x138>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d202      	bcs.n	80040ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80040e8:	2309      	movs	r3, #9
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e020      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4a21      	ldr	r2, [pc, #132]	; (8004178 <USB_SetTurnaroundTime+0x138>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d306      	bcc.n	8004104 <USB_SetTurnaroundTime+0xc4>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4a20      	ldr	r2, [pc, #128]	; (800417c <USB_SetTurnaroundTime+0x13c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d802      	bhi.n	8004104 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80040fe:	2308      	movs	r3, #8
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e015      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a1d      	ldr	r2, [pc, #116]	; (800417c <USB_SetTurnaroundTime+0x13c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d906      	bls.n	800411a <USB_SetTurnaroundTime+0xda>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <USB_SetTurnaroundTime+0x140>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d202      	bcs.n	800411a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004114:	2307      	movs	r3, #7
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00a      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800411a:	2306      	movs	r3, #6
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	e007      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004126:	2309      	movs	r3, #9
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e001      	b.n	8004130 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800412c:	2309      	movs	r3, #9
 800412e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	029b      	lsls	r3, r3, #10
 8004144:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004148:	431a      	orrs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	00d8acbf 	.word	0x00d8acbf
 8004160:	00e4e1c0 	.word	0x00e4e1c0
 8004164:	00f42400 	.word	0x00f42400
 8004168:	01067380 	.word	0x01067380
 800416c:	011a499f 	.word	0x011a499f
 8004170:	01312cff 	.word	0x01312cff
 8004174:	014ca43f 	.word	0x014ca43f
 8004178:	016e3600 	.word	0x016e3600
 800417c:	01a6ab1f 	.word	0x01a6ab1f
 8004180:	01e84800 	.word	0x01e84800

08004184 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d106      	bne.n	80041f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	e00b      	b.n	800420c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	e001      	b.n	800420c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e003      	b.n	8004214 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800420c:	2032      	movs	r0, #50	; 0x32
 800420e:	f7fc fe5b 	bl	8000ec8 <HAL_Delay>

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800421c:	b084      	sub	sp, #16
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800422a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	e009      	b.n	8004250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3340      	adds	r3, #64	; 0x40
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	2200      	movs	r2, #0
 8004248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0e      	cmp	r3, #14
 8004254:	d9f2      	bls.n	800423c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11c      	bne.n	8004296 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
 8004294:	e00b      	b.n	80042ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c0:	4619      	mov	r1, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	461a      	mov	r2, r3
 80042ca:	680b      	ldr	r3, [r1, #0]
 80042cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10c      	bne.n	80042ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f949 	bl	8004574 <USB_SetDevSpeed>
 80042e2:	e008      	b.n	80042f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042e4:	2101      	movs	r1, #1
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f944 	bl	8004574 <USB_SetDevSpeed>
 80042ec:	e003      	b.n	80042f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ee:	2103      	movs	r1, #3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f93f 	bl	8004574 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042f6:	2110      	movs	r1, #16
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8f3 	bl	80044e4 <USB_FlushTxFifo>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f911 	bl	8004530 <USB_FlushRxFifo>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	461a      	mov	r2, r3
 800432c:	2300      	movs	r3, #0
 800432e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e043      	b.n	80043ca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004358:	d118      	bne.n	800438c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e013      	b.n	800439e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	461a      	mov	r2, r3
 8004384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e008      	b.n	800439e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	461a      	mov	r2, r3
 800439a:	2300      	movs	r3, #0
 800439c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043bc:	461a      	mov	r2, r3
 80043be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3301      	adds	r3, #1
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3b7      	bcc.n	8004342 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	e043      	b.n	8004460 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ee:	d118      	bne.n	8004422 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	461a      	mov	r2, r3
 8004404:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e013      	b.n	8004434 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	e008      	b.n	8004434 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	461a      	mov	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004458:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3b7      	bcc.n	80043d8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800447a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004488:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f043 0210 	orr.w	r2, r3, #16
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <USB_DevInit+0x2c4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f043 0208 	orr.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044dc:	b004      	add	sp, #16
 80044de:	4770      	bx	lr
 80044e0:	803c3800 	.word	0x803c3800

080044e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <USB_FlushTxFifo+0x48>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d0f0      	beq.n	80044fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	00030d40 	.word	0x00030d40

08004530 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2210      	movs	r2, #16
 8004540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4a09      	ldr	r2, [pc, #36]	; (8004570 <USB_FlushRxFifo+0x40>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d0f0      	beq.n	8004542 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	00030d40 	.word	0x00030d40

08004574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b087      	sub	sp, #28
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
 80045ca:	e00a      	b.n	80045e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d002      	beq.n	80045d8 <USB_GetDevSpeed+0x32>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b06      	cmp	r3, #6
 80045d6:	d102      	bne.n	80045de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045d8:	2302      	movs	r3, #2
 80045da:	75fb      	strb	r3, [r7, #23]
 80045dc:	e001      	b.n	80045e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045de:	230f      	movs	r3, #15
 80045e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d13a      	bne.n	8004682 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f303 	lsl.w	r3, r1, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800462a:	4313      	orrs	r3, r2
 800462c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d155      	bne.n	80046f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	78db      	ldrb	r3, [r3, #3]
 800465e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004660:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	059b      	lsls	r3, r3, #22
 8004666:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004668:	4313      	orrs	r3, r2
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e036      	b.n	80046f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	2101      	movs	r1, #1
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	68f9      	ldr	r1, [r7, #12]
 800469c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d11a      	bne.n	80046f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	78db      	ldrb	r3, [r3, #3]
 80046d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046d6:	430b      	orrs	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d161      	bne.n	80047e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004732:	d11f      	bne.n	8004774 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004752:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004794:	4013      	ands	r3, r2
 8004796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b8:	4013      	ands	r3, r2
 80047ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	0159      	lsls	r1, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	4619      	mov	r1, r3
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <USB_DeactivateEndpoint+0x1b0>)
 80047da:	4013      	ands	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	e060      	b.n	80048a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f6:	d11f      	bne.n	8004838 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004816:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	0159      	lsls	r1, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	440b      	add	r3, r1
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	4619      	mov	r1, r3
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <USB_DeactivateEndpoint+0x1b4>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	ec337800 	.word	0xec337800
 80048b4:	eff37800 	.word	0xeff37800

080048b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 815c 	bne.w	8004b92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d132      	bne.n	8004948 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004904:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004924:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004940:	0cdb      	lsrs	r3, r3, #19
 8004942:	04db      	lsls	r3, r3, #19
 8004944:	6113      	str	r3, [r2, #16]
 8004946:	e074      	b.n	8004a32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	0cdb      	lsrs	r3, r3, #19
 8004964:	04db      	lsls	r3, r3, #19
 8004966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004986:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800498a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6959      	ldr	r1, [r3, #20]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	440b      	add	r3, r1
 80049a4:	1e59      	subs	r1, r3, #1
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ae:	04d9      	lsls	r1, r3, #19
 80049b0:	4b9d      	ldr	r3, [pc, #628]	; (8004c28 <USB_EPStartXfer+0x370>)
 80049b2:	400b      	ands	r3, r1
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	0148      	lsls	r0, r1, #5
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	4401      	add	r1, r0
 80049bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c0:	4313      	orrs	r3, r2
 80049c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	0148      	lsls	r0, r1, #5
 80049de:	69f9      	ldr	r1, [r7, #28]
 80049e0:	4401      	add	r1, r0
 80049e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	78db      	ldrb	r3, [r3, #3]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d11f      	bne.n	8004a32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d14b      	bne.n	8004ad0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d128      	bne.n	8004aae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e00f      	b.n	8004aae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e12f      	b.n	8004d30 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	78db      	ldrb	r3, [r3, #3]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d015      	beq.n	8004b24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8117 	beq.w	8004d30 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	2101      	movs	r1, #1
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	69f9      	ldr	r1, [r7, #28]
 8004b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	634b      	str	r3, [r1, #52]	; 0x34
 8004b22:	e105      	b.n	8004d30 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d110      	bne.n	8004b56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e00f      	b.n	8004b76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68d9      	ldr	r1, [r3, #12]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	b298      	uxth	r0, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	4603      	mov	r3, r0
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fa2b 	bl	8004fe6 <USB_WritePacket>
 8004b90:	e0ce      	b.n	8004d30 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	0151      	lsls	r1, r2, #5
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	440a      	add	r2, r1
 8004ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bac:	0cdb      	lsrs	r3, r3, #19
 8004bae:	04db      	lsls	r3, r3, #19
 8004bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	0151      	lsls	r1, r2, #5
 8004bc4:	69fa      	ldr	r2, [r7, #28]
 8004bc6:	440a      	add	r2, r1
 8004bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d126      	bne.n	8004c2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	0148      	lsls	r0, r1, #5
 8004bf8:	69f9      	ldr	r1, [r7, #28]
 8004bfa:	4401      	add	r1, r0
 8004bfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	e036      	b.n	8004c94 <USB_EPStartXfer+0x3dc>
 8004c26:	bf00      	nop
 8004c28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	8afb      	ldrh	r3, [r7, #22]
 8004c52:	04d9      	lsls	r1, r3, #19
 8004c54:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <USB_EPStartXfer+0x484>)
 8004c56:	400b      	ands	r3, r1
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	0148      	lsls	r0, r1, #5
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	4401      	add	r1, r0
 8004c60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c64:	4313      	orrs	r3, r2
 8004c66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	8af9      	ldrh	r1, [r7, #22]
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	0148      	lsls	r0, r1, #5
 8004c88:	69f9      	ldr	r1, [r7, #28]
 8004c8a:	4401      	add	r1, r0
 8004c8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10d      	bne.n	8004cb6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68d9      	ldr	r1, [r3, #12]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d128      	bne.n	8004d10 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d110      	bne.n	8004cf0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00f      	b.n	8004d10 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	1ff80000 	.word	0x1ff80000

08004d40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 80cd 	bne.w	8004efc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d132      	bne.n	8004dd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	0cdb      	lsrs	r3, r3, #19
 8004dca:	04db      	lsls	r3, r3, #19
 8004dcc:	6113      	str	r3, [r2, #16]
 8004dce:	e04e      	b.n	8004e6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	0cdb      	lsrs	r3, r3, #19
 8004dec:	04db      	lsls	r3, r3, #19
 8004dee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d903      	bls.n	8004e28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5e:	6939      	ldr	r1, [r7, #16]
 8004e60:	0148      	lsls	r0, r1, #5
 8004e62:	6979      	ldr	r1, [r7, #20]
 8004e64:	4401      	add	r1, r0
 8004e66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d11e      	bne.n	8004eb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e092      	b.n	8004fd8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d07e      	beq.n	8004fd8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	2101      	movs	r1, #1
 8004eec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef0:	6979      	ldr	r1, [r7, #20]
 8004ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8004efa:	e06d      	b.n	8004fd8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f16:	0cdb      	lsrs	r3, r3, #19
 8004f18:	04db      	lsls	r3, r3, #19
 8004f1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f86:	6939      	ldr	r1, [r7, #16]
 8004f88:	0148      	lsls	r0, r1, #5
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	4401      	add	r1, r0
 8004f8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10d      	bne.n	8004fb8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d009      	beq.n	8004fb8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	68d9      	ldr	r1, [r3, #12]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	015a      	lsls	r2, r3, #5
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	0151      	lsls	r1, r2, #5
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	440a      	add	r2, r1
 8004fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b089      	sub	sp, #36	; 0x24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	71fb      	strb	r3, [r7, #7]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005004:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11a      	bne.n	8005042 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800500c:	88bb      	ldrh	r3, [r7, #4]
 800500e:	3303      	adds	r3, #3
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005014:	2300      	movs	r3, #0
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e00f      	b.n	800503a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	031a      	lsls	r2, r3, #12
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4413      	add	r3, r2
 8005022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005026:	461a      	mov	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	3301      	adds	r3, #1
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	429a      	cmp	r2, r3
 8005040:	d3eb      	bcc.n	800501a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3724      	adds	r7, #36	; 0x24
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	3303      	adds	r3, #3
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e00b      	b.n	800508c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3304      	adds	r3, #4
 8005084:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	3301      	adds	r3, #1
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d3ef      	bcc.n	8005074 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005094:	69fb      	ldr	r3, [r7, #28]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d12c      	bne.n	8005118 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	db12      	blt.n	80050f6 <USB_EPSetStall+0x54>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00f      	beq.n	80050f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e02b      	b.n	8005170 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db12      	blt.n	8005150 <USB_EPSetStall+0xae>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00f      	beq.n	8005150 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800514e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800516e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d128      	bne.n	80051ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	78db      	ldrb	r3, [r3, #3]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d003      	beq.n	80051ca <USB_EPClearStall+0x4c>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	78db      	ldrb	r3, [r3, #3]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d138      	bne.n	800523c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e027      	b.n	800523c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800520a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	78db      	ldrb	r3, [r3, #3]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d003      	beq.n	800521c <USB_EPClearStall+0x9e>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	78db      	ldrb	r3, [r3, #3]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d10f      	bne.n	800523c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	460b      	mov	r3, r1
 8005254:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005268:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800526c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052b0:	f023 0303 	bic.w	r3, r3, #3
 80052b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052f2:	f023 0303 	bic.w	r3, r3, #3
 80052f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005306:	f043 0302 	orr.w	r3, r3, #2
 800530a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4013      	ands	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005332:	68fb      	ldr	r3, [r7, #12]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	0c1b      	lsrs	r3, r3, #16
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	b29b      	uxth	r3, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053d6:	68bb      	ldr	r3, [r7, #8]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005406:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	f003 030f 	and.w	r3, r3, #15
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	fa22 f303 	lsr.w	r3, r2, r3
 8005414:	01db      	lsls	r3, r3, #7
 8005416:	b2db      	uxtb	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4013      	ands	r3, r2
 8005430:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005432:	68bb      	ldr	r3, [r7, #8]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005476:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005492:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	460b      	mov	r3, r1
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	333c      	adds	r3, #60	; 0x3c
 80054ba:	3304      	adds	r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4a26      	ldr	r2, [pc, #152]	; (800555c <USB_EP0_OutStart+0xb8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d90a      	bls.n	80054de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d8:	d101      	bne.n	80054de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e037      	b.n	800554e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800550c:	f043 0318 	orr.w	r3, r3, #24
 8005510:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005524:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10f      	bne.n	800554c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005546:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800554a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	4f54300a 	.word	0x4f54300a

08005560 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <USB_CoreReset+0x64>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e01b      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	daf2      	bge.n	800556c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <USB_CoreReset+0x64>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e006      	b.n	80055b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0f0      	beq.n	8005596 <USB_CoreReset+0x36>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055d8:	f002 f95c 	bl	8007894 <USBD_static_malloc>
 80055dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80055ec:	2302      	movs	r3, #2
 80055ee:	e066      	b.n	80056be <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7c1b      	ldrb	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d119      	bne.n	8005634 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005604:	2202      	movs	r2, #2
 8005606:	2181      	movs	r1, #129	; 0x81
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 f820 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005618:	2202      	movs	r2, #2
 800561a:	2101      	movs	r1, #1
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f002 f816 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2210      	movs	r2, #16
 800562e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005632:	e016      	b.n	8005662 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	2202      	movs	r2, #2
 8005638:	2181      	movs	r1, #129	; 0x81
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f002 f807 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005646:	2340      	movs	r3, #64	; 0x40
 8005648:	2202      	movs	r2, #2
 800564a:	2101      	movs	r1, #1
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f001 fffe 	bl	800764e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2210      	movs	r2, #16
 800565e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005662:	2308      	movs	r3, #8
 8005664:	2203      	movs	r2, #3
 8005666:	2182      	movs	r1, #130	; 0x82
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fff0 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7c1b      	ldrb	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800569e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a2:	2101      	movs	r1, #1
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 f8c1 	bl	800782c <USBD_LL_PrepareReceive>
 80056aa:	e007      	b.n	80056bc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	2101      	movs	r1, #1
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 f8b8 	bl	800782c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056d2:	2181      	movs	r1, #129	; 0x81
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 ffe0 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 ffd9 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056f0:	2182      	movs	r1, #130	; 0x82
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 ffd1 	bl	800769a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005722:	4618      	mov	r0, r3
 8005724:	f002 f8c4 	bl	80078b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800574c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005760:	2303      	movs	r3, #3
 8005762:	e0af      	b.n	80058c4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576c:	2b00      	cmp	r3, #0
 800576e:	d03f      	beq.n	80057f0 <USBD_CDC_Setup+0xb4>
 8005770:	2b20      	cmp	r3, #32
 8005772:	f040 809f 	bne.w	80058b4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	88db      	ldrh	r3, [r3, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02e      	beq.n	80057dc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	b25b      	sxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	da16      	bge.n	80057b6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005794:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	88d2      	ldrh	r2, [r2, #6]
 800579a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	88db      	ldrh	r3, [r3, #6]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	bf28      	it	cs
 80057a4:	2307      	movcs	r3, #7
 80057a6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	89fa      	ldrh	r2, [r7, #14]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fb19 	bl	8006de6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80057b4:	e085      	b.n	80058c2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	785a      	ldrb	r2, [r3, #1]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057cc:	6939      	ldr	r1, [r7, #16]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	88db      	ldrh	r3, [r3, #6]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fb32 	bl	8006e3e <USBD_CtlPrepareRx>
      break;
 80057da:	e072      	b.n	80058c2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	7850      	ldrb	r0, [r2, #1]
 80057e8:	2200      	movs	r2, #0
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	4798      	blx	r3
      break;
 80057ee:	e068      	b.n	80058c2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b0b      	cmp	r3, #11
 80057f6:	d852      	bhi.n	800589e <USBD_CDC_Setup+0x162>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <USBD_CDC_Setup+0xc4>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005831 	.word	0x08005831
 8005804:	080058ad 	.word	0x080058ad
 8005808:	0800589f 	.word	0x0800589f
 800580c:	0800589f 	.word	0x0800589f
 8005810:	0800589f 	.word	0x0800589f
 8005814:	0800589f 	.word	0x0800589f
 8005818:	0800589f 	.word	0x0800589f
 800581c:	0800589f 	.word	0x0800589f
 8005820:	0800589f 	.word	0x0800589f
 8005824:	0800589f 	.word	0x0800589f
 8005828:	0800585b 	.word	0x0800585b
 800582c:	08005885 	.word	0x08005885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d107      	bne.n	800584c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800583c:	f107 030a 	add.w	r3, r7, #10
 8005840:	2202      	movs	r2, #2
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 face 	bl	8006de6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800584a:	e032      	b.n	80058b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fa58 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	75fb      	strb	r3, [r7, #23]
          break;
 8005858:	e02b      	b.n	80058b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005866:	f107 030d 	add.w	r3, r7, #13
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fab9 	bl	8006de6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005874:	e01d      	b.n	80058b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fa43 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e016      	b.n	80058b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d00f      	beq.n	80058b0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fa36 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800589c:	e008      	b.n	80058b0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fa2f 	bl	8006d04 <USBD_CtlError>
          ret = USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	75fb      	strb	r3, [r7, #23]
          break;
 80058aa:	e002      	b.n	80058b2 <USBD_CDC_Setup+0x176>
          break;
 80058ac:	bf00      	nop
 80058ae:	e008      	b.n	80058c2 <USBD_CDC_Setup+0x186>
          break;
 80058b0:	bf00      	nop
      }
      break;
 80058b2:	e006      	b.n	80058c2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fa24 	bl	8006d04 <USBD_CtlError>
      ret = USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	75fb      	strb	r3, [r7, #23]
      break;
 80058c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80058de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e04f      	b.n	800598e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3318      	adds	r3, #24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d029      	beq.n	8005960 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3318      	adds	r3, #24
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	78f9      	ldrb	r1, [r7, #3]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	460b      	mov	r3, r1
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	1a5b      	subs	r3, r3, r1
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	3344      	adds	r3, #68	; 0x44
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fbb2 f1f3 	udiv	r1, r2, r3
 8005934:	fb03 f301 	mul.w	r3, r3, r1
 8005938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3318      	adds	r3, #24
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 ff46 	bl	80077ea <USBD_LL_Transmit>
 800595e:	e015      	b.n	800598c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e015      	b.n	80059e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 ff56 	bl	800786e <USBD_LL_GetRxDataSize>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059de:	4611      	mov	r1, r2
 80059e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e01b      	b.n	8005a3e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <USBD_CDC_EP0_RxReady+0x50>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a16:	2bff      	cmp	r3, #255	; 0xff
 8005a18:	d010      	beq.n	8005a3c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a28:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a30:	b292      	uxth	r2, r2
 8005a32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2243      	movs	r2, #67	; 0x43
 8005a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a56:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	20000094 	.word	0x20000094

08005a68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2243      	movs	r2, #67	; 0x43
 8005a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20000050 	.word	0x20000050

08005a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2243      	movs	r2, #67	; 0x43
 8005a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005a96:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200000d8 	.word	0x200000d8

08005aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	2000000c 	.word	0x2000000c

08005ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e004      	b.n	8005ae6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e008      	b.n	8005b22 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e004      	b.n	8005b54 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e01a      	b.n	8005bb8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d114      	bne.n	8005bb6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005baa:	2181      	movs	r1, #129	; 0x81
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fe1c 	bl	80077ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e016      	b.n	8005c0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7c1b      	ldrb	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fe1a 	bl	800782c <USBD_LL_PrepareReceive>
 8005bf8:	e007      	b.n	8005c0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	2101      	movs	r1, #1
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fe11 	bl	800782c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e01f      	b.n	8005c6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	79fa      	ldrb	r2, [r7, #7]
 8005c5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f001 fc8d 	bl	8007580 <USBD_LL_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e016      	b.n	8005cba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f107 020e 	add.w	r2, r7, #14
 8005cac:	4610      	mov	r0, r2
 8005cae:	4798      	blx	r3
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fca4 	bl	8007618 <USBD_LL_Start>
 8005cd0:	4603      	mov	r3, r0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
  }

  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff90 	bl	8006c90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d01a      	beq.n	8005dca <USBD_LL_SetupStage+0x72>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d822      	bhi.n	8005dde <USBD_LL_SetupStage+0x86>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USBD_LL_SetupStage+0x4a>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d00a      	beq.n	8005db6 <USBD_LL_SetupStage+0x5e>
 8005da0:	e01d      	b.n	8005dde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa62 	bl	8006274 <USBD_StdDevReq>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e020      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fac6 	bl	8006350 <USBD_StdItfReq>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e016      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb05 	bl	80063e2 <USBD_StdEPReq>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e00c      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fc73 	bl	80076d8 <USBD_LL_StallEP>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]
      break;
 8005df6:	bf00      	nop
  }

  return ret;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d138      	bne.n	8005e88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d14a      	bne.n	8005ebe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d913      	bls.n	8005e5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	1ad2      	subs	r2, r2, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf28      	it	cs
 8005e4e:	4613      	movcs	r3, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 f80f 	bl	8006e78 <USBD_CtlContinueRx>
 8005e5a:	e030      	b.n	8005ebe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d10b      	bne.n	8005e80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 f80a 	bl	8006e9a <USBD_CtlSendStatus>
 8005e86:	e01a      	b.n	8005ebe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d114      	bne.n	8005ebe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e000      	b.n	8005ec0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d16b      	bne.n	8005fb4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d156      	bne.n	8005f9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d914      	bls.n	8005f22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 ff84 	bl	8006e1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f14:	2300      	movs	r3, #0
 8005f16:	2200      	movs	r2, #0
 8005f18:	2100      	movs	r1, #0
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f001 fc86 	bl	800782c <USBD_LL_PrepareReceive>
 8005f20:	e03b      	b.n	8005f9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d11c      	bne.n	8005f68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d316      	bcc.n	8005f68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d20f      	bcs.n	8005f68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 ff65 	bl	8006e1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 fc63 	bl	800782c <USBD_LL_PrepareReceive>
 8005f66:	e018      	b.n	8005f9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d10b      	bne.n	8005f8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fba2 	bl	80076d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 ff93 	bl	8006ec0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d122      	bne.n	8005fea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fe98 	bl	8005cda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb2:	e01a      	b.n	8005fea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d114      	bne.n	8005fea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	7afa      	ldrb	r2, [r7, #11]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e000      	b.n	8005fec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e02f      	b.n	8006088 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6852      	ldr	r2, [r2, #4]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	4611      	mov	r1, r2
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	2200      	movs	r2, #0
 8006056:	2100      	movs	r1, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 faf8 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 faea 	bl	800764e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d106      	bne.n	80060fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e012      	b.n	8006148 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d10b      	bne.n	8006146 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006166:	2303      	movs	r3, #3
 8006168:	e014      	b.n	8006194 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d10d      	bne.n	8006192 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e014      	b.n	80061e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d10d      	bne.n	80061de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	4611      	mov	r1, r2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6852      	ldr	r2, [r2, #4]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	4611      	mov	r1, r2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
  }

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3301      	adds	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006254:	8a3b      	ldrh	r3, [r7, #16]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	b21a      	sxth	r2, r3
 800625a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800625e:	4313      	orrs	r3, r2
 8006260:	b21b      	sxth	r3, r3
 8006262:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006264:	89fb      	ldrh	r3, [r7, #14]
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d005      	beq.n	800629a <USBD_StdDevReq+0x26>
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d853      	bhi.n	800633a <USBD_StdDevReq+0xc6>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <USBD_StdDevReq+0x3a>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d14f      	bne.n	800633a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4798      	blx	r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
      break;
 80062ac:	e04a      	b.n	8006344 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	d83b      	bhi.n	800632e <USBD_StdDevReq+0xba>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <USBD_StdDevReq+0x48>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006325 	.word	0x08006325
 80062c4:	0800632f 	.word	0x0800632f
 80062c8:	0800631b 	.word	0x0800631b
 80062cc:	0800632f 	.word	0x0800632f
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	0800632f 	.word	0x0800632f
 80062dc:	08006307 	.word	0x08006307
 80062e0:	080062f9 	.word	0x080062f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9de 	bl	80066a8 <USBD_GetDescriptor>
          break;
 80062ec:	e024      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb43 	bl	800697c <USBD_SetAddress>
          break;
 80062f6:	e01f      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb82 	bl	8006a04 <USBD_SetConfig>
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
          break;
 8006304:	e018      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc21 	bl	8006b50 <USBD_GetConfig>
          break;
 800630e:	e013      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc52 	bl	8006bbc <USBD_GetStatus>
          break;
 8006318:	e00e      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc81 	bl	8006c24 <USBD_SetFeature>
          break;
 8006322:	e009      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fc90 	bl	8006c4c <USBD_ClrFeature>
          break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fce7 	bl	8006d04 <USBD_CtlError>
          break;
 8006336:	bf00      	nop
      }
      break;
 8006338:	e004      	b.n	8006344 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fce1 	bl	8006d04 <USBD_CtlError>
      break;
 8006342:	bf00      	nop
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d005      	beq.n	8006376 <USBD_StdItfReq+0x26>
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d82f      	bhi.n	80063ce <USBD_StdItfReq+0x7e>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <USBD_StdItfReq+0x26>
 8006372:	2b20      	cmp	r3, #32
 8006374:	d12b      	bne.n	80063ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	2b02      	cmp	r3, #2
 8006382:	d81d      	bhi.n	80063c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d813      	bhi.n	80063b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d110      	bne.n	80063ca <USBD_StdItfReq+0x7a>
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10d      	bne.n	80063ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fd73 	bl	8006e9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063b4:	e009      	b.n	80063ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fca3 	bl	8006d04 <USBD_CtlError>
          break;
 80063be:	e004      	b.n	80063ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc9e 	bl	8006d04 <USBD_CtlError>
          break;
 80063c8:	e000      	b.n	80063cc <USBD_StdItfReq+0x7c>
          break;
 80063ca:	bf00      	nop
      }
      break;
 80063cc:	e004      	b.n	80063d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc97 	bl	8006d04 <USBD_CtlError>
      break;
 80063d6:	bf00      	nop
  }

  return ret;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	889b      	ldrh	r3, [r3, #4]
 80063f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d007      	beq.n	8006412 <USBD_StdEPReq+0x30>
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	f200 8145 	bhi.w	8006692 <USBD_StdEPReq+0x2b0>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <USBD_StdEPReq+0x44>
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 8140 	bne.w	8006692 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
      break;
 8006424:	e13a      	b.n	800669c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d007      	beq.n	800643e <USBD_StdEPReq+0x5c>
 800642e:	2b03      	cmp	r3, #3
 8006430:	f300 8129 	bgt.w	8006686 <USBD_StdEPReq+0x2a4>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d07f      	beq.n	8006538 <USBD_StdEPReq+0x156>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d03c      	beq.n	80064b6 <USBD_StdEPReq+0xd4>
 800643c:	e123      	b.n	8006686 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d002      	beq.n	8006450 <USBD_StdEPReq+0x6e>
 800644a:	2b03      	cmp	r3, #3
 800644c:	d016      	beq.n	800647c <USBD_StdEPReq+0x9a>
 800644e:	e02c      	b.n	80064aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <USBD_StdEPReq+0x90>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b80      	cmp	r3, #128	; 0x80
 800645a:	d00a      	beq.n	8006472 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f939 	bl	80076d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 f935 	bl	80076d8 <USBD_LL_StallEP>
 800646e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006470:	e020      	b.n	80064b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc45 	bl	8006d04 <USBD_CtlError>
              break;
 800647a:	e01b      	b.n	80064b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	885b      	ldrh	r3, [r3, #2]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10e      	bne.n	80064a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <USBD_StdEPReq+0xc0>
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	2b80      	cmp	r3, #128	; 0x80
 800648e:	d008      	beq.n	80064a2 <USBD_StdEPReq+0xc0>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	88db      	ldrh	r3, [r3, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f91b 	bl	80076d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcf9 	bl	8006e9a <USBD_CtlSendStatus>

              break;
 80064a8:	e004      	b.n	80064b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc29 	bl	8006d04 <USBD_CtlError>
              break;
 80064b2:	bf00      	nop
          }
          break;
 80064b4:	e0ec      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d002      	beq.n	80064c8 <USBD_StdEPReq+0xe6>
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d016      	beq.n	80064f4 <USBD_StdEPReq+0x112>
 80064c6:	e030      	b.n	800652a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <USBD_StdEPReq+0x108>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d00a      	beq.n	80064ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f8fd 	bl	80076d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f8f9 	bl	80076d8 <USBD_LL_StallEP>
 80064e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064e8:	e025      	b.n	8006536 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc09 	bl	8006d04 <USBD_CtlError>
              break;
 80064f2:	e020      	b.n	8006536 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11b      	bne.n	8006534 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f903 	bl	8007716 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fcc2 	bl	8006e9a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006528:	e004      	b.n	8006534 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fbe9 	bl	8006d04 <USBD_CtlError>
              break;
 8006532:	e000      	b.n	8006536 <USBD_StdEPReq+0x154>
              break;
 8006534:	bf00      	nop
          }
          break;
 8006536:	e0ab      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0x168>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d032      	beq.n	80065ae <USBD_StdEPReq+0x1cc>
 8006548:	e097      	b.n	800667a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <USBD_StdEPReq+0x17e>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d004      	beq.n	8006560 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbd3 	bl	8006d04 <USBD_CtlError>
                break;
 800655e:	e091      	b.n	8006684 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0b      	bge.n	8006580 <USBD_StdEPReq+0x19e>
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	3310      	adds	r3, #16
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	e00b      	b.n	8006598 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fc1d 	bl	8006de6 <USBD_CtlSendData>
              break;
 80065ac:	e06a      	b.n	8006684 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da11      	bge.n	80065da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb96 	bl	8006d04 <USBD_CtlError>
                  break;
 80065d8:	e054      	b.n	8006684 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb83 	bl	8006d04 <USBD_CtlError>
                  break;
 80065fe:	e041      	b.n	8006684 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	da0b      	bge.n	8006620 <USBD_StdEPReq+0x23e>
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	3310      	adds	r3, #16
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	e00b      	b.n	8006638 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	3304      	adds	r3, #4
 8006638:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x264>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d103      	bne.n	800664e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00e      	b.n	800666c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f87e 	bl	8007754 <USBD_LL_IsStallEP>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fbb7 	bl	8006de6 <USBD_CtlSendData>
              break;
 8006678:	e004      	b.n	8006684 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb41 	bl	8006d04 <USBD_CtlError>
              break;
 8006682:	bf00      	nop
          }
          break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb3b 	bl	8006d04 <USBD_CtlError>
          break;
 800668e:	bf00      	nop
      }
      break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb35 	bl	8006d04 <USBD_CtlError>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	f200 8128 	bhi.w	800691e <USBD_GetDescriptor+0x276>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	08006709 	.word	0x08006709
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	0800691f 	.word	0x0800691f
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068eb 	.word	0x080068eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e112      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672a:	e100      	b.n	800692e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      break;
 8006746:	e0f2      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	885b      	ldrh	r3, [r3, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b05      	cmp	r3, #5
 8006750:	f200 80ac 	bhi.w	80068ac <USBD_GetDescriptor+0x204>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0xb4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006775 	.word	0x08006775
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067dd 	.word	0x080067dd
 8006768:	08006811 	.word	0x08006811
 800676c:	08006845 	.word	0x08006845
 8006770:	08006879 	.word	0x08006879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e091      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fab2 	bl	8006d04 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e089      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e077      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa98 	bl	8006d04 <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e06f      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e05d      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa7e 	bl	8006d04 <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e055      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e043      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa64 	bl	8006d04 <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e03b      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e029      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa4a 	bl	8006d04 <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e021      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e00f      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa30 	bl	8006d04 <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e007      	b.n	80068bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa28 	bl	8006d04 <USBD_CtlError>
          err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80068ba:	bf00      	nop
      }
      break;
 80068bc:	e037      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e029      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa11 	bl	8006d04 <USBD_CtlError>
        err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	e021      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	2207      	movs	r2, #7
 800690a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690c:	e00f      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9f7 	bl	8006d04 <USBD_CtlError>
        err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	e007      	b.n	800692e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9ef 	bl	8006d04 <USBD_CtlError>
      err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	bf00      	nop
  }

  if (err != 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11e      	bne.n	8006972 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88da      	ldrh	r2, [r3, #6]
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	4293      	cmp	r3, r2
 800694a:	bf28      	it	cs
 800694c:	4613      	movcs	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	461a      	mov	r2, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa44 	bl	8006de6 <USBD_CtlSendData>
 800695e:	e009      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9ce 	bl	8006d04 <USBD_CtlError>
 8006968:	e004      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa95 	bl	8006e9a <USBD_CtlSendStatus>
 8006970:	e000      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    return;
 8006972:	bf00      	nop
  }
}
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	889b      	ldrh	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d131      	bne.n	80069f2 <USBD_SetAddress+0x76>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	88db      	ldrh	r3, [r3, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12d      	bne.n	80069f2 <USBD_SetAddress+0x76>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	885b      	ldrh	r3, [r3, #2]
 800699a:	2b7f      	cmp	r3, #127	; 0x7f
 800699c:	d829      	bhi.n	80069f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d104      	bne.n	80069c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9a3 	bl	8006d04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	e01d      	b.n	80069fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7bfa      	ldrb	r2, [r7, #15]
 80069c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 feed 	bl	80077ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa61 	bl	8006e9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	e009      	b.n	80069fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	e004      	b.n	80069fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f985 	bl	8006d04 <USBD_CtlError>
  }
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	885b      	ldrh	r3, [r3, #2]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	4b4c      	ldr	r3, [pc, #304]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a1c:	4b4b      	ldr	r3, [pc, #300]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d905      	bls.n	8006a30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f96c 	bl	8006d04 <USBD_CtlError>
    return USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e088      	b.n	8006b42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_SetConfig+0x3e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d025      	beq.n	8006a8c <USBD_SetConfig+0x88>
 8006a40:	e071      	b.n	8006b26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a42:	4b42      	ldr	r3, [pc, #264]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01c      	beq.n	8006a84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a4a:	4b40      	ldr	r3, [pc, #256]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a54:	4b3d      	ldr	r3, [pc, #244]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff f948 	bl	8005cf0 <USBD_SetClassConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f949 	bl	8006d04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a72:	e065      	b.n	8006b40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fa10 	bl	8006e9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a82:	e05d      	b.n	8006b40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa08 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006a8a:	e059      	b.n	8006b40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d112      	bne.n	8006aba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aa6:	4b29      	ldr	r3, [pc, #164]	; (8006b4c <USBD_SetConfig+0x148>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff f93b 	bl	8005d28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9f1 	bl	8006e9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ab8:	e042      	b.n	8006b40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006aba:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <USBD_SetConfig+0x148>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d02a      	beq.n	8006b1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff f929 	bl	8005d28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <USBD_SetConfig+0x148>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <USBD_SetConfig+0x148>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f902 	bl	8005cf0 <USBD_SetClassConfig>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f903 	bl	8006d04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f90e 	bl	8005d28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b14:	e014      	b.n	8006b40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9bf 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006b1c:	e010      	b.n	8006b40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9bb 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006b24:	e00c      	b.n	8006b40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8eb 	bl	8006d04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <USBD_SetConfig+0x148>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff f8f7 	bl	8005d28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3e:	bf00      	nop
  }

  return ret;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000019e 	.word	0x2000019e

08006b50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d004      	beq.n	8006b6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8cd 	bl	8006d04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b6a:	e023      	b.n	8006bb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	dc02      	bgt.n	8006b7e <USBD_GetConfig+0x2e>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc03      	bgt.n	8006b84 <USBD_GetConfig+0x34>
 8006b7c:	e015      	b.n	8006baa <USBD_GetConfig+0x5a>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d00b      	beq.n	8006b9a <USBD_GetConfig+0x4a>
 8006b82:	e012      	b.n	8006baa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f927 	bl	8006de6 <USBD_CtlSendData>
        break;
 8006b98:	e00c      	b.n	8006bb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f91f 	bl	8006de6 <USBD_CtlSendData>
        break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8a9 	bl	8006d04 <USBD_CtlError>
        break;
 8006bb2:	bf00      	nop
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d81e      	bhi.n	8006c12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d004      	beq.n	8006be6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f890 	bl	8006d04 <USBD_CtlError>
        break;
 8006be4:	e01a      	b.n	8006c1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f043 0202 	orr.w	r2, r3, #2
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	330c      	adds	r3, #12
 8006c06:	2202      	movs	r2, #2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8eb 	bl	8006de6 <USBD_CtlSendData>
      break;
 8006c10:	e004      	b.n	8006c1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f875 	bl	8006d04 <USBD_CtlError>
      break;
 8006c1a:	bf00      	nop
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d106      	bne.n	8006c44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f92b 	bl	8006e9a <USBD_CtlSendStatus>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d80b      	bhi.n	8006c7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d10c      	bne.n	8006c86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f910 	bl	8006e9a <USBD_CtlSendStatus>
      }
      break;
 8006c7a:	e004      	b.n	8006c86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f840 	bl	8006d04 <USBD_CtlError>
      break;
 8006c84:	e000      	b.n	8006c88 <USBD_ClrFeature+0x3c>
      break;
 8006c86:	bf00      	nop
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fabb 	bl	8006236 <SWAPBYTE>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff faae 	bl	8006236 <SWAPBYTE>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff faa1 	bl	8006236 <SWAPBYTE>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	80da      	strh	r2, [r3, #6]
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d0e:	2180      	movs	r1, #128	; 0x80
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fce1 	bl	80076d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcdd 	bl	80076d8 <USBD_LL_StallEP>
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d036      	beq.n	8006daa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f000 f836 	bl	8006db2 <USBD_GetLen>
 8006d46:	4603      	mov	r3, r0
 8006d48:	3301      	adds	r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	3301      	adds	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	3301      	adds	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d76:	e013      	b.n	8006da0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
    idx++;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e7      	bne.n	8006d78 <USBD_GetString+0x52>
 8006da8:	e000      	b.n	8006dac <USBD_GetString+0x86>
    return;
 8006daa:	bf00      	nop
  }
}
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006dc2:	e005      	b.n	8006dd0 <USBD_GetLen+0x1e>
  {
    len++;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f5      	bne.n	8006dc4 <USBD_GetLen+0x12>
  }

  return len;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fcec 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fcdb 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	2100      	movs	r1, #0
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fcdf 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fcce 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc9a 	bl	80077ea <USBD_LL_Transmit>

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2205      	movs	r2, #5
 8006ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fca8 	bl	800782c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eec:	2200      	movs	r2, #0
 8006eee:	4912      	ldr	r1, [pc, #72]	; (8006f38 <MX_USB_DEVICE_Init+0x50>)
 8006ef0:	4812      	ldr	r0, [pc, #72]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006ef2:	f7fe fe8f 	bl	8005c14 <USBD_Init>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006efc:	f7f9 fd7a 	bl	80009f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f00:	490f      	ldr	r1, [pc, #60]	; (8006f40 <MX_USB_DEVICE_Init+0x58>)
 8006f02:	480e      	ldr	r0, [pc, #56]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f04:	f7fe feb6 	bl	8005c74 <USBD_RegisterClass>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f0e:	f7f9 fd71 	bl	80009f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f12:	490c      	ldr	r1, [pc, #48]	; (8006f44 <MX_USB_DEVICE_Init+0x5c>)
 8006f14:	4809      	ldr	r0, [pc, #36]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f16:	f7fe fdd7 	bl	8005ac8 <USBD_CDC_RegisterInterface>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f20:	f7f9 fd68 	bl	80009f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f26:	f7fe fecc 	bl	8005cc2 <USBD_Start>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f30:	f7f9 fd60 	bl	80009f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f34:	bf00      	nop
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000130 	.word	0x20000130
 8006f3c:	20000518 	.word	0x20000518
 8006f40:	20000018 	.word	0x20000018
 8006f44:	2000011c 	.word	0x2000011c

08006f48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4905      	ldr	r1, [pc, #20]	; (8006f64 <CDC_Init_FS+0x1c>)
 8006f50:	4805      	ldr	r0, [pc, #20]	; (8006f68 <CDC_Init_FS+0x20>)
 8006f52:	f7fe fdce 	bl	8005af2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f56:	4905      	ldr	r1, [pc, #20]	; (8006f6c <CDC_Init_FS+0x24>)
 8006f58:	4803      	ldr	r0, [pc, #12]	; (8006f68 <CDC_Init_FS+0x20>)
 8006f5a:	f7fe fde8 	bl	8005b2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000fe8 	.word	0x20000fe8
 8006f68:	20000518 	.word	0x20000518
 8006f6c:	200007e8 	.word	0x200007e8

08006f70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b23      	cmp	r3, #35	; 0x23
 8006f94:	d84a      	bhi.n	800702c <CDC_Control_FS+0xac>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <CDC_Control_FS+0x1c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	0800702d 	.word	0x0800702d
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	0800702d 	.word	0x0800702d
 8006fb0:	0800702d 	.word	0x0800702d
 8006fb4:	0800702d 	.word	0x0800702d
 8006fb8:	0800702d 	.word	0x0800702d
 8006fbc:	0800702d 	.word	0x0800702d
 8006fc0:	0800702d 	.word	0x0800702d
 8006fc4:	0800702d 	.word	0x0800702d
 8006fc8:	0800702d 	.word	0x0800702d
 8006fcc:	0800702d 	.word	0x0800702d
 8006fd0:	0800702d 	.word	0x0800702d
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	0800702d 	.word	0x0800702d
 8006fe8:	0800702d 	.word	0x0800702d
 8006fec:	0800702d 	.word	0x0800702d
 8006ff0:	0800702d 	.word	0x0800702d
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	0800702d 	.word	0x0800702d
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	0800702d 	.word	0x0800702d
 8007004:	0800702d 	.word	0x0800702d
 8007008:	0800702d 	.word	0x0800702d
 800700c:	0800702d 	.word	0x0800702d
 8007010:	0800702d 	.word	0x0800702d
 8007014:	0800702d 	.word	0x0800702d
 8007018:	0800702d 	.word	0x0800702d
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800702d 	.word	0x0800702d
 8007024:	0800702d 	.word	0x0800702d
 8007028:	0800702d 	.word	0x0800702d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800702c:	bf00      	nop
  }

  return (USBD_OK);
 800702e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <CDC_Receive_FS+0x24>)
 800704a:	f7fe fd70 	bl	8005b2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800704e:	4804      	ldr	r0, [pc, #16]	; (8007060 <CDC_Receive_FS+0x24>)
 8007050:	f7fe fdb6 	bl	8005bc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007054:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000518 	.word	0x20000518

08007064 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <CDC_Transmit_FS+0x48>)
 8007076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007086:	2301      	movs	r3, #1
 8007088:	e00b      	b.n	80070a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800708a:	887b      	ldrh	r3, [r7, #2]
 800708c:	461a      	mov	r2, r3
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	4806      	ldr	r0, [pc, #24]	; (80070ac <CDC_Transmit_FS+0x48>)
 8007092:	f7fe fd2e 	bl	8005af2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007096:	4805      	ldr	r0, [pc, #20]	; (80070ac <CDC_Transmit_FS+0x48>)
 8007098:	f7fe fd62 	bl	8005b60 <USBD_CDC_TransmitPacket>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000518 	.word	0x20000518

080070b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
	...

080070d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2212      	movs	r2, #18
 80070e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	2000014c 	.word	0x2000014c

080070f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2204      	movs	r2, #4
 8007108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800710a:	4b03      	ldr	r3, [pc, #12]	; (8007118 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	20000160 	.word	0x20000160

0800711c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007128:	79fb      	ldrb	r3, [r7, #7]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	4907      	ldr	r1, [pc, #28]	; (8007150 <USBD_FS_ProductStrDescriptor+0x34>)
 8007132:	4808      	ldr	r0, [pc, #32]	; (8007154 <USBD_FS_ProductStrDescriptor+0x38>)
 8007134:	f7ff fdf7 	bl	8006d26 <USBD_GetString>
 8007138:	e004      	b.n	8007144 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	4904      	ldr	r1, [pc, #16]	; (8007150 <USBD_FS_ProductStrDescriptor+0x34>)
 800713e:	4805      	ldr	r0, [pc, #20]	; (8007154 <USBD_FS_ProductStrDescriptor+0x38>)
 8007140:	f7ff fdf1 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200017e8 	.word	0x200017e8
 8007154:	0800799c 	.word	0x0800799c

08007158 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	4904      	ldr	r1, [pc, #16]	; (8007178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007168:	4804      	ldr	r0, [pc, #16]	; (800717c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800716a:	f7ff fddc 	bl	8006d26 <USBD_GetString>
  return USBD_StrDesc;
 800716e:	4b02      	ldr	r3, [pc, #8]	; (8007178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007170:	4618      	mov	r0, r3
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	200017e8 	.word	0x200017e8
 800717c:	080079b4 	.word	0x080079b4

08007180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	6039      	str	r1, [r7, #0]
 800718a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	221a      	movs	r2, #26
 8007190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007192:	f000 f843 	bl	800721c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007196:	4b02      	ldr	r3, [pc, #8]	; (80071a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000164 	.word	0x20000164

080071a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	4907      	ldr	r1, [pc, #28]	; (80071d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ba:	4808      	ldr	r0, [pc, #32]	; (80071dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80071bc:	f7ff fdb3 	bl	8006d26 <USBD_GetString>
 80071c0:	e004      	b.n	80071cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4904      	ldr	r1, [pc, #16]	; (80071d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071c6:	4805      	ldr	r0, [pc, #20]	; (80071dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80071c8:	f7ff fdad 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	200017e8 	.word	0x200017e8
 80071dc:	080079c8 	.word	0x080079c8

080071e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d105      	bne.n	80071fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	4907      	ldr	r1, [pc, #28]	; (8007214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071f6:	4808      	ldr	r0, [pc, #32]	; (8007218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071f8:	f7ff fd95 	bl	8006d26 <USBD_GetString>
 80071fc:	e004      	b.n	8007208 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4904      	ldr	r1, [pc, #16]	; (8007214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007202:	4805      	ldr	r0, [pc, #20]	; (8007218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007204:	f7ff fd8f 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800720a:	4618      	mov	r0, r3
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200017e8 	.word	0x200017e8
 8007218:	080079d4 	.word	0x080079d4

0800721c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <Get_SerialNum+0x44>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007228:	4b0e      	ldr	r3, [pc, #56]	; (8007264 <Get_SerialNum+0x48>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <Get_SerialNum+0x4c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4413      	add	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007242:	2208      	movs	r2, #8
 8007244:	4909      	ldr	r1, [pc, #36]	; (800726c <Get_SerialNum+0x50>)
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f814 	bl	8007274 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800724c:	2204      	movs	r2, #4
 800724e:	4908      	ldr	r1, [pc, #32]	; (8007270 <Get_SerialNum+0x54>)
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f000 f80f 	bl	8007274 <IntToUnicode>
  }
}
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	1fff7a10 	.word	0x1fff7a10
 8007264:	1fff7a14 	.word	0x1fff7a14
 8007268:	1fff7a18 	.word	0x1fff7a18
 800726c:	20000166 	.word	0x20000166
 8007270:	20000176 	.word	0x20000176

08007274 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
 800728a:	e027      	b.n	80072dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	0f1b      	lsrs	r3, r3, #28
 8007290:	2b09      	cmp	r3, #9
 8007292:	d80b      	bhi.n	80072ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	0f1b      	lsrs	r3, r3, #28
 8007298:	b2da      	uxtb	r2, r3
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	4619      	mov	r1, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	440b      	add	r3, r1
 80072a4:	3230      	adds	r2, #48	; 0x30
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	e00a      	b.n	80072c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	0f1b      	lsrs	r3, r3, #28
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4619      	mov	r1, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	440b      	add	r3, r1
 80072bc:	3237      	adds	r2, #55	; 0x37
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	3301      	adds	r3, #1
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
 80072d8:	3301      	adds	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
 80072dc:	7dfa      	ldrb	r2, [r7, #23]
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d3d3      	bcc.n	800728c <IntToUnicode+0x18>
  }
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	605a      	str	r2, [r3, #4]
 8007306:	609a      	str	r2, [r3, #8]
 8007308:	60da      	str	r2, [r3, #12]
 800730a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007314:	d13a      	bne.n	800738c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	6313      	str	r3, [r2, #48]	; 0x30
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007332:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007340:	2303      	movs	r3, #3
 8007342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007344:	230a      	movs	r3, #10
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007348:	f107 0314 	add.w	r3, r7, #20
 800734c:	4619      	mov	r1, r3
 800734e:	4812      	ldr	r0, [pc, #72]	; (8007398 <HAL_PCD_MspInit+0xa4>)
 8007350:	f7fa fa4e 	bl	80017f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007354:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 800735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735e:	6353      	str	r3, [r2, #52]	; 0x34
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 800736a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800736e:	6453      	str	r3, [r2, #68]	; 0x44
 8007370:	4b08      	ldr	r3, [pc, #32]	; (8007394 <HAL_PCD_MspInit+0xa0>)
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800737c:	2200      	movs	r2, #0
 800737e:	2100      	movs	r1, #0
 8007380:	2043      	movs	r0, #67	; 0x43
 8007382:	f7fa f9fe 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007386:	2043      	movs	r0, #67	; 0x43
 8007388:	f7fa fa17 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800738c:	bf00      	nop
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	40023800 	.word	0x40023800
 8007398:	40020000 	.word	0x40020000

0800739c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fcd0 	bl	8005d58 <USBD_LL_SetupStage>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	4619      	mov	r1, r3
 80073ea:	f7fe fd0a 	bl	8005e02 <USBD_LL_DataOutStage>
}
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	3348      	adds	r3, #72	; 0x48
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	4619      	mov	r1, r3
 800741e:	f7fe fd53 	bl	8005ec8 <USBD_LL_DataInStage>
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fe67 	bl	800610c <USBD_LL_SOF>
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
 800745e:	e008      	b.n	8007472 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d102      	bne.n	800746e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
 800746c:	e001      	b.n	8007472 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800746e:	f7f9 fac1 	bl	80009f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007478:	7bfa      	ldrb	r2, [r7, #15]
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fe07 	bl	8006090 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe fdb3 	bl	8005ff4 <USBD_LL_Reset>
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fe02 	bl	80060b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074cc:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <HAL_PCD_SuspendCallback+0x48>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	4a03      	ldr	r2, [pc, #12]	; (80074e0 <HAL_PCD_SuspendCallback+0x48>)
 80074d2:	f043 0306 	orr.w	r3, r3, #6
 80074d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074d8:	bf00      	nop
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	e000ed00 	.word	0xe000ed00

080074e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fdf2 	bl	80060dc <USBD_LL_Resume>
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f7fe fe40 	bl	800619c <USBD_LL_IsoOUTIncomplete>
}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007536:	78fa      	ldrb	r2, [r7, #3]
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fe08 	bl	8006150 <USBD_LL_IsoINIncomplete>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fe46 	bl	80061e8 <USBD_LL_DevConnected>
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fe43 	bl	80061fe <USBD_LL_DevDisconnected>
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d13c      	bne.n	800760a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <USBD_LL_Init+0x94>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1e      	ldr	r2, [pc, #120]	; (8007614 <USBD_LL_Init+0x94>)
 800759c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <USBD_LL_Init+0x94>)
 80075a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075a8:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <USBD_LL_Init+0x94>)
 80075aa:	2204      	movs	r2, #4
 80075ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075ae:	4b19      	ldr	r3, [pc, #100]	; (8007614 <USBD_LL_Init+0x94>)
 80075b0:	2202      	movs	r2, #2
 80075b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075b4:	4b17      	ldr	r3, [pc, #92]	; (8007614 <USBD_LL_Init+0x94>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075ba:	4b16      	ldr	r3, [pc, #88]	; (8007614 <USBD_LL_Init+0x94>)
 80075bc:	2202      	movs	r2, #2
 80075be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <USBD_LL_Init+0x94>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <USBD_LL_Init+0x94>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075cc:	4b11      	ldr	r3, [pc, #68]	; (8007614 <USBD_LL_Init+0x94>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <USBD_LL_Init+0x94>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <USBD_LL_Init+0x94>)
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075de:	480d      	ldr	r0, [pc, #52]	; (8007614 <USBD_LL_Init+0x94>)
 80075e0:	f7fa fabb 	bl	8001b5a <HAL_PCD_Init>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075ea:	f7f9 fa03 	bl	80009f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075ee:	2180      	movs	r1, #128	; 0x80
 80075f0:	4808      	ldr	r0, [pc, #32]	; (8007614 <USBD_LL_Init+0x94>)
 80075f2:	f7fb fc18 	bl	8002e26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075f6:	2240      	movs	r2, #64	; 0x40
 80075f8:	2100      	movs	r1, #0
 80075fa:	4806      	ldr	r0, [pc, #24]	; (8007614 <USBD_LL_Init+0x94>)
 80075fc:	f7fb fbcc 	bl	8002d98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007600:	2280      	movs	r2, #128	; 0x80
 8007602:	2101      	movs	r1, #1
 8007604:	4803      	ldr	r0, [pc, #12]	; (8007614 <USBD_LL_Init+0x94>)
 8007606:	f7fb fbc7 	bl	8002d98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200019e8 	.word	0x200019e8

08007618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa fbb0 	bl	8001d94 <HAL_PCD_Start>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f942 	bl	80078c4 <USBD_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	461a      	mov	r2, r3
 800765c:	4603      	mov	r3, r0
 800765e:	70fb      	strb	r3, [r7, #3]
 8007660:	460b      	mov	r3, r1
 8007662:	70bb      	strb	r3, [r7, #2]
 8007664:	4613      	mov	r3, r2
 8007666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007676:	78bb      	ldrb	r3, [r7, #2]
 8007678:	883a      	ldrh	r2, [r7, #0]
 800767a:	78f9      	ldrb	r1, [r7, #3]
 800767c:	f7fa ff94 	bl	80025a8 <HAL_PCD_EP_Open>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 f91c 	bl	80078c4 <USBD_Get_USB_Status>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007690:	7bbb      	ldrb	r3, [r7, #14]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076b4:	78fa      	ldrb	r2, [r7, #3]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fa ffdd 	bl	8002678 <HAL_PCD_EP_Close>
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f8fd 	bl	80078c4 <USBD_Get_USB_Status>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	4611      	mov	r1, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fb f8b5 	bl	8002866 <HAL_PCD_EP_SetStall>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f8de 	bl	80078c4 <USBD_Get_USB_Status>
 8007708:	4603      	mov	r3, r0
 800770a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800770c:	7bbb      	ldrb	r3, [r7, #14]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	460b      	mov	r3, r1
 8007720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	4611      	mov	r1, r2
 8007734:	4618      	mov	r0, r3
 8007736:	f7fb f8fa 	bl	800292e <HAL_PCD_EP_ClrStall>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f8bf 	bl	80078c4 <USBD_Get_USB_Status>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774a:	7bbb      	ldrb	r3, [r7, #14]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800776c:	2b00      	cmp	r3, #0
 800776e:	da0b      	bge.n	8007788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	1a9b      	subs	r3, r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	333e      	adds	r3, #62	; 0x3e
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	e00b      	b.n	80077a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800778e:	68f9      	ldr	r1, [r7, #12]
 8007790:	4613      	mov	r3, r2
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800779e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa fec7 	bl	800255e <HAL_PCD_SetAddress>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f874 	bl	80078c4 <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	460b      	mov	r3, r1
 80077f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007808:	7af9      	ldrb	r1, [r7, #11]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	f7fa ffe0 	bl	80027d2 <HAL_PCD_EP_Transmit>
 8007812:	4603      	mov	r3, r0
 8007814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f853 	bl	80078c4 <USBD_Get_USB_Status>
 800781e:	4603      	mov	r3, r0
 8007820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007822:	7dbb      	ldrb	r3, [r7, #22]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	460b      	mov	r3, r1
 800783a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800784a:	7af9      	ldrb	r1, [r7, #11]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	f7fa ff5c 	bl	800270c <HAL_PCD_EP_Receive>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f832 	bl	80078c4 <USBD_Get_USB_Status>
 8007860:	4603      	mov	r3, r0
 8007862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007864:	7dbb      	ldrb	r3, [r7, #22]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa ff8c 	bl	80027a2 <HAL_PCD_EP_GetRxCount>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800789c:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_static_malloc+0x18>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	200001a0 	.word	0x200001a0

080078b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d817      	bhi.n	8007908 <USBD_Get_USB_Status+0x44>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <USBD_Get_USB_Status+0x1c>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	080078f7 	.word	0x080078f7
 80078e8:	080078fd 	.word	0x080078fd
 80078ec:	08007903 	.word	0x08007903
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73fb      	strb	r3, [r7, #15]
    break;
 80078f4:	e00b      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
    break;
 80078fa:	e008      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007900:	e005      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007902:	2303      	movs	r3, #3
 8007904:	73fb      	strb	r3, [r7, #15]
    break;
 8007906:	e002      	b.n	800790e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	73fb      	strb	r3, [r7, #15]
    break;
 800790c:	bf00      	nop
  }
  return usb_status;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f000 f820 	bl	8007974 <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08007a04 	.word	0x08007a04
 8007958:	08007a04 	.word	0x08007a04
 800795c:	08007a04 	.word	0x08007a04
 8007960:	08007a08 	.word	0x08007a08

08007964 <memset>:
 8007964:	4402      	add	r2, r0
 8007966:	4603      	mov	r3, r0
 8007968:	4293      	cmp	r3, r2
 800796a:	d100      	bne.n	800796e <memset+0xa>
 800796c:	4770      	bx	lr
 800796e:	f803 1b01 	strb.w	r1, [r3], #1
 8007972:	e7f9      	b.n	8007968 <memset+0x4>

08007974 <_init>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr

08007980 <_fini>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr
