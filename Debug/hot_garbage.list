
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08007dac  08007dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f2c  08007f2c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f34  08007f34  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  200001f8  08008134  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e68  08008134  00021e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019faa  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a56  00000000  00000000  0003a1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003dc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003edf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255db  00000000  00000000  0003fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015949  00000000  00000000  0006543b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6ead  00000000  00000000  0007ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00151c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f8 	.word	0x200001f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d94 	.word	0x08007d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001fc 	.word	0x200001fc
 80001c4:	08007d94 	.word	0x08007d94

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f000 fe05 	bl	80010d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f8a3 	bl	8000614 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 fa43 	bl	8000958 <MX_GPIO_Init>
	MX_ADC2_Init();
 80004d2:	f000 f909 	bl	80006e8 <MX_ADC2_Init>
	MX_ADC3_Init();
 80004d6:	f000 f959 	bl	800078c <MX_ADC3_Init>
	MX_CAN2_Init();
 80004da:	f000 f9a9 	bl	8000830 <MX_CAN2_Init>
	MX_SPI1_Init();
 80004de:	f000 f9db 	bl	8000898 <MX_SPI1_Init>
	MX_USART3_UART_Init();
 80004e2:	f000 fa0f 	bl	8000904 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80004e6:	f006 fe77 	bl	80071d8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */


	const uint8_t spStat[3] = {'S', 'P','\n'};
 80004ea:	4a42      	ldr	r2, [pc, #264]	; (80005f4 <main+0x134>)
 80004ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	3302      	adds	r3, #2
 80004f8:	0c12      	lsrs	r2, r2, #16
 80004fa:	701a      	strb	r2, [r3, #0]
	const uint8_t onStat[3] = {'M', '3','\n'};
 80004fc:	4a3e      	ldr	r2, [pc, #248]	; (80005f8 <main+0x138>)
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	701a      	strb	r2, [r3, #0]
	const uint8_t offStat[3] = {'M', '5','\n'};
 800050e:	4a3b      	ldr	r2, [pc, #236]	; (80005fc <main+0x13c>)
 8000510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	0c12      	lsrs	r2, r2, #16
 800051e:	701a      	strb	r2, [r3, #0]

	//uint8_t txBuf[8] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t rxBuf[16]; // = { '0', '0', '0', '0', '0', '0', '0', '\n', '\0' };

	uint8_t CDCtx[8] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <main+0x140>)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t CDCrx[8] = { '0', '0', '0', '0', '0', '0', '0', '\n' };
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <main+0x144>)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000536:	e883 0003 	stmia.w	r3, {r0, r1}

	char *CDCrxPtr1 = &CDCrx[2];
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	3302      	adds	r3, #2
 800053e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t x = -99;
 8000540:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000544:	603b      	str	r3, [r7, #0]
	int rpm = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	633b      	str	r3, [r7, #48]	; 0x30
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */


		CDC_Receive_FS(CDCrx, &x);
 800054a:	463a      	mov	r2, r7
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f006 feeb 	bl	800732c <CDC_Receive_FS>

		HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fe2e 	bl	80011b8 <HAL_Delay>
		//spindleFWD(&huart3);
		if (CDCrx[0] == 'M') {
 800055c:	793b      	ldrb	r3, [r7, #4]
 800055e:	2b4d      	cmp	r3, #77	; 0x4d
 8000560:	d12e      	bne.n	80005c0 <main+0x100>
			if (CDCrx[1] == '3') {
 8000562:	797b      	ldrb	r3, [r7, #5]
 8000564:	2b33      	cmp	r3, #51	; 0x33
 8000566:	d115      	bne.n	8000594 <main+0xd4>
				if (spindleFWD(&huart3)) {
 8000568:	4827      	ldr	r0, [pc, #156]	; (8000608 <main+0x148>)
 800056a:	f000 faf9 	bl	8000b60 <spindleFWD>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d004      	beq.n	800057e <main+0xbe>
					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4824      	ldr	r0, [pc, #144]	; (800060c <main+0x14c>)
 800057a:	f001 fc4d 	bl	8001e18 <HAL_GPIO_WritePin>
				}
				HAL_Delay(10);
 800057e:	200a      	movs	r0, #10
 8000580:	f000 fe1a 	bl	80011b8 <HAL_Delay>
				CDC_Transmit_FS(getCheck(), 8);
 8000584:	f000 fbaa 	bl	8000cdc <getCheck>
 8000588:	4603      	mov	r3, r0
 800058a:	2108      	movs	r1, #8
 800058c:	4618      	mov	r0, r3
 800058e:	f006 fee1 	bl	8007354 <CDC_Transmit_FS>
 8000592:	e02b      	b.n	80005ec <main+0x12c>
			} else if (CDCrx[1] == '5') {
 8000594:	797b      	ldrb	r3, [r7, #5]
 8000596:	2b35      	cmp	r3, #53	; 0x35
 8000598:	d128      	bne.n	80005ec <main+0x12c>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	481b      	ldr	r0, [pc, #108]	; (800060c <main+0x14c>)
 80005a0:	f001 fc3a 	bl	8001e18 <HAL_GPIO_WritePin>
				spindleOff(&huart3);
 80005a4:	4818      	ldr	r0, [pc, #96]	; (8000608 <main+0x148>)
 80005a6:	f000 fb07 	bl	8000bb8 <spindleOff>
				HAL_Delay(10);
 80005aa:	200a      	movs	r0, #10
 80005ac:	f000 fe04 	bl	80011b8 <HAL_Delay>
				CDC_Transmit_FS(getCheck(), 8);
 80005b0:	f000 fb94 	bl	8000cdc <getCheck>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4618      	mov	r0, r3
 80005ba:	f006 fecb 	bl	8007354 <CDC_Transmit_FS>
 80005be:	e015      	b.n	80005ec <main+0x12c>
				//CDC_Transmit_FS(offStat, 3);
			}

		}
		else if (CDCrx[0] == 'S') {
 80005c0:	793b      	ldrb	r3, [r7, #4]
 80005c2:	2b53      	cmp	r3, #83	; 0x53
 80005c4:	d112      	bne.n	80005ec <main+0x12c>
			HAL_Delay(100);
 80005c6:	2064      	movs	r0, #100	; 0x64
 80005c8:	f000 fdf6 	bl	80011b8 <HAL_Delay>
			CDCrx[7] = NULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	72fb      	strb	r3, [r7, #11]
			//rounddown ok
			rpm = atoi(CDCrxPtr1)/3;
 80005d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80005d2:	f007 fb1b 	bl	8007c0c <atoi>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <main+0x150>)
 80005da:	fb82 1203 	smull	r1, r2, r2, r3
 80005de:	17db      	asrs	r3, r3, #31
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
			setFreq(rpm, &huart3);
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <main+0x148>)
 80005e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005e8:	f000 fb12 	bl	8000c10 <setFreq>
		} else {

		}

		CDCrx[0] = 'a';
 80005ec:	2361      	movs	r3, #97	; 0x61
 80005ee:	713b      	strb	r3, [r7, #4]
		CDC_Receive_FS(CDCrx, &x);
 80005f0:	e7ab      	b.n	800054a <main+0x8a>
 80005f2:	bf00      	nop
 80005f4:	08007dac 	.word	0x08007dac
 80005f8:	08007db0 	.word	0x08007db0
 80005fc:	08007db4 	.word	0x08007db4
 8000600:	08007db8 	.word	0x08007db8
 8000604:	08007dc0 	.word	0x08007dc0
 8000608:	20000438 	.word	0x20000438
 800060c:	40020800 	.word	0x40020800
 8000610:	55555556 	.word	0x55555556

08000614 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f007 fb20 	bl	8007c68 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fd59 	bl	8003150 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
		Error_Handler();
 80006a4:	f000 f9ee 	bl	8000a84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ffba 	bl	8003640 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
		Error_Handler();
 80006d2:	f000 f9d7 	bl	8000a84 <Error_Handler>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC2_Init+0x98>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_ADC2_Init+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC2_Init+0x98>)
 8000702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000706:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC2_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ADC2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC2_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ADC2_Init+0x98>)
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_ADC2_Init+0xa0>)
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC2_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_ADC2_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC2_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC2_Init+0x98>)
 8000744:	2201      	movs	r2, #1
 8000746:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_ADC2_Init+0x98>)
 800074a:	f000 fd59 	bl	8001200 <HAL_ADC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC2_Init+0x70>
		Error_Handler();
 8000754:	f000 f996 	bl	8000a84 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000758:	2301      	movs	r3, #1
 800075a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_ADC2_Init+0x98>)
 800076a:	f000 fd8d 	bl	8001288 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC2_Init+0x90>
		Error_Handler();
 8000774:	f000 f986 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000047c 	.word	0x2000047c
 8000784:	40012100 	.word	0x40012100
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_ADC3_Init+0x98>)
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <MX_ADC3_Init+0x9c>)
 80007a2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <MX_ADC3_Init+0x98>)
 80007a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007aa:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_ADC3_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_ADC3_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_ADC3_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_ADC3_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_ADC3_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC3_Init+0x98>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_ADC3_Init+0xa0>)
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_ADC3_Init+0x98>)
 80007da:	2201      	movs	r2, #1
 80007dc:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_ADC3_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_ADC3_Init+0x98>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_ADC3_Init+0x98>)
 80007ee:	f000 fd07 	bl	8001200 <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC3_Init+0x70>
		Error_Handler();
 80007f8:	f000 f944 	bl	8000a84 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80007fc:	2303      	movs	r3, #3
 80007fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC3_Init+0x98>)
 800080e:	f000 fd3b 	bl	8001288 <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC3_Init+0x90>
		Error_Handler();
 8000818:	f000 f934 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004ec 	.word	0x200004ec
 8000828:	40012200 	.word	0x40012200
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_CAN2_Init+0x60>)
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MX_CAN2_Init+0x64>)
 8000838:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_CAN2_Init+0x60>)
 800083c:	2210      	movs	r2, #16
 800083e:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_CAN2_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_CAN2_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_CAN2_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_CAN2_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_CAN2_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_CAN2_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_CAN2_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_CAN2_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_CAN2_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_CAN2_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_CAN2_Init+0x60>)
 800087e:	f000 ff21 	bl	80016c4 <HAL_CAN_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_CAN2_Init+0x5c>
		Error_Handler();
 8000888:	f000 f8fc 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200004c4 	.word	0x200004c4
 8000894:	40006800 	.word	0x40006800

08000898 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI1_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <MX_SPI1_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_SPI1_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI1_Init+0x64>)
 80008c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008c8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI1_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_SPI1_Init+0x64>)
 80008ea:	f003 f8a3 	bl	8003a34 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80008f4:	f000 f8c6 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000534 	.word	0x20000534
 8000900:	40013000 	.word	0x40013000

08000904 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END   USART3_Init 1 */

	huart3.Instance = USART3;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART3_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000914:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800093c:	f003 f903 	bl	8003b46 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000946:	f000 f89d 	bl	8000a84 <Error_Handler>

	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END   USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000438 	.word	0x20000438
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b40      	ldr	r3, [pc, #256]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a3f      	ldr	r2, [pc, #252]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a38      	ldr	r2, [pc, #224]	; (8000a74 <MX_GPIO_Init+0x11c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <MX_GPIO_Init+0x11c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a31      	ldr	r2, [pc, #196]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a2a      	ldr	r2, [pc, #168]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a23      	ldr	r2, [pc, #140]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x11c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2102      	movs	r1, #2
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x120>)
 8000a00:	f001 fa0a 	bl	8001e18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	481c      	ldr	r0, [pc, #112]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a0a:	f001 fa05 	bl	8001e18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000a0e:	2200      	movs	r2, #0
 8000a10:	211f      	movs	r1, #31
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <MX_GPIO_Init+0x128>)
 8000a14:	f001 fa00 	bl	8001e18 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4812      	ldr	r0, [pc, #72]	; (8000a78 <MX_GPIO_Init+0x120>)
 8000a30:	f001 f856 	bl	8001ae0 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000a34:	2302      	movs	r3, #2
 8000a36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_GPIO_Init+0x124>)
 8000a4c:	f001 f848 	bl	8001ae0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000a50:	231f      	movs	r3, #31
 8000a52:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_GPIO_Init+0x128>)
 8000a68:	f001 f83a 	bl	8001ae0 <HAL_GPIO_Init>

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <sendData8>:

uint8_t wrMsg[] = { 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };

uint8_t check[] = { 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A'};//12 bytes

void sendData8(UART_HandleTypeDef *huart) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <sendData8+0x3c>)
 8000a9e:	f001 f9bb 	bl	8001e18 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f000 fb88 	bl	80011b8 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	2208      	movs	r2, #8
 8000aac:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <sendData8+0x40>)
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f003 f896 	bl	8003be0 <HAL_UART_Transmit>
	HAL_Delay(5);
 8000ab4:	2005      	movs	r0, #5
 8000ab6:	f000 fb7f 	bl	80011b8 <HAL_Delay>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <sendData8+0x3c>)
 8000ac0:	f001 f9aa 	bl	8001e18 <HAL_GPIO_WritePin>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <appendCRC8>:

void clearSer() {
	//TODO
}

void appendCRC8() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000ada:	2106      	movs	r1, #6
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <appendCRC8+0x38>)
 8000ade:	f000 f8c5 	bl	8000c6c <crc_chk_value>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000ae8:	1cbb      	adds	r3, r7, #2
 8000aea:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <appendCRC8+0x38>)
 8000af2:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781a      	ldrb	r2, [r3, #0]
 8000afe:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <appendCRC8+0x38>)
 8000b00:	71da      	strb	r2, [r3, #7]
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000000 	.word	0x20000000

08000b10 <checkEcho8>:

//TODO
//Check to see if we need to receive 10 bytes or not
int checkEcho8(UART_HandleTypeDef *huart) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive(huart, check, 8, 50);
 8000b18:	2332      	movs	r3, #50	; 0x32
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	490e      	ldr	r1, [pc, #56]	; (8000b58 <checkEcho8+0x48>)
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f003 f8f0 	bl	8003d04 <HAL_UART_Receive>
	for (int i = 0; i < 8; i++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	e00e      	b.n	8000b48 <checkEcho8+0x38>
		if (wrMsg[i] != check[i]) {
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <checkEcho8+0x4c>)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	4909      	ldr	r1, [pc, #36]	; (8000b58 <checkEcho8+0x48>)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	440b      	add	r3, r1
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d001      	beq.n	8000b42 <checkEcho8+0x32>
			return 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e006      	b.n	8000b50 <checkEcho8+0x40>
	for (int i = 0; i < 8; i++) {
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	dded      	ble.n	8000b2a <checkEcho8+0x1a>
		}
	}
	return 1;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000000 	.word	0x20000000

08000b60 <spindleFWD>:
//  curData |= byteBuffer[4];
//
//  return curData;
}

int spindleFWD(UART_HandleTypeDef *huart) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <spindleFWD+0x54>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <spindleFWD+0x54>)
 8000b70:	2206      	movs	r2, #6
 8000b72:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <spindleFWD+0x54>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <spindleFWD+0x54>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <spindleFWD+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <spindleFWD+0x54>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <spindleFWD+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <spindleFWD+0x54>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000b98:	f7ff ff9c 	bl	8000ad4 <appendCRC8>

	sendData8(huart);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff77 	bl	8000a90 <sendData8>



	return checkEcho8(huart);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb4 	bl	8000b10 <checkEcho8>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <spindleOff>:

int spindleOff(UART_HandleTypeDef *huart) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <spindleOff+0x54>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <spindleOff+0x54>)
 8000bc8:	2206      	movs	r2, #6
 8000bca:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <spindleOff+0x54>)
 8000bce:	2210      	movs	r2, #16
 8000bd0:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <spindleOff+0x54>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <spindleOff+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <spindleOff+0x54>)
 8000be0:	2203      	movs	r2, #3
 8000be2:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <spindleOff+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <spindleOff+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000bf0:	f7ff ff70 	bl	8000ad4 <appendCRC8>

	sendData8(huart);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff4b 	bl	8000a90 <sendData8>

	return checkEcho8(huart);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff88 	bl	8000b10 <checkEcho8>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000000 	.word	0x20000000

08000c10 <setFreq>:

void setFreq(uint16_t freq, UART_HandleTypeDef *huart) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <setFreq+0x58>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <setFreq+0x58>)
 8000c24:	2206      	movs	r2, #6
 8000c26:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <setFreq+0x58>)
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <setFreq+0x58>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <setFreq+0x58>)
 8000c3e:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <setFreq+0x58>)
 8000c46:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <setFreq+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <setFreq+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000c54:	f7ff ff3e 	bl	8000ad4 <appendCRC8>

	sendData8(huart);
 8000c58:	6838      	ldr	r0, [r7, #0]
 8000c5a:	f7ff ff19 	bl	8000a90 <sendData8>

	//checkEcho8();
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000

08000c6c <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c7c:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--) {
 8000c7e:	e01f      	b.n	8000cc0 <crc_chk_value+0x54>
		crc_value ^= *data_value++;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	89fb      	ldrh	r3, [r7, #14]
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e011      	b.n	8000cba <crc_chk_value+0x4e>
			if (crc_value & 0x0001)
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <crc_chk_value+0x6c>)
 8000ca8:	4053      	eors	r3, r2
 8000caa:	81fb      	strh	r3, [r7, #14]
 8000cac:	e002      	b.n	8000cb4 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	085b      	lsrs	r3, r3, #1
 8000cb2:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	2b07      	cmp	r3, #7
 8000cbe:	ddea      	ble.n	8000c96 <crc_chk_value+0x2a>
	while (length--) {
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	70fa      	strb	r2, [r7, #3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1da      	bne.n	8000c80 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000cca:	89fb      	ldrh	r3, [r7, #14]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	ffffa001 	.word	0xffffa001

08000cdc <getCheck>:

uint8_t* getCheck()
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	return check;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <getCheck+0x10>)
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_ADC_MspInit+0xd8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d128      	bne.n	8000db4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	481c      	ldr	r0, [pc, #112]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000dae:	f000 fe97 	bl	8001ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000db2:	e02c      	b.n	8000e0e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <HAL_ADC_MspInit+0xe4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d127      	bne.n	8000e0e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df6:	2308      	movs	r3, #8
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000e0a:	f000 fe69 	bl	8001ae0 <HAL_GPIO_Init>
}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	; 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012100 	.word	0x40012100
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40012200 	.word	0x40012200

08000e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <HAL_CAN_MspInit+0xa0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d13a      	bne.n	8000ec0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_CAN_MspInit+0xa4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_CAN_MspInit+0xa8>)
 8000ebc:	f000 fe10 	bl	8001ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40006800 	.word	0x40006800
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <HAL_SPI_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_SPI_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2e:	23f0      	movs	r3, #240	; 0xf0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_SPI_MspInit+0x8c>)
 8000f4a:	f000 fdc9 	bl	8001ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40013000 	.word	0x40013000
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fdc:	f000 fd80 	bl	8001ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f89a 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <OTG_FS_IRQHandler+0x10>)
 800104e:	f001 f84c 	bl	80020ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20001a60 	.word	0x20001a60

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010aa:	f7ff ffd7 	bl	800105c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f006 fdb7 	bl	8007c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fa05 	bl	80004c0 <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80010c4:	08007f3c 	.word	0x08007f3c
  ldr r2, =_sbss
 80010c8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80010cc:	20001e68 	.word	0x20001e68

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 fcad 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fdf2 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fcc5 	bl	8001ac6 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 fc8d 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000014 	.word	0x20000014
 8001170:	2000001c 	.word	0x2000001c
 8001174:	20000018 	.word	0x20000018

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000001c 	.word	0x2000001c
 800119c:	2000058c 	.word	0x2000058c

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	2000058c 	.word	0x2000058c

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff ffee 	bl	80011a0 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffde 	bl	80011a0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000001c 	.word	0x2000001c

08001200 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e033      	b.n	800127e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fd8e 	bl	8000d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d118      	bne.n	8001270 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001246:	f023 0302 	bic.w	r3, r3, #2
 800124a:	f043 0202 	orr.w	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f93a 	bl	80014cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f023 0303 	bic.w	r3, r3, #3
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
 800126e:	e001      	b.n	8001274 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x1c>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e105      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x228>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d925      	bls.n	8001300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68d9      	ldr	r1, [r3, #12]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3b1e      	subs	r3, #30
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4403      	add	r3, r0
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	e022      	b.n	8001346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b29b      	uxth	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	2207      	movs	r2, #7
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	400a      	ands	r2, r1
 8001322:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	4603      	mov	r3, r0
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4403      	add	r3, r0
 800133c:	409a      	lsls	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b06      	cmp	r3, #6
 800134c:	d824      	bhi.n	8001398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b05      	subs	r3, #5
 8001360:	221f      	movs	r2, #31
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	4618      	mov	r0, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	3b05      	subs	r3, #5
 800138a:	fa00 f203 	lsl.w	r2, r0, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	e04c      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d824      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b23      	subs	r3, #35	; 0x23
 80013b2:	221f      	movs	r2, #31
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43da      	mvns	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	400a      	ands	r2, r1
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b23      	subs	r3, #35	; 0x23
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	631a      	str	r2, [r3, #48]	; 0x30
 80013e8:	e023      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b41      	subs	r3, #65	; 0x41
 80013fc:	221f      	movs	r2, #31
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	400a      	ands	r2, r1
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b41      	subs	r3, #65	; 0x41
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001432:	4b22      	ldr	r3, [pc, #136]	; (80014bc <HAL_ADC_ConfigChannel+0x234>)
 8001434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_ADC_ConfigChannel+0x238>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d109      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1cc>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b12      	cmp	r3, #18
 8001446:	d105      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_ADC_ConfigChannel+0x238>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d123      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x21e>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b10      	cmp	r3, #16
 8001464:	d003      	beq.n	800146e <HAL_ADC_ConfigChannel+0x1e6>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b11      	cmp	r3, #17
 800146c:	d11b      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d111      	bne.n	80014a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_ADC_ConfigChannel+0x23c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_ADC_ConfigChannel+0x240>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	0c9a      	lsrs	r2, r3, #18
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001498:	e002      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3b01      	subs	r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f9      	bne.n	800149a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	40012300 	.word	0x40012300
 80014c0:	40012000 	.word	0x40012000
 80014c4:	20000014 	.word	0x20000014
 80014c8:	431bde83 	.word	0x431bde83

080014cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <ADC_Init+0x1f0>)
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	431a      	orrs	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	021a      	lsls	r2, r3, #8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	4a58      	ldr	r2, [pc, #352]	; (80016c0 <ADC_Init+0x1f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e00f      	b.n	80015ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0202 	bic.w	r2, r2, #2
 80015d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7e1b      	ldrb	r3, [r3, #24]
 80015e4:	005a      	lsls	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01b      	beq.n	8001630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001606:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	3b01      	subs	r3, #1
 8001624:	035a      	lsls	r2, r3, #13
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	e007      	b.n	8001640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	3b01      	subs	r3, #1
 800165c:	051a      	lsls	r2, r3, #20
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001682:	025a      	lsls	r2, r3, #9
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800169a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	029a      	lsls	r2, r3, #10
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40012300 	.word	0x40012300
 80016c0:	0f000001 	.word	0x0f000001

080016c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0ed      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fba0 	bl	8000e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0202 	bic.w	r2, r2, #2
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fd52 	bl	80011a0 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fe:	e012      	b.n	8001726 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001700:	f7ff fd4e 	bl	80011a0 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b0a      	cmp	r3, #10
 800170c:	d90b      	bls.n	8001726 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2205      	movs	r2, #5
 800171e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0c5      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e5      	bne.n	8001700 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001744:	f7ff fd2c 	bl	80011a0 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800174a:	e012      	b.n	8001772 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800174c:	f7ff fd28 	bl	80011a0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b0a      	cmp	r3, #10
 8001758:	d90b      	bls.n	8001772 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2205      	movs	r2, #5
 800176a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e09f      	b.n	80018b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0e5      	beq.n	800174c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7e5b      	ldrb	r3, [r3, #25]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e9b      	ldrb	r3, [r3, #26]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0220 	orr.w	r2, r2, #32
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e007      	b.n	80017fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0220 	bic.w	r2, r2, #32
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7edb      	ldrb	r3, [r3, #27]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0210 	bic.w	r2, r2, #16
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0210 	orr.w	r2, r2, #16
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7f1b      	ldrb	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0208 	orr.w	r2, r2, #8
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7f5b      	ldrb	r3, [r3, #29]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0204 	orr.w	r2, r2, #4
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0204 	bic.w	r2, r2, #4
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	ea42 0103 	orr.w	r1, r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	1e5a      	subs	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e16b      	b.n	8001dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 815a 	bne.w	8001dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d005      	beq.n	8001b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d017      	beq.n	8001bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80b4 	beq.w	8001dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a5f      	ldr	r2, [pc, #380]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x314>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <HAL_GPIO_Init+0x226>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a51      	ldr	r2, [pc, #324]	; (8001df8 <HAL_GPIO_Init+0x318>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x222>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_GPIO_Init+0x31c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x21e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_GPIO_Init+0x320>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x21a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4e      	ldr	r2, [pc, #312]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x216>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4d      	ldr	r2, [pc, #308]	; (8001e08 <HAL_GPIO_Init+0x328>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x212>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_GPIO_Init+0x32c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x20a>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cea:	2308      	movs	r3, #8
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4a:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d50:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae90 	bls.w	8001afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4c:	b08f      	sub	sp, #60	; 0x3c
 8001e4e:	af0a      	add	r7, sp, #40	; 0x28
 8001e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e10f      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d106      	bne.n	8001e7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f005 fbb4 	bl	80075e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2203      	movs	r2, #3
 8001e80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f002 fafb 	bl	8004496 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	687e      	ldr	r6, [r7, #4]
 8001ea8:	466d      	mov	r5, sp
 8001eaa:	f106 0410 	add.w	r4, r6, #16
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ebe:	1d33      	adds	r3, r6, #4
 8001ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f002 f9d2 	bl	800426c <USB_CoreInit>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0d0      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fae9 	bl	80044b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e04a      	b.n	8001f82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	333d      	adds	r3, #61	; 0x3d
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333c      	adds	r3, #60	; 0x3c
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3342      	adds	r3, #66	; 0x42
 8001f28:	4602      	mov	r2, r0
 8001f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333f      	adds	r3, #63	; 0x3f
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3344      	adds	r3, #68	; 0x44
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	3348      	adds	r3, #72	; 0x48
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3350      	adds	r3, #80	; 0x50
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3af      	bcc.n	8001eec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e044      	b.n	800201c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3b5      	bcc.n	8001f92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	687e      	ldr	r6, [r7, #4]
 800202e:	466d      	mov	r5, sp
 8002030:	f106 0410 	add.w	r4, r6, #16
 8002034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002040:	e885 0003 	stmia.w	r5, {r0, r1}
 8002044:	1d33      	adds	r3, r6, #4
 8002046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002048:	6838      	ldr	r0, [r7, #0]
 800204a:	f002 fa5f 	bl	800450c <USB_DevInit>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d005      	beq.n	8002060 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e00d      	b.n	800207c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f003 faa7 	bl	80055c8 <USB_DevDisconnect>

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002084 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_Start+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e020      	b.n	80020e2 <HAL_PCD_Start+0x5e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d109      	bne.n	80020c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f9d3 	bl	8004474 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fa57 	bl	8005586 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b08d      	sub	sp, #52	; 0x34
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fb15 	bl	8005730 <USB_GetMode>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 839d 	bne.w	8002848 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fa79 	bl	800560a <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8393 	beq.w	8002846 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fa70 	bl	800560a <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b02      	cmp	r3, #2
 8002132:	d107      	bne.n	8002144 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f002 0202 	and.w	r2, r2, #2
 8002142:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fa5e 	bl	800560a <USB_ReadInterrupts>
 800214e:	4603      	mov	r3, r0
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b10      	cmp	r3, #16
 8002156:	d161      	bne.n	800221c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0210 	bic.w	r2, r2, #16
 8002166:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 020f 	and.w	r2, r3, #15
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	3304      	adds	r3, #4
 8002186:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	0c5b      	lsrs	r3, r3, #17
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	2b02      	cmp	r3, #2
 8002192:	d124      	bne.n	80021de <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d035      	beq.n	800220c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6a38      	ldr	r0, [r7, #32]
 80021b4:	f003 f8c4 	bl	8005340 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021c4:	441a      	add	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d6:	441a      	add	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	619a      	str	r2, [r3, #24]
 80021dc:	e016      	b.n	800220c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	0c5b      	lsrs	r3, r3, #17
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d110      	bne.n	800220c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f0:	2208      	movs	r2, #8
 80021f2:	4619      	mov	r1, r3
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f003 f8a3 	bl	8005340 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002206:	441a      	add	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f003 f9f2 	bl	800560a <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002230:	d16e      	bne.n	8002310 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 f9f8 	bl	8005630 <USB_ReadDevAllOutEpInterrupt>
 8002240:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002242:	e062      	b.n	800230a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d057      	beq.n	80022fe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fa1d 	bl	8005698 <USB_ReadDevOutEPInterrupt>
 800225e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	2301      	movs	r3, #1
 800227a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800227c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fdb0 	bl	8002de4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229a:	461a      	mov	r2, r3
 800229c:	2308      	movs	r3, #8
 800229e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 feaa 	bl	8002ffc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	2320      	movs	r3, #32
 80022de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022fc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d199      	bne.n	8002244 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 f978 	bl	800560a <USB_ReadInterrupts>
 800231a:	4603      	mov	r3, r0
 800231c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002324:	f040 80c0 	bne.w	80024a8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 f999 	bl	8005664 <USB_ReadDevAllInEpInterrupt>
 8002332:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002338:	e0b2      	b.n	80024a0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a7 	beq.w	8002494 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f003 f9bf 	bl	80056d4 <USB_ReadDevInEPInterrupt>
 8002356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d057      	beq.n	8002412 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	2201      	movs	r2, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	69f9      	ldr	r1, [r7, #28]
 800237e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002382:	4013      	ands	r3, r2
 8002384:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002392:	461a      	mov	r2, r3
 8002394:	2301      	movs	r3, #1
 8002396:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d132      	bne.n	8002406 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	3348      	adds	r3, #72	; 0x48
 80023b0:	6819      	ldr	r1, [r3, #0]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4403      	add	r3, r0
 80023c0:	3344      	adds	r3, #68	; 0x44
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4419      	add	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4403      	add	r3, r0
 80023d4:	3348      	adds	r3, #72	; 0x48
 80023d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d113      	bne.n	8002406 <HAL_PCD_IRQHandler+0x31c>
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3350      	adds	r3, #80	; 0x50
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d108      	bne.n	8002406 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023fe:	461a      	mov	r2, r3
 8002400:	2101      	movs	r1, #1
 8002402:	f003 f9c7 	bl	8005794 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	b2db      	uxtb	r3, r3
 800240a:	4619      	mov	r1, r3
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f005 f96a 	bl	80076e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002428:	461a      	mov	r2, r3
 800242a:	2308      	movs	r3, #8
 800242c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002444:	461a      	mov	r2, r3
 8002446:	2310      	movs	r3, #16
 8002448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002460:	461a      	mov	r2, r3
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247c:	461a      	mov	r2, r3
 800247e:	2302      	movs	r3, #2
 8002480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800248c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fc1b 	bl	8002cca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	3301      	adds	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f af49 	bne.w	800233a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 f8ac 	bl	800560a <USB_ReadInterrupts>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024bc:	d122      	bne.n	8002504 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fe26 	bl	8003138 <HAL_PCDEx_LPM_Callback>
 80024ec:	e002      	b.n	80024f4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f005 f970 	bl	80077d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f87e 	bl	800560a <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002518:	d112      	bne.n	8002540 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f005 f92c 	bl	8007788 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800253e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f003 f860 	bl	800560a <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	f040 80c7 	bne.w	80026e6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2110      	movs	r1, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f92e 	bl	80047d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257c:	e056      	b.n	800262c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258a:	461a      	mov	r2, r3
 800258c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002590:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a2:	0151      	lsls	r1, r2, #5
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	440a      	add	r2, r1
 80025a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025b0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025de:	461a      	mov	r2, r3
 80025e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	0151      	lsls	r1, r2, #5
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	440a      	add	r2, r1
 80025fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002604:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	440a      	add	r2, r1
 800261c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002620:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002624:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	3301      	adds	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002632:	429a      	cmp	r2, r3
 8002634:	d3a3      	bcc.n	800257e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002644:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002648:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002662:	f043 030b 	orr.w	r3, r3, #11
 8002666:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002678:	f043 030b 	orr.w	r3, r3, #11
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	e015      	b.n	80026ac <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002692:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002696:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f043 030b 	orr.w	r3, r3, #11
 80026aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026d0:	461a      	mov	r2, r3
 80026d2:	f003 f85f 	bl	8005794 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 ff8d 	bl	800560a <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d124      	bne.n	8002746 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 f823 	bl	800574c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 f8c3 	bl	8004896 <USB_GetDevSpeed>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681c      	ldr	r4, [r3, #0]
 800271c:	f001 f956 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8002720:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4620      	mov	r0, r4
 800272c:	f001 fe00 	bl	8004330 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f005 f800 	bl	8007736 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002744:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f002 ff5d 	bl	800560a <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b08      	cmp	r3, #8
 8002758:	d10a      	bne.n	8002770 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f004 ffdd 	bl	800771a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f002 0208 	and.w	r2, r2, #8
 800276e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f002 ff48 	bl	800560a <USB_ReadInterrupts>
 800277a:	4603      	mov	r3, r0
 800277c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002784:	d10f      	bne.n	80027a6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f005 f83f 	bl	8007814 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 ff2d 	bl	800560a <USB_ReadInterrupts>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ba:	d10f      	bne.n	80027dc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f005 f812 	bl	80077f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 ff12 	bl	800560a <USB_ReadInterrupts>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d10a      	bne.n	8002808 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f005 f820 	bl	8007838 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fefc 	bl	800560a <USB_ReadInterrupts>
 8002812:	4603      	mov	r3, r0
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d115      	bne.n	8002848 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f005 f810 	bl	8007854 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e000      	b.n	8002848 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002846:	bf00      	nop
    }
  }
}
 8002848:	3734      	adds	r7, #52	; 0x34
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}

0800284e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_SetAddress+0x1a>
 8002864:	2302      	movs	r3, #2
 8002866:	e013      	b.n	8002890 <HAL_PCD_SetAddress+0x42>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fe5a 	bl	800553a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	70fb      	strb	r3, [r7, #3]
 80028aa:	460b      	mov	r3, r1
 80028ac:	803b      	strh	r3, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da0f      	bge.n	80028de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	3338      	adds	r3, #56	; 0x38
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2201      	movs	r2, #1
 80028da:	705a      	strb	r2, [r3, #1]
 80028dc:	e00f      	b.n	80028fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800290a:	883a      	ldrh	r2, [r7, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	78ba      	ldrb	r2, [r7, #2]
 8002914:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002928:	78bb      	ldrb	r3, [r7, #2]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d102      	bne.n	8002934 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_PCD_EP_Open+0xaa>
 800293e:	2302      	movs	r3, #2
 8002940:	e00e      	b.n	8002960 <HAL_PCD_EP_Open+0xc8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68f9      	ldr	r1, [r7, #12]
 8002950:	4618      	mov	r0, r3
 8002952:	f001 ffc5 	bl	80048e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800295e:	7afb      	ldrb	r3, [r7, #11]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da0f      	bge.n	800299c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 020f 	and.w	r2, r3, #15
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3338      	adds	r3, #56	; 0x38
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	705a      	strb	r2, [r3, #1]
 800299a:	e00f      	b.n	80029bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_PCD_EP_Close+0x6e>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e00e      	b.n	80029f4 <HAL_PCD_EP_Close+0x8c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 f803 	bl	80049f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	f003 020f 	and.w	r2, r3, #15
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	3304      	adds	r3, #4
 8002a24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	f002 fade 	bl	8005030 <USB_EP0StartXfer>
 8002a74:	e008      	b.n	8002a88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6979      	ldr	r1, [r7, #20]
 8002a84:	f002 f890 	bl	8004ba8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 020f 	and.w	r2, r3, #15
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ab4:	681b      	ldr	r3, [r3, #0]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	3338      	adds	r3, #56	; 0x38
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2201      	movs	r2, #1
 8002b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d102      	bne.n	8002b1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	6979      	ldr	r1, [r7, #20]
 8002b34:	f002 fa7c 	bl	8005030 <USB_EP0StartXfer>
 8002b38:	e008      	b.n	8002b4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	f002 f82e 	bl	8004ba8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d901      	bls.n	8002b74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e050      	b.n	8002c16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0f      	bge.n	8002b9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3338      	adds	r3, #56	; 0x38
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	705a      	strb	r2, [r3, #1]
 8002b9a:	e00d      	b.n	8002bb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_PCD_EP_SetStall+0x82>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e01e      	b.n	8002c16 <HAL_PCD_EP_SetStall+0xc0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fbd3 	bl	8005392 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	b2d9      	uxtb	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c06:	461a      	mov	r2, r3
 8002c08:	f002 fdc4 	bl	8005794 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d901      	bls.n	8002c3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e042      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	da0f      	bge.n	8002c64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3338      	adds	r3, #56	; 0x38
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	705a      	strb	r2, [r3, #1]
 8002c62:	e00f      	b.n	8002c84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_EP_ClrStall+0x86>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e00e      	b.n	8002cc2 <HAL_PCD_EP_ClrStall+0xa4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68f9      	ldr	r1, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fbdb 	bl	800546e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d901      	bls.n	8002d02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06c      	b.n	8002ddc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d902      	bls.n	8002d1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3303      	adds	r3, #3
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d26:	e02b      	b.n	8002d80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d902      	bls.n	8002d44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3303      	adds	r3, #3
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68d9      	ldr	r1, [r3, #12]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4603      	mov	r3, r0
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f002 fab7 	bl	80052d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	441a      	add	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d809      	bhi.n	8002daa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d203      	bcs.n	8002daa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1be      	bne.n	8002d28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d811      	bhi.n	8002dda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	6939      	ldr	r1, [r7, #16]
 8002dd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3720      	adds	r7, #32
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	333c      	adds	r3, #60	; 0x3c
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 80a0 	bne.w	8002f5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d015      	beq.n	8002e52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a72      	ldr	r2, [pc, #456]	; (8002ff4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f240 80dd 	bls.w	8002fea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80d7 	beq.w	8002fea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	e0cb      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d009      	beq.n	8002e70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	6093      	str	r3, [r2, #8]
 8002e6e:	e0bc      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 80b7 	bne.w	8002fea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d90f      	bls.n	8002ea4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea0:	6093      	str	r3, [r2, #8]
 8002ea2:	e0a2      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eb6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002eca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4403      	add	r3, r0
 8002eda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002ede:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4403      	add	r3, r0
 8002f02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4419      	add	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4403      	add	r3, r0
 8002f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d114      	bne.n	8002f4e <PCD_EP_OutXfrComplete_int+0x16a>
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d108      	bne.n	8002f4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f46:	461a      	mov	r2, r3
 8002f48:	2101      	movs	r1, #1
 8002f4a:	f002 fc23 	bl	8005794 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f004 fbab 	bl	80076b0 <HAL_PCD_DataOutStageCallback>
 8002f5a:	e046      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d124      	bne.n	8002fae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f80:	6093      	str	r3, [r2, #8]
 8002f82:	e032      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2320      	movs	r3, #32
 8002f9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f004 fb82 	bl	80076b0 <HAL_PCD_DataOutStageCallback>
 8002fac:	e01d      	b.n	8002fea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <PCD_EP_OutXfrComplete_int+0x1fa>
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2100      	movs	r1, #0
 8002fda:	f002 fbdb 	bl	8005794 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f004 fb63 	bl	80076b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	4f54300a 	.word	0x4f54300a
 8002ff8:	4f54310a 	.word	0x4f54310a

08002ffc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	333c      	adds	r3, #60	; 0x3c
 8003014:	3304      	adds	r3, #4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <PCD_EP_OutSetupPacket_int+0x88>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d90e      	bls.n	8003050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	d009      	beq.n	8003050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003048:	461a      	mov	r2, r3
 800304a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800304e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f004 fb1b 	bl	800768c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <PCD_EP_OutSetupPacket_int+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d90c      	bls.n	8003078 <PCD_EP_OutSetupPacket_int+0x7c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003070:	461a      	mov	r2, r3
 8003072:	2101      	movs	r1, #1
 8003074:	f002 fb8e 	bl	8005794 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	4f54300a 	.word	0x4f54300a

08003088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
 8003094:	4613      	mov	r3, r2
 8003096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80030a6:	883b      	ldrh	r3, [r7, #0]
 80030a8:	0419      	lsls	r1, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
 80030b4:	e028      	b.n	8003108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	4413      	add	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e00d      	b.n	80030e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	3340      	adds	r3, #64	; 0x40
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4413      	add	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	3301      	adds	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3ec      	bcc.n	80030ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030f0:	883b      	ldrh	r3, [r7, #0]
 80030f2:	0418      	lsls	r0, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	4302      	orrs	r2, r0
 8003100:	3340      	adds	r3, #64	; 0x40
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e264      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d075      	beq.n	800325a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316e:	4ba3      	ldr	r3, [pc, #652]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d00c      	beq.n	8003194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4ba0      	ldr	r3, [pc, #640]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d112      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b9d      	ldr	r3, [pc, #628]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003192:	d10b      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	4b99      	ldr	r3, [pc, #612]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05b      	beq.n	8003258 <HAL_RCC_OscConfig+0x108>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d157      	bne.n	8003258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e23f      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x74>
 80031b6:	4b91      	ldr	r3, [pc, #580]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a90      	ldr	r2, [pc, #576]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a8a      	ldr	r2, [pc, #552]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a87      	ldr	r2, [pc, #540]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a83      	ldr	r2, [pc, #524]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a80      	ldr	r2, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fd ffca 	bl	80011a0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd ffc6 	bl	80011a0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e204      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xc0>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd ffb6 	bl	80011a0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003238:	f7fd ffb2 	bl	80011a0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1f0      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0xe8>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b62      	ldr	r3, [pc, #392]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c4      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4952      	ldr	r1, [pc, #328]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <HAL_RCC_OscConfig+0x2b0>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fd ff6b 	bl	80011a0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fd ff67 	bl	80011a0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a5      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4940      	ldr	r1, [pc, #256]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_RCC_OscConfig+0x2b0>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd ff4a 	bl	80011a0 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003310:	f7fd ff46 	bl	80011a0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e184      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d030      	beq.n	800339c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x2b4>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fd ff2a 	bl	80011a0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003350:	f7fd ff26 	bl	80011a0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e164      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x200>
 800336e:	e015      	b.n	800339c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x2b4>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fd ff13 	bl	80011a0 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337e:	f7fd ff0f 	bl	80011a0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e14d      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a0 	beq.w	80034ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d121      	bne.n	800342a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fd fed5 	bl	80011a0 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e011      	b.n	800341e <HAL_RCC_OscConfig+0x2ce>
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
 8003408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fd fec8 	bl	80011a0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e106      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x4e4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x2f0>
 8003432:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x312>
 8003448:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a77      	ldr	r2, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x32a>
 8003462:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a74      	ldr	r2, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a71      	ldr	r2, [pc, #452]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fe8d 	bl	80011a0 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fe89 	bl	80011a0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0c5      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x33a>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fd fe77 	bl	80011a0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fd fe73 	bl	80011a0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0af      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a55      	ldr	r2, [pc, #340]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 809b 	beq.w	800362a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d05c      	beq.n	80035ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d141      	bne.n	800358c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b4c      	ldr	r3, [pc, #304]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fd fe47 	bl	80011a0 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003516:	f7fd fe43 	bl	80011a0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e081      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	019b      	lsls	r3, r3, #6
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	4937      	ldr	r1, [pc, #220]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355e:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fe1c 	bl	80011a0 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fe18 	bl	80011a0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e056      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x41c>
 800358a:	e04e      	b.n	800362a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fd fe05 	bl	80011a0 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fe01 	bl	80011a0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e03f      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x44a>
 80035b8:	e037      	b.n	800362a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e032      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d028      	beq.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d11a      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40007000 	.word	0x40007000
 8003638:	40023800 	.word	0x40023800
 800363c:	42470060 	.word	0x42470060

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0cc      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d90c      	bls.n	800367c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d044      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e067      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4934      	ldr	r1, [pc, #208]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fd fd36 	bl	80011a0 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fd fd32 	bl	80011a0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e04f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20c      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fc96 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	40023800 	.word	0x40023800
 8003800:	08007e10 	.word	0x08007e10
 8003804:	20000014 	.word	0x20000014
 8003808:	20000018 	.word	0x20000018

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	2300      	movs	r3, #0
 800381e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003824:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d00d      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x40>
 8003830:	2b08      	cmp	r3, #8
 8003832:	f200 80bd 	bhi.w	80039b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x34>
 800383a:	2b04      	cmp	r3, #4
 800383c:	d003      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x3a>
 800383e:	e0b7      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003842:	60bb      	str	r3, [r7, #8]
       break;
 8003844:	e0b7      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003846:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003848:	60bb      	str	r3, [r7, #8]
      break;
 800384a:	e0b4      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384c:	4b5d      	ldr	r3, [pc, #372]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003854:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003856:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04d      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003862:	4b58      	ldr	r3, [pc, #352]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	461a      	mov	r2, r3
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	ea02 0800 	and.w	r8, r2, r0
 800387a:	ea03 0901 	and.w	r9, r3, r1
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	014b      	lsls	r3, r1, #5
 800388c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003890:	0142      	lsls	r2, r0, #5
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	ebb0 0008 	subs.w	r0, r0, r8
 800389a:	eb61 0109 	sbc.w	r1, r1, r9
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	018b      	lsls	r3, r1, #6
 80038a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038ac:	0182      	lsls	r2, r0, #6
 80038ae:	1a12      	subs	r2, r2, r0
 80038b0:	eb63 0301 	sbc.w	r3, r3, r1
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	00d9      	lsls	r1, r3, #3
 80038be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038c2:	00d0      	lsls	r0, r2, #3
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	eb12 0208 	adds.w	r2, r2, r8
 80038cc:	eb43 0309 	adc.w	r3, r3, r9
 80038d0:	f04f 0000 	mov.w	r0, #0
 80038d4:	f04f 0100 	mov.w	r1, #0
 80038d8:	0299      	lsls	r1, r3, #10
 80038da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038de:	0290      	lsls	r0, r2, #10
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	f7fc fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4613      	mov	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e04a      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fe:	4b31      	ldr	r3, [pc, #196]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	461a      	mov	r2, r3
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	ea02 0400 	and.w	r4, r2, r0
 8003916:	ea03 0501 	and.w	r5, r3, r1
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	014b      	lsls	r3, r1, #5
 8003928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800392c:	0142      	lsls	r2, r0, #5
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	1b00      	subs	r0, r0, r4
 8003934:	eb61 0105 	sbc.w	r1, r1, r5
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	018b      	lsls	r3, r1, #6
 8003942:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003946:	0182      	lsls	r2, r0, #6
 8003948:	1a12      	subs	r2, r2, r0
 800394a:	eb63 0301 	sbc.w	r3, r3, r1
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	00d9      	lsls	r1, r3, #3
 8003958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800395c:	00d0      	lsls	r0, r2, #3
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	1912      	adds	r2, r2, r4
 8003964:	eb45 0303 	adc.w	r3, r5, r3
 8003968:	f04f 0000 	mov.w	r0, #0
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	0299      	lsls	r1, r3, #10
 8003972:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003976:	0290      	lsls	r0, r2, #10
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	f7fc fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4613      	mov	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	3301      	adds	r3, #1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	60bb      	str	r3, [r7, #8]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039b2:	60bb      	str	r3, [r7, #8]
      break;
 80039b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039b6:	68bb      	ldr	r3, [r7, #8]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	00f42400 	.word	0x00f42400

080039cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000014 	.word	0x20000014

080039e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039e8:	f7ff fff0 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	0a9b      	lsrs	r3, r3, #10
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	4903      	ldr	r1, [pc, #12]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	08007e20 	.word	0x08007e20

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a10:	f7ff ffdc 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0b5b      	lsrs	r3, r3, #13
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08007e20 	.word	0x08007e20

08003a34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e07b      	b.n	8003b3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a56:	d009      	beq.n	8003a6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	61da      	str	r2, [r3, #28]
 8003a5e:	e005      	b.n	8003a6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fa24 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0104 	and.w	r1, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 0210 	and.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e03f      	b.n	8003bd8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fd f9f9 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2224      	movs	r2, #36	; 0x24
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9a6 	bl	8003edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d17c      	bne.n	8003cfa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_UART_Transmit+0x2c>
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e075      	b.n	8003cfc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Transmit+0x3e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e06e      	b.n	8003cfc <HAL_UART_Transmit+0x11c>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2221      	movs	r2, #33	; 0x21
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c34:	f7fd fab4 	bl	80011a0 <HAL_GetTick>
 8003c38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d108      	bne.n	8003c62 <HAL_UART_Transmit+0x82>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e003      	b.n	8003c6a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c72:	e02a      	b.n	8003cca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8e2 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e036      	b.n	8003cfc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e007      	b.n	8003cbc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1cf      	bne.n	8003c74 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f8b2 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e006      	b.n	8003cfc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	f040 808c 	bne.w	8003e3e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_Receive+0x2e>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e084      	b.n	8003e40 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_UART_Receive+0x40>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e07d      	b.n	8003e40 <HAL_UART_Receive+0x13c>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2222      	movs	r2, #34	; 0x22
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d60:	f7fd fa1e 	bl	80011a0 <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d108      	bne.n	8003d8e <HAL_UART_Receive+0x8a>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e003      	b.n	8003d96 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d9e:	e043      	b.n	8003e28 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2120      	movs	r1, #32
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f84c 	bl	8003e48 <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e042      	b.n	8003e40 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e01f      	b.n	8003e1a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d007      	beq.n	8003df4 <HAL_UART_Receive+0xf0>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_UART_Receive+0xfe>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e008      	b.n	8003e14 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1b6      	bne.n	8003da0 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e58:	e02c      	b.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d028      	beq.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e68:	f7fd f99a 	bl	80011a0 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d21d      	bcs.n	8003eb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e00f      	b.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d0c3      	beq.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	b09f      	sub	sp, #124	; 0x7c
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	68d9      	ldr	r1, [r3, #12]
 8003ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	ea40 0301 	orr.w	r3, r0, r1
 8003efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f20:	f021 010c 	bic.w	r1, r1, #12
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	6999      	ldr	r1, [r3, #24]
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	ea40 0301 	orr.w	r3, r0, r1
 8003f44:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4bc5      	ldr	r3, [pc, #788]	; (8004260 <UART_SetConfig+0x384>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d004      	beq.n	8003f5a <UART_SetConfig+0x7e>
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4bc3      	ldr	r3, [pc, #780]	; (8004264 <UART_SetConfig+0x388>)
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d103      	bne.n	8003f62 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f5a:	f7ff fd57 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8003f5e:	6778      	str	r0, [r7, #116]	; 0x74
 8003f60:	e002      	b.n	8003f68 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f62:	f7ff fd3f 	bl	80039e4 <HAL_RCC_GetPCLK1Freq>
 8003f66:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	f040 80b6 	bne.w	80040e0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f76:	461c      	mov	r4, r3
 8003f78:	f04f 0500 	mov.w	r5, #0
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	6439      	str	r1, [r7, #64]	; 0x40
 8003f84:	415b      	adcs	r3, r3
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44
 8003f88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f8c:	1912      	adds	r2, r2, r4
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	00d9      	lsls	r1, r3, #3
 8003f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa0:	00d0      	lsls	r0, r2, #3
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	1911      	adds	r1, r2, r4
 8003fa8:	6639      	str	r1, [r7, #96]	; 0x60
 8003faa:	416b      	adcs	r3, r5
 8003fac:	667b      	str	r3, [r7, #100]	; 0x64
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003fc8:	f7fc f8fe 	bl	80001c8 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4ba5      	ldr	r3, [pc, #660]	; (8004268 <UART_SetConfig+0x38c>)
 8003fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	011e      	lsls	r6, r3, #4
 8003fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fdc:	461c      	mov	r4, r3
 8003fde:	f04f 0500 	mov.w	r5, #0
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fea:	415b      	adcs	r3, r3
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
 8003fee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ff2:	1912      	adds	r2, r2, r4
 8003ff4:	eb45 0303 	adc.w	r3, r5, r3
 8003ff8:	f04f 0000 	mov.w	r0, #0
 8003ffc:	f04f 0100 	mov.w	r1, #0
 8004000:	00d9      	lsls	r1, r3, #3
 8004002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004006:	00d0      	lsls	r0, r2, #3
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	1911      	adds	r1, r2, r4
 800400e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004010:	416b      	adcs	r3, r5
 8004012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	1891      	adds	r1, r2, r2
 8004020:	62b9      	str	r1, [r7, #40]	; 0x28
 8004022:	415b      	adcs	r3, r3
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800402a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800402e:	f7fc f8cb 	bl	80001c8 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <UART_SetConfig+0x38c>)
 8004038:	fba3 1302 	umull	r1, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	2164      	movs	r1, #100	; 0x64
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	3332      	adds	r3, #50	; 0x32
 800404a:	4a87      	ldr	r2, [pc, #540]	; (8004268 <UART_SetConfig+0x38c>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	095b      	lsrs	r3, r3, #5
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004058:	441e      	add	r6, r3
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	4618      	mov	r0, r3
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	1894      	adds	r4, r2, r2
 8004068:	623c      	str	r4, [r7, #32]
 800406a:	415b      	adcs	r3, r3
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004072:	1812      	adds	r2, r2, r0
 8004074:	eb41 0303 	adc.w	r3, r1, r3
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	f04f 0500 	mov.w	r5, #0
 8004080:	00dd      	lsls	r5, r3, #3
 8004082:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004086:	00d4      	lsls	r4, r2, #3
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	1814      	adds	r4, r2, r0
 800408e:	653c      	str	r4, [r7, #80]	; 0x50
 8004090:	414b      	adcs	r3, r1
 8004092:	657b      	str	r3, [r7, #84]	; 0x54
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	461a      	mov	r2, r3
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	61b9      	str	r1, [r7, #24]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040aa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040ae:	f7fc f88b 	bl	80001c8 <__aeabi_uldivmod>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <UART_SetConfig+0x38c>)
 80040b8:	fba3 1302 	umull	r1, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2164      	movs	r1, #100	; 0x64
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	3332      	adds	r3, #50	; 0x32
 80040ca:	4a67      	ldr	r2, [pc, #412]	; (8004268 <UART_SetConfig+0x38c>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f003 0207 	and.w	r2, r3, #7
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4432      	add	r2, r6
 80040dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040de:	e0b9      	b.n	8004254 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e2:	461c      	mov	r4, r3
 80040e4:	f04f 0500 	mov.w	r5, #0
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	6139      	str	r1, [r7, #16]
 80040f0:	415b      	adcs	r3, r3
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040f8:	1912      	adds	r2, r2, r4
 80040fa:	eb45 0303 	adc.w	r3, r5, r3
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	00d9      	lsls	r1, r3, #3
 8004108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800410c:	00d0      	lsls	r0, r2, #3
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	eb12 0804 	adds.w	r8, r2, r4
 8004116:	eb43 0905 	adc.w	r9, r3, r5
 800411a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004132:	0082      	lsls	r2, r0, #2
 8004134:	4640      	mov	r0, r8
 8004136:	4649      	mov	r1, r9
 8004138:	f7fc f846 	bl	80001c8 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <UART_SetConfig+0x38c>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	011e      	lsls	r6, r3, #4
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	4618      	mov	r0, r3
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	1894      	adds	r4, r2, r2
 8004158:	60bc      	str	r4, [r7, #8]
 800415a:	415b      	adcs	r3, r3
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004162:	1812      	adds	r2, r2, r0
 8004164:	eb41 0303 	adc.w	r3, r1, r3
 8004168:	f04f 0400 	mov.w	r4, #0
 800416c:	f04f 0500 	mov.w	r5, #0
 8004170:	00dd      	lsls	r5, r3, #3
 8004172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004176:	00d4      	lsls	r4, r2, #3
 8004178:	4622      	mov	r2, r4
 800417a:	462b      	mov	r3, r5
 800417c:	1814      	adds	r4, r2, r0
 800417e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004180:	414b      	adcs	r3, r1
 8004182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800419c:	0082      	lsls	r2, r0, #2
 800419e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041a2:	f7fc f811 	bl	80001c8 <__aeabi_uldivmod>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <UART_SetConfig+0x38c>)
 80041ac:	fba3 1302 	umull	r1, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2164      	movs	r1, #100	; 0x64
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	3332      	adds	r3, #50	; 0x32
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <UART_SetConfig+0x38c>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ca:	441e      	add	r6, r3
 80041cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ce:	4618      	mov	r0, r3
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	1894      	adds	r4, r2, r2
 80041da:	603c      	str	r4, [r7, #0]
 80041dc:	415b      	adcs	r3, r3
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e4:	1812      	adds	r2, r2, r0
 80041e6:	eb41 0303 	adc.w	r3, r1, r3
 80041ea:	f04f 0400 	mov.w	r4, #0
 80041ee:	f04f 0500 	mov.w	r5, #0
 80041f2:	00dd      	lsls	r5, r3, #3
 80041f4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041f8:	00d4      	lsls	r4, r2, #3
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	eb12 0a00 	adds.w	sl, r2, r0
 8004202:	eb43 0b01 	adc.w	fp, r3, r1
 8004206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4618      	mov	r0, r3
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	008b      	lsls	r3, r1, #2
 800421a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800421e:	0082      	lsls	r2, r0, #2
 8004220:	4650      	mov	r0, sl
 8004222:	4659      	mov	r1, fp
 8004224:	f7fb ffd0 	bl	80001c8 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <UART_SetConfig+0x38c>)
 800422e:	fba3 1302 	umull	r1, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2164      	movs	r1, #100	; 0x64
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <UART_SetConfig+0x38c>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4432      	add	r2, r6
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	377c      	adds	r7, #124	; 0x7c
 8004258:	46bd      	mov	sp, r7
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	bf00      	nop
 8004260:	40011000 	.word	0x40011000
 8004264:	40011400 	.word	0x40011400
 8004268:	51eb851f 	.word	0x51eb851f

0800426c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800426c:	b084      	sub	sp, #16
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	f107 001c 	add.w	r0, r7, #28
 800427a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	2b01      	cmp	r3, #1
 8004282:	d122      	bne.n	80042ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f001 fac6 	bl	8005850 <USB_CoreReset>
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e01a      	b.n	8004300 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 faba 	bl	8005850 <USB_CoreReset>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
 80042f2:	e005      	b.n	8004300 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10b      	bne.n	800431e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0206 	orr.w	r2, r3, #6
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f043 0220 	orr.w	r2, r3, #32
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800432a:	b004      	add	sp, #16
 800432c:	4770      	bx	lr
	...

08004330 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d165      	bne.n	8004410 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a41      	ldr	r2, [pc, #260]	; (800444c <USB_SetTurnaroundTime+0x11c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d906      	bls.n	800435a <USB_SetTurnaroundTime+0x2a>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a40      	ldr	r2, [pc, #256]	; (8004450 <USB_SetTurnaroundTime+0x120>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d202      	bcs.n	800435a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004354:	230f      	movs	r3, #15
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e062      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <USB_SetTurnaroundTime+0x120>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d306      	bcc.n	8004370 <USB_SetTurnaroundTime+0x40>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a3b      	ldr	r2, [pc, #236]	; (8004454 <USB_SetTurnaroundTime+0x124>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d202      	bcs.n	8004370 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800436a:	230e      	movs	r3, #14
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e057      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a38      	ldr	r2, [pc, #224]	; (8004454 <USB_SetTurnaroundTime+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d306      	bcc.n	8004386 <USB_SetTurnaroundTime+0x56>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a37      	ldr	r2, [pc, #220]	; (8004458 <USB_SetTurnaroundTime+0x128>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d202      	bcs.n	8004386 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004380:	230d      	movs	r3, #13
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e04c      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a33      	ldr	r2, [pc, #204]	; (8004458 <USB_SetTurnaroundTime+0x128>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d306      	bcc.n	800439c <USB_SetTurnaroundTime+0x6c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a32      	ldr	r2, [pc, #200]	; (800445c <USB_SetTurnaroundTime+0x12c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004396:	230c      	movs	r3, #12
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e041      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a2f      	ldr	r2, [pc, #188]	; (800445c <USB_SetTurnaroundTime+0x12c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d906      	bls.n	80043b2 <USB_SetTurnaroundTime+0x82>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a2e      	ldr	r2, [pc, #184]	; (8004460 <USB_SetTurnaroundTime+0x130>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d802      	bhi.n	80043b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043ac:	230b      	movs	r3, #11
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e036      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	; (8004460 <USB_SetTurnaroundTime+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d906      	bls.n	80043c8 <USB_SetTurnaroundTime+0x98>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a29      	ldr	r2, [pc, #164]	; (8004464 <USB_SetTurnaroundTime+0x134>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80043c2:	230a      	movs	r3, #10
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e02b      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <USB_SetTurnaroundTime+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0xae>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <USB_SetTurnaroundTime+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d202      	bcs.n	80043de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043d8:	2309      	movs	r3, #9
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e020      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4a21      	ldr	r2, [pc, #132]	; (8004468 <USB_SetTurnaroundTime+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d306      	bcc.n	80043f4 <USB_SetTurnaroundTime+0xc4>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a20      	ldr	r2, [pc, #128]	; (800446c <USB_SetTurnaroundTime+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043ee:	2308      	movs	r3, #8
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	e015      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a1d      	ldr	r2, [pc, #116]	; (800446c <USB_SetTurnaroundTime+0x13c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d906      	bls.n	800440a <USB_SetTurnaroundTime+0xda>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <USB_SetTurnaroundTime+0x140>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d202      	bcs.n	800440a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004404:	2307      	movs	r3, #7
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e00a      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800440a:	2306      	movs	r3, #6
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e007      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004416:	2309      	movs	r3, #9
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e001      	b.n	8004420 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800441c:	2309      	movs	r3, #9
 800441e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	029b      	lsls	r3, r3, #10
 8004434:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	00d8acbf 	.word	0x00d8acbf
 8004450:	00e4e1c0 	.word	0x00e4e1c0
 8004454:	00f42400 	.word	0x00f42400
 8004458:	01067380 	.word	0x01067380
 800445c:	011a499f 	.word	0x011a499f
 8004460:	01312cff 	.word	0x01312cff
 8004464:	014ca43f 	.word	0x014ca43f
 8004468:	016e3600 	.word	0x016e3600
 800446c:	01a6ab1f 	.word	0x01a6ab1f
 8004470:	01e84800 	.word	0x01e84800

08004474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0201 	bic.w	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d106      	bne.n	80044e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	e00b      	b.n	80044fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	e001      	b.n	80044fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e003      	b.n	8004504 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80044fc:	2032      	movs	r0, #50	; 0x32
 80044fe:	f7fc fe5b 	bl	80011b8 <HAL_Delay>

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800450c:	b084      	sub	sp, #16
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800451a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e009      	b.n	8004540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	3340      	adds	r3, #64	; 0x40
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	2200      	movs	r2, #0
 8004538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3301      	adds	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0e      	cmp	r3, #14
 8004544:	d9f2      	bls.n	800452c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11c      	bne.n	8004586 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800455a:	f043 0302 	orr.w	r3, r3, #2
 800455e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
 8004584:	e00b      	b.n	800459e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045a4:	461a      	mov	r2, r3
 80045a6:	2300      	movs	r3, #0
 80045a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	4619      	mov	r1, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b8:	461a      	mov	r2, r3
 80045ba:	680b      	ldr	r3, [r1, #0]
 80045bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10c      	bne.n	80045de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045ca:	2100      	movs	r1, #0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f949 	bl	8004864 <USB_SetDevSpeed>
 80045d2:	e008      	b.n	80045e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045d4:	2101      	movs	r1, #1
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f944 	bl	8004864 <USB_SetDevSpeed>
 80045dc:	e003      	b.n	80045e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045de:	2103      	movs	r1, #3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f93f 	bl	8004864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045e6:	2110      	movs	r1, #16
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8f3 	bl	80047d4 <USB_FlushTxFifo>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f911 	bl	8004820 <USB_FlushRxFifo>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e043      	b.n	80046ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004648:	d118      	bne.n	800467c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10a      	bne.n	8004666 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4413      	add	r3, r2
 8004658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465c:	461a      	mov	r2, r3
 800465e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e013      	b.n	800468e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	461a      	mov	r2, r3
 8004674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e008      	b.n	800468e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	461a      	mov	r2, r3
 800468a:	2300      	movs	r3, #0
 800468c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	461a      	mov	r2, r3
 800469c:	2300      	movs	r3, #0
 800469e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	461a      	mov	r2, r3
 80046ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3301      	adds	r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3b7      	bcc.n	8004632 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e043      	b.n	8004750 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046de:	d118      	bne.n	8004712 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e013      	b.n	8004724 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004708:	461a      	mov	r2, r3
 800470a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e008      	b.n	8004724 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004742:	461a      	mov	r2, r3
 8004744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d3b7      	bcc.n	80046c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	2b00      	cmp	r3, #0
 800477e:	d105      	bne.n	800478c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f043 0210 	orr.w	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <USB_DevInit+0x2c4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f043 0208 	orr.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d107      	bne.n	80047c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047cc:	b004      	add	sp, #16
 80047ce:	4770      	bx	lr
 80047d0:	803c3800 	.word	0x803c3800

080047d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	019b      	lsls	r3, r3, #6
 80047e6:	f043 0220 	orr.w	r2, r3, #32
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <USB_FlushTxFifo+0x48>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e006      	b.n	800480e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b20      	cmp	r3, #32
 800480a:	d0f0      	beq.n	80047ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	00030d40 	.word	0x00030d40

08004820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2210      	movs	r2, #16
 8004830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3301      	adds	r3, #1
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <USB_FlushRxFifo+0x40>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e006      	b.n	8004852 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d0f0      	beq.n	8004832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	00030d40 	.word	0x00030d40

08004864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]
 80048ba:	e00a      	b.n	80048d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d002      	beq.n	80048c8 <USB_GetDevSpeed+0x32>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d102      	bne.n	80048ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048c8:	2302      	movs	r3, #2
 80048ca:	75fb      	strb	r3, [r7, #23]
 80048cc:	e001      	b.n	80048d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048ce:	230f      	movs	r3, #15
 80048d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d13a      	bne.n	8004972 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	68f9      	ldr	r1, [r7, #12]
 8004916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800491a:	4313      	orrs	r3, r2
 800491c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d155      	bne.n	80049e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004950:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	059b      	lsls	r3, r3, #22
 8004956:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004958:	4313      	orrs	r3, r2
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	0151      	lsls	r1, r2, #5
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	440a      	add	r2, r1
 8004962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e036      	b.n	80049e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	2101      	movs	r1, #1
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004990:	4313      	orrs	r3, r2
 8004992:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11a      	bne.n	80049e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049c6:	430b      	orrs	r3, r1
 80049c8:	4313      	orrs	r3, r2
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d161      	bne.n	8004ad0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a22:	d11f      	bne.n	8004a64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	0151      	lsls	r1, r2, #5
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	440a      	add	r2, r1
 8004a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	2101      	movs	r1, #1
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a84:	4013      	ands	r3, r2
 8004a86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	2101      	movs	r1, #1
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	440b      	add	r3, r1
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <USB_DeactivateEndpoint+0x1b0>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
 8004ace:	e060      	b.n	8004b92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae6:	d11f      	bne.n	8004b28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	0151      	lsls	r1, r2, #5
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	440a      	add	r2, r1
 8004afe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	2101      	movs	r1, #1
 8004b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	43db      	mvns	r3, r3
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b48:	4013      	ands	r3, r2
 8004b4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	43db      	mvns	r3, r3
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	0159      	lsls	r1, r3, #5
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	440b      	add	r3, r1
 8004b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <USB_DeactivateEndpoint+0x1b4>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	ec337800 	.word	0xec337800
 8004ba4:	eff37800 	.word	0xeff37800

08004ba8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 815c 	bne.w	8004e82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d132      	bne.n	8004c38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	0151      	lsls	r1, r2, #5
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	440a      	add	r2, r1
 8004be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	0151      	lsls	r1, r2, #5
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	440a      	add	r2, r1
 8004c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	0cdb      	lsrs	r3, r3, #19
 8004c32:	04db      	lsls	r3, r3, #19
 8004c34:	6113      	str	r3, [r2, #16]
 8004c36:	e074      	b.n	8004d22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	69fa      	ldr	r2, [r7, #28]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	0cdb      	lsrs	r3, r3, #19
 8004c54:	04db      	lsls	r3, r3, #19
 8004c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6959      	ldr	r1, [r3, #20]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	440b      	add	r3, r1
 8004c94:	1e59      	subs	r1, r3, #1
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	4b9d      	ldr	r3, [pc, #628]	; (8004f18 <USB_EPStartXfer+0x370>)
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	0148      	lsls	r0, r1, #5
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	4401      	add	r1, r0
 8004cac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	0148      	lsls	r0, r1, #5
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	4401      	add	r1, r0
 8004cd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	78db      	ldrb	r3, [r3, #3]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d11f      	bne.n	8004d22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d14b      	bne.n	8004dc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d128      	bne.n	8004d9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d110      	bne.n	8004d7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	69fa      	ldr	r2, [r7, #28]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	e00f      	b.n	8004d9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e12f      	b.n	8005020 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	78db      	ldrb	r3, [r3, #3]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d015      	beq.n	8004e14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8117 	beq.w	8005020 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	69f9      	ldr	r1, [r7, #28]
 8004e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	634b      	str	r3, [r1, #52]	; 0x34
 8004e12:	e105      	b.n	8005020 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d110      	bne.n	8004e46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e00f      	b.n	8004e66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68d9      	ldr	r1, [r3, #12]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	b298      	uxth	r0, r3
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	4603      	mov	r3, r0
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa2b 	bl	80052d6 <USB_WritePacket>
 8004e80:	e0ce      	b.n	8005020 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	0cdb      	lsrs	r3, r3, #19
 8004e9e:	04db      	lsls	r3, r3, #19
 8004ea0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ec4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d126      	bne.n	8004f1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee4:	69b9      	ldr	r1, [r7, #24]
 8004ee6:	0148      	lsls	r0, r1, #5
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	4401      	add	r1, r0
 8004eec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	0151      	lsls	r1, r2, #5
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	440a      	add	r2, r1
 8004f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f12:	6113      	str	r3, [r2, #16]
 8004f14:	e036      	b.n	8004f84 <USB_EPStartXfer+0x3dc>
 8004f16:	bf00      	nop
 8004f18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4413      	add	r3, r2
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	8afb      	ldrh	r3, [r7, #22]
 8004f42:	04d9      	lsls	r1, r3, #19
 8004f44:	4b39      	ldr	r3, [pc, #228]	; (800502c <USB_EPStartXfer+0x484>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	69b9      	ldr	r1, [r7, #24]
 8004f4a:	0148      	lsls	r0, r1, #5
 8004f4c:	69f9      	ldr	r1, [r7, #28]
 8004f4e:	4401      	add	r1, r0
 8004f50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	8af9      	ldrh	r1, [r7, #22]
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	0148      	lsls	r0, r1, #5
 8004f78:	69f9      	ldr	r1, [r7, #28]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f80:	4313      	orrs	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10d      	bne.n	8004fa6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	68d9      	ldr	r1, [r3, #12]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	78db      	ldrb	r3, [r3, #3]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d128      	bne.n	8005000 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e00f      	b.n	8005000 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	0151      	lsls	r1, r2, #5
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	440a      	add	r2, r1
 8005016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800501e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	1ff80000 	.word	0x1ff80000

08005030 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	4613      	mov	r3, r2
 800503c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 80cd 	bne.w	80051ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d132      	bne.n	80050c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800507c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b8:	0cdb      	lsrs	r3, r3, #19
 80050ba:	04db      	lsls	r3, r3, #19
 80050bc:	6113      	str	r3, [r2, #16]
 80050be:	e04e      	b.n	800515e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050da:	0cdb      	lsrs	r3, r3, #19
 80050dc:	04db      	lsls	r3, r3, #19
 80050de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005102:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514e:	6939      	ldr	r1, [r7, #16]
 8005150:	0148      	lsls	r0, r1, #5
 8005152:	6979      	ldr	r1, [r7, #20]
 8005154:	4401      	add	r1, r0
 8005156:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800515a:	4313      	orrs	r3, r2
 800515c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d11e      	bne.n	80051a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	461a      	mov	r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e092      	b.n	80052c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d07e      	beq.n	80052c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e6:	4313      	orrs	r3, r2
 80051e8:	634b      	str	r3, [r1, #52]	; 0x34
 80051ea:	e06d      	b.n	80052c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	0cdb      	lsrs	r3, r3, #19
 8005208:	04db      	lsls	r3, r3, #19
 800520a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005226:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800522a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800522e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800525e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005276:	6939      	ldr	r1, [r7, #16]
 8005278:	0148      	lsls	r0, r1, #5
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	4401      	add	r1, r0
 800527e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d10d      	bne.n	80052a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	68d9      	ldr	r1, [r3, #12]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	460a      	mov	r2, r1
 80052a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b089      	sub	sp, #36	; 0x24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	4611      	mov	r1, r2
 80052e2:	461a      	mov	r2, r3
 80052e4:	460b      	mov	r3, r1
 80052e6:	71fb      	strb	r3, [r7, #7]
 80052e8:	4613      	mov	r3, r2
 80052ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80052f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d11a      	bne.n	8005332 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052fc:	88bb      	ldrh	r3, [r7, #4]
 80052fe:	3303      	adds	r3, #3
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005304:	2300      	movs	r3, #0
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e00f      	b.n	800532a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	031a      	lsls	r2, r3, #12
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	461a      	mov	r2, r3
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3304      	adds	r3, #4
 8005322:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	3301      	adds	r3, #1
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d3eb      	bcc.n	800530a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3724      	adds	r7, #36	; 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	3303      	adds	r3, #3
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e00b      	b.n	800537c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3304      	adds	r3, #4
 8005374:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3301      	adds	r3, #1
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3ef      	bcc.n	8005364 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005384:	69fb      	ldr	r3, [r7, #28]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d12c      	bne.n	8005408 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	db12      	blt.n	80053e6 <USB_EPSetStall+0x54>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e02b      	b.n	8005460 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	db12      	blt.n	8005440 <USB_EPSetStall+0xae>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00f      	beq.n	8005440 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800543e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800545e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d128      	bne.n	80054dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d003      	beq.n	80054ba <USB_EPClearStall+0x4c>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	78db      	ldrb	r3, [r3, #3]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d138      	bne.n	800552c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e027      	b.n	800552c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b03      	cmp	r3, #3
 8005502:	d003      	beq.n	800550c <USB_EPClearStall+0x9e>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d10f      	bne.n	800552c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005558:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800555c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005586:	b480      	push	{r7}
 8005588:	b085      	sub	sp, #20
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055a0:	f023 0303 	bic.w	r3, r3, #3
 80055a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b4:	f023 0302 	bic.w	r3, r3, #2
 80055b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f6:	f043 0302 	orr.w	r3, r3, #2
 80055fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4013      	ands	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4013      	ands	r3, r2
 8005652:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0c1b      	lsrs	r3, r3, #16
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	b29b      	uxth	r3, r3
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4013      	ands	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c6:	68bb      	ldr	r3, [r7, #8]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
 8005704:	01db      	lsls	r3, r3, #7
 8005706:	b2db      	uxtb	r3, r3
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4013      	ands	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005722:	68bb      	ldr	r3, [r7, #8]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0301 	and.w	r3, r3, #1
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005782:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	460b      	mov	r3, r1
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	333c      	adds	r3, #60	; 0x3c
 80057aa:	3304      	adds	r3, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <USB_EP0_OutStart+0xb8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d90a      	bls.n	80057ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c8:	d101      	bne.n	80057ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e037      	b.n	800583e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fc:	f043 0318 	orr.w	r3, r3, #24
 8005800:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005814:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d10f      	bne.n	800583c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005836:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800583a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	4f54300a 	.word	0x4f54300a

08005850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <USB_CoreReset+0x64>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e01b      	b.n	80058a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	daf2      	bge.n	800585c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f043 0201 	orr.w	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <USB_CoreReset+0x64>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e006      	b.n	80058a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d0f0      	beq.n	8005886 <USB_CoreReset+0x36>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	00030d40 	.word	0x00030d40

080058b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80058c8:	f002 f95c 	bl	8007b84 <USBD_static_malloc>
 80058cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80058dc:	2302      	movs	r3, #2
 80058de:	e066      	b.n	80059ae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7c1b      	ldrb	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d119      	bne.n	8005924 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058f4:	2202      	movs	r2, #2
 80058f6:	2181      	movs	r1, #129	; 0x81
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 f820 	bl	800793e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005908:	2202      	movs	r2, #2
 800590a:	2101      	movs	r1, #1
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f002 f816 	bl	800793e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2210      	movs	r2, #16
 800591e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005922:	e016      	b.n	8005952 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	2202      	movs	r2, #2
 8005928:	2181      	movs	r1, #129	; 0x81
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f002 f807 	bl	800793e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005936:	2340      	movs	r3, #64	; 0x40
 8005938:	2202      	movs	r2, #2
 800593a:	2101      	movs	r1, #1
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fffe 	bl	800793e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2210      	movs	r2, #16
 800594e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005952:	2308      	movs	r3, #8
 8005954:	2203      	movs	r2, #3
 8005956:	2182      	movs	r1, #130	; 0x82
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 fff0 	bl	800793e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	7c1b      	ldrb	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800598e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005992:	2101      	movs	r1, #1
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 f8c1 	bl	8007b1c <USBD_LL_PrepareReceive>
 800599a:	e007      	b.n	80059ac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059a2:	2340      	movs	r3, #64	; 0x40
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f002 f8b8 	bl	8007b1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80059c2:	2181      	movs	r1, #129	; 0x81
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 ffe0 	bl	800798a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80059d0:	2101      	movs	r1, #1
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 ffd9 	bl	800798a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80059e0:	2182      	movs	r1, #130	; 0x82
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 ffd1 	bl	800798a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a12:	4618      	mov	r0, r3
 8005a14:	f002 f8c4 	bl	8007ba0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e0af      	b.n	8005bb4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d03f      	beq.n	8005ae0 <USBD_CDC_Setup+0xb4>
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	f040 809f 	bne.w	8005ba4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	88db      	ldrh	r3, [r3, #6]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02e      	beq.n	8005acc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da16      	bge.n	8005aa6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005a84:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	88d2      	ldrh	r2, [r2, #6]
 8005a8a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	88db      	ldrh	r3, [r3, #6]
 8005a90:	2b07      	cmp	r3, #7
 8005a92:	bf28      	it	cs
 8005a94:	2307      	movcs	r3, #7
 8005a96:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	89fa      	ldrh	r2, [r7, #14]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f001 fb19 	bl	80070d6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005aa4:	e085      	b.n	8005bb2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	785a      	ldrb	r2, [r3, #1]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	88db      	ldrh	r3, [r3, #6]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005abc:	6939      	ldr	r1, [r7, #16]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	88db      	ldrh	r3, [r3, #6]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fb32 	bl	800712e <USBD_CtlPrepareRx>
      break;
 8005aca:	e072      	b.n	8005bb2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	7850      	ldrb	r0, [r2, #1]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	4798      	blx	r3
      break;
 8005ade:	e068      	b.n	8005bb2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b0b      	cmp	r3, #11
 8005ae6:	d852      	bhi.n	8005b8e <USBD_CDC_Setup+0x162>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <USBD_CDC_Setup+0xc4>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b9d 	.word	0x08005b9d
 8005af8:	08005b8f 	.word	0x08005b8f
 8005afc:	08005b8f 	.word	0x08005b8f
 8005b00:	08005b8f 	.word	0x08005b8f
 8005b04:	08005b8f 	.word	0x08005b8f
 8005b08:	08005b8f 	.word	0x08005b8f
 8005b0c:	08005b8f 	.word	0x08005b8f
 8005b10:	08005b8f 	.word	0x08005b8f
 8005b14:	08005b8f 	.word	0x08005b8f
 8005b18:	08005b4b 	.word	0x08005b4b
 8005b1c:	08005b75 	.word	0x08005b75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d107      	bne.n	8005b3c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b2c:	f107 030a 	add.w	r3, r7, #10
 8005b30:	2202      	movs	r2, #2
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 face 	bl	80070d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b3a:	e032      	b.n	8005ba2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fa58 	bl	8006ff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	75fb      	strb	r3, [r7, #23]
          break;
 8005b48:	e02b      	b.n	8005ba2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d107      	bne.n	8005b66 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b56:	f107 030d 	add.w	r3, r7, #13
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 fab9 	bl	80070d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b64:	e01d      	b.n	8005ba2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fa43 	bl	8006ff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	75fb      	strb	r3, [r7, #23]
          break;
 8005b72:	e016      	b.n	8005ba2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d00f      	beq.n	8005ba0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 fa36 	bl	8006ff4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b8c:	e008      	b.n	8005ba0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fa2f 	bl	8006ff4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b96:	2303      	movs	r3, #3
 8005b98:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9a:	e002      	b.n	8005ba2 <USBD_CDC_Setup+0x176>
          break;
 8005b9c:	bf00      	nop
 8005b9e:	e008      	b.n	8005bb2 <USBD_CDC_Setup+0x186>
          break;
 8005ba0:	bf00      	nop
      }
      break;
 8005ba2:	e006      	b.n	8005bb2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fa24 	bl	8006ff4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005bce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e04f      	b.n	8005c7e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005be4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3318      	adds	r3, #24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d029      	beq.n	8005c50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	78f9      	ldrb	r1, [r7, #3]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	460b      	mov	r3, r1
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4403      	add	r3, r0
 8005c1c:	3344      	adds	r3, #68	; 0x44
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c24:	fb03 f301 	mul.w	r3, r3, r1
 8005c28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d110      	bne.n	8005c50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3318      	adds	r3, #24
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c42:	78f9      	ldrb	r1, [r7, #3]
 8005c44:	2300      	movs	r3, #0
 8005c46:	2200      	movs	r2, #0
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 ff46 	bl	8007ada <USBD_LL_Transmit>
 8005c4e:	e015      	b.n	8005c7c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e015      	b.n	8005cd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	4619      	mov	r1, r3
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 ff56 	bl	8007b5e <USBD_LL_GetRxDataSize>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e01b      	b.n	8005d2e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <USBD_CDC_EP0_RxReady+0x50>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d06:	2bff      	cmp	r3, #255	; 0xff
 8005d08:	d010      	beq.n	8005d2c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005d18:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d20:	b292      	uxth	r2, r2
 8005d22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2243      	movs	r2, #67	; 0x43
 8005d44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005d46:	4b03      	ldr	r3, [pc, #12]	; (8005d54 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	200000a8 	.word	0x200000a8

08005d58 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2243      	movs	r2, #67	; 0x43
 8005d64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005d66:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	20000064 	.word	0x20000064

08005d78 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2243      	movs	r2, #67	; 0x43
 8005d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005d86:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	200000ec 	.word	0x200000ec

08005d98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	220a      	movs	r2, #10
 8005da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005da6:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20000020 	.word	0x20000020

08005db8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e004      	b.n	8005dd6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b087      	sub	sp, #28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e008      	b.n	8005e12 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e004      	b.n	8005e44 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01a      	b.n	8005ea8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d114      	bne.n	8005ea6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e9a:	2181      	movs	r1, #129	; 0x81
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fe1c 	bl	8007ada <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e016      	b.n	8005efc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	7c1b      	ldrb	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fe1a 	bl	8007b1c <USBD_LL_PrepareReceive>
 8005ee8:	e007      	b.n	8005efa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef0:	2340      	movs	r3, #64	; 0x40
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fe11 	bl	8007b1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e01f      	b.n	8005f5c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	79fa      	ldrb	r2, [r7, #7]
 8005f4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f001 fc8d 	bl	8007870 <USBD_LL_Init>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e016      	b.n	8005faa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	f107 020e 	add.w	r2, r7, #14
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fca4 	bl	8007908 <USBD_LL_Start>
 8005fc0:	4603      	mov	r3, r0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	4611      	mov	r1, r2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	4611      	mov	r1, r2
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
  }

  return USBD_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 ff90 	bl	8006f80 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2b02      	cmp	r3, #2
 8006082:	d01a      	beq.n	80060ba <USBD_LL_SetupStage+0x72>
 8006084:	2b02      	cmp	r3, #2
 8006086:	d822      	bhi.n	80060ce <USBD_LL_SetupStage+0x86>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <USBD_LL_SetupStage+0x4a>
 800608c:	2b01      	cmp	r3, #1
 800608e:	d00a      	beq.n	80060a6 <USBD_LL_SetupStage+0x5e>
 8006090:	e01d      	b.n	80060ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fa62 	bl	8006564 <USBD_StdDevReq>
 80060a0:	4603      	mov	r3, r0
 80060a2:	73fb      	strb	r3, [r7, #15]
      break;
 80060a4:	e020      	b.n	80060e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fac6 	bl	8006640 <USBD_StdItfReq>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
      break;
 80060b8:	e016      	b.n	80060e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fb05 	bl	80066d2 <USBD_StdEPReq>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e00c      	b.n	80060e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fc73 	bl	80079c8 <USBD_LL_StallEP>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
      break;
 80060e6:	bf00      	nop
  }

  return ret;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b086      	sub	sp, #24
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	460b      	mov	r3, r1
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006100:	7afb      	ldrb	r3, [r7, #11]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d138      	bne.n	8006178 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800610c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006114:	2b03      	cmp	r3, #3
 8006116:	d14a      	bne.n	80061ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	429a      	cmp	r2, r3
 8006122:	d913      	bls.n	800614c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	1ad2      	subs	r2, r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4293      	cmp	r3, r2
 800613c:	bf28      	it	cs
 800613e:	4613      	movcs	r3, r2
 8006140:	461a      	mov	r2, r3
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f80f 	bl	8007168 <USBD_CtlContinueRx>
 800614a:	e030      	b.n	80061ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b03      	cmp	r3, #3
 8006156:	d10b      	bne.n	8006170 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 f80a 	bl	800718a <USBD_CtlSendStatus>
 8006176:	e01a      	b.n	80061ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b03      	cmp	r3, #3
 8006182:	d114      	bne.n	80061ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	7afa      	ldrb	r2, [r7, #11]
 800619a:	4611      	mov	r1, r2
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	e000      	b.n	80061b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	460b      	mov	r3, r1
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061c6:	7afb      	ldrb	r3, [r7, #11]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d16b      	bne.n	80062a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3314      	adds	r3, #20
 80061d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d156      	bne.n	800628a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d914      	bls.n	8006212 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	1ad2      	subs	r2, r2, r3
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 ff84 	bl	800710c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006204:	2300      	movs	r3, #0
 8006206:	2200      	movs	r2, #0
 8006208:	2100      	movs	r1, #0
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f001 fc86 	bl	8007b1c <USBD_LL_PrepareReceive>
 8006210:	e03b      	b.n	800628a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	429a      	cmp	r2, r3
 800621c:	d11c      	bne.n	8006258 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006226:	429a      	cmp	r2, r3
 8006228:	d316      	bcc.n	8006258 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006234:	429a      	cmp	r2, r3
 8006236:	d20f      	bcs.n	8006258 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006238:	2200      	movs	r2, #0
 800623a:	2100      	movs	r1, #0
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 ff65 	bl	800710c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800624a:	2300      	movs	r3, #0
 800624c:	2200      	movs	r2, #0
 800624e:	2100      	movs	r1, #0
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f001 fc63 	bl	8007b1c <USBD_LL_PrepareReceive>
 8006256:	e018      	b.n	800628a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d10b      	bne.n	800627c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800627c:	2180      	movs	r1, #128	; 0x80
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f001 fba2 	bl	80079c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 ff93 	bl	80071b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d122      	bne.n	80062da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff fe98 	bl	8005fca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062a2:	e01a      	b.n	80062da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d114      	bne.n	80062da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00e      	beq.n	80062da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	7afa      	ldrb	r2, [r7, #11]
 80062c6:	4611      	mov	r1, r2
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	4798      	blx	r3
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	e000      	b.n	80062dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006314:	2303      	movs	r3, #3
 8006316:	e02f      	b.n	8006378 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00f      	beq.n	8006342 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d009      	beq.n	8006342 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	4611      	mov	r1, r2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006342:	2340      	movs	r3, #64	; 0x40
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 faf8 	bl	800793e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	2200      	movs	r2, #0
 8006362:	2180      	movs	r1, #128	; 0x80
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 faea 	bl	800793e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2240      	movs	r2, #64	; 0x40
 8006374:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	78fa      	ldrb	r2, [r7, #3]
 8006390:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2204      	movs	r2, #4
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d106      	bne.n	80063ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800640e:	2303      	movs	r3, #3
 8006410:	e012      	b.n	8006438 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d10b      	bne.n	8006436 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e014      	b.n	8006484 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b03      	cmp	r3, #3
 8006464:	d10d      	bne.n	8006482 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	78fa      	ldrb	r2, [r7, #3]
 800647c:	4611      	mov	r1, r2
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e014      	b.n	80064d0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d10d      	bne.n	80064ce <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4611      	mov	r1, r2
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6852      	ldr	r2, [r2, #4]
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	4611      	mov	r1, r2
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006526:	b480      	push	{r7}
 8006528:	b087      	sub	sp, #28
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	3301      	adds	r3, #1
 800653c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006544:	8a3b      	ldrh	r3, [r7, #16]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	b21a      	sxth	r2, r3
 800654a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800654e:	4313      	orrs	r3, r2
 8006550:	b21b      	sxth	r3, r3
 8006552:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006554:	89fb      	ldrh	r3, [r7, #14]
}
 8006556:	4618      	mov	r0, r3
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
	...

08006564 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d005      	beq.n	800658a <USBD_StdDevReq+0x26>
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d853      	bhi.n	800662a <USBD_StdDevReq+0xc6>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <USBD_StdDevReq+0x3a>
 8006586:	2b20      	cmp	r3, #32
 8006588:	d14f      	bne.n	800662a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	4798      	blx	r3
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e04a      	b.n	8006634 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b09      	cmp	r3, #9
 80065a4:	d83b      	bhi.n	800661e <USBD_StdDevReq+0xba>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBD_StdDevReq+0x48>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	08006601 	.word	0x08006601
 80065b0:	08006615 	.word	0x08006615
 80065b4:	0800661f 	.word	0x0800661f
 80065b8:	0800660b 	.word	0x0800660b
 80065bc:	0800661f 	.word	0x0800661f
 80065c0:	080065df 	.word	0x080065df
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	0800661f 	.word	0x0800661f
 80065cc:	080065f7 	.word	0x080065f7
 80065d0:	080065e9 	.word	0x080065e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9de 	bl	8006998 <USBD_GetDescriptor>
          break;
 80065dc:	e024      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb43 	bl	8006c6c <USBD_SetAddress>
          break;
 80065e6:	e01f      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fb82 	bl	8006cf4 <USBD_SetConfig>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]
          break;
 80065f4:	e018      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fc21 	bl	8006e40 <USBD_GetConfig>
          break;
 80065fe:	e013      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fc52 	bl	8006eac <USBD_GetStatus>
          break;
 8006608:	e00e      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fc81 	bl	8006f14 <USBD_SetFeature>
          break;
 8006612:	e009      	b.n	8006628 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fc90 	bl	8006f3c <USBD_ClrFeature>
          break;
 800661c:	e004      	b.n	8006628 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fce7 	bl	8006ff4 <USBD_CtlError>
          break;
 8006626:	bf00      	nop
      }
      break;
 8006628:	e004      	b.n	8006634 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fce1 	bl	8006ff4 <USBD_CtlError>
      break;
 8006632:	bf00      	nop
  }

  return ret;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d005      	beq.n	8006666 <USBD_StdItfReq+0x26>
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d82f      	bhi.n	80066be <USBD_StdItfReq+0x7e>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <USBD_StdItfReq+0x26>
 8006662:	2b20      	cmp	r3, #32
 8006664:	d12b      	bne.n	80066be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	2b02      	cmp	r3, #2
 8006672:	d81d      	bhi.n	80066b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	889b      	ldrh	r3, [r3, #4]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d813      	bhi.n	80066a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	88db      	ldrh	r3, [r3, #6]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d110      	bne.n	80066ba <USBD_StdItfReq+0x7a>
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fd73 	bl	800718a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066a4:	e009      	b.n	80066ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fca3 	bl	8006ff4 <USBD_CtlError>
          break;
 80066ae:	e004      	b.n	80066ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fc9e 	bl	8006ff4 <USBD_CtlError>
          break;
 80066b8:	e000      	b.n	80066bc <USBD_StdItfReq+0x7c>
          break;
 80066ba:	bf00      	nop
      }
      break;
 80066bc:	e004      	b.n	80066c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc97 	bl	8006ff4 <USBD_CtlError>
      break;
 80066c6:	bf00      	nop
  }

  return ret;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	889b      	ldrh	r3, [r3, #4]
 80066e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d007      	beq.n	8006702 <USBD_StdEPReq+0x30>
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	f200 8145 	bhi.w	8006982 <USBD_StdEPReq+0x2b0>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00c      	beq.n	8006716 <USBD_StdEPReq+0x44>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	f040 8140 	bne.w	8006982 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e13a      	b.n	800698c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d007      	beq.n	800672e <USBD_StdEPReq+0x5c>
 800671e:	2b03      	cmp	r3, #3
 8006720:	f300 8129 	bgt.w	8006976 <USBD_StdEPReq+0x2a4>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d07f      	beq.n	8006828 <USBD_StdEPReq+0x156>
 8006728:	2b01      	cmp	r3, #1
 800672a:	d03c      	beq.n	80067a6 <USBD_StdEPReq+0xd4>
 800672c:	e123      	b.n	8006976 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d002      	beq.n	8006740 <USBD_StdEPReq+0x6e>
 800673a:	2b03      	cmp	r3, #3
 800673c:	d016      	beq.n	800676c <USBD_StdEPReq+0x9a>
 800673e:	e02c      	b.n	800679a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <USBD_StdEPReq+0x90>
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	d00a      	beq.n	8006762 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f939 	bl	80079c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006756:	2180      	movs	r1, #128	; 0x80
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f935 	bl	80079c8 <USBD_LL_StallEP>
 800675e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006760:	e020      	b.n	80067a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc45 	bl	8006ff4 <USBD_CtlError>
              break;
 800676a:	e01b      	b.n	80067a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	885b      	ldrh	r3, [r3, #2]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10e      	bne.n	8006792 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00b      	beq.n	8006792 <USBD_StdEPReq+0xc0>
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d008      	beq.n	8006792 <USBD_StdEPReq+0xc0>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	88db      	ldrh	r3, [r3, #6]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006788:	7bbb      	ldrb	r3, [r7, #14]
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 f91b 	bl	80079c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fcf9 	bl	800718a <USBD_CtlSendStatus>

              break;
 8006798:	e004      	b.n	80067a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fc29 	bl	8006ff4 <USBD_CtlError>
              break;
 80067a2:	bf00      	nop
          }
          break;
 80067a4:	e0ec      	b.n	8006980 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d002      	beq.n	80067b8 <USBD_StdEPReq+0xe6>
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d016      	beq.n	80067e4 <USBD_StdEPReq+0x112>
 80067b6:	e030      	b.n	800681a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00d      	beq.n	80067da <USBD_StdEPReq+0x108>
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d00a      	beq.n	80067da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 f8fd 	bl	80079c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f001 f8f9 	bl	80079c8 <USBD_LL_StallEP>
 80067d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067d8:	e025      	b.n	8006826 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fc09 	bl	8006ff4 <USBD_CtlError>
              break;
 80067e2:	e020      	b.n	8006826 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	885b      	ldrh	r3, [r3, #2]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11b      	bne.n	8006824 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d004      	beq.n	8006800 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f001 f903 	bl	8007a06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fcc2 	bl	800718a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006818:	e004      	b.n	8006824 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbe9 	bl	8006ff4 <USBD_CtlError>
              break;
 8006822:	e000      	b.n	8006826 <USBD_StdEPReq+0x154>
              break;
 8006824:	bf00      	nop
          }
          break;
 8006826:	e0ab      	b.n	8006980 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d002      	beq.n	800683a <USBD_StdEPReq+0x168>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d032      	beq.n	800689e <USBD_StdEPReq+0x1cc>
 8006838:	e097      	b.n	800696a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <USBD_StdEPReq+0x17e>
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b80      	cmp	r3, #128	; 0x80
 8006844:	d004      	beq.n	8006850 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fbd3 	bl	8006ff4 <USBD_CtlError>
                break;
 800684e:	e091      	b.n	8006974 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	da0b      	bge.n	8006870 <USBD_StdEPReq+0x19e>
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	3310      	adds	r3, #16
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	4413      	add	r3, r2
 800686c:	3304      	adds	r3, #4
 800686e:	e00b      	b.n	8006888 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	3304      	adds	r3, #4
 8006888:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2202      	movs	r2, #2
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fc1d 	bl	80070d6 <USBD_CtlSendData>
              break;
 800689c:	e06a      	b.n	8006974 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800689e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da11      	bge.n	80068ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	f003 020f 	and.w	r2, r3, #15
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	3324      	adds	r3, #36	; 0x24
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d117      	bne.n	80068f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fb96 	bl	8006ff4 <USBD_CtlError>
                  break;
 80068c8:	e054      	b.n	8006974 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	f003 020f 	and.w	r2, r3, #15
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb83 	bl	8006ff4 <USBD_CtlError>
                  break;
 80068ee:	e041      	b.n	8006974 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da0b      	bge.n	8006910 <USBD_StdEPReq+0x23e>
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3310      	adds	r3, #16
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	e00b      	b.n	8006928 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4413      	add	r3, r2
 8006926:	3304      	adds	r3, #4
 8006928:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <USBD_StdEPReq+0x264>
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d103      	bne.n	800693e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e00e      	b.n	800695c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 f87e 	bl	8007a44 <USBD_LL_IsStallEP>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	e002      	b.n	800695c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2202      	movs	r2, #2
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fbb7 	bl	80070d6 <USBD_CtlSendData>
              break;
 8006968:	e004      	b.n	8006974 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fb41 	bl	8006ff4 <USBD_CtlError>
              break;
 8006972:	bf00      	nop
          }
          break;
 8006974:	e004      	b.n	8006980 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fb3b 	bl	8006ff4 <USBD_CtlError>
          break;
 800697e:	bf00      	nop
      }
      break;
 8006980:	e004      	b.n	800698c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb35 	bl	8006ff4 <USBD_CtlError>
      break;
 800698a:	bf00      	nop
  }

  return ret;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	885b      	ldrh	r3, [r3, #2]
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	2b06      	cmp	r3, #6
 80069ba:	f200 8128 	bhi.w	8006c0e <USBD_GetDescriptor+0x276>
 80069be:	a201      	add	r2, pc, #4	; (adr r2, 80069c4 <USBD_GetDescriptor+0x2c>)
 80069c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c4:	080069e1 	.word	0x080069e1
 80069c8:	080069f9 	.word	0x080069f9
 80069cc:	08006a39 	.word	0x08006a39
 80069d0:	08006c0f 	.word	0x08006c0f
 80069d4:	08006c0f 	.word	0x08006c0f
 80069d8:	08006baf 	.word	0x08006baf
 80069dc:	08006bdb 	.word	0x08006bdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
      break;
 80069f6:	e112      	b.n	8006c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7c1b      	ldrb	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10d      	bne.n	8006a1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f107 0208 	add.w	r2, r7, #8
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
 8006a10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	2202      	movs	r2, #2
 8006a18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a1a:	e100      	b.n	8006c1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	f107 0208 	add.w	r2, r7, #8
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	2202      	movs	r2, #2
 8006a34:	701a      	strb	r2, [r3, #0]
      break;
 8006a36:	e0f2      	b.n	8006c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	885b      	ldrh	r3, [r3, #2]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b05      	cmp	r3, #5
 8006a40:	f200 80ac 	bhi.w	8006b9c <USBD_GetDescriptor+0x204>
 8006a44:	a201      	add	r2, pc, #4	; (adr r2, 8006a4c <USBD_GetDescriptor+0xb4>)
 8006a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4a:	bf00      	nop
 8006a4c:	08006a65 	.word	0x08006a65
 8006a50:	08006a99 	.word	0x08006a99
 8006a54:	08006acd 	.word	0x08006acd
 8006a58:	08006b01 	.word	0x08006b01
 8006a5c:	08006b35 	.word	0x08006b35
 8006a60:	08006b69 	.word	0x08006b69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	7c12      	ldrb	r2, [r2, #16]
 8006a7c:	f107 0108 	add.w	r1, r7, #8
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
 8006a84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a86:	e091      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fab2 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006a90:	7afb      	ldrb	r3, [r7, #11]
 8006a92:	3301      	adds	r3, #1
 8006a94:	72fb      	strb	r3, [r7, #11]
          break;
 8006a96:	e089      	b.n	8006bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00b      	beq.n	8006abc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	7c12      	ldrb	r2, [r2, #16]
 8006ab0:	f107 0108 	add.w	r1, r7, #8
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4798      	blx	r3
 8006ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aba:	e077      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa98 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aca:	e06f      	b.n	8006bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	7c12      	ldrb	r2, [r2, #16]
 8006ae4:	f107 0108 	add.w	r1, r7, #8
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4798      	blx	r3
 8006aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aee:	e05d      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa7e 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	3301      	adds	r3, #1
 8006afc:	72fb      	strb	r3, [r7, #11]
          break;
 8006afe:	e055      	b.n	8006bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	7c12      	ldrb	r2, [r2, #16]
 8006b18:	f107 0108 	add.w	r1, r7, #8
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4798      	blx	r3
 8006b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b22:	e043      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa64 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006b2c:	7afb      	ldrb	r3, [r7, #11]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	72fb      	strb	r3, [r7, #11]
          break;
 8006b32:	e03b      	b.n	8006bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7c12      	ldrb	r2, [r2, #16]
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b56:	e029      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa4a 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3301      	adds	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]
          break;
 8006b66:	e021      	b.n	8006bac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7c12      	ldrb	r2, [r2, #16]
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8a:	e00f      	b.n	8006bac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa30 	bl	8006ff4 <USBD_CtlError>
            err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9a:	e007      	b.n	8006bac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa28 	bl	8006ff4 <USBD_CtlError>
          err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006baa:	bf00      	nop
      }
      break;
 8006bac:	e037      	b.n	8006c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
 8006bc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bc8:	e029      	b.n	8006c1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fa11 	bl	8006ff4 <USBD_CtlError>
        err++;
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bd8:	e021      	b.n	8006c1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c1b      	ldrb	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	f107 0208 	add.w	r2, r7, #8
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4798      	blx	r3
 8006bf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	2207      	movs	r2, #7
 8006bfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bfc:	e00f      	b.n	8006c1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f9f7 	bl	8006ff4 <USBD_CtlError>
        err++;
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c0c:	e007      	b.n	8006c1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f9ef 	bl	8006ff4 <USBD_CtlError>
      err++;
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006c1c:	bf00      	nop
  }

  if (err != 0U)
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11e      	bne.n	8006c62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	88db      	ldrh	r3, [r3, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d016      	beq.n	8006c5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c2c:	893b      	ldrh	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	88da      	ldrh	r2, [r3, #6]
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bf28      	it	cs
 8006c3c:	4613      	movcs	r3, r2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c42:	893b      	ldrh	r3, [r7, #8]
 8006c44:	461a      	mov	r2, r3
 8006c46:	68f9      	ldr	r1, [r7, #12]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa44 	bl	80070d6 <USBD_CtlSendData>
 8006c4e:	e009      	b.n	8006c64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9ce 	bl	8006ff4 <USBD_CtlError>
 8006c58:	e004      	b.n	8006c64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fa95 	bl	800718a <USBD_CtlSendStatus>
 8006c60:	e000      	b.n	8006c64 <USBD_GetDescriptor+0x2cc>
    return;
 8006c62:	bf00      	nop
  }
}
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop

08006c6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	889b      	ldrh	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d131      	bne.n	8006ce2 <USBD_SetAddress+0x76>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d12d      	bne.n	8006ce2 <USBD_SetAddress+0x76>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	885b      	ldrh	r3, [r3, #2]
 8006c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8c:	d829      	bhi.n	8006ce2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	885b      	ldrh	r3, [r3, #2]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d104      	bne.n	8006cb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f9a3 	bl	8006ff4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cae:	e01d      	b.n	8006cec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	7bfa      	ldrb	r2, [r7, #15]
 8006cb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 feed 	bl	8007a9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa61 	bl	800718a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	e009      	b.n	8006cec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce0:	e004      	b.n	8006cec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f985 	bl	8006ff4 <USBD_CtlError>
  }
}
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	885b      	ldrh	r3, [r3, #2]
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d0c:	4b4b      	ldr	r3, [pc, #300]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d905      	bls.n	8006d20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f96c 	bl	8006ff4 <USBD_CtlError>
    return USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e088      	b.n	8006e32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d002      	beq.n	8006d32 <USBD_SetConfig+0x3e>
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d025      	beq.n	8006d7c <USBD_SetConfig+0x88>
 8006d30:	e071      	b.n	8006e16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d32:	4b42      	ldr	r3, [pc, #264]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01c      	beq.n	8006d74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006d3a:	4b40      	ldr	r3, [pc, #256]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d44:	4b3d      	ldr	r3, [pc, #244]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff f948 	bl	8005fe0 <USBD_SetClassConfig>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f949 	bl	8006ff4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d62:	e065      	b.n	8006e30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa10 	bl	800718a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d72:	e05d      	b.n	8006e30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fa08 	bl	800718a <USBD_CtlSendStatus>
      break;
 8006d7a:	e059      	b.n	8006e30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d7c:	4b2f      	ldr	r3, [pc, #188]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d112      	bne.n	8006daa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <USBD_SetConfig+0x148>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff f93b 	bl	8006018 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9f1 	bl	800718a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006da8:	e042      	b.n	8006e30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <USBD_SetConfig+0x148>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d02a      	beq.n	8006e0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff f929 	bl	8006018 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <USBD_SetConfig+0x148>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <USBD_SetConfig+0x148>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff f902 	bl	8005fe0 <USBD_SetClassConfig>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00f      	beq.n	8006e06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f903 	bl	8006ff4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff f90e 	bl	8006018 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e04:	e014      	b.n	8006e30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9bf 	bl	800718a <USBD_CtlSendStatus>
      break;
 8006e0c:	e010      	b.n	8006e30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f9bb 	bl	800718a <USBD_CtlSendStatus>
      break;
 8006e14:	e00c      	b.n	8006e30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8eb 	bl	8006ff4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e1e:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <USBD_SetConfig+0x148>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff f8f7 	bl	8006018 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2e:	bf00      	nop
  }

  return ret;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000214 	.word	0x20000214

08006e40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88db      	ldrh	r3, [r3, #6]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d004      	beq.n	8006e5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8cd 	bl	8006ff4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e5a:	e023      	b.n	8006ea4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	dc02      	bgt.n	8006e6e <USBD_GetConfig+0x2e>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dc03      	bgt.n	8006e74 <USBD_GetConfig+0x34>
 8006e6c:	e015      	b.n	8006e9a <USBD_GetConfig+0x5a>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d00b      	beq.n	8006e8a <USBD_GetConfig+0x4a>
 8006e72:	e012      	b.n	8006e9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f927 	bl	80070d6 <USBD_CtlSendData>
        break;
 8006e88:	e00c      	b.n	8006ea4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4619      	mov	r1, r3
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f91f 	bl	80070d6 <USBD_CtlSendData>
        break;
 8006e98:	e004      	b.n	8006ea4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8a9 	bl	8006ff4 <USBD_CtlError>
        break;
 8006ea2:	bf00      	nop
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d81e      	bhi.n	8006f02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	88db      	ldrh	r3, [r3, #6]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d004      	beq.n	8006ed6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f890 	bl	8006ff4 <USBD_CtlError>
        break;
 8006ed4:	e01a      	b.n	8006f0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f043 0202 	orr.w	r2, r3, #2
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f8eb 	bl	80070d6 <USBD_CtlSendData>
      break;
 8006f00:	e004      	b.n	8006f0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f875 	bl	8006ff4 <USBD_CtlError>
      break;
 8006f0a:	bf00      	nop
  }
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d106      	bne.n	8006f34 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f92b 	bl	800718a <USBD_CtlSendStatus>
  }
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d80b      	bhi.n	8006f6c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	885b      	ldrh	r3, [r3, #2]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d10c      	bne.n	8006f76 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f910 	bl	800718a <USBD_CtlSendStatus>
      }
      break;
 8006f6a:	e004      	b.n	8006f76 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f840 	bl	8006ff4 <USBD_CtlError>
      break;
 8006f74:	e000      	b.n	8006f78 <USBD_ClrFeature+0x3c>
      break;
 8006f76:	bf00      	nop
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff fabb 	bl	8006526 <SWAPBYTE>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff faae 	bl	8006526 <SWAPBYTE>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff faa1 	bl	8006526 <SWAPBYTE>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	80da      	strh	r2, [r3, #6]
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fce1 	bl	80079c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fcdd 	bl	80079c8 <USBD_LL_StallEP>
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d036      	beq.n	800709a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007030:	6938      	ldr	r0, [r7, #16]
 8007032:	f000 f836 	bl	80070a2 <USBD_GetLen>
 8007036:	4603      	mov	r3, r0
 8007038:	3301      	adds	r3, #1
 800703a:	b29b      	uxth	r3, r3
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	3301      	adds	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4413      	add	r3, r2
 800705c:	2203      	movs	r2, #3
 800705e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	3301      	adds	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007066:	e013      	b.n	8007090 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3301      	adds	r3, #1
 8007078:	613b      	str	r3, [r7, #16]
    idx++;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	3301      	adds	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
    idx++;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e7      	bne.n	8007068 <USBD_GetString+0x52>
 8007098:	e000      	b.n	800709c <USBD_GetString+0x86>
    return;
 800709a:	bf00      	nop
  }
}
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070b2:	e005      	b.n	80070c0 <USBD_GetLen+0x1e>
  {
    len++;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	3301      	adds	r3, #1
 80070b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3301      	adds	r3, #1
 80070be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f5      	bne.n	80070b4 <USBD_GetLen+0x12>
  }

  return len;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2202      	movs	r2, #2
 80070e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	2100      	movs	r1, #0
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fcec 	bl	8007ada <USBD_LL_Transmit>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	2100      	movs	r1, #0
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fcdb 	bl	8007ada <USBD_LL_Transmit>

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2203      	movs	r2, #3
 800713e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	2100      	movs	r1, #0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fcdf 	bl	8007b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	2100      	movs	r1, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fcce 	bl	8007b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2204      	movs	r2, #4
 8007196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800719a:	2300      	movs	r3, #0
 800719c:	2200      	movs	r2, #0
 800719e:	2100      	movs	r1, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fc9a 	bl	8007ada <USBD_LL_Transmit>

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2205      	movs	r2, #5
 80071bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071c0:	2300      	movs	r3, #0
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fca8 	bl	8007b1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071dc:	2200      	movs	r2, #0
 80071de:	4912      	ldr	r1, [pc, #72]	; (8007228 <MX_USB_DEVICE_Init+0x50>)
 80071e0:	4812      	ldr	r0, [pc, #72]	; (800722c <MX_USB_DEVICE_Init+0x54>)
 80071e2:	f7fe fe8f 	bl	8005f04 <USBD_Init>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071ec:	f7f9 fc4a 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071f0:	490f      	ldr	r1, [pc, #60]	; (8007230 <MX_USB_DEVICE_Init+0x58>)
 80071f2:	480e      	ldr	r0, [pc, #56]	; (800722c <MX_USB_DEVICE_Init+0x54>)
 80071f4:	f7fe feb6 	bl	8005f64 <USBD_RegisterClass>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071fe:	f7f9 fc41 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007202:	490c      	ldr	r1, [pc, #48]	; (8007234 <MX_USB_DEVICE_Init+0x5c>)
 8007204:	4809      	ldr	r0, [pc, #36]	; (800722c <MX_USB_DEVICE_Init+0x54>)
 8007206:	f7fe fdd7 	bl	8005db8 <USBD_CDC_RegisterInterface>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007210:	f7f9 fc38 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007214:	4805      	ldr	r0, [pc, #20]	; (800722c <MX_USB_DEVICE_Init+0x54>)
 8007216:	f7fe fecc 	bl	8005fb2 <USBD_Start>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007220:	f7f9 fc30 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007224:	bf00      	nop
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000144 	.word	0x20000144
 800722c:	20000590 	.word	0x20000590
 8007230:	2000002c 	.word	0x2000002c
 8007234:	20000130 	.word	0x20000130

08007238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800723c:	2200      	movs	r2, #0
 800723e:	4905      	ldr	r1, [pc, #20]	; (8007254 <CDC_Init_FS+0x1c>)
 8007240:	4805      	ldr	r0, [pc, #20]	; (8007258 <CDC_Init_FS+0x20>)
 8007242:	f7fe fdce 	bl	8005de2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007246:	4905      	ldr	r1, [pc, #20]	; (800725c <CDC_Init_FS+0x24>)
 8007248:	4803      	ldr	r0, [pc, #12]	; (8007258 <CDC_Init_FS+0x20>)
 800724a:	f7fe fde8 	bl	8005e1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800724e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20001060 	.word	0x20001060
 8007258:	20000590 	.word	0x20000590
 800725c:	20000860 	.word	0x20000860

08007260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007266:	4618      	mov	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	71fb      	strb	r3, [r7, #7]
 800727c:	4613      	mov	r3, r2
 800727e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b23      	cmp	r3, #35	; 0x23
 8007284:	d84a      	bhi.n	800731c <CDC_Control_FS+0xac>
 8007286:	a201      	add	r2, pc, #4	; (adr r2, 800728c <CDC_Control_FS+0x1c>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	0800731d 	.word	0x0800731d
 8007290:	0800731d 	.word	0x0800731d
 8007294:	0800731d 	.word	0x0800731d
 8007298:	0800731d 	.word	0x0800731d
 800729c:	0800731d 	.word	0x0800731d
 80072a0:	0800731d 	.word	0x0800731d
 80072a4:	0800731d 	.word	0x0800731d
 80072a8:	0800731d 	.word	0x0800731d
 80072ac:	0800731d 	.word	0x0800731d
 80072b0:	0800731d 	.word	0x0800731d
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	0800731d 	.word	0x0800731d
 80072bc:	0800731d 	.word	0x0800731d
 80072c0:	0800731d 	.word	0x0800731d
 80072c4:	0800731d 	.word	0x0800731d
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	0800731d 	.word	0x0800731d
 80072d0:	0800731d 	.word	0x0800731d
 80072d4:	0800731d 	.word	0x0800731d
 80072d8:	0800731d 	.word	0x0800731d
 80072dc:	0800731d 	.word	0x0800731d
 80072e0:	0800731d 	.word	0x0800731d
 80072e4:	0800731d 	.word	0x0800731d
 80072e8:	0800731d 	.word	0x0800731d
 80072ec:	0800731d 	.word	0x0800731d
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	0800731d 	.word	0x0800731d
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	0800731d 	.word	0x0800731d
 8007300:	0800731d 	.word	0x0800731d
 8007304:	0800731d 	.word	0x0800731d
 8007308:	0800731d 	.word	0x0800731d
 800730c:	0800731d 	.word	0x0800731d
 8007310:	0800731d 	.word	0x0800731d
 8007314:	0800731d 	.word	0x0800731d
 8007318:	0800731d 	.word	0x0800731d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800731c:	bf00      	nop
  }

  return (USBD_OK);
 800731e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4805      	ldr	r0, [pc, #20]	; (8007350 <CDC_Receive_FS+0x24>)
 800733a:	f7fe fd70 	bl	8005e1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800733e:	4804      	ldr	r0, [pc, #16]	; (8007350 <CDC_Receive_FS+0x24>)
 8007340:	f7fe fdb6 	bl	8005eb0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007344:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20000590 	.word	0x20000590

08007354 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <CDC_Transmit_FS+0x48>)
 8007366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800736a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007376:	2301      	movs	r3, #1
 8007378:	e00b      	b.n	8007392 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800737a:	887b      	ldrh	r3, [r7, #2]
 800737c:	461a      	mov	r2, r3
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4806      	ldr	r0, [pc, #24]	; (800739c <CDC_Transmit_FS+0x48>)
 8007382:	f7fe fd2e 	bl	8005de2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007386:	4805      	ldr	r0, [pc, #20]	; (800739c <CDC_Transmit_FS+0x48>)
 8007388:	f7fe fd62 	bl	8005e50 <USBD_CDC_TransmitPacket>
 800738c:	4603      	mov	r3, r0
 800738e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000590 	.word	0x20000590

080073a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80073b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
	...

080073c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2212      	movs	r2, #18
 80073d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073d6:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	20000160 	.word	0x20000160

080073e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	6039      	str	r1, [r7, #0]
 80073f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2204      	movs	r2, #4
 80073f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073fa:	4b03      	ldr	r3, [pc, #12]	; (8007408 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	20000174 	.word	0x20000174

0800740c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d105      	bne.n	800742a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4907      	ldr	r1, [pc, #28]	; (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
 8007422:	4808      	ldr	r0, [pc, #32]	; (8007444 <USBD_FS_ProductStrDescriptor+0x38>)
 8007424:	f7ff fdf7 	bl	8007016 <USBD_GetString>
 8007428:	e004      	b.n	8007434 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	4904      	ldr	r1, [pc, #16]	; (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
 800742e:	4805      	ldr	r0, [pc, #20]	; (8007444 <USBD_FS_ProductStrDescriptor+0x38>)
 8007430:	f7ff fdf1 	bl	8007016 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007434:	4b02      	ldr	r3, [pc, #8]	; (8007440 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20001860 	.word	0x20001860
 8007444:	08007dc8 	.word	0x08007dc8

08007448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	4904      	ldr	r1, [pc, #16]	; (8007468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007458:	4804      	ldr	r0, [pc, #16]	; (800746c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800745a:	f7ff fddc 	bl	8007016 <USBD_GetString>
  return USBD_StrDesc;
 800745e:	4b02      	ldr	r3, [pc, #8]	; (8007468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20001860 	.word	0x20001860
 800746c:	08007de0 	.word	0x08007de0

08007470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	221a      	movs	r2, #26
 8007480:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007482:	f000 f843 	bl	800750c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007486:	4b02      	ldr	r3, [pc, #8]	; (8007490 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000178 	.word	0x20000178

08007494 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4907      	ldr	r1, [pc, #28]	; (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074aa:	4808      	ldr	r0, [pc, #32]	; (80074cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ac:	f7ff fdb3 	bl	8007016 <USBD_GetString>
 80074b0:	e004      	b.n	80074bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4904      	ldr	r1, [pc, #16]	; (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074b6:	4805      	ldr	r0, [pc, #20]	; (80074cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074b8:	f7ff fdad 	bl	8007016 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20001860 	.word	0x20001860
 80074cc:	08007df4 	.word	0x08007df4

080074d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074dc:	79fb      	ldrb	r3, [r7, #7]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4907      	ldr	r1, [pc, #28]	; (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e6:	4808      	ldr	r0, [pc, #32]	; (8007508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e8:	f7ff fd95 	bl	8007016 <USBD_GetString>
 80074ec:	e004      	b.n	80074f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4904      	ldr	r1, [pc, #16]	; (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074f4:	f7ff fd8f 	bl	8007016 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074f8:	4b02      	ldr	r3, [pc, #8]	; (8007504 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20001860 	.word	0x20001860
 8007508:	08007e00 	.word	0x08007e00

0800750c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <Get_SerialNum+0x44>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <Get_SerialNum+0x48>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800751e:	4b0e      	ldr	r3, [pc, #56]	; (8007558 <Get_SerialNum+0x4c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d009      	beq.n	8007546 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007532:	2208      	movs	r2, #8
 8007534:	4909      	ldr	r1, [pc, #36]	; (800755c <Get_SerialNum+0x50>)
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f814 	bl	8007564 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800753c:	2204      	movs	r2, #4
 800753e:	4908      	ldr	r1, [pc, #32]	; (8007560 <Get_SerialNum+0x54>)
 8007540:	68b8      	ldr	r0, [r7, #8]
 8007542:	f000 f80f 	bl	8007564 <IntToUnicode>
  }
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	1fff7a10 	.word	0x1fff7a10
 8007554:	1fff7a14 	.word	0x1fff7a14
 8007558:	1fff7a18 	.word	0x1fff7a18
 800755c:	2000017a 	.word	0x2000017a
 8007560:	2000018a 	.word	0x2000018a

08007564 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]
 800757a:	e027      	b.n	80075cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	0f1b      	lsrs	r3, r3, #28
 8007580:	2b09      	cmp	r3, #9
 8007582:	d80b      	bhi.n	800759c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	0f1b      	lsrs	r3, r3, #28
 8007588:	b2da      	uxtb	r2, r3
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4619      	mov	r1, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	440b      	add	r3, r1
 8007594:	3230      	adds	r2, #48	; 0x30
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	e00a      	b.n	80075b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	0f1b      	lsrs	r3, r3, #28
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4619      	mov	r1, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	440b      	add	r3, r1
 80075ac:	3237      	adds	r2, #55	; 0x37
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	3301      	adds	r3, #1
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	3301      	adds	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
 80075cc:	7dfa      	ldrb	r2, [r7, #23]
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d3d3      	bcc.n	800757c <IntToUnicode+0x18>
  }
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
	...

080075e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08a      	sub	sp, #40	; 0x28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007604:	d13a      	bne.n	800767c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	4a1d      	ldr	r2, [pc, #116]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	6313      	str	r3, [r2, #48]	; 0x30
 8007616:	4b1b      	ldr	r3, [pc, #108]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007622:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007628:	2302      	movs	r3, #2
 800762a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007630:	2303      	movs	r3, #3
 8007632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007634:	230a      	movs	r3, #10
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007638:	f107 0314 	add.w	r3, r7, #20
 800763c:	4619      	mov	r1, r3
 800763e:	4812      	ldr	r0, [pc, #72]	; (8007688 <HAL_PCD_MspInit+0xa4>)
 8007640:	f7fa fa4e 	bl	8001ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007644:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 8007646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007648:	4a0e      	ldr	r2, [pc, #56]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 800764a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764e:	6353      	str	r3, [r2, #52]	; 0x34
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 8007656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 800765a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800765e:	6453      	str	r3, [r2, #68]	; 0x44
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <HAL_PCD_MspInit+0xa0>)
 8007662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	2043      	movs	r0, #67	; 0x43
 8007672:	f7fa f9fe 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007676:	2043      	movs	r0, #67	; 0x43
 8007678:	f7fa fa17 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800767c:	bf00      	nop
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40023800 	.word	0x40023800
 8007688:	40020000 	.word	0x40020000

0800768c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fcd0 	bl	8006048 <USBD_LL_SetupStage>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	4619      	mov	r1, r3
 80076da:	f7fe fd0a 	bl	80060f2 <USBD_LL_DataOutStage>
}
 80076de:	bf00      	nop
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	4613      	mov	r3, r2
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	1a9b      	subs	r3, r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	440b      	add	r3, r1
 8007706:	3348      	adds	r3, #72	; 0x48
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	4619      	mov	r1, r3
 800770e:	f7fe fd53 	bl	80061b8 <USBD_LL_DataInStage>
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fe67 	bl	80063fc <USBD_LL_SOF>
}
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800773e:	2301      	movs	r3, #1
 8007740:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800774a:	2300      	movs	r3, #0
 800774c:	73fb      	strb	r3, [r7, #15]
 800774e:	e008      	b.n	8007762 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d102      	bne.n	800775e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	e001      	b.n	8007762 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800775e:	f7f9 f991 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007768:	7bfa      	ldrb	r2, [r7, #15]
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe fe07 	bl	8006380 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fdb3 	bl	80062e4 <USBD_LL_Reset>
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fe02 	bl	80063a0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <HAL_PCD_SuspendCallback+0x48>)
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	4a03      	ldr	r2, [pc, #12]	; (80077d0 <HAL_PCD_SuspendCallback+0x48>)
 80077c2:	f043 0306 	orr.w	r3, r3, #6
 80077c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	e000ed00 	.word	0xe000ed00

080077d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fdf2 	bl	80063cc <USBD_LL_Resume>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fe40 	bl	800648c <USBD_LL_IsoOUTIncomplete>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fe08 	bl	8006440 <USBD_LL_IsoINIncomplete>
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fe46 	bl	80064d8 <USBD_LL_DevConnected>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007862:	4618      	mov	r0, r3
 8007864:	f7fe fe43 	bl	80064ee <USBD_LL_DevDisconnected>
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d13c      	bne.n	80078fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007880:	4a20      	ldr	r2, [pc, #128]	; (8007904 <USBD_LL_Init+0x94>)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <USBD_LL_Init+0x94>)
 800788c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007890:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <USBD_LL_Init+0x94>)
 8007892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007898:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <USBD_LL_Init+0x94>)
 800789a:	2204      	movs	r2, #4
 800789c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800789e:	4b19      	ldr	r3, [pc, #100]	; (8007904 <USBD_LL_Init+0x94>)
 80078a0:	2202      	movs	r2, #2
 80078a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <USBD_LL_Init+0x94>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <USBD_LL_Init+0x94>)
 80078ac:	2202      	movs	r2, #2
 80078ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078b0:	4b14      	ldr	r3, [pc, #80]	; (8007904 <USBD_LL_Init+0x94>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078b6:	4b13      	ldr	r3, [pc, #76]	; (8007904 <USBD_LL_Init+0x94>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <USBD_LL_Init+0x94>)
 80078be:	2200      	movs	r2, #0
 80078c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <USBD_LL_Init+0x94>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <USBD_LL_Init+0x94>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80078ce:	480d      	ldr	r0, [pc, #52]	; (8007904 <USBD_LL_Init+0x94>)
 80078d0:	f7fa fabb 	bl	8001e4a <HAL_PCD_Init>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80078da:	f7f9 f8d3 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	4808      	ldr	r0, [pc, #32]	; (8007904 <USBD_LL_Init+0x94>)
 80078e2:	f7fb fc18 	bl	8003116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078e6:	2240      	movs	r2, #64	; 0x40
 80078e8:	2100      	movs	r1, #0
 80078ea:	4806      	ldr	r0, [pc, #24]	; (8007904 <USBD_LL_Init+0x94>)
 80078ec:	f7fb fbcc 	bl	8003088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078f0:	2280      	movs	r2, #128	; 0x80
 80078f2:	2101      	movs	r1, #1
 80078f4:	4803      	ldr	r0, [pc, #12]	; (8007904 <USBD_LL_Init+0x94>)
 80078f6:	f7fb fbc7 	bl	8003088 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20001a60 	.word	0x20001a60

08007908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fa fbb0 	bl	8002084 <HAL_PCD_Start>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f942 	bl	8007bb4 <USBD_Get_USB_Status>
 8007930:	4603      	mov	r3, r0
 8007932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007934:	7bbb      	ldrb	r3, [r7, #14]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	4608      	mov	r0, r1
 8007948:	4611      	mov	r1, r2
 800794a:	461a      	mov	r2, r3
 800794c:	4603      	mov	r3, r0
 800794e:	70fb      	strb	r3, [r7, #3]
 8007950:	460b      	mov	r3, r1
 8007952:	70bb      	strb	r3, [r7, #2]
 8007954:	4613      	mov	r3, r2
 8007956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007966:	78bb      	ldrb	r3, [r7, #2]
 8007968:	883a      	ldrh	r2, [r7, #0]
 800796a:	78f9      	ldrb	r1, [r7, #3]
 800796c:	f7fa ff94 	bl	8002898 <HAL_PCD_EP_Open>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f91c 	bl	8007bb4 <USBD_Get_USB_Status>
 800797c:	4603      	mov	r3, r0
 800797e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007980:	7bbb      	ldrb	r3, [r7, #14]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fa ffdd 	bl	8002968 <HAL_PCD_EP_Close>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 f8fd 	bl	8007bb4 <USBD_Get_USB_Status>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079be:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fb f8b5 	bl	8002b56 <HAL_PCD_EP_SetStall>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f8de 	bl	8007bb4 <USBD_Get_USB_Status>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a20:	78fa      	ldrb	r2, [r7, #3]
 8007a22:	4611      	mov	r1, r2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fb f8fa 	bl	8002c1e <HAL_PCD_EP_ClrStall>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 f8bf 	bl	8007bb4 <USBD_Get_USB_Status>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da0b      	bge.n	8007a78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	1a9b      	subs	r3, r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	333e      	adds	r3, #62	; 0x3e
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	e00b      	b.n	8007a90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fa fec7 	bl	800284e <HAL_PCD_SetAddress>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f874 	bl	8007bb4 <USBD_Get_USB_Status>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007af8:	7af9      	ldrb	r1, [r7, #11]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	f7fa ffe0 	bl	8002ac2 <HAL_PCD_EP_Transmit>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f853 	bl	8007bb4 <USBD_Get_USB_Status>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b12:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b3a:	7af9      	ldrb	r1, [r7, #11]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	f7fa ff5c 	bl	80029fc <HAL_PCD_EP_Receive>
 8007b44:	4603      	mov	r3, r0
 8007b46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 f832 	bl	8007bb4 <USBD_Get_USB_Status>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b54:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3718      	adds	r7, #24
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fa ff8c 	bl	8002a92 <HAL_PCD_EP_GetRxCount>
 8007b7a:	4603      	mov	r3, r0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b8c:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <USBD_static_malloc+0x18>)
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	20000218 	.word	0x20000218

08007ba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]

}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d817      	bhi.n	8007bf8 <USBD_Get_USB_Status+0x44>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USBD_Get_USB_Status+0x1c>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007be7 	.word	0x08007be7
 8007bd8:	08007bed 	.word	0x08007bed
 8007bdc:	08007bf3 	.word	0x08007bf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
    break;
 8007be4:	e00b      	b.n	8007bfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007be6:	2303      	movs	r3, #3
 8007be8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bea:	e008      	b.n	8007bfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bec:	2301      	movs	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf0:	e005      	b.n	8007bfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf6:	e002      	b.n	8007bfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8007bfc:	bf00      	nop
  }
  return usb_status;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <atoi>:
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f000 b8b6 	b.w	8007d80 <strtol>

08007c14 <__errno>:
 8007c14:	4b01      	ldr	r3, [pc, #4]	; (8007c1c <__errno+0x8>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	20000194 	.word	0x20000194

08007c20 <__libc_init_array>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	4d0d      	ldr	r5, [pc, #52]	; (8007c58 <__libc_init_array+0x38>)
 8007c24:	4c0d      	ldr	r4, [pc, #52]	; (8007c5c <__libc_init_array+0x3c>)
 8007c26:	1b64      	subs	r4, r4, r5
 8007c28:	10a4      	asrs	r4, r4, #2
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	42a6      	cmp	r6, r4
 8007c2e:	d109      	bne.n	8007c44 <__libc_init_array+0x24>
 8007c30:	4d0b      	ldr	r5, [pc, #44]	; (8007c60 <__libc_init_array+0x40>)
 8007c32:	4c0c      	ldr	r4, [pc, #48]	; (8007c64 <__libc_init_array+0x44>)
 8007c34:	f000 f8ae 	bl	8007d94 <_init>
 8007c38:	1b64      	subs	r4, r4, r5
 8007c3a:	10a4      	asrs	r4, r4, #2
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	42a6      	cmp	r6, r4
 8007c40:	d105      	bne.n	8007c4e <__libc_init_array+0x2e>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c48:	4798      	blx	r3
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	e7ee      	b.n	8007c2c <__libc_init_array+0xc>
 8007c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c52:	4798      	blx	r3
 8007c54:	3601      	adds	r6, #1
 8007c56:	e7f2      	b.n	8007c3e <__libc_init_array+0x1e>
 8007c58:	08007f34 	.word	0x08007f34
 8007c5c:	08007f34 	.word	0x08007f34
 8007c60:	08007f34 	.word	0x08007f34
 8007c64:	08007f38 	.word	0x08007f38

08007c68 <memset>:
 8007c68:	4402      	add	r2, r0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d100      	bne.n	8007c72 <memset+0xa>
 8007c70:	4770      	bx	lr
 8007c72:	f803 1b01 	strb.w	r1, [r3], #1
 8007c76:	e7f9      	b.n	8007c6c <memset+0x4>

08007c78 <_strtol_l.isra.0>:
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7e:	d001      	beq.n	8007c84 <_strtol_l.isra.0+0xc>
 8007c80:	2b24      	cmp	r3, #36	; 0x24
 8007c82:	d906      	bls.n	8007c92 <_strtol_l.isra.0+0x1a>
 8007c84:	f7ff ffc6 	bl	8007c14 <__errno>
 8007c88:	2316      	movs	r3, #22
 8007c8a:	6003      	str	r3, [r0, #0]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	4f3a      	ldr	r7, [pc, #232]	; (8007d7c <_strtol_l.isra.0+0x104>)
 8007c94:	468e      	mov	lr, r1
 8007c96:	4676      	mov	r6, lr
 8007c98:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c9c:	5de5      	ldrb	r5, [r4, r7]
 8007c9e:	f015 0508 	ands.w	r5, r5, #8
 8007ca2:	d1f8      	bne.n	8007c96 <_strtol_l.isra.0+0x1e>
 8007ca4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ca6:	d134      	bne.n	8007d12 <_strtol_l.isra.0+0x9a>
 8007ca8:	f89e 4000 	ldrb.w	r4, [lr]
 8007cac:	f04f 0801 	mov.w	r8, #1
 8007cb0:	f106 0e02 	add.w	lr, r6, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d05c      	beq.n	8007d72 <_strtol_l.isra.0+0xfa>
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d10c      	bne.n	8007cd6 <_strtol_l.isra.0+0x5e>
 8007cbc:	2c30      	cmp	r4, #48	; 0x30
 8007cbe:	d10a      	bne.n	8007cd6 <_strtol_l.isra.0+0x5e>
 8007cc0:	f89e 4000 	ldrb.w	r4, [lr]
 8007cc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007cc8:	2c58      	cmp	r4, #88	; 0x58
 8007cca:	d14d      	bne.n	8007d68 <_strtol_l.isra.0+0xf0>
 8007ccc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	f10e 0e02 	add.w	lr, lr, #2
 8007cd6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007cda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007cde:	2600      	movs	r6, #0
 8007ce0:	fbbc f9f3 	udiv	r9, ip, r3
 8007ce4:	4635      	mov	r5, r6
 8007ce6:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007cee:	2f09      	cmp	r7, #9
 8007cf0:	d818      	bhi.n	8007d24 <_strtol_l.isra.0+0xac>
 8007cf2:	463c      	mov	r4, r7
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	dd24      	ble.n	8007d42 <_strtol_l.isra.0+0xca>
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	db1f      	blt.n	8007d3c <_strtol_l.isra.0+0xc4>
 8007cfc:	45a9      	cmp	r9, r5
 8007cfe:	d31d      	bcc.n	8007d3c <_strtol_l.isra.0+0xc4>
 8007d00:	d101      	bne.n	8007d06 <_strtol_l.isra.0+0x8e>
 8007d02:	45a2      	cmp	sl, r4
 8007d04:	db1a      	blt.n	8007d3c <_strtol_l.isra.0+0xc4>
 8007d06:	fb05 4503 	mla	r5, r5, r3, r4
 8007d0a:	2601      	movs	r6, #1
 8007d0c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007d10:	e7eb      	b.n	8007cea <_strtol_l.isra.0+0x72>
 8007d12:	2c2b      	cmp	r4, #43	; 0x2b
 8007d14:	bf08      	it	eq
 8007d16:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007d1a:	46a8      	mov	r8, r5
 8007d1c:	bf08      	it	eq
 8007d1e:	f106 0e02 	addeq.w	lr, r6, #2
 8007d22:	e7c7      	b.n	8007cb4 <_strtol_l.isra.0+0x3c>
 8007d24:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007d28:	2f19      	cmp	r7, #25
 8007d2a:	d801      	bhi.n	8007d30 <_strtol_l.isra.0+0xb8>
 8007d2c:	3c37      	subs	r4, #55	; 0x37
 8007d2e:	e7e1      	b.n	8007cf4 <_strtol_l.isra.0+0x7c>
 8007d30:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007d34:	2f19      	cmp	r7, #25
 8007d36:	d804      	bhi.n	8007d42 <_strtol_l.isra.0+0xca>
 8007d38:	3c57      	subs	r4, #87	; 0x57
 8007d3a:	e7db      	b.n	8007cf4 <_strtol_l.isra.0+0x7c>
 8007d3c:	f04f 36ff 	mov.w	r6, #4294967295
 8007d40:	e7e4      	b.n	8007d0c <_strtol_l.isra.0+0x94>
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	da05      	bge.n	8007d52 <_strtol_l.isra.0+0xda>
 8007d46:	2322      	movs	r3, #34	; 0x22
 8007d48:	6003      	str	r3, [r0, #0]
 8007d4a:	4665      	mov	r5, ip
 8007d4c:	b942      	cbnz	r2, 8007d60 <_strtol_l.isra.0+0xe8>
 8007d4e:	4628      	mov	r0, r5
 8007d50:	e79d      	b.n	8007c8e <_strtol_l.isra.0+0x16>
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	d000      	beq.n	8007d5a <_strtol_l.isra.0+0xe2>
 8007d58:	426d      	negs	r5, r5
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d0f7      	beq.n	8007d4e <_strtol_l.isra.0+0xd6>
 8007d5e:	b10e      	cbz	r6, 8007d64 <_strtol_l.isra.0+0xec>
 8007d60:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	e7f2      	b.n	8007d4e <_strtol_l.isra.0+0xd6>
 8007d68:	2430      	movs	r4, #48	; 0x30
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1b3      	bne.n	8007cd6 <_strtol_l.isra.0+0x5e>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	e7b1      	b.n	8007cd6 <_strtol_l.isra.0+0x5e>
 8007d72:	2c30      	cmp	r4, #48	; 0x30
 8007d74:	d0a4      	beq.n	8007cc0 <_strtol_l.isra.0+0x48>
 8007d76:	230a      	movs	r3, #10
 8007d78:	e7ad      	b.n	8007cd6 <_strtol_l.isra.0+0x5e>
 8007d7a:	bf00      	nop
 8007d7c:	08007e29 	.word	0x08007e29

08007d80 <strtol>:
 8007d80:	4613      	mov	r3, r2
 8007d82:	460a      	mov	r2, r1
 8007d84:	4601      	mov	r1, r0
 8007d86:	4802      	ldr	r0, [pc, #8]	; (8007d90 <strtol+0x10>)
 8007d88:	6800      	ldr	r0, [r0, #0]
 8007d8a:	f7ff bf75 	b.w	8007c78 <_strtol_l.isra.0>
 8007d8e:	bf00      	nop
 8007d90:	20000194 	.word	0x20000194

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	bf00      	nop
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
