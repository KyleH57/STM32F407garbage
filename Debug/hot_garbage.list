
hot_garbage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d6c  08007d6c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d74  08007d74  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d74  08007d74  00017d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d78  08007d78  00017d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c70  200001ec  08007f68  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e5c  08007f68  00021e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f7f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  0003a19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003ed48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255db  00000000  00000000  0003fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158e7  00000000  00000000  00065383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6eb3  00000000  00000000  0007ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151b1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  00151b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001ec 	.word	0x200001ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007bd0 	.word	0x08007bd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f0 	.word	0x200001f0
 80001c4:	08007bd0 	.word	0x08007bd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c6:	f000 fdc5 	bl	8001054 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ca:	f000 f89d 	bl	8000608 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ce:	f000 fa3d 	bl	800094c <MX_GPIO_Init>
	MX_ADC2_Init();
 80004d2:	f000 f903 	bl	80006dc <MX_ADC2_Init>
	MX_ADC3_Init();
 80004d6:	f000 f953 	bl	8000780 <MX_ADC3_Init>
	MX_CAN2_Init();
 80004da:	f000 f9a3 	bl	8000824 <MX_CAN2_Init>
	MX_SPI1_Init();
 80004de:	f000 f9d5 	bl	800088c <MX_SPI1_Init>
	MX_USART3_UART_Init();
 80004e2:	f000 fa09 	bl	80008f8 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80004e6:	f006 fd95 	bl	8007014 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	uint8_t tempBuf[32];

	const uint8_t spStat[3] = {'S', 'P','\n'};
 80004ea:	4a3f      	ldr	r2, [pc, #252]	; (80005e8 <main+0x128>)
 80004ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f0:	6812      	ldr	r2, [r2, #0]
 80004f2:	4611      	mov	r1, r2
 80004f4:	8019      	strh	r1, [r3, #0]
 80004f6:	3302      	adds	r3, #2
 80004f8:	0c12      	lsrs	r2, r2, #16
 80004fa:	701a      	strb	r2, [r3, #0]
	const uint8_t onStat[3] = {'M', '3','\n'};
 80004fc:	4a3b      	ldr	r2, [pc, #236]	; (80005ec <main+0x12c>)
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	8019      	strh	r1, [r3, #0]
 8000508:	3302      	adds	r3, #2
 800050a:	0c12      	lsrs	r2, r2, #16
 800050c:	701a      	strb	r2, [r3, #0]
	const uint8_t offStat[3] = {'M', '5','\n'};
 800050e:	4a38      	ldr	r2, [pc, #224]	; (80005f0 <main+0x130>)
 8000510:	f107 031c 	add.w	r3, r7, #28
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4611      	mov	r1, r2
 8000518:	8019      	strh	r1, [r3, #0]
 800051a:	3302      	adds	r3, #2
 800051c:	0c12      	lsrs	r2, r2, #16
 800051e:	701a      	strb	r2, [r3, #0]

	//uint8_t txBuf[8] = { 'A', '2', '3', '4', '5', '6', '7', '\n' };
	uint8_t rxBuf[16]; // = { '0', '0', '0', '0', '0', '0', '0', '\n', '\0' };


	uint8_t CDCrx[8] = { '0', '0', '0', '0', '0', '0', '0', '\n' };
 8000520:	4a34      	ldr	r2, [pc, #208]	; (80005f4 <main+0x134>)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000528:	e883 0003 	stmia.w	r3, {r0, r1}

	char *CDCrxPtr1 = &CDCrx[2];
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	3302      	adds	r3, #2
 8000530:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t x = -99;
 8000532:	f06f 0362 	mvn.w	r3, #98	; 0x62
 8000536:	603b      	str	r3, [r7, #0]
	uint16_t length, length2;

    char *tempPtr = &x;
 8000538:	463b      	mov	r3, r7
 800053a:	653b      	str	r3, [r7, #80]	; 0x50

	int rpm = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int j = 00;
 8000540:	2300      	movs	r3, #0
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48

    tempPtr = rxBuf;
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	653b      	str	r3, [r7, #80]	; 0x50
    strcpy(rxBuf, "1234ABCD");
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <main+0x138>)
 8000550:	ca07      	ldmia	r2, {r0, r1, r2}
 8000552:	c303      	stmia	r3!, {r0, r1}
 8000554:	701a      	strb	r2, [r3, #0]
		//hStatus = HAL_UART_Receive(&huart3, rxBuf, 8, 10);

		//HAL_UART_Receive(&huart3, rxBuf, 8, 10);


		CDC_Receive_FS(CDCrx, &x);
 8000556:	463a      	mov	r2, r7
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f006 fe03 	bl	8007168 <CDC_Receive_FS>

		HAL_Delay(100);
 8000562:	2064      	movs	r0, #100	; 0x64
 8000564:	f000 fde8 	bl	8001138 <HAL_Delay>
		//spindleFWD(&huart3);
		if (CDCrx[0] == 'M') {
 8000568:	793b      	ldrb	r3, [r7, #4]
 800056a:	2b4d      	cmp	r3, #77	; 0x4d
 800056c:	d123      	bne.n	80005b6 <main+0xf6>
			if (CDCrx[1] == '3') {
 800056e:	797b      	ldrb	r3, [r7, #5]
 8000570:	2b33      	cmp	r3, #51	; 0x33
 8000572:	d10e      	bne.n	8000592 <main+0xd2>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2102      	movs	r1, #2
 8000578:	4820      	ldr	r0, [pc, #128]	; (80005fc <main+0x13c>)
 800057a:	f001 fc0d 	bl	8001d98 <HAL_GPIO_WritePin>
				spindleFWD(&huart3);
 800057e:	4820      	ldr	r0, [pc, #128]	; (8000600 <main+0x140>)
 8000580:	f000 fac0 	bl	8000b04 <spindleFWD>
				CDC_Transmit_FS(onStat, 3);
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2103      	movs	r1, #3
 800058a:	4618      	mov	r0, r3
 800058c:	f006 fe00 	bl	8007190 <CDC_Transmit_FS>
 8000590:	e027      	b.n	80005e2 <main+0x122>
			} else if (CDCrx[1] == '5') {
 8000592:	797b      	ldrb	r3, [r7, #5]
 8000594:	2b35      	cmp	r3, #53	; 0x35
 8000596:	d124      	bne.n	80005e2 <main+0x122>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2102      	movs	r1, #2
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0x13c>)
 800059e:	f001 fbfb 	bl	8001d98 <HAL_GPIO_WritePin>
				spindleOff(&huart3);
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x140>)
 80005a4:	f000 fad6 	bl	8000b54 <spindleOff>
				CDC_Transmit_FS(offStat, 3);
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	2103      	movs	r1, #3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 fdee 	bl	8007190 <CDC_Transmit_FS>
 80005b4:	e015      	b.n	80005e2 <main+0x122>
			}

		}
		else if (CDCrx[0] == 'S') {
 80005b6:	793b      	ldrb	r3, [r7, #4]
 80005b8:	2b53      	cmp	r3, #83	; 0x53
 80005ba:	d112      	bne.n	80005e2 <main+0x122>
			HAL_Delay(100);
 80005bc:	2064      	movs	r0, #100	; 0x64
 80005be:	f000 fdbb 	bl	8001138 <HAL_Delay>
//
//					HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
//					break;
//				}
//			}
			CDCrx[7] = NULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	72fb      	strb	r3, [r7, #11]
			//rounddown ok
			rpm = atoi(CDCrxPtr1)/3;
 80005c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80005c8:	f007 fa3e 	bl	8007a48 <atoi>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <main+0x144>)
 80005d0:	fb82 1203 	smull	r1, r2, r2, r3
 80005d4:	17db      	asrs	r3, r3, #31
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
			setFreq(rpm, &huart3);
 80005da:	4909      	ldr	r1, [pc, #36]	; (8000600 <main+0x140>)
 80005dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80005de:	f000 fae1 	bl	8000ba4 <setFreq>
		} else {

		}

		CDCrx[0] = 'a';
 80005e2:	2361      	movs	r3, #97	; 0x61
 80005e4:	713b      	strb	r3, [r7, #4]
		CDC_Receive_FS(CDCrx, &x);
 80005e6:	e7b6      	b.n	8000556 <main+0x96>
 80005e8:	08007bf4 	.word	0x08007bf4
 80005ec:	08007bf8 	.word	0x08007bf8
 80005f0:	08007bfc 	.word	0x08007bfc
 80005f4:	08007c00 	.word	0x08007c00
 80005f8:	08007be8 	.word	0x08007be8
 80005fc:	40020800 	.word	0x40020800
 8000600:	2000042c 	.word	0x2000042c
 8000604:	55555556 	.word	0x55555556

08000608 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f007 fa44 	bl	8007aa4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800067c:	23a8      	movs	r3, #168	; 0xa8
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fd1f 	bl	80030d0 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
		Error_Handler();
 8000698:	f000 f9ee 	bl	8000a78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2105      	movs	r1, #5
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 ff80 	bl	80035c0 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc2>
		Error_Handler();
 80006c6:	f000 f9d7 	bl	8000a78 <Error_Handler>
	}
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC2_Init+0x98>)
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <MX_ADC2_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC2_Init+0x98>)
 80006f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fa:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ADC2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC2_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ADC2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC2_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_ADC2_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_ADC2_Init+0x98>)
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_ADC2_Init+0xa0>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC2_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_ADC2_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ADC2_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC2_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_ADC2_Init+0x98>)
 800073e:	f000 fd1f 	bl	8001180 <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC2_Init+0x70>
		Error_Handler();
 8000748:	f000 f996 	bl	8000a78 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800074c:	2301      	movs	r3, #1
 800074e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000758:	463b      	mov	r3, r7
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_ADC2_Init+0x98>)
 800075e:	f000 fd53 	bl	8001208 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC2_Init+0x90>
		Error_Handler();
 8000768:	f000 f986 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000470 	.word	0x20000470
 8000778:	40012100 	.word	0x40012100
 800077c:	0f000001 	.word	0x0f000001

08000780 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_ADC3_Init+0x98>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_ADC3_Init+0x9c>)
 8000796:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC3_Init+0x98>)
 800079a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079e:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_ADC3_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC3_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_ADC3_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC3_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC3_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC3_Init+0x98>)
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_ADC3_Init+0xa0>)
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC3_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC3_Init+0x98>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_ADC3_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC3_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_ADC3_Init+0x98>)
 80007e2:	f000 fccd 	bl	8001180 <HAL_ADC_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC3_Init+0x70>
		Error_Handler();
 80007ec:	f000 f944 	bl	8000a78 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80007f0:	2303      	movs	r3, #3
 80007f2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80007fc:	463b      	mov	r3, r7
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC3_Init+0x98>)
 8000802:	f000 fd01 	bl	8001208 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC3_Init+0x90>
		Error_Handler();
 800080c:	f000 f934 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200004e0 	.word	0x200004e0
 800081c:	40012200 	.word	0x40012200
 8000820:	0f000001 	.word	0x0f000001

08000824 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_CAN2_Init+0x60>)
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_CAN2_Init+0x64>)
 800082c:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 16;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_CAN2_Init+0x60>)
 8000830:	2210      	movs	r2, #16
 8000832:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_CAN2_Init+0x60>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_CAN2_Init+0x60>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_CAN2_Init+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_CAN2_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_CAN2_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_CAN2_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_CAN2_Init+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_CAN2_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_CAN2_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_CAN2_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_CAN2_Init+0x60>)
 8000872:	f000 fee7 	bl	8001644 <HAL_CAN_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_CAN2_Init+0x5c>
		Error_Handler();
 800087c:	f000 f8fc 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200004b8 	.word	0x200004b8
 8000888:	40006800 	.word	0x40006800

0800088c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI1_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_SPI1_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008bc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008d8:	220a      	movs	r2, #10
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008de:	f003 f869 	bl	80039b4 <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI1_Init+0x60>
		Error_Handler();
 80008e8:	f000 f8c6 	bl	8000a78 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000528 	.word	0x20000528
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END   USART3_Init 1 */

	huart3.Instance = USART3;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART3_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x4c>)
 8000930:	f003 f8c9 	bl	8003ac6 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800093a:	f000 f89d 	bl	8000a78 <Error_Handler>

	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END   USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000042c 	.word	0x2000042c
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a3f      	ldr	r2, [pc, #252]	; (8000a68 <MX_GPIO_Init+0x11c>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MX_GPIO_Init+0x11c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_GPIO_Init+0x11c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2102      	movs	r1, #2
 80009f2:	481e      	ldr	r0, [pc, #120]	; (8000a6c <MX_GPIO_Init+0x120>)
 80009f4:	f001 f9d0 	bl	8001d98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2102      	movs	r1, #2
 80009fc:	481c      	ldr	r0, [pc, #112]	; (8000a70 <MX_GPIO_Init+0x124>)
 80009fe:	f001 f9cb 	bl	8001d98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000a02:	2200      	movs	r2, #0
 8000a04:	211f      	movs	r1, #31
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x128>)
 8000a08:	f001 f9c6 	bl	8001d98 <HAL_GPIO_WritePin>
	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0x120>)
 8000a24:	f001 f81c 	bl	8001a60 <HAL_GPIO_Init>

	/*Configure GPIO pin : RS485EN_Pin */
	GPIO_InitStruct.Pin = RS485EN_Pin;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RS485EN_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0x124>)
 8000a40:	f001 f80e 	bl	8001a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
	 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000a44:	231f      	movs	r3, #31
 8000a46:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_GPIO_Init+0x128>)
 8000a5c:	f001 f800 	bl	8001a60 <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <sendData8>:

uint8_t wrMsg[] = { 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 };

uint8_t check[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

void sendData8(UART_HandleTypeDef *huart) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2102      	movs	r1, #2
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <sendData8+0x3c>)
 8000a92:	f001 f981 	bl	8001d98 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f000 fb4e 	bl	8001138 <HAL_Delay>
	//blocking transmit 10ms timeout
	HAL_UART_Transmit(huart, wrMsg, 8, 10);
 8000a9c:	230a      	movs	r3, #10
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <sendData8+0x40>)
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f003 f85c 	bl	8003b60 <HAL_UART_Transmit>
	HAL_Delay(5);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f000 fb45 	bl	8001138 <HAL_Delay>
	HAL_GPIO_WritePin(RS485EN_GPIO_Port, RS485EN_Pin, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <sendData8+0x3c>)
 8000ab4:	f001 f970 	bl	8001d98 <HAL_GPIO_WritePin>

}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <appendCRC8>:

void clearSer() {
	//TODO
}

void appendCRC8() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	uint16_t crc = crc_chk_value(wrMsg, 6);
 8000ace:	2106      	movs	r1, #6
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <appendCRC8+0x38>)
 8000ad2:	f000 f895 	bl	8000c00 <crc_chk_value>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	807b      	strh	r3, [r7, #2]

	//change to 8 bit pointer so we can separate the data
	uint8_t *crcValPtr = (uint8_t*) &crc;
 8000adc:	1cbb      	adds	r3, r7, #2
 8000ade:	607b      	str	r3, [r7, #4]

	//write first byte
	wrMsg[6] = *crcValPtr;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <appendCRC8+0x38>)
 8000ae6:	719a      	strb	r2, [r3, #6]
	crcValPtr++;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
	//write second byte
	wrMsg[7] = *crcValPtr;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <appendCRC8+0x38>)
 8000af4:	71da      	strb	r2, [r3, #7]
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000000 	.word	0x20000000

08000b04 <spindleFWD>:
//  curData |= byteBuffer[4];
//
//  return curData;
}

void spindleFWD(UART_HandleTypeDef *huart) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <spindleFWD+0x4c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <spindleFWD+0x4c>)
 8000b14:	2206      	movs	r2, #6
 8000b16:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <spindleFWD+0x4c>)
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <spindleFWD+0x4c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <spindleFWD+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x01;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <spindleFWD+0x4c>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <spindleFWD+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <spindleFWD+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000b3c:	f7ff ffc4 	bl	8000ac8 <appendCRC8>

	sendData8(huart);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff9f 	bl	8000a84 <sendData8>
	//checkEcho8();
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000

08000b54 <spindleOff>:

void spindleOff(UART_HandleTypeDef *huart) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

	wrMsg[0] = 0x01;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <spindleOff+0x4c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <spindleOff+0x4c>)
 8000b64:	2206      	movs	r2, #6
 8000b66:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <spindleOff+0x4c>)
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x01;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <spindleOff+0x4c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = 0x00;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <spindleOff+0x4c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = 0x03;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <spindleOff+0x4c>)
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <spindleOff+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <spindleOff+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000b8c:	f7ff ff9c 	bl	8000ac8 <appendCRC8>

	sendData8(huart);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff77 	bl	8000a84 <sendData8>

	//checkEcho8();
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <setFreq>:

void setFreq(uint16_t freq, UART_HandleTypeDef *huart) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	80fb      	strh	r3, [r7, #6]
	wrMsg[0] = 0x01;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <setFreq+0x58>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	wrMsg[1] = 0x06;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <setFreq+0x58>)
 8000bb8:	2206      	movs	r2, #6
 8000bba:	705a      	strb	r2, [r3, #1]
	wrMsg[2] = 0x10;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <setFreq+0x58>)
 8000bbe:	2210      	movs	r2, #16
 8000bc0:	709a      	strb	r2, [r3, #2]
	wrMsg[3] = 0x02;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <setFreq+0x58>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	70da      	strb	r2, [r3, #3]
	wrMsg[4] = (uint8_t) (freq >> 8);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <setFreq+0x58>)
 8000bd2:	711a      	strb	r2, [r3, #4]
	wrMsg[5] = (uint8_t) (freq & 0xFF);
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <setFreq+0x58>)
 8000bda:	715a      	strb	r2, [r3, #5]

	//overwritten by append CRC
	wrMsg[6] = 0x00;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <setFreq+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	719a      	strb	r2, [r3, #6]
	wrMsg[7] = 0x00;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <setFreq+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	71da      	strb	r2, [r3, #7]

	appendCRC8();
 8000be8:	f7ff ff6e 	bl	8000ac8 <appendCRC8>

	sendData8(huart);
 8000bec:	6838      	ldr	r0, [r7, #0]
 8000bee:	f7ff ff49 	bl	8000a84 <sendData8>

	//checkEcho8();
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000

08000c00 <crc_chk_value>:

unsigned int crc_chk_value(uint8_t *data_value, uint8_t length) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_value = 0xFFFF;
 8000c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c10:	81fb      	strh	r3, [r7, #14]
	int i;
	while (length--) {
 8000c12:	e01f      	b.n	8000c54 <crc_chk_value+0x54>
		crc_value ^= *data_value++;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	89fb      	ldrh	r3, [r7, #14]
 8000c20:	4053      	eors	r3, r2
 8000c22:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	e011      	b.n	8000c4e <crc_chk_value+0x4e>
			if (crc_value & 0x0001)
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <crc_chk_value+0x42>
				crc_value = (crc_value >> 1) ^ 0xA001;
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <crc_chk_value+0x6c>)
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	81fb      	strh	r3, [r7, #14]
 8000c40:	e002      	b.n	8000c48 <crc_chk_value+0x48>
			else
				crc_value = crc_value >> 1;
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	81fb      	strh	r3, [r7, #14]
		for (i = 0; i < 8; i++) {
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	ddea      	ble.n	8000c2a <crc_chk_value+0x2a>
	while (length--) {
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	1e5a      	subs	r2, r3, #1
 8000c58:	70fa      	strb	r2, [r7, #3]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1da      	bne.n	8000c14 <crc_chk_value+0x14>
		}
	}
	return (crc_value);
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	ffffa001 	.word	0xffffa001

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_ADC_MspInit+0xd8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d128      	bne.n	8000d34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a2c      	ldr	r2, [pc, #176]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a25      	ldr	r2, [pc, #148]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	697b      	ldr	r3, [r7, #20]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d1a:	2306      	movs	r3, #6
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <HAL_ADC_MspInit+0xe0>)
 8000d2e:	f000 fe97 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d32:	e02c      	b.n	8000d8e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	; (8000da4 <HAL_ADC_MspInit+0xe4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d127      	bne.n	8000d8e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_ADC_MspInit+0xdc>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d76:	2308      	movs	r3, #8
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_ADC_MspInit+0xe0>)
 8000d8a:	f000 fe69 	bl	8001a60 <HAL_GPIO_Init>
}
 8000d8e:	bf00      	nop
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40012100 	.word	0x40012100
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40012200 	.word	0x40012200

08000da8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <HAL_CAN_MspInit+0xa0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d13a      	bne.n	8000e40 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000dd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_CAN_MspInit+0xa4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e1e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e30:	2309      	movs	r3, #9
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_CAN_MspInit+0xa8>)
 8000e3c:	f000 fe10 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40006800 	.word	0x40006800
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020400 	.word	0x40020400

08000e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_SPI_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_SPI_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eae:	23f0      	movs	r3, #240	; 0xf0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_SPI_MspInit+0x8c>)
 8000eca:	f000 fdc9 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f50:	2307      	movs	r3, #7
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f5c:	f000 fd80 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020400 	.word	0x40020400

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f89a 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <OTG_FS_IRQHandler+0x10>)
 8000fce:	f001 f84c 	bl	800206a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20001a54 	.word	0x20001a54

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopFillZerobss+0x26>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102a:	f7ff ffd7 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102e:	f006 fd15 	bl	8007a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fa45 	bl	80004c0 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001044:	08007d7c 	.word	0x08007d7c
  ldr r2, =_sbss
 8001048:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800104c:	20001e5c 	.word	0x20001e5c

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 fcad 	bl	80019dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fdf2 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fcc5 	bl	8001a46 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 fc8d 	bl	80019f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000010 	.word	0x20000010
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000010 	.word	0x20000010
 800111c:	20000580 	.word	0x20000580

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000580 	.word	0x20000580

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000010 	.word	0x20000010

08001180 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e033      	b.n	80011fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fd8e 	bl	8000cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c6:	f023 0302 	bic.w	r3, r3, #2
 80011ca:	f043 0202 	orr.w	r2, r3, #2
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f93a 	bl	800144c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f023 0303 	bic.w	r3, r3, #3
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
 80011ee:	e001      	b.n	80011f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1c>
 8001220:	2302      	movs	r3, #2
 8001222:	e105      	b.n	8001430 <HAL_ADC_ConfigChannel+0x228>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d925      	bls.n	8001280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43da      	mvns	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	400a      	ands	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68d9      	ldr	r1, [r3, #12]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	4603      	mov	r3, r0
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4403      	add	r3, r0
 8001272:	3b1e      	subs	r3, #30
 8001274:	409a      	lsls	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	e022      	b.n	80012c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	2207      	movs	r2, #7
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	400a      	ands	r2, r1
 80012a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4403      	add	r3, r0
 80012bc:	409a      	lsls	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d824      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b05      	subs	r3, #5
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	400a      	ands	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b05      	subs	r3, #5
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e04c      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d824      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b23      	subs	r3, #35	; 0x23
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43da      	mvns	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	400a      	ands	r2, r1
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b23      	subs	r3, #35	; 0x23
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
 8001368:	e023      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b41      	subs	r3, #65	; 0x41
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b41      	subs	r3, #65	; 0x41
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_ADC_ConfigChannel+0x234>)
 80013b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_ADC_ConfigChannel+0x238>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_ADC_ConfigChannel+0x238>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d123      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d003      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x1e6>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b11      	cmp	r3, #17
 80013ec:	d11b      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d111      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_ADC_ConfigChannel+0x23c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_ADC_ConfigChannel+0x240>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9a      	lsrs	r2, r3, #18
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001418:	e002      	b.n	8001420 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3b01      	subs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f9      	bne.n	800141a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40012300 	.word	0x40012300
 8001440:	40012000 	.word	0x40012000
 8001444:	20000008 	.word	0x20000008
 8001448:	431bde83 	.word	0x431bde83

0800144c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001454:	4b79      	ldr	r3, [pc, #484]	; (800163c <ADC_Init+0x1f0>)
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	021a      	lsls	r2, r3, #8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6899      	ldr	r1, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	4a58      	ldr	r2, [pc, #352]	; (8001640 <ADC_Init+0x1f4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d022      	beq.n	800152a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e00f      	b.n	800154a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0202 	bic.w	r2, r2, #2
 8001558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
 8001564:	005a      	lsls	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6859      	ldr	r1, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	035a      	lsls	r2, r3, #13
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e007      	b.n	80015c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	3b01      	subs	r3, #1
 80015dc:	051a      	lsls	r2, r3, #20
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001602:	025a      	lsls	r2, r3, #9
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	029a      	lsls	r2, r3, #10
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	0f000001 	.word	0x0f000001

08001644 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0ed      	b.n	8001832 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fba0 	bl	8000da8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0202 	bic.w	r2, r2, #2
 8001676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001678:	f7ff fd52 	bl	8001120 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800167e:	e012      	b.n	80016a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001680:	f7ff fd4e 	bl	8001120 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d90b      	bls.n	80016a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0c5      	b.n	8001832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e5      	bne.n	8001680 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c4:	f7ff fd2c 	bl	8001120 <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ca:	e012      	b.n	80016f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016cc:	f7ff fd28 	bl	8001120 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d90b      	bls.n	80016f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2205      	movs	r2, #5
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e09f      	b.n	8001832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0e5      	beq.n	80016cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e1b      	ldrb	r3, [r3, #24]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7e5b      	ldrb	r3, [r3, #25]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e9b      	ldrb	r3, [r3, #26]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0220 	orr.w	r2, r2, #32
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	e007      	b.n	800177e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0220 	bic.w	r2, r2, #32
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7edb      	ldrb	r3, [r3, #27]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e007      	b.n	80017a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0210 	orr.w	r2, r2, #16
 80017a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7f1b      	ldrb	r3, [r3, #28]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0208 	orr.w	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e007      	b.n	80017d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0208 	bic.w	r2, r2, #8
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7f5b      	ldrb	r3, [r3, #29]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d108      	bne.n	80017ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0204 	orr.w	r2, r2, #4
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e007      	b.n	80017fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	431a      	orrs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	ea42 0103 	orr.w	r1, r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	; (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	; (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	; 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	; 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a8:	d301      	bcc.n	80019ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00f      	b.n	80019ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SysTick_Config+0x40>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b6:	210f      	movs	r1, #15
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f7ff ff8e 	bl	80018dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SysTick_Config+0x40>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SysTick_Config+0x40>)
 80019c8:	2207      	movs	r2, #7
 80019ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff29 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff3e 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff8e 	bl	8001930 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5d 	bl	80018dc <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff31 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ffa2 	bl	8001998 <SysTick_Config>
 8001a54:	4603      	mov	r3, r0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e16b      	b.n	8001d54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 815a 	bne.w	8001d4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d005      	beq.n	8001ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d130      	bne.n	8001b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 0201 	and.w	r2, r3, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d017      	beq.n	8001b50 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d123      	bne.n	8001ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	69b9      	ldr	r1, [r7, #24]
 8001ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	2203      	movs	r2, #3
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80b4 	beq.w	8001d4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <HAL_GPIO_Init+0x30c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a5f      	ldr	r2, [pc, #380]	; (8001d6c <HAL_GPIO_Init+0x30c>)
 8001bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_GPIO_Init+0x30c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a5b      	ldr	r2, [pc, #364]	; (8001d70 <HAL_GPIO_Init+0x310>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_GPIO_Init+0x314>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02b      	beq.n	8001c86 <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x318>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_GPIO_Init+0x31c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_GPIO_Init+0x320>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_Init+0x21a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <HAL_GPIO_Init+0x324>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_Init+0x216>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <HAL_GPIO_Init+0x328>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x212>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4c      	ldr	r2, [pc, #304]	; (8001d8c <HAL_GPIO_Init+0x32c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_Init+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_GPIO_Init+0x330>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_Init+0x20a>
 8001c66:	2307      	movs	r3, #7
 8001c68:	e00e      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	e00c      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c6e:	2306      	movs	r3, #6
 8001c70:	e00a      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x228>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4935      	ldr	r1, [pc, #212]	; (8001d70 <HAL_GPIO_Init+0x310>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cca:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1e:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_GPIO_Init+0x334>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f ae90 	bls.w	8001a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40021400 	.word	0x40021400
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	40021c00 	.word	0x40021c00
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dcc:	b08f      	sub	sp, #60	; 0x3c
 8001dce:	af0a      	add	r7, sp, #40	; 0x28
 8001dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e10f      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f005 fb12 	bl	8007420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fa59 	bl	80042d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	687e      	ldr	r6, [r7, #4]
 8001e28:	466d      	mov	r5, sp
 8001e2a:	f106 0410 	add.w	r4, r6, #16
 8001e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e3e:	1d33      	adds	r3, r6, #4
 8001e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f002 f930 	bl	80040a8 <USB_CoreInit>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0d0      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fa47 	bl	80042f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]
 8001e6a:	e04a      	b.n	8001f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	333d      	adds	r3, #61	; 0x3d
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	333c      	adds	r3, #60	; 0x3c
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	b298      	uxth	r0, r3
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3342      	adds	r3, #66	; 0x42
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	333f      	adds	r3, #63	; 0x3f
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3344      	adds	r3, #68	; 0x44
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3348      	adds	r3, #72	; 0x48
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3350      	adds	r3, #80	; 0x50
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3301      	adds	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d3af      	bcc.n	8001e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e044      	b.n	8001f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3b5      	bcc.n	8001f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	687e      	ldr	r6, [r7, #4]
 8001fae:	466d      	mov	r5, sp
 8001fb0:	f106 0410 	add.w	r4, r6, #16
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fc4:	1d33      	adds	r3, r6, #4
 8001fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc8:	6838      	ldr	r0, [r7, #0]
 8001fca:	f002 f9bd 	bl	8004348 <USB_DevInit>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e00d      	b.n	8001ffc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fa05 	bl	8005404 <USB_DevDisconnect>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002004 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_PCD_Start+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e020      	b.n	8002062 <HAL_PCD_Start+0x5e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b01      	cmp	r3, #1
 800202e:	d109      	bne.n	8002044 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002034:	2b01      	cmp	r3, #1
 8002036:	d005      	beq.n	8002044 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 f931 	bl	80042b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 f9b5 	bl	80053c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800206a:	b590      	push	{r4, r7, lr}
 800206c:	b08d      	sub	sp, #52	; 0x34
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fa73 	bl	800556c <USB_GetMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 839d 	bne.w	80027c8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 f9d7 	bl	8005446 <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8393 	beq.w	80027c6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 f9ce 	bl	8005446 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d107      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f002 0202 	and.w	r2, r2, #2
 80020c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f003 f9bc 	bl	8005446 <USB_ReadInterrupts>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	d161      	bne.n	800219c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0210 	bic.w	r2, r2, #16
 80020e6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	0c5b      	lsrs	r3, r3, #17
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	2b02      	cmp	r3, #2
 8002112:	d124      	bne.n	800215e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d035      	beq.n	800218c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800212a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	6a38      	ldr	r0, [r7, #32]
 8002134:	f003 f822 	bl	800517c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002144:	441a      	add	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002156:	441a      	add	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	e016      	b.n	800218c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	0c5b      	lsrs	r3, r3, #17
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	2b06      	cmp	r3, #6
 8002168:	d110      	bne.n	800218c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002170:	2208      	movs	r2, #8
 8002172:	4619      	mov	r1, r3
 8002174:	6a38      	ldr	r0, [r7, #32]
 8002176:	f003 f801 	bl	800517c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002186:	441a      	add	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0210 	orr.w	r2, r2, #16
 800219a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f950 	bl	8005446 <USB_ReadInterrupts>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021b0:	d16e      	bne.n	8002290 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 f956 	bl	800546c <USB_ReadDevAllOutEpInterrupt>
 80021c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021c2:	e062      	b.n	800228a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d057      	beq.n	800227e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 f97b 	bl	80054d4 <USB_ReadDevOutEPInterrupt>
 80021de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00c      	beq.n	8002204 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	2301      	movs	r3, #1
 80021fa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fdb0 	bl	8002d64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221a:	461a      	mov	r2, r3
 800221c:	2308      	movs	r3, #8
 800221e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 feaa 	bl	8002f7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	2310      	movs	r3, #16
 8002242:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d008      	beq.n	8002260 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	2320      	movs	r3, #32
 800225e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	461a      	mov	r2, r3
 8002278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d199      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 f8d6 	bl	8005446 <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022a4:	f040 80c0 	bne.w	8002428 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f8f7 	bl	80054a0 <USB_ReadDevAllInEpInterrupt>
 80022b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80022b8:	e0b2      	b.n	8002420 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80a7 	beq.w	8002414 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 f91d 	bl	8005510 <USB_ReadDevInEPInterrupt>
 80022d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d057      	beq.n	8002392 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	2201      	movs	r2, #1
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69f9      	ldr	r1, [r7, #28]
 80022fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002302:	4013      	ands	r3, r2
 8002304:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002312:	461a      	mov	r2, r3
 8002314:	2301      	movs	r3, #1
 8002316:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d132      	bne.n	8002386 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3348      	adds	r3, #72	; 0x48
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4403      	add	r3, r0
 8002340:	3344      	adds	r3, #68	; 0x44
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4419      	add	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4403      	add	r3, r0
 8002354:	3348      	adds	r3, #72	; 0x48
 8002356:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d113      	bne.n	8002386 <HAL_PCD_IRQHandler+0x31c>
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3350      	adds	r3, #80	; 0x50
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d108      	bne.n	8002386 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800237e:	461a      	mov	r2, r3
 8002380:	2101      	movs	r1, #1
 8002382:	f003 f925 	bl	80055d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f005 f8c8 	bl	8007522 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a8:	461a      	mov	r2, r3
 80023aa:	2308      	movs	r3, #8
 80023ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c4:	461a      	mov	r2, r3
 80023c6:	2310      	movs	r3, #16
 80023c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e0:	461a      	mov	r2, r3
 80023e2:	2340      	movs	r3, #64	; 0x40
 80023e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fc:	461a      	mov	r2, r3
 80023fe:	2302      	movs	r3, #2
 8002400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800240c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fc1b 	bl	8002c4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	3301      	adds	r3, #1
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f af49 	bne.w	80022ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 f80a 	bl	8005446 <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800243c:	d122      	bne.n	8002484 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002464:	2100      	movs	r1, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fe26 	bl	80030b8 <HAL_PCDEx_LPM_Callback>
 800246c:	e002      	b.n	8002474 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f005 f8ce 	bl	8007610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 ffdc 	bl	8005446 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002498:	d112      	bne.n	80024c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f005 f88a 	bl	80075c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80024be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 ffbe 	bl	8005446 <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d4:	f040 80c7 	bne.w	8002666 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2110      	movs	r1, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 f88c 	bl	8004610 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fc:	e056      	b.n	80025ac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002510:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	0151      	lsls	r1, r2, #5
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	440a      	add	r2, r1
 8002528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800252c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002530:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	440a      	add	r2, r1
 8002548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800254c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002550:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	461a      	mov	r2, r3
 8002560:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002564:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002576:	0151      	lsls	r1, r2, #5
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	440a      	add	r2, r1
 800257c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002584:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002596:	0151      	lsls	r1, r2, #5
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	440a      	add	r2, r1
 800259c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	3301      	adds	r3, #1
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d3a3      	bcc.n	80024fe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e2:	f043 030b 	orr.w	r3, r3, #11
 80025e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f8:	f043 030b 	orr.w	r3, r3, #11
 80025fc:	6453      	str	r3, [r2, #68]	; 0x44
 80025fe:	e015      	b.n	800262c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800260e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002612:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002616:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002626:	f043 030b 	orr.w	r3, r3, #11
 800262a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800263e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002650:	461a      	mov	r2, r3
 8002652:	f002 ffbd 	bl	80055d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002664:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 feeb 	bl	8005446 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	d124      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 ff81 	bl	8005588 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 f821 	bl	80046d2 <USB_GetDevSpeed>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	f001 f956 	bl	800394c <HAL_RCC_GetHCLKFreq>
 80026a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4620      	mov	r0, r4
 80026ac:	f001 fd5e 	bl	800416c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f004 ff5e 	bl	8007572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 febb 	bl	8005446 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d10a      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f004 ff3b 	bl	8007556 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f002 0208 	and.w	r2, r2, #8
 80026ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fea6 	bl	8005446 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002704:	d10f      	bne.n	8002726 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f004 ff9d 	bl	8007650 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fe8b 	bl	8005446 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273a:	d10f      	bne.n	800275c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f004 ff70 	bl	800762c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800275a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fe70 	bl	8005446 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d10a      	bne.n	8002788 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f004 ff7e 	bl	8007674 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fe5a 	bl	8005446 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d115      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f004 ff6e 	bl	8007690 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	e000      	b.n	80027c8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80027c6:	bf00      	nop
    }
  }
}
 80027c8:	3734      	adds	r7, #52	; 0x34
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}

080027ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_PCD_SetAddress+0x1a>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e013      	b.n	8002810 <HAL_PCD_SetAddress+0x42>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fdb8 	bl	8005376 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	70fb      	strb	r3, [r7, #3]
 800282a:	460b      	mov	r3, r1
 800282c:	803b      	strh	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da0f      	bge.n	800285e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3338      	adds	r3, #56	; 0x38
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	705a      	strb	r2, [r3, #1]
 800285c:	e00f      	b.n	800287e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	f003 020f 	and.w	r2, r3, #15
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	3304      	adds	r3, #4
 8002876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800288a:	883a      	ldrh	r2, [r7, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	78ba      	ldrb	r2, [r7, #2]
 8002894:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028a8:	78bb      	ldrb	r3, [r7, #2]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d102      	bne.n	80028b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_PCD_EP_Open+0xaa>
 80028be:	2302      	movs	r3, #2
 80028c0:	e00e      	b.n	80028e0 <HAL_PCD_EP_Open+0xc8>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 ff23 	bl	800471c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80028de:	7afb      	ldrb	r3, [r7, #11]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da0f      	bge.n	800291c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 020f 	and.w	r2, r3, #15
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	3338      	adds	r3, #56	; 0x38
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	705a      	strb	r2, [r3, #1]
 800291a:	e00f      	b.n	800293c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_PCD_EP_Close+0x6e>
 8002952:	2302      	movs	r3, #2
 8002954:	e00e      	b.n	8002974 <HAL_PCD_EP_Close+0x8c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	4618      	mov	r0, r3
 8002966:	f001 ff61 	bl	800482c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298c:	7afb      	ldrb	r3, [r7, #11]
 800298e:	f003 020f 	and.w	r2, r3, #15
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029be:	7afb      	ldrb	r3, [r7, #11]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6979      	ldr	r1, [r7, #20]
 80029f0:	f002 fa3c 	bl	8004e6c <USB_EP0StartXfer>
 80029f4:	e008      	b.n	8002a08 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6979      	ldr	r1, [r7, #20]
 8002a04:	f001 ffee 	bl	80049e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002a34:	681b      	ldr	r3, [r3, #0]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3338      	adds	r3, #56	; 0x38
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d102      	bne.n	8002a9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	6979      	ldr	r1, [r7, #20]
 8002ab4:	f002 f9da 	bl	8004e6c <USB_EP0StartXfer>
 8002ab8:	e008      	b.n	8002acc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6979      	ldr	r1, [r7, #20]
 8002ac8:	f001 ff8c 	bl	80049e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d901      	bls.n	8002af4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e050      	b.n	8002b96 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	da0f      	bge.n	8002b1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	f003 020f 	and.w	r2, r3, #15
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	3304      	adds	r3, #4
 8002b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	705a      	strb	r2, [r3, #1]
 8002b1a:	e00d      	b.n	8002b38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 030f 	and.w	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_PCD_EP_SetStall+0x82>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e01e      	b.n	8002b96 <HAL_PCD_EP_SetStall+0xc0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fb31 	bl	80051ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10a      	bne.n	8002b8c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	b2d9      	uxtb	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b86:	461a      	mov	r2, r3
 8002b88:	f002 fd22 	bl	80055d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d901      	bls.n	8002bbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e042      	b.n	8002c42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da0f      	bge.n	8002be4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	705a      	strb	r2, [r3, #1]
 8002be2:	e00f      	b.n	8002c04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_PCD_EP_ClrStall+0x86>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e00e      	b.n	8002c42 <HAL_PCD_EP_ClrStall+0xa4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fb39 	bl	80052aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b08a      	sub	sp, #40	; 0x28
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	3338      	adds	r3, #56	; 0x38
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d901      	bls.n	8002c82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06c      	b.n	8002d5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d902      	bls.n	8002c9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ca6:	e02b      	b.n	8002d00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d902      	bls.n	8002cc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	3303      	adds	r3, #3
 8002cc8:	089b      	lsrs	r3, r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f002 fa15 	bl	8005112 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d809      	bhi.n	8002d2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d203      	bcs.n	8002d2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1be      	bne.n	8002ca8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d811      	bhi.n	8002d5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d56:	4013      	ands	r3, r2
 8002d58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	333c      	adds	r3, #60	; 0x3c
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	f040 80a0 	bne.w	8002edc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d015      	beq.n	8002dd2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f240 80dd 	bls.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80d7 	beq.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	e0cb      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	461a      	mov	r2, r3
 8002dea:	2320      	movs	r3, #32
 8002dec:	6093      	str	r3, [r2, #8]
 8002dee:	e0bc      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80b7 	bne.w	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <PCD_EP_OutXfrComplete_int+0x210>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d90f      	bls.n	8002e24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e20:	6093      	str	r3, [r2, #8]
 8002e22:	e0a2      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	0159      	lsls	r1, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002e4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4403      	add	r3, r0
 8002e5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4403      	add	r3, r0
 8002e82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4419      	add	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d114      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x16a>
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2101      	movs	r1, #1
 8002eca:	f002 fb81 	bl	80055d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 fb09 	bl	80074ec <HAL_PCD_DataOutStageCallback>
 8002eda:	e046      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a26      	ldr	r2, [pc, #152]	; (8002f78 <PCD_EP_OutXfrComplete_int+0x214>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d124      	bne.n	8002f2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f00:	6093      	str	r3, [r2, #8]
 8002f02:	e032      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f004 fae0 	bl	80074ec <HAL_PCD_DataOutStageCallback>
 8002f2c:	e01d      	b.n	8002f6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d114      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f56:	461a      	mov	r2, r3
 8002f58:	2100      	movs	r1, #0
 8002f5a:	f002 fb39 	bl	80055d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f004 fac1 	bl	80074ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	4f54300a 	.word	0x4f54300a
 8002f78:	4f54310a 	.word	0x4f54310a

08002f7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	333c      	adds	r3, #60	; 0x3c
 8002f94:	3304      	adds	r3, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d90e      	bls.n	8002fd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc8:	461a      	mov	r2, r3
 8002fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f004 fa79 	bl	80074c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d90c      	bls.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d108      	bne.n	8002ff8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	f002 faec 	bl	80055d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	4f54300a 	.word	0x4f54300a

08003008 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
 8003014:	4613      	mov	r3, r2
 8003016:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003026:	883b      	ldrh	r3, [r7, #0]
 8003028:	0419      	lsls	r1, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	430a      	orrs	r2, r1
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
 8003034:	e028      	b.n	8003088 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4413      	add	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e00d      	b.n	8003066 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	3340      	adds	r3, #64	; 0x40
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	4413      	add	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	3301      	adds	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	3b01      	subs	r3, #1
 800306c:	429a      	cmp	r2, r3
 800306e:	d3ec      	bcc.n	800304a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003070:	883b      	ldrh	r3, [r7, #0]
 8003072:	0418      	lsls	r0, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6819      	ldr	r1, [r3, #0]
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	3b01      	subs	r3, #1
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4302      	orrs	r2, r0
 8003080:	3340      	adds	r3, #64	; 0x40
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	887a      	ldrh	r2, [r7, #2]
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e264      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ee:	4ba3      	ldr	r3, [pc, #652]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4ba0      	ldr	r3, [pc, #640]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003102:	2b08      	cmp	r3, #8
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b9d      	ldr	r3, [pc, #628]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b99      	ldr	r3, [pc, #612]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e23f      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x74>
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a90      	ldr	r2, [pc, #576]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x98>
 800314e:	4b8b      	ldr	r3, [pc, #556]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a8a      	ldr	r2, [pc, #552]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a87      	ldr	r2, [pc, #540]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xb0>
 8003168:	4b84      	ldr	r3, [pc, #528]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b81      	ldr	r3, [pc, #516]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a80      	ldr	r2, [pc, #512]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd ffca 	bl	8001120 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fd ffc6 	bl	8001120 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e204      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b76      	ldr	r3, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xc0>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd ffb6 	bl	8001120 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fd ffb2 	bl	8001120 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1f0      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b6c      	ldr	r3, [pc, #432]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0xe8>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d063      	beq.n	80032ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031e6:	4b65      	ldr	r3, [pc, #404]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f2:	4b62      	ldr	r3, [pc, #392]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d11c      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b5f      	ldr	r3, [pc, #380]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d116      	bne.n	8003238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	4b5c      	ldr	r3, [pc, #368]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d001      	beq.n	8003222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e1c4      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4952      	ldr	r1, [pc, #328]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e03a      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003240:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd ff6b 	bl	8001120 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd ff67 	bl	8001120 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e1a5      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	4b46      	ldr	r3, [pc, #280]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4940      	ldr	r1, [pc, #256]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	4313      	orrs	r3, r2
 800327e:	600b      	str	r3, [r1, #0]
 8003280:	e015      	b.n	80032ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <HAL_RCC_OscConfig+0x2b0>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fd ff4a 	bl	8001120 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fd ff46 	bl	8001120 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e184      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d030      	beq.n	800331c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c2:	4b30      	ldr	r3, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd ff2a 	bl	8001120 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd ff26 	bl	8001120 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e164      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x200>
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x2b4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fd ff13 	bl	8001120 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032fe:	f7fd ff0f 	bl	8001120 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e14d      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003310:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f0      	bne.n	80032fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a0 	beq.w	800346a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_RCC_OscConfig+0x2ac>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d121      	bne.n	80033aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_RCC_OscConfig+0x2b8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fd fed5 	bl	8001120 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e011      	b.n	800339e <HAL_RCC_OscConfig+0x2ce>
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	42470000 	.word	0x42470000
 8003384:	42470e80 	.word	0x42470e80
 8003388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fec8 	bl	8001120 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e106      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x4e4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x2f0>
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a80      	ldr	r2, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e01c      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b05      	cmp	r3, #5
 80033c6:	d10c      	bne.n	80033e2 <HAL_RCC_OscConfig+0x312>
 80033c8:	4b7b      	ldr	r3, [pc, #492]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6713      	str	r3, [r2, #112]	; 0x70
 80033e0:	e00b      	b.n	80033fa <HAL_RCC_OscConfig+0x32a>
 80033e2:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d015      	beq.n	800342e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fe8d 	bl	8001120 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd fe89 	bl	8001120 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0c5      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ee      	beq.n	800340a <HAL_RCC_OscConfig+0x33a>
 800342c:	e014      	b.n	8003458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fd fe77 	bl	8001120 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7fd fe73 	bl	8001120 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0af      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ee      	bne.n	8003436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003458:	7dfb      	ldrb	r3, [r7, #23]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d105      	bne.n	800346a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	4a55      	ldr	r2, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 809b 	beq.w	80035aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d05c      	beq.n	800353a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d141      	bne.n	800350c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd fe47 	bl	8001120 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003496:	f7fd fe43 	bl	8001120 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e081      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a8:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	019b      	lsls	r3, r3, #6
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fe1c 	bl	8001120 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fe18 	bl	8001120 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e056      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x41c>
 800350a:	e04e      	b.n	80035aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x4ec>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003512:	f7fd fe05 	bl	8001120 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	f7fd fe01 	bl	8001120 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e03f      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
 8003538:	e037      	b.n	80035aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e032      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003546:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <HAL_RCC_OscConfig+0x4e8>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d028      	beq.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d11a      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800357c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800357e:	4293      	cmp	r3, r2
 8003580:	d111      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	085b      	lsrs	r3, r3, #1
 800358e:	3b01      	subs	r3, #1
 8003590:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40007000 	.word	0x40007000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470060 	.word	0x42470060

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0cc      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d90c      	bls.n	80035fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800361e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d119      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	2b03      	cmp	r3, #3
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368e:	4b3b      	ldr	r3, [pc, #236]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e067      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0203 	bic.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4934      	ldr	r1, [pc, #208]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b0:	f7fd fd36 	bl	8001120 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b8:	f7fd fd32 	bl	8001120 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e04f      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	4b2b      	ldr	r3, [pc, #172]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 020c 	and.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1eb      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d20c      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1c0>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fc96 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023c00 	.word	0x40023c00
 800377c:	40023800 	.word	0x40023800
 8003780:	08007c50 	.word	0x08007c50
 8003784:	20000008 	.word	0x20000008
 8003788:	2000000c 	.word	0x2000000c

0800378c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	2300      	movs	r3, #0
 800379e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a4:	4b67      	ldr	r3, [pc, #412]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d00d      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	f200 80bd 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037be:	e0b7      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037c2:	60bb      	str	r3, [r7, #8]
       break;
 80037c4:	e0b7      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c6:	4b60      	ldr	r3, [pc, #384]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037c8:	60bb      	str	r3, [r7, #8]
      break;
 80037ca:	e0b4      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	4b5d      	ldr	r3, [pc, #372]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04d      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e2:	4b58      	ldr	r3, [pc, #352]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	461a      	mov	r2, r3
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	ea02 0800 	and.w	r8, r2, r0
 80037fa:	ea03 0901 	and.w	r9, r3, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	014b      	lsls	r3, r1, #5
 800380c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003810:	0142      	lsls	r2, r0, #5
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	ebb0 0008 	subs.w	r0, r0, r8
 800381a:	eb61 0109 	sbc.w	r1, r1, r9
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	018b      	lsls	r3, r1, #6
 8003828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800382c:	0182      	lsls	r2, r0, #6
 800382e:	1a12      	subs	r2, r2, r0
 8003830:	eb63 0301 	sbc.w	r3, r3, r1
 8003834:	f04f 0000 	mov.w	r0, #0
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	00d9      	lsls	r1, r3, #3
 800383e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003842:	00d0      	lsls	r0, r2, #3
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	eb12 0208 	adds.w	r2, r2, r8
 800384c:	eb43 0309 	adc.w	r3, r3, r9
 8003850:	f04f 0000 	mov.w	r0, #0
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	0299      	lsls	r1, r3, #10
 800385a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800385e:	0290      	lsls	r0, r2, #10
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4610      	mov	r0, r2
 8003866:	4619      	mov	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	f04f 0300 	mov.w	r3, #0
 8003870:	f7fc fcaa 	bl	80001c8 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e04a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b31      	ldr	r3, [pc, #196]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	461a      	mov	r2, r3
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	ea02 0400 	and.w	r4, r2, r0
 8003896:	ea03 0501 	and.w	r5, r3, r1
 800389a:	4620      	mov	r0, r4
 800389c:	4629      	mov	r1, r5
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	014b      	lsls	r3, r1, #5
 80038a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038ac:	0142      	lsls	r2, r0, #5
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	1b00      	subs	r0, r0, r4
 80038b4:	eb61 0105 	sbc.w	r1, r1, r5
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	018b      	lsls	r3, r1, #6
 80038c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038c6:	0182      	lsls	r2, r0, #6
 80038c8:	1a12      	subs	r2, r2, r0
 80038ca:	eb63 0301 	sbc.w	r3, r3, r1
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	00d9      	lsls	r1, r3, #3
 80038d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038dc:	00d0      	lsls	r0, r2, #3
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	1912      	adds	r2, r2, r4
 80038e4:	eb45 0303 	adc.w	r3, r5, r3
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0299      	lsls	r1, r3, #10
 80038f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038f6:	0290      	lsls	r0, r2, #10
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	f7fc fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	60bb      	str	r3, [r7, #8]
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003932:	60bb      	str	r3, [r7, #8]
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	68bb      	ldr	r3, [r7, #8]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000008 	.word	0x20000008

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08007c60 	.word	0x08007c60

0800398c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003990:	f7ff ffdc 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0b5b      	lsrs	r3, r3, #13
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08007c60 	.word	0x08007c60

080039b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e07b      	b.n	8003abe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d108      	bne.n	80039e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d6:	d009      	beq.n	80039ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
 80039de:	e005      	b.n	80039ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fa24 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	ea42 0103 	orr.w	r1, r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	f003 0104 	and.w	r1, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	f003 0210 	and.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e03f      	b.n	8003b58 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fd f9f9 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2224      	movs	r2, #36	; 0x24
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f904 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d17c      	bne.n	8003c7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_UART_Transmit+0x2c>
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e075      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x3e>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e06e      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2221      	movs	r2, #33	; 0x21
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fab4 	bl	8001120 <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d108      	bne.n	8003be2 <HAL_UART_Transmit+0x82>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d104      	bne.n	8003be2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e003      	b.n	8003bea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bf2:	e02a      	b.n	8003c4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f840 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e036      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	3302      	adds	r3, #2
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e007      	b.n	8003c3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1cf      	bne.n	8003bf4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2140      	movs	r1, #64	; 0x40
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f810 	bl	8003c84 <UART_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c94:	e02c      	b.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d028      	beq.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca4:	f7fd fa3c 	bl	8001120 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d21d      	bcs.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cc2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e00f      	b.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d0c3      	beq.n	8003c96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1c:	b09f      	sub	sp, #124	; 0x7c
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2e:	68d9      	ldr	r1, [r3, #12]
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	ea40 0301 	orr.w	r3, r0, r1
 8003d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d5c:	f021 010c 	bic.w	r1, r1, #12
 8003d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d76:	6999      	ldr	r1, [r3, #24]
 8003d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	ea40 0301 	orr.w	r3, r0, r1
 8003d80:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4bc5      	ldr	r3, [pc, #788]	; (800409c <UART_SetConfig+0x384>)
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d004      	beq.n	8003d96 <UART_SetConfig+0x7e>
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4bc3      	ldr	r3, [pc, #780]	; (80040a0 <UART_SetConfig+0x388>)
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d103      	bne.n	8003d9e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d96:	f7ff fdf9 	bl	800398c <HAL_RCC_GetPCLK2Freq>
 8003d9a:	6778      	str	r0, [r7, #116]	; 0x74
 8003d9c:	e002      	b.n	8003da4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f7ff fde1 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8003da2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	f040 80b6 	bne.w	8003f1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db2:	461c      	mov	r4, r3
 8003db4:	f04f 0500 	mov.w	r5, #0
 8003db8:	4622      	mov	r2, r4
 8003dba:	462b      	mov	r3, r5
 8003dbc:	1891      	adds	r1, r2, r2
 8003dbe:	6439      	str	r1, [r7, #64]	; 0x40
 8003dc0:	415b      	adcs	r3, r3
 8003dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dc8:	1912      	adds	r2, r2, r4
 8003dca:	eb45 0303 	adc.w	r3, r5, r3
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	00d9      	lsls	r1, r3, #3
 8003dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ddc:	00d0      	lsls	r0, r2, #3
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	1911      	adds	r1, r2, r4
 8003de4:	6639      	str	r1, [r7, #96]	; 0x60
 8003de6:	416b      	adcs	r3, r5
 8003de8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e04:	f7fc f9e0 	bl	80001c8 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4ba5      	ldr	r3, [pc, #660]	; (80040a4 <UART_SetConfig+0x38c>)
 8003e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	011e      	lsls	r6, r3, #4
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	461c      	mov	r4, r3
 8003e1a:	f04f 0500 	mov.w	r5, #0
 8003e1e:	4622      	mov	r2, r4
 8003e20:	462b      	mov	r3, r5
 8003e22:	1891      	adds	r1, r2, r2
 8003e24:	6339      	str	r1, [r7, #48]	; 0x30
 8003e26:	415b      	adcs	r3, r3
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e2e:	1912      	adds	r2, r2, r4
 8003e30:	eb45 0303 	adc.w	r3, r5, r3
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	00d9      	lsls	r1, r3, #3
 8003e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e42:	00d0      	lsls	r0, r2, #3
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	1911      	adds	r1, r2, r4
 8003e4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e4c:	416b      	adcs	r3, r5
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	1891      	adds	r1, r2, r2
 8003e5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e5e:	415b      	adcs	r3, r3
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e6a:	f7fc f9ad 	bl	80001c8 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <UART_SetConfig+0x38c>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	; 0x32
 8003e86:	4a87      	ldr	r2, [pc, #540]	; (80040a4 <UART_SetConfig+0x38c>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e94:	441e      	add	r6, r3
 8003e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	1894      	adds	r4, r2, r2
 8003ea4:	623c      	str	r4, [r7, #32]
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eae:	1812      	adds	r2, r2, r0
 8003eb0:	eb41 0303 	adc.w	r3, r1, r3
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	f04f 0500 	mov.w	r5, #0
 8003ebc:	00dd      	lsls	r5, r3, #3
 8003ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ec2:	00d4      	lsls	r4, r2, #3
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	1814      	adds	r4, r2, r0
 8003eca:	653c      	str	r4, [r7, #80]	; 0x50
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	1891      	adds	r1, r2, r2
 8003edc:	61b9      	str	r1, [r7, #24]
 8003ede:	415b      	adcs	r3, r3
 8003ee0:	61fb      	str	r3, [r7, #28]
 8003ee2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003eea:	f7fc f96d 	bl	80001c8 <__aeabi_uldivmod>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4b6c      	ldr	r3, [pc, #432]	; (80040a4 <UART_SetConfig+0x38c>)
 8003ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	2164      	movs	r1, #100	; 0x64
 8003efc:	fb01 f303 	mul.w	r3, r1, r3
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	3332      	adds	r3, #50	; 0x32
 8003f06:	4a67      	ldr	r2, [pc, #412]	; (80040a4 <UART_SetConfig+0x38c>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	f003 0207 	and.w	r2, r3, #7
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4432      	add	r2, r6
 8003f18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f1a:	e0b9      	b.n	8004090 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1e:	461c      	mov	r4, r3
 8003f20:	f04f 0500 	mov.w	r5, #0
 8003f24:	4622      	mov	r2, r4
 8003f26:	462b      	mov	r3, r5
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	6139      	str	r1, [r7, #16]
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f34:	1912      	adds	r2, r2, r4
 8003f36:	eb45 0303 	adc.w	r3, r5, r3
 8003f3a:	f04f 0000 	mov.w	r0, #0
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	00d9      	lsls	r1, r3, #3
 8003f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f48:	00d0      	lsls	r0, r2, #3
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	eb12 0804 	adds.w	r8, r2, r4
 8003f52:	eb43 0905 	adc.w	r9, r3, r5
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	008b      	lsls	r3, r1, #2
 8003f6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f6e:	0082      	lsls	r2, r0, #2
 8003f70:	4640      	mov	r0, r8
 8003f72:	4649      	mov	r1, r9
 8003f74:	f7fc f928 	bl	80001c8 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <UART_SetConfig+0x38c>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011e      	lsls	r6, r3, #4
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f04f 0100 	mov.w	r1, #0
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	1894      	adds	r4, r2, r2
 8003f94:	60bc      	str	r4, [r7, #8]
 8003f96:	415b      	adcs	r3, r3
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f9e:	1812      	adds	r2, r2, r0
 8003fa0:	eb41 0303 	adc.w	r3, r1, r3
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	f04f 0500 	mov.w	r5, #0
 8003fac:	00dd      	lsls	r5, r3, #3
 8003fae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fb2:	00d4      	lsls	r4, r2, #3
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	1814      	adds	r4, r2, r0
 8003fba:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fbc:	414b      	adcs	r3, r1
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	008b      	lsls	r3, r1, #2
 8003fd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fd8:	0082      	lsls	r2, r0, #2
 8003fda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fde:	f7fc f8f3 	bl	80001c8 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	; (80040a4 <UART_SetConfig+0x38c>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	; 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	3332      	adds	r3, #50	; 0x32
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <UART_SetConfig+0x38c>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004006:	441e      	add	r6, r3
 8004008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400a:	4618      	mov	r0, r3
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	1894      	adds	r4, r2, r2
 8004016:	603c      	str	r4, [r7, #0]
 8004018:	415b      	adcs	r3, r3
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004020:	1812      	adds	r2, r2, r0
 8004022:	eb41 0303 	adc.w	r3, r1, r3
 8004026:	f04f 0400 	mov.w	r4, #0
 800402a:	f04f 0500 	mov.w	r5, #0
 800402e:	00dd      	lsls	r5, r3, #3
 8004030:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004034:	00d4      	lsls	r4, r2, #3
 8004036:	4622      	mov	r2, r4
 8004038:	462b      	mov	r3, r5
 800403a:	eb12 0a00 	adds.w	sl, r2, r0
 800403e:	eb43 0b01 	adc.w	fp, r3, r1
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4618      	mov	r0, r3
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800405a:	0082      	lsls	r2, r0, #2
 800405c:	4650      	mov	r0, sl
 800405e:	4659      	mov	r1, fp
 8004060:	f7fc f8b2 	bl	80001c8 <__aeabi_uldivmod>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <UART_SetConfig+0x38c>)
 800406a:	fba3 1302 	umull	r1, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2164      	movs	r1, #100	; 0x64
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <UART_SetConfig+0x38c>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4432      	add	r2, r6
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	bf00      	nop
 8004092:	377c      	adds	r7, #124	; 0x7c
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409a:	bf00      	nop
 800409c:	40011000 	.word	0x40011000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040a8:	b084      	sub	sp, #16
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	f107 001c 	add.w	r0, r7, #28
 80040b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d122      	bne.n	8004106 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f001 fac6 	bl	800568c <USB_CoreReset>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]
 8004104:	e01a      	b.n	800413c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f001 faba 	bl	800568c <USB_CoreReset>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800411c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
 800412e:	e005      	b.n	800413c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10b      	bne.n	800415a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f043 0206 	orr.w	r2, r3, #6
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004166:	b004      	add	sp, #16
 8004168:	4770      	bx	lr
	...

0800416c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	4613      	mov	r3, r2
 8004178:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d165      	bne.n	800424c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4a41      	ldr	r2, [pc, #260]	; (8004288 <USB_SetTurnaroundTime+0x11c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d906      	bls.n	8004196 <USB_SetTurnaroundTime+0x2a>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a40      	ldr	r2, [pc, #256]	; (800428c <USB_SetTurnaroundTime+0x120>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d202      	bcs.n	8004196 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004190:	230f      	movs	r3, #15
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e062      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4a3c      	ldr	r2, [pc, #240]	; (800428c <USB_SetTurnaroundTime+0x120>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d306      	bcc.n	80041ac <USB_SetTurnaroundTime+0x40>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <USB_SetTurnaroundTime+0x124>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d202      	bcs.n	80041ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041a6:	230e      	movs	r3, #14
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e057      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4a38      	ldr	r2, [pc, #224]	; (8004290 <USB_SetTurnaroundTime+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d306      	bcc.n	80041c2 <USB_SetTurnaroundTime+0x56>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a37      	ldr	r2, [pc, #220]	; (8004294 <USB_SetTurnaroundTime+0x128>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d202      	bcs.n	80041c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041bc:	230d      	movs	r3, #13
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e04c      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4a33      	ldr	r2, [pc, #204]	; (8004294 <USB_SetTurnaroundTime+0x128>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d306      	bcc.n	80041d8 <USB_SetTurnaroundTime+0x6c>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a32      	ldr	r2, [pc, #200]	; (8004298 <USB_SetTurnaroundTime+0x12c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041d2:	230c      	movs	r3, #12
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e041      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <USB_SetTurnaroundTime+0x12c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d906      	bls.n	80041ee <USB_SetTurnaroundTime+0x82>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a2e      	ldr	r2, [pc, #184]	; (800429c <USB_SetTurnaroundTime+0x130>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d802      	bhi.n	80041ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041e8:	230b      	movs	r3, #11
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e036      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4a2a      	ldr	r2, [pc, #168]	; (800429c <USB_SetTurnaroundTime+0x130>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d906      	bls.n	8004204 <USB_SetTurnaroundTime+0x98>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <USB_SetTurnaroundTime+0x134>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d802      	bhi.n	8004204 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041fe:	230a      	movs	r3, #10
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e02b      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <USB_SetTurnaroundTime+0x134>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d906      	bls.n	800421a <USB_SetTurnaroundTime+0xae>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <USB_SetTurnaroundTime+0x138>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d202      	bcs.n	800421a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004214:	2309      	movs	r3, #9
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e020      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <USB_SetTurnaroundTime+0x138>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d306      	bcc.n	8004230 <USB_SetTurnaroundTime+0xc4>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <USB_SetTurnaroundTime+0x13c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d802      	bhi.n	8004230 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800422a:	2308      	movs	r3, #8
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e015      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <USB_SetTurnaroundTime+0x13c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d906      	bls.n	8004246 <USB_SetTurnaroundTime+0xda>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <USB_SetTurnaroundTime+0x140>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d202      	bcs.n	8004246 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004240:	2307      	movs	r3, #7
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	e00a      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004246:	2306      	movs	r3, #6
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e007      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004252:	2309      	movs	r3, #9
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	e001      	b.n	800425c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004258:	2309      	movs	r3, #9
 800425a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	029b      	lsls	r3, r3, #10
 8004270:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	00d8acbf 	.word	0x00d8acbf
 800428c:	00e4e1c0 	.word	0x00e4e1c0
 8004290:	00f42400 	.word	0x00f42400
 8004294:	01067380 	.word	0x01067380
 8004298:	011a499f 	.word	0x011a499f
 800429c:	01312cff 	.word	0x01312cff
 80042a0:	014ca43f 	.word	0x014ca43f
 80042a4:	016e3600 	.word	0x016e3600
 80042a8:	01a6ab1f 	.word	0x01a6ab1f
 80042ac:	01e84800 	.word	0x01e84800

080042b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d106      	bne.n	8004320 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	e00b      	b.n	8004338 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	e001      	b.n	8004338 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e003      	b.n	8004340 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004338:	2032      	movs	r0, #50	; 0x32
 800433a:	f7fc fefd 	bl	8001138 <HAL_Delay>

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004348:	b084      	sub	sp, #16
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	e009      	b.n	800437c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3340      	adds	r3, #64	; 0x40
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	2200      	movs	r2, #0
 8004374:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3301      	adds	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b0e      	cmp	r3, #14
 8004380:	d9f2      	bls.n	8004368 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11c      	bne.n	80043c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004396:	f043 0302 	orr.w	r3, r3, #2
 800439a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
 80043c0:	e00b      	b.n	80043da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	4619      	mov	r1, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f4:	461a      	mov	r2, r3
 80043f6:	680b      	ldr	r3, [r1, #0]
 80043f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10c      	bne.n	800441a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004406:	2100      	movs	r1, #0
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f949 	bl	80046a0 <USB_SetDevSpeed>
 800440e:	e008      	b.n	8004422 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004410:	2101      	movs	r1, #1
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f944 	bl	80046a0 <USB_SetDevSpeed>
 8004418:	e003      	b.n	8004422 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800441a:	2103      	movs	r1, #3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f93f 	bl	80046a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004422:	2110      	movs	r1, #16
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f8f3 	bl	8004610 <USB_FlushTxFifo>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f911 	bl	800465c <USB_FlushRxFifo>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004456:	461a      	mov	r2, r3
 8004458:	2300      	movs	r3, #0
 800445a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e043      	b.n	80044f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004484:	d118      	bne.n	80044b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	461a      	mov	r2, r3
 800449a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e013      	b.n	80044ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e008      	b.n	80044ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	461a      	mov	r2, r3
 80044ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3301      	adds	r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3b7      	bcc.n	800446e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e043      	b.n	800458c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451a:	d118      	bne.n	800454e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e013      	b.n	8004560 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e008      	b.n	8004560 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	2300      	movs	r3, #0
 800455e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	461a      	mov	r2, r3
 800456e:	2300      	movs	r3, #0
 8004570:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004584:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d3b7      	bcc.n	8004504 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f043 0210 	orr.w	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699a      	ldr	r2, [r3, #24]
 80045cc:	4b0f      	ldr	r3, [pc, #60]	; (800460c <USB_DevInit+0x2c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f043 0208 	orr.w	r2, r3, #8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004608:	b004      	add	sp, #16
 800460a:	4770      	bx	lr
 800460c:	803c3800 	.word	0x803c3800

08004610 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <USB_FlushTxFifo+0x48>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b20      	cmp	r3, #32
 8004646:	d0f0      	beq.n	800462a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	00030d40 	.word	0x00030d40

0800465c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2210      	movs	r2, #16
 800466c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <USB_FlushRxFifo+0x40>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e006      	b.n	800468e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d0f0      	beq.n	800466e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	00030d40 	.word	0x00030d40

080046a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b087      	sub	sp, #28
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0306 	and.w	r3, r3, #6
 80046ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80046f2:	2300      	movs	r3, #0
 80046f4:	75fb      	strb	r3, [r7, #23]
 80046f6:	e00a      	b.n	800470e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d002      	beq.n	8004704 <USB_GetDevSpeed+0x32>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b06      	cmp	r3, #6
 8004702:	d102      	bne.n	800470a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004704:	2302      	movs	r3, #2
 8004706:	75fb      	strb	r3, [r7, #23]
 8004708:	e001      	b.n	800470e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800470a:	230f      	movs	r3, #15
 800470c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800470e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d13a      	bne.n	80047ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	b29b      	uxth	r3, r3
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004756:	4313      	orrs	r3, r2
 8004758:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d155      	bne.n	800481c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	78db      	ldrb	r3, [r3, #3]
 800478a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800478c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	059b      	lsls	r3, r3, #22
 8004792:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004794:	4313      	orrs	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	440a      	add	r2, r1
 800479e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e036      	b.n	800481c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b4:	69da      	ldr	r2, [r3, #28]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11a      	bne.n	800481c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	78db      	ldrb	r3, [r3, #3]
 8004800:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004802:	430b      	orrs	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d161      	bne.n	800490c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485e:	d11f      	bne.n	80048a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	0151      	lsls	r1, r2, #5
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	440a      	add	r2, r1
 8004876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800487e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	2101      	movs	r1, #1
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c0:	4013      	ands	r3, r2
 80048c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	b29b      	uxth	r3, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e4:	4013      	ands	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	0159      	lsls	r1, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	4619      	mov	r1, r3
 8004904:	4b35      	ldr	r3, [pc, #212]	; (80049dc <USB_DeactivateEndpoint+0x1b0>)
 8004906:	4013      	ands	r3, r2
 8004908:	600b      	str	r3, [r1, #0]
 800490a:	e060      	b.n	80049ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004922:	d11f      	bne.n	8004964 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004942:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800495e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004962:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	2101      	movs	r1, #1
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	43db      	mvns	r3, r3
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4013      	ands	r3, r2
 8004986:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	2101      	movs	r1, #1
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	43db      	mvns	r3, r3
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a8:	4013      	ands	r3, r2
 80049aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	0159      	lsls	r1, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	440b      	add	r3, r1
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	4619      	mov	r1, r3
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <USB_DeactivateEndpoint+0x1b4>)
 80049ca:	4013      	ands	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	ec337800 	.word	0xec337800
 80049e0:	eff37800 	.word	0xeff37800

080049e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	4613      	mov	r3, r2
 80049f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	f040 815c 	bne.w	8004cbe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d132      	bne.n	8004a74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	0151      	lsls	r1, r2, #5
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	440a      	add	r2, r1
 8004a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6c:	0cdb      	lsrs	r3, r3, #19
 8004a6e:	04db      	lsls	r3, r3, #19
 8004a70:	6113      	str	r3, [r2, #16]
 8004a72:	e074      	b.n	8004b5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	0cdb      	lsrs	r3, r3, #19
 8004a90:	04db      	lsls	r3, r3, #19
 8004a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ab2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6959      	ldr	r1, [r3, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	440b      	add	r3, r1
 8004ad0:	1e59      	subs	r1, r3, #1
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ada:	04d9      	lsls	r1, r3, #19
 8004adc:	4b9d      	ldr	r3, [pc, #628]	; (8004d54 <USB_EPStartXfer+0x370>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	0148      	lsls	r0, r1, #5
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	4401      	add	r1, r0
 8004ae8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aec:	4313      	orrs	r3, r2
 8004aee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	0148      	lsls	r0, r1, #5
 8004b0a:	69f9      	ldr	r1, [r7, #28]
 8004b0c:	4401      	add	r1, r0
 8004b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	78db      	ldrb	r3, [r3, #3]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d11f      	bne.n	8004b5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d14b      	bne.n	8004bfc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d128      	bne.n	8004bda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d110      	bne.n	8004bba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e00f      	b.n	8004bda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	0151      	lsls	r1, r2, #5
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	440a      	add	r2, r1
 8004bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e12f      	b.n	8004e5c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	78db      	ldrb	r3, [r3, #3]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d015      	beq.n	8004c50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8117 	beq.w	8004e5c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	2101      	movs	r1, #1
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	69f9      	ldr	r1, [r7, #28]
 8004c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c4e:	e105      	b.n	8004e5c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e00f      	b.n	8004ca2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68d9      	ldr	r1, [r3, #12]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	b298      	uxth	r0, r3
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 fa2b 	bl	8005112 <USB_WritePacket>
 8004cbc:	e0ce      	b.n	8004e5c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	0151      	lsls	r1, r2, #5
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	440a      	add	r2, r1
 8004cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd8:	0cdb      	lsrs	r3, r3, #19
 8004cda:	04db      	lsls	r3, r3, #19
 8004cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d126      	bne.n	8004d58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	0148      	lsls	r0, r1, #5
 8004d24:	69f9      	ldr	r1, [r7, #28]
 8004d26:	4401      	add	r1, r0
 8004d28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4e:	6113      	str	r3, [r2, #16]
 8004d50:	e036      	b.n	8004dc0 <USB_EPStartXfer+0x3dc>
 8004d52:	bf00      	nop
 8004d54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	4413      	add	r3, r2
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	8afb      	ldrh	r3, [r7, #22]
 8004d7e:	04d9      	lsls	r1, r3, #19
 8004d80:	4b39      	ldr	r3, [pc, #228]	; (8004e68 <USB_EPStartXfer+0x484>)
 8004d82:	400b      	ands	r3, r1
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	0148      	lsls	r0, r1, #5
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	8af9      	ldrh	r1, [r7, #22]
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	0148      	lsls	r0, r1, #5
 8004db4:	69f9      	ldr	r1, [r7, #28]
 8004db6:	4401      	add	r1, r0
 8004db8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10d      	bne.n	8004de2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68d9      	ldr	r1, [r3, #12]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	460a      	mov	r2, r1
 8004de0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	78db      	ldrb	r3, [r3, #3]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d128      	bne.n	8004e3c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d110      	bne.n	8004e1c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e00f      	b.n	8004e3c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	1ff80000 	.word	0x1ff80000

08004e6c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f040 80cd 	bne.w	8005028 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d132      	bne.n	8004efc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	0cdb      	lsrs	r3, r3, #19
 8004ef6:	04db      	lsls	r3, r3, #19
 8004ef8:	6113      	str	r3, [r2, #16]
 8004efa:	e04e      	b.n	8004f9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	0cdb      	lsrs	r3, r3, #19
 8004f18:	04db      	lsls	r3, r3, #19
 8004f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f3e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	695a      	ldr	r2, [r3, #20]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d903      	bls.n	8004f54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	0148      	lsls	r0, r1, #5
 8004f8e:	6979      	ldr	r1, [r7, #20]
 8004f90:	4401      	add	r1, r0
 8004f92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d11e      	bne.n	8004fde <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e092      	b.n	8005104 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ffc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d07e      	beq.n	8005104 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	2101      	movs	r1, #1
 8005018:	fa01 f303 	lsl.w	r3, r1, r3
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005022:	4313      	orrs	r3, r2
 8005024:	634b      	str	r3, [r1, #52]	; 0x34
 8005026:	e06d      	b.n	8005104 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005042:	0cdb      	lsrs	r3, r3, #19
 8005044:	04db      	lsls	r3, r3, #19
 8005046:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800506a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b2:	6939      	ldr	r1, [r7, #16]
 80050b4:	0148      	lsls	r0, r1, #5
 80050b6:	6979      	ldr	r1, [r7, #20]
 80050b8:	4401      	add	r1, r0
 80050ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10d      	bne.n	80050e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	460a      	mov	r2, r1
 80050e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	0151      	lsls	r1, r2, #5
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	440a      	add	r2, r1
 80050fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005112:	b480      	push	{r7}
 8005114:	b089      	sub	sp, #36	; 0x24
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	4611      	mov	r1, r2
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	71fb      	strb	r3, [r7, #7]
 8005124:	4613      	mov	r3, r2
 8005126:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d11a      	bne.n	800516e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005138:	88bb      	ldrh	r3, [r7, #4]
 800513a:	3303      	adds	r3, #3
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e00f      	b.n	8005166 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	031a      	lsls	r2, r3, #12
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005152:	461a      	mov	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6013      	str	r3, [r2, #0]
      pSrc++;
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	3304      	adds	r3, #4
 800515e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	3301      	adds	r3, #1
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3eb      	bcc.n	8005146 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3724      	adds	r7, #36	; 0x24
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	; 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	3303      	adds	r3, #3
 8005196:	089b      	lsrs	r3, r3, #2
 8005198:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e00b      	b.n	80051b8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3304      	adds	r3, #4
 80051b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3ef      	bcc.n	80051a0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051c0:	69fb      	ldr	r3, [r7, #28]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3724      	adds	r7, #36	; 0x24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d12c      	bne.n	8005244 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	db12      	blt.n	8005222 <USB_EPSetStall+0x54>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00f      	beq.n	8005222 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005220:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e02b      	b.n	800529c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	db12      	blt.n	800527c <USB_EPSetStall+0xae>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00f      	beq.n	800527c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800527a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800529a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d128      	bne.n	8005318 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	78db      	ldrb	r3, [r3, #3]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d003      	beq.n	80052f6 <USB_EPClearStall+0x4c>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	78db      	ldrb	r3, [r3, #3]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d138      	bne.n	8005368 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e027      	b.n	8005368 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005336:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	78db      	ldrb	r3, [r3, #3]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d003      	beq.n	8005348 <USB_EPClearStall+0x9e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d10f      	bne.n	8005368 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005366:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005394:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005398:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053aa:	68f9      	ldr	r1, [r7, #12]
 80053ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053dc:	f023 0303 	bic.w	r3, r3, #3
 80053e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f0:	f023 0302 	bic.w	r3, r3, #2
 80053f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005432:	f043 0302 	orr.w	r3, r3, #2
 8005436:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4013      	ands	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800545e:	68fb      	ldr	r3, [r7, #12]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	0c1b      	lsrs	r3, r3, #16
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4013      	ands	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	b29b      	uxth	r3, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005502:	68bb      	ldr	r3, [r7, #8]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	fa22 f303 	lsr.w	r3, r2, r3
 8005540:	01db      	lsls	r3, r3, #7
 8005542:	b2db      	uxtb	r3, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800555e:	68bb      	ldr	r3, [r7, #8]
}
 8005560:	4618      	mov	r0, r3
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f003 0301 	and.w	r3, r3, #1
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	460b      	mov	r3, r1
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	333c      	adds	r3, #60	; 0x3c
 80055e6:	3304      	adds	r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4a26      	ldr	r2, [pc, #152]	; (8005688 <USB_EP0_OutStart+0xb8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d90a      	bls.n	800560a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005604:	d101      	bne.n	800560a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e037      	b.n	800567a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	461a      	mov	r2, r3
 8005612:	2300      	movs	r3, #0
 8005614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005638:	f043 0318 	orr.w	r3, r3, #24
 800563c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005650:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10f      	bne.n	8005678 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	4f54300a 	.word	0x4f54300a

0800568c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <USB_CoreReset+0x64>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e01b      	b.n	80056e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	daf2      	bge.n	8005698 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f043 0201 	orr.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3301      	adds	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <USB_CoreReset+0x64>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e006      	b.n	80056e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d0f0      	beq.n	80056c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	00030d40 	.word	0x00030d40

080056f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005700:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005704:	f002 f95c 	bl	80079c0 <USBD_static_malloc>
 8005708:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005718:	2302      	movs	r3, #2
 800571a:	e066      	b.n	80057ea <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	7c1b      	ldrb	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d119      	bne.n	8005760 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800572c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005730:	2202      	movs	r2, #2
 8005732:	2181      	movs	r1, #129	; 0x81
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 f820 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005744:	2202      	movs	r2, #2
 8005746:	2101      	movs	r1, #1
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f002 f816 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2210      	movs	r2, #16
 800575a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800575e:	e016      	b.n	800578e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	2202      	movs	r2, #2
 8005764:	2181      	movs	r1, #129	; 0x81
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f002 f807 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	2202      	movs	r2, #2
 8005776:	2101      	movs	r1, #1
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fffe 	bl	800777a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2210      	movs	r2, #16
 800578a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800578e:	2308      	movs	r3, #8
 8005790:	2203      	movs	r2, #3
 8005792:	2182      	movs	r1, #130	; 0x82
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fff0 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	7c1b      	ldrb	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d109      	bne.n	80057d8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ce:	2101      	movs	r1, #1
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f002 f8c1 	bl	8007958 <USBD_LL_PrepareReceive>
 80057d6:	e007      	b.n	80057e8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	2101      	movs	r1, #1
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f002 f8b8 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057fe:	2181      	movs	r1, #129	; 0x81
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 ffe0 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800580c:	2101      	movs	r1, #1
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 ffd9 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800581c:	2182      	movs	r1, #130	; 0x82
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 ffd1 	bl	80077c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584e:	4618      	mov	r0, r3
 8005850:	f002 f8c4 	bl	80079dc <USBD_static_free>
    pdev->pClassData = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005878:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800588c:	2303      	movs	r3, #3
 800588e:	e0af      	b.n	80059f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005898:	2b00      	cmp	r3, #0
 800589a:	d03f      	beq.n	800591c <USBD_CDC_Setup+0xb4>
 800589c:	2b20      	cmp	r3, #32
 800589e:	f040 809f 	bne.w	80059e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	88db      	ldrh	r3, [r3, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02e      	beq.n	8005908 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da16      	bge.n	80058e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80058c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	88d2      	ldrh	r2, [r2, #6]
 80058c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	88db      	ldrh	r3, [r3, #6]
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	bf28      	it	cs
 80058d0:	2307      	movcs	r3, #7
 80058d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	89fa      	ldrh	r2, [r7, #14]
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fb19 	bl	8006f12 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80058e0:	e085      	b.n	80059ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	785a      	ldrb	r2, [r3, #1]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	88db      	ldrh	r3, [r3, #6]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80058f8:	6939      	ldr	r1, [r7, #16]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	88db      	ldrh	r3, [r3, #6]
 80058fe:	461a      	mov	r2, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fb32 	bl	8006f6a <USBD_CtlPrepareRx>
      break;
 8005906:	e072      	b.n	80059ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	7850      	ldrb	r0, [r2, #1]
 8005914:	2200      	movs	r2, #0
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	4798      	blx	r3
      break;
 800591a:	e068      	b.n	80059ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	785b      	ldrb	r3, [r3, #1]
 8005920:	2b0b      	cmp	r3, #11
 8005922:	d852      	bhi.n	80059ca <USBD_CDC_Setup+0x162>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <USBD_CDC_Setup+0xc4>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	0800595d 	.word	0x0800595d
 8005930:	080059d9 	.word	0x080059d9
 8005934:	080059cb 	.word	0x080059cb
 8005938:	080059cb 	.word	0x080059cb
 800593c:	080059cb 	.word	0x080059cb
 8005940:	080059cb 	.word	0x080059cb
 8005944:	080059cb 	.word	0x080059cb
 8005948:	080059cb 	.word	0x080059cb
 800594c:	080059cb 	.word	0x080059cb
 8005950:	080059cb 	.word	0x080059cb
 8005954:	08005987 	.word	0x08005987
 8005958:	080059b1 	.word	0x080059b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b03      	cmp	r3, #3
 8005966:	d107      	bne.n	8005978 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005968:	f107 030a 	add.w	r3, r7, #10
 800596c:	2202      	movs	r2, #2
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f001 face 	bl	8006f12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005976:	e032      	b.n	80059de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fa58 	bl	8006e30 <USBD_CtlError>
            ret = USBD_FAIL;
 8005980:	2303      	movs	r3, #3
 8005982:	75fb      	strb	r3, [r7, #23]
          break;
 8005984:	e02b      	b.n	80059de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d107      	bne.n	80059a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005992:	f107 030d 	add.w	r3, r7, #13
 8005996:	2201      	movs	r2, #1
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fab9 	bl	8006f12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059a0:	e01d      	b.n	80059de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 fa43 	bl	8006e30 <USBD_CtlError>
            ret = USBD_FAIL;
 80059aa:	2303      	movs	r3, #3
 80059ac:	75fb      	strb	r3, [r7, #23]
          break;
 80059ae:	e016      	b.n	80059de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d00f      	beq.n	80059dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fa36 	bl	8006e30 <USBD_CtlError>
            ret = USBD_FAIL;
 80059c4:	2303      	movs	r3, #3
 80059c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059c8:	e008      	b.n	80059dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fa2f 	bl	8006e30 <USBD_CtlError>
          ret = USBD_FAIL;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
          break;
 80059d6:	e002      	b.n	80059de <USBD_CDC_Setup+0x176>
          break;
 80059d8:	bf00      	nop
 80059da:	e008      	b.n	80059ee <USBD_CDC_Setup+0x186>
          break;
 80059dc:	bf00      	nop
      }
      break;
 80059de:	e006      	b.n	80059ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fa24 	bl	8006e30 <USBD_CtlError>
      ret = USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	75fb      	strb	r3, [r7, #23]
      break;
 80059ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04f      	b.n	8005aba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3318      	adds	r3, #24
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d029      	beq.n	8005a8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3318      	adds	r3, #24
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	78f9      	ldrb	r1, [r7, #3]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	1a5b      	subs	r3, r3, r1
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4403      	add	r3, r0
 8005a58:	3344      	adds	r3, #68	; 0x44
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a60:	fb03 f301 	mul.w	r3, r3, r1
 8005a64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d110      	bne.n	8005a8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3318      	adds	r3, #24
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a7e:	78f9      	ldrb	r1, [r7, #3]
 8005a80:	2300      	movs	r3, #0
 8005a82:	2200      	movs	r2, #0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 ff46 	bl	8007916 <USBD_LL_Transmit>
 8005a8a:	e015      	b.n	8005ab8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00b      	beq.n	8005ab8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e015      	b.n	8005b10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 ff56 	bl	800799a <USBD_LL_GetRxDataSize>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b26:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e01b      	b.n	8005b6a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <USBD_CDC_EP0_RxReady+0x50>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b42:	2bff      	cmp	r3, #255	; 0xff
 8005b44:	d010      	beq.n	8005b68 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005b54:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	22ff      	movs	r2, #255	; 0xff
 8005b64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2243      	movs	r2, #67	; 0x43
 8005b80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005b82:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	2000009c 	.word	0x2000009c

08005b94 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2243      	movs	r2, #67	; 0x43
 8005ba0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ba2:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	20000058 	.word	0x20000058

08005bb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2243      	movs	r2, #67	; 0x43
 8005bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005bc2:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	200000e0 	.word	0x200000e0

08005bd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	220a      	movs	r2, #10
 8005be0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005be2:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000014 	.word	0x20000014

08005bf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e004      	b.n	8005c12 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b087      	sub	sp, #28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c30:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e008      	b.n	8005c4e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e004      	b.n	8005c80 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e01a      	b.n	8005ce4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d114      	bne.n	8005ce2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cd6:	2181      	movs	r1, #129	; 0x81
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fe1c 	bl	8007916 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e016      	b.n	8005d38 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7c1b      	ldrb	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f001 fe1a 	bl	8007958 <USBD_LL_PrepareReceive>
 8005d24:	e007      	b.n	8005d36 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	2101      	movs	r1, #1
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 fe11 	bl	8007958 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e01f      	b.n	8005d98 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	79fa      	ldrb	r2, [r7, #7]
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f001 fc8d 	bl	80076ac <USBD_LL_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e016      	b.n	8005de6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	f107 020e 	add.w	r2, r7, #14
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4798      	blx	r3
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 fca4 	bl	8007744 <USBD_LL_Start>
 8005dfc:	4603      	mov	r3, r0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	4611      	mov	r1, r2
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
  }

  return USBD_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 ff90 	bl	8006dbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005eaa:	461a      	mov	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d01a      	beq.n	8005ef6 <USBD_LL_SetupStage+0x72>
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d822      	bhi.n	8005f0a <USBD_LL_SetupStage+0x86>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <USBD_LL_SetupStage+0x4a>
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d00a      	beq.n	8005ee2 <USBD_LL_SetupStage+0x5e>
 8005ecc:	e01d      	b.n	8005f0a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa62 	bl	80063a0 <USBD_StdDevReq>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee0:	e020      	b.n	8005f24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fac6 	bl	800647c <USBD_StdItfReq>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e016      	b.n	8005f24 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb05 	bl	800650e <USBD_StdEPReq>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e00c      	b.n	8005f24 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fc73 	bl	8007804 <USBD_LL_StallEP>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	73fb      	strb	r3, [r7, #15]
      break;
 8005f22:	bf00      	nop
  }

  return ret;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b086      	sub	sp, #24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	460b      	mov	r3, r1
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d138      	bne.n	8005fb4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f48:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d14a      	bne.n	8005fea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d913      	bls.n	8005f88 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	bf28      	it	cs
 8005f7a:	4613      	movcs	r3, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f001 f80f 	bl	8006fa4 <USBD_CtlContinueRx>
 8005f86:	e030      	b.n	8005fea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d10b      	bne.n	8005fac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f001 f80a 	bl	8006fc6 <USBD_CtlSendStatus>
 8005fb2:	e01a      	b.n	8005fea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d114      	bne.n	8005fea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	7afa      	ldrb	r2, [r7, #11]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e000      	b.n	8005fec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006002:	7afb      	ldrb	r3, [r7, #11]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d16b      	bne.n	80060e0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3314      	adds	r3, #20
 800600c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006014:	2b02      	cmp	r3, #2
 8006016:	d156      	bne.n	80060c6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	429a      	cmp	r2, r3
 8006022:	d914      	bls.n	800604e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	1ad2      	subs	r2, r2, r3
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	461a      	mov	r2, r3
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 ff84 	bl	8006f48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006040:	2300      	movs	r3, #0
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f001 fc86 	bl	8007958 <USBD_LL_PrepareReceive>
 800604c:	e03b      	b.n	80060c6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	d11c      	bne.n	8006094 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006062:	429a      	cmp	r2, r3
 8006064:	d316      	bcc.n	8006094 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006070:	429a      	cmp	r2, r3
 8006072:	d20f      	bcs.n	8006094 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006074:	2200      	movs	r2, #0
 8006076:	2100      	movs	r1, #0
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 ff65 	bl	8006f48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006086:	2300      	movs	r3, #0
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 fc63 	bl	8007958 <USBD_LL_PrepareReceive>
 8006092:	e018      	b.n	80060c6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d10b      	bne.n	80060b8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f001 fba2 	bl	8007804 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 ff93 	bl	8006fec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d122      	bne.n	8006116 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fe98 	bl	8005e06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060de:	e01a      	b.n	8006116 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d114      	bne.n	8006116 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00e      	beq.n	8006116 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	7afa      	ldrb	r2, [r7, #11]
 8006102:	4611      	mov	r1, r2
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	4798      	blx	r3
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
 8006114:	e000      	b.n	8006118 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	e02f      	b.n	80061b4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00f      	beq.n	800617e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6852      	ldr	r2, [r2, #4]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	4611      	mov	r1, r2
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	2200      	movs	r2, #0
 8006182:	2100      	movs	r1, #0
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 faf8 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2240      	movs	r2, #64	; 0x40
 8006196:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800619a:	2340      	movs	r3, #64	; 0x40
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	; 0x80
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 faea 	bl	800777a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2204      	movs	r2, #4
 80061f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b04      	cmp	r3, #4
 800621a:	d106      	bne.n	800622a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006222:	b2da      	uxtb	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800624a:	2303      	movs	r3, #3
 800624c:	e012      	b.n	8006274 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d10b      	bne.n	8006272 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d005      	beq.n	8006272 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	e014      	b.n	80062c0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d10d      	bne.n	80062be <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	4611      	mov	r1, r2
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062de:	2303      	movs	r3, #3
 80062e0:	e014      	b.n	800630c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d10d      	bne.n	800630a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d007      	beq.n	800630a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	78fa      	ldrb	r2, [r7, #3]
 8006304:	4611      	mov	r1, r2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6852      	ldr	r2, [r2, #4]
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	4611      	mov	r1, r2
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
  }

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	3301      	adds	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006380:	8a3b      	ldrh	r3, [r7, #16]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	b21a      	sxth	r2, r3
 8006386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800638a:	4313      	orrs	r3, r2
 800638c:	b21b      	sxth	r3, r3
 800638e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006390:	89fb      	ldrh	r3, [r7, #14]
}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063b6:	2b40      	cmp	r3, #64	; 0x40
 80063b8:	d005      	beq.n	80063c6 <USBD_StdDevReq+0x26>
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d853      	bhi.n	8006466 <USBD_StdDevReq+0xc6>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <USBD_StdDevReq+0x3a>
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d14f      	bne.n	8006466 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	e04a      	b.n	8006470 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b09      	cmp	r3, #9
 80063e0:	d83b      	bhi.n	800645a <USBD_StdDevReq+0xba>
 80063e2:	a201      	add	r2, pc, #4	; (adr r2, 80063e8 <USBD_StdDevReq+0x48>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	08006451 	.word	0x08006451
 80063f0:	0800645b 	.word	0x0800645b
 80063f4:	08006447 	.word	0x08006447
 80063f8:	0800645b 	.word	0x0800645b
 80063fc:	0800641b 	.word	0x0800641b
 8006400:	08006411 	.word	0x08006411
 8006404:	0800645b 	.word	0x0800645b
 8006408:	08006433 	.word	0x08006433
 800640c:	08006425 	.word	0x08006425
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9de 	bl	80067d4 <USBD_GetDescriptor>
          break;
 8006418:	e024      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fb43 	bl	8006aa8 <USBD_SetAddress>
          break;
 8006422:	e01f      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb82 	bl	8006b30 <USBD_SetConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
          break;
 8006430:	e018      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fc21 	bl	8006c7c <USBD_GetConfig>
          break;
 800643a:	e013      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fc52 	bl	8006ce8 <USBD_GetStatus>
          break;
 8006444:	e00e      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fc81 	bl	8006d50 <USBD_SetFeature>
          break;
 800644e:	e009      	b.n	8006464 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fc90 	bl	8006d78 <USBD_ClrFeature>
          break;
 8006458:	e004      	b.n	8006464 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fce7 	bl	8006e30 <USBD_CtlError>
          break;
 8006462:	bf00      	nop
      }
      break;
 8006464:	e004      	b.n	8006470 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fce1 	bl	8006e30 <USBD_CtlError>
      break;
 800646e:	bf00      	nop
  }

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop

0800647c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d005      	beq.n	80064a2 <USBD_StdItfReq+0x26>
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d82f      	bhi.n	80064fa <USBD_StdItfReq+0x7e>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <USBD_StdItfReq+0x26>
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d12b      	bne.n	80064fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d81d      	bhi.n	80064ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	889b      	ldrh	r3, [r3, #4]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d813      	bhi.n	80064e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	4798      	blx	r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	88db      	ldrh	r3, [r3, #6]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d110      	bne.n	80064f6 <USBD_StdItfReq+0x7a>
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fd73 	bl	8006fc6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064e0:	e009      	b.n	80064f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fca3 	bl	8006e30 <USBD_CtlError>
          break;
 80064ea:	e004      	b.n	80064f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fc9e 	bl	8006e30 <USBD_CtlError>
          break;
 80064f4:	e000      	b.n	80064f8 <USBD_StdItfReq+0x7c>
          break;
 80064f6:	bf00      	nop
      }
      break;
 80064f8:	e004      	b.n	8006504 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fc97 	bl	8006e30 <USBD_CtlError>
      break;
 8006502:	bf00      	nop
  }

  return ret;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	889b      	ldrh	r3, [r3, #4]
 8006520:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d007      	beq.n	800653e <USBD_StdEPReq+0x30>
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	f200 8145 	bhi.w	80067be <USBD_StdEPReq+0x2b0>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00c      	beq.n	8006552 <USBD_StdEPReq+0x44>
 8006538:	2b20      	cmp	r3, #32
 800653a:	f040 8140 	bne.w	80067be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
 800654c:	4603      	mov	r3, r0
 800654e:	73fb      	strb	r3, [r7, #15]
      break;
 8006550:	e13a      	b.n	80067c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	785b      	ldrb	r3, [r3, #1]
 8006556:	2b03      	cmp	r3, #3
 8006558:	d007      	beq.n	800656a <USBD_StdEPReq+0x5c>
 800655a:	2b03      	cmp	r3, #3
 800655c:	f300 8129 	bgt.w	80067b2 <USBD_StdEPReq+0x2a4>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d07f      	beq.n	8006664 <USBD_StdEPReq+0x156>
 8006564:	2b01      	cmp	r3, #1
 8006566:	d03c      	beq.n	80065e2 <USBD_StdEPReq+0xd4>
 8006568:	e123      	b.n	80067b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d002      	beq.n	800657c <USBD_StdEPReq+0x6e>
 8006576:	2b03      	cmp	r3, #3
 8006578:	d016      	beq.n	80065a8 <USBD_StdEPReq+0x9a>
 800657a:	e02c      	b.n	80065d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800657c:	7bbb      	ldrb	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <USBD_StdEPReq+0x90>
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	2b80      	cmp	r3, #128	; 0x80
 8006586:	d00a      	beq.n	800659e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f939 	bl	8007804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f935 	bl	8007804 <USBD_LL_StallEP>
 800659a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800659c:	e020      	b.n	80065e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fc45 	bl	8006e30 <USBD_CtlError>
              break;
 80065a6:	e01b      	b.n	80065e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	885b      	ldrh	r3, [r3, #2]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10e      	bne.n	80065ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <USBD_StdEPReq+0xc0>
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d008      	beq.n	80065ce <USBD_StdEPReq+0xc0>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	88db      	ldrh	r3, [r3, #6]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f001 f91b 	bl	8007804 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fcf9 	bl	8006fc6 <USBD_CtlSendStatus>

              break;
 80065d4:	e004      	b.n	80065e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fc29 	bl	8006e30 <USBD_CtlError>
              break;
 80065de:	bf00      	nop
          }
          break;
 80065e0:	e0ec      	b.n	80067bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d002      	beq.n	80065f4 <USBD_StdEPReq+0xe6>
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d016      	beq.n	8006620 <USBD_StdEPReq+0x112>
 80065f2:	e030      	b.n	8006656 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <USBD_StdEPReq+0x108>
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d00a      	beq.n	8006616 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f8fd 	bl	8007804 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f8f9 	bl	8007804 <USBD_LL_StallEP>
 8006612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006614:	e025      	b.n	8006662 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fc09 	bl	8006e30 <USBD_CtlError>
              break;
 800661e:	e020      	b.n	8006662 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	885b      	ldrh	r3, [r3, #2]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11b      	bne.n	8006660 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f903 	bl	8007842 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fcc2 	bl	8006fc6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	4798      	blx	r3
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006654:	e004      	b.n	8006660 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fbe9 	bl	8006e30 <USBD_CtlError>
              break;
 800665e:	e000      	b.n	8006662 <USBD_StdEPReq+0x154>
              break;
 8006660:	bf00      	nop
          }
          break;
 8006662:	e0ab      	b.n	80067bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d002      	beq.n	8006676 <USBD_StdEPReq+0x168>
 8006670:	2b03      	cmp	r3, #3
 8006672:	d032      	beq.n	80066da <USBD_StdEPReq+0x1cc>
 8006674:	e097      	b.n	80067a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <USBD_StdEPReq+0x17e>
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	2b80      	cmp	r3, #128	; 0x80
 8006680:	d004      	beq.n	800668c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fbd3 	bl	8006e30 <USBD_CtlError>
                break;
 800668a:	e091      	b.n	80067b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800668c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006690:	2b00      	cmp	r3, #0
 8006692:	da0b      	bge.n	80066ac <USBD_StdEPReq+0x19e>
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	3310      	adds	r3, #16
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	4413      	add	r3, r2
 80066a8:	3304      	adds	r3, #4
 80066aa:	e00b      	b.n	80066c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4413      	add	r3, r2
 80066c2:	3304      	adds	r3, #4
 80066c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2202      	movs	r2, #2
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc1d 	bl	8006f12 <USBD_CtlSendData>
              break;
 80066d8:	e06a      	b.n	80067b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da11      	bge.n	8006706 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	f003 020f 	and.w	r2, r3, #15
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3324      	adds	r3, #36	; 0x24
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d117      	bne.n	800672c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fb96 	bl	8006e30 <USBD_CtlError>
                  break;
 8006704:	e054      	b.n	80067b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006706:	7bbb      	ldrb	r3, [r7, #14]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d104      	bne.n	800672c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fb83 	bl	8006e30 <USBD_CtlError>
                  break;
 800672a:	e041      	b.n	80067b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800672c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	da0b      	bge.n	800674c <USBD_StdEPReq+0x23e>
 8006734:	7bbb      	ldrb	r3, [r7, #14]
 8006736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	3310      	adds	r3, #16
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	4413      	add	r3, r2
 8006748:	3304      	adds	r3, #4
 800674a:	e00b      	b.n	8006764 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	3304      	adds	r3, #4
 8006764:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USBD_StdEPReq+0x264>
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	2b80      	cmp	r3, #128	; 0x80
 8006770:	d103      	bne.n	800677a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e00e      	b.n	8006798 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 f87e 	bl	8007880 <USBD_LL_IsStallEP>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e002      	b.n	8006798 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2202      	movs	r2, #2
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fbb7 	bl	8006f12 <USBD_CtlSendData>
              break;
 80067a4:	e004      	b.n	80067b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fb41 	bl	8006e30 <USBD_CtlError>
              break;
 80067ae:	bf00      	nop
          }
          break;
 80067b0:	e004      	b.n	80067bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fb3b 	bl	8006e30 <USBD_CtlError>
          break;
 80067ba:	bf00      	nop
      }
      break;
 80067bc:	e004      	b.n	80067c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb35 	bl	8006e30 <USBD_CtlError>
      break;
 80067c6:	bf00      	nop
  }

  return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	f200 8128 	bhi.w	8006a4a <USBD_GetDescriptor+0x276>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <USBD_GetDescriptor+0x2c>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	0800681d 	.word	0x0800681d
 8006804:	08006835 	.word	0x08006835
 8006808:	08006875 	.word	0x08006875
 800680c:	08006a4b 	.word	0x08006a4b
 8006810:	08006a4b 	.word	0x08006a4b
 8006814:	080069eb 	.word	0x080069eb
 8006818:	08006a17 	.word	0x08006a17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
      break;
 8006832:	e112      	b.n	8006a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7c1b      	ldrb	r3, [r3, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f107 0208 	add.w	r2, r7, #8
 8006848:	4610      	mov	r0, r2
 800684a:	4798      	blx	r3
 800684c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	2202      	movs	r2, #2
 8006854:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006856:	e100      	b.n	8006a5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	f107 0208 	add.w	r2, r7, #8
 8006864:	4610      	mov	r0, r2
 8006866:	4798      	blx	r3
 8006868:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	2202      	movs	r2, #2
 8006870:	701a      	strb	r2, [r3, #0]
      break;
 8006872:	e0f2      	b.n	8006a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b05      	cmp	r3, #5
 800687c:	f200 80ac 	bhi.w	80069d8 <USBD_GetDescriptor+0x204>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <USBD_GetDescriptor+0xb4>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068a1 	.word	0x080068a1
 800688c:	080068d5 	.word	0x080068d5
 8006890:	08006909 	.word	0x08006909
 8006894:	0800693d 	.word	0x0800693d
 8006898:	08006971 	.word	0x08006971
 800689c:	080069a5 	.word	0x080069a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	7c12      	ldrb	r2, [r2, #16]
 80068b8:	f107 0108 	add.w	r1, r7, #8
 80068bc:	4610      	mov	r0, r2
 80068be:	4798      	blx	r3
 80068c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c2:	e091      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fab2 	bl	8006e30 <USBD_CtlError>
            err++;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	3301      	adds	r3, #1
 80068d0:	72fb      	strb	r3, [r7, #11]
          break;
 80068d2:	e089      	b.n	80069e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00b      	beq.n	80068f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	7c12      	ldrb	r2, [r2, #16]
 80068ec:	f107 0108 	add.w	r1, r7, #8
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3
 80068f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068f6:	e077      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa98 	bl	8006e30 <USBD_CtlError>
            err++;
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	3301      	adds	r3, #1
 8006904:	72fb      	strb	r3, [r7, #11]
          break;
 8006906:	e06f      	b.n	80069e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	7c12      	ldrb	r2, [r2, #16]
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800692a:	e05d      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800692c:	6839      	ldr	r1, [r7, #0]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa7e 	bl	8006e30 <USBD_CtlError>
            err++;
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	3301      	adds	r3, #1
 8006938:	72fb      	strb	r3, [r7, #11]
          break;
 800693a:	e055      	b.n	80069e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	7c12      	ldrb	r2, [r2, #16]
 8006954:	f107 0108 	add.w	r1, r7, #8
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
 800695c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695e:	e043      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa64 	bl	8006e30 <USBD_CtlError>
            err++;
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	3301      	adds	r3, #1
 800696c:	72fb      	strb	r3, [r7, #11]
          break;
 800696e:	e03b      	b.n	80069e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00b      	beq.n	8006994 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	7c12      	ldrb	r2, [r2, #16]
 8006988:	f107 0108 	add.w	r1, r7, #8
 800698c:	4610      	mov	r0, r2
 800698e:	4798      	blx	r3
 8006990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006992:	e029      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa4a 	bl	8006e30 <USBD_CtlError>
            err++;
 800699c:	7afb      	ldrb	r3, [r7, #11]
 800699e:	3301      	adds	r3, #1
 80069a0:	72fb      	strb	r3, [r7, #11]
          break;
 80069a2:	e021      	b.n	80069e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
 80069bc:	f107 0108 	add.w	r1, r7, #8
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c6:	e00f      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fa30 	bl	8006e30 <USBD_CtlError>
            err++;
 80069d0:	7afb      	ldrb	r3, [r7, #11]
 80069d2:	3301      	adds	r3, #1
 80069d4:	72fb      	strb	r3, [r7, #11]
          break;
 80069d6:	e007      	b.n	80069e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fa28 	bl	8006e30 <USBD_CtlError>
          err++;
 80069e0:	7afb      	ldrb	r3, [r7, #11]
 80069e2:	3301      	adds	r3, #1
 80069e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80069e6:	bf00      	nop
      }
      break;
 80069e8:	e037      	b.n	8006a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7c1b      	ldrb	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	f107 0208 	add.w	r2, r7, #8
 80069fe:	4610      	mov	r0, r2
 8006a00:	4798      	blx	r3
 8006a02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a04:	e029      	b.n	8006a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa11 	bl	8006e30 <USBD_CtlError>
        err++;
 8006a0e:	7afb      	ldrb	r3, [r7, #11]
 8006a10:	3301      	adds	r3, #1
 8006a12:	72fb      	strb	r3, [r7, #11]
      break;
 8006a14:	e021      	b.n	8006a5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7c1b      	ldrb	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a26:	f107 0208 	add.w	r2, r7, #8
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4798      	blx	r3
 8006a2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	2207      	movs	r2, #7
 8006a36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a38:	e00f      	b.n	8006a5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f9f7 	bl	8006e30 <USBD_CtlError>
        err++;
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	3301      	adds	r3, #1
 8006a46:	72fb      	strb	r3, [r7, #11]
      break;
 8006a48:	e007      	b.n	8006a5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f9ef 	bl	8006e30 <USBD_CtlError>
      err++;
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	3301      	adds	r3, #1
 8006a56:	72fb      	strb	r3, [r7, #11]
      break;
 8006a58:	bf00      	nop
  }

  if (err != 0U)
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11e      	bne.n	8006a9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	88db      	ldrh	r3, [r3, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d016      	beq.n	8006a96 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a68:	893b      	ldrh	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	88da      	ldrh	r2, [r3, #6]
 8006a72:	893b      	ldrh	r3, [r7, #8]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	bf28      	it	cs
 8006a78:	4613      	movcs	r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a7e:	893b      	ldrh	r3, [r7, #8]
 8006a80:	461a      	mov	r2, r3
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa44 	bl	8006f12 <USBD_CtlSendData>
 8006a8a:	e009      	b.n	8006aa0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f9ce 	bl	8006e30 <USBD_CtlError>
 8006a94:	e004      	b.n	8006aa0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa95 	bl	8006fc6 <USBD_CtlSendStatus>
 8006a9c:	e000      	b.n	8006aa0 <USBD_GetDescriptor+0x2cc>
    return;
 8006a9e:	bf00      	nop
  }
}
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop

08006aa8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	889b      	ldrh	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d131      	bne.n	8006b1e <USBD_SetAddress+0x76>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d12d      	bne.n	8006b1e <USBD_SetAddress+0x76>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	885b      	ldrh	r3, [r3, #2]
 8006ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac8:	d829      	bhi.n	8006b1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	885b      	ldrh	r3, [r3, #2]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d104      	bne.n	8006aec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9a3 	bl	8006e30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aea:	e01d      	b.n	8006b28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 feed 	bl	80078d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa61 	bl	8006fc6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b12:	e009      	b.n	8006b28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1c:	e004      	b.n	8006b28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f985 	bl	8006e30 <USBD_CtlError>
  }
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	885b      	ldrh	r3, [r3, #2]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <USBD_SetConfig+0x148>)
 8006b46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <USBD_SetConfig+0x148>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d905      	bls.n	8006b5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f96c 	bl	8006e30 <USBD_CtlError>
    return USBD_FAIL;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e088      	b.n	8006c6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d002      	beq.n	8006b6e <USBD_SetConfig+0x3e>
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d025      	beq.n	8006bb8 <USBD_SetConfig+0x88>
 8006b6c:	e071      	b.n	8006c52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b6e:	4b42      	ldr	r3, [pc, #264]	; (8006c78 <USBD_SetConfig+0x148>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01c      	beq.n	8006bb0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b76:	4b40      	ldr	r3, [pc, #256]	; (8006c78 <USBD_SetConfig+0x148>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b80:	4b3d      	ldr	r3, [pc, #244]	; (8006c78 <USBD_SetConfig+0x148>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff f948 	bl	8005e1c <USBD_SetClassConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f949 	bl	8006e30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b9e:	e065      	b.n	8006c6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa10 	bl	8006fc6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2203      	movs	r2, #3
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bae:	e05d      	b.n	8006c6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa08 	bl	8006fc6 <USBD_CtlSendStatus>
      break;
 8006bb6:	e059      	b.n	8006c6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bb8:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <USBD_SetConfig+0x148>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d112      	bne.n	8006be6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bc8:	4b2b      	ldr	r3, [pc, #172]	; (8006c78 <USBD_SetConfig+0x148>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <USBD_SetConfig+0x148>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff f93b 	bl	8005e54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9f1 	bl	8006fc6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006be4:	e042      	b.n	8006c6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <USBD_SetConfig+0x148>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d02a      	beq.n	8006c4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff f929 	bl	8005e54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <USBD_SetConfig+0x148>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <USBD_SetConfig+0x148>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff f902 	bl	8005e1c <USBD_SetClassConfig>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f903 	bl	8006e30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff f90e 	bl	8005e54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c40:	e014      	b.n	8006c6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9bf 	bl	8006fc6 <USBD_CtlSendStatus>
      break;
 8006c48:	e010      	b.n	8006c6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f9bb 	bl	8006fc6 <USBD_CtlSendStatus>
      break;
 8006c50:	e00c      	b.n	8006c6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f8eb 	bl	8006e30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c5a:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <USBD_SetConfig+0x148>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff f8f7 	bl	8005e54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6a:	bf00      	nop
  }

  return ret;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000208 	.word	0x20000208

08006c7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	88db      	ldrh	r3, [r3, #6]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d004      	beq.n	8006c98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8cd 	bl	8006e30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c96:	e023      	b.n	8006ce0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	dc02      	bgt.n	8006caa <USBD_GetConfig+0x2e>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc03      	bgt.n	8006cb0 <USBD_GetConfig+0x34>
 8006ca8:	e015      	b.n	8006cd6 <USBD_GetConfig+0x5a>
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d00b      	beq.n	8006cc6 <USBD_GetConfig+0x4a>
 8006cae:	e012      	b.n	8006cd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f927 	bl	8006f12 <USBD_CtlSendData>
        break;
 8006cc4:	e00c      	b.n	8006ce0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f91f 	bl	8006f12 <USBD_CtlSendData>
        break;
 8006cd4:	e004      	b.n	8006ce0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8a9 	bl	8006e30 <USBD_CtlError>
        break;
 8006cde:	bf00      	nop
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d81e      	bhi.n	8006d3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	88db      	ldrh	r3, [r3, #6]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d004      	beq.n	8006d12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f890 	bl	8006e30 <USBD_CtlError>
        break;
 8006d10:	e01a      	b.n	8006d48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f043 0202 	orr.w	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	330c      	adds	r3, #12
 8006d32:	2202      	movs	r2, #2
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8eb 	bl	8006f12 <USBD_CtlSendData>
      break;
 8006d3c:	e004      	b.n	8006d48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f875 	bl	8006e30 <USBD_CtlError>
      break;
 8006d46:	bf00      	nop
  }
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	885b      	ldrh	r3, [r3, #2]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d106      	bne.n	8006d70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f92b 	bl	8006fc6 <USBD_CtlSendStatus>
  }
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d80b      	bhi.n	8006da8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d10c      	bne.n	8006db2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f910 	bl	8006fc6 <USBD_CtlSendStatus>
      }
      break;
 8006da6:	e004      	b.n	8006db2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f840 	bl	8006e30 <USBD_CtlError>
      break;
 8006db0:	e000      	b.n	8006db4 <USBD_ClrFeature+0x3c>
      break;
 8006db2:	bf00      	nop
  }
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	781a      	ldrb	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3301      	adds	r3, #1
 8006de4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff fabb 	bl	8006362 <SWAPBYTE>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff faae 	bl	8006362 <SWAPBYTE>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff faa1 	bl	8006362 <SWAPBYTE>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	80da      	strh	r2, [r3, #6]
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e3a:	2180      	movs	r1, #128	; 0x80
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fce1 	bl	8007804 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e42:	2100      	movs	r1, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fcdd 	bl	8007804 <USBD_LL_StallEP>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b086      	sub	sp, #24
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d036      	beq.n	8006ed6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e6c:	6938      	ldr	r0, [r7, #16]
 8006e6e:	f000 f836 	bl	8006ede <USBD_GetLen>
 8006e72:	4603      	mov	r3, r0
 8006e74:	3301      	adds	r3, #1
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4413      	add	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	4413      	add	r3, r2
 8006e98:	2203      	movs	r2, #3
 8006e9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ea2:	e013      	b.n	8006ecc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ea4:	7dfb      	ldrb	r3, [r7, #23]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
    idx++;
 8006eb6:	7dfb      	ldrb	r3, [r7, #23]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e7      	bne.n	8006ea4 <USBD_GetString+0x52>
 8006ed4:	e000      	b.n	8006ed8 <USBD_GetString+0x86>
    return;
 8006ed6:	bf00      	nop
  }
}
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006eee:	e005      	b.n	8006efc <USBD_GetLen+0x1e>
  {
    len++;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f5      	bne.n	8006ef0 <USBD_GetLen+0x12>
  }

  return len;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	60b9      	str	r1, [r7, #8]
 8006f1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	2100      	movs	r1, #0
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 fcec 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fcdb 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b084      	sub	sp, #16
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2203      	movs	r2, #3
 8006f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	2100      	movs	r1, #0
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fcdf 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fcce 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2100      	movs	r1, #0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc9a 	bl	8007916 <USBD_LL_Transmit>

  return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2205      	movs	r2, #5
 8006ff8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	2100      	movs	r1, #0
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fca8 	bl	8007958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007018:	2200      	movs	r2, #0
 800701a:	4912      	ldr	r1, [pc, #72]	; (8007064 <MX_USB_DEVICE_Init+0x50>)
 800701c:	4812      	ldr	r0, [pc, #72]	; (8007068 <MX_USB_DEVICE_Init+0x54>)
 800701e:	f7fe fe8f 	bl	8005d40 <USBD_Init>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007028:	f7f9 fd26 	bl	8000a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800702c:	490f      	ldr	r1, [pc, #60]	; (800706c <MX_USB_DEVICE_Init+0x58>)
 800702e:	480e      	ldr	r0, [pc, #56]	; (8007068 <MX_USB_DEVICE_Init+0x54>)
 8007030:	f7fe feb6 	bl	8005da0 <USBD_RegisterClass>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800703a:	f7f9 fd1d 	bl	8000a78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800703e:	490c      	ldr	r1, [pc, #48]	; (8007070 <MX_USB_DEVICE_Init+0x5c>)
 8007040:	4809      	ldr	r0, [pc, #36]	; (8007068 <MX_USB_DEVICE_Init+0x54>)
 8007042:	f7fe fdd7 	bl	8005bf4 <USBD_CDC_RegisterInterface>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800704c:	f7f9 fd14 	bl	8000a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007050:	4805      	ldr	r0, [pc, #20]	; (8007068 <MX_USB_DEVICE_Init+0x54>)
 8007052:	f7fe fecc 	bl	8005dee <USBD_Start>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800705c:	f7f9 fd0c 	bl	8000a78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007060:	bf00      	nop
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20000138 	.word	0x20000138
 8007068:	20000584 	.word	0x20000584
 800706c:	20000020 	.word	0x20000020
 8007070:	20000124 	.word	0x20000124

08007074 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007078:	2200      	movs	r2, #0
 800707a:	4905      	ldr	r1, [pc, #20]	; (8007090 <CDC_Init_FS+0x1c>)
 800707c:	4805      	ldr	r0, [pc, #20]	; (8007094 <CDC_Init_FS+0x20>)
 800707e:	f7fe fdce 	bl	8005c1e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007082:	4905      	ldr	r1, [pc, #20]	; (8007098 <CDC_Init_FS+0x24>)
 8007084:	4803      	ldr	r0, [pc, #12]	; (8007094 <CDC_Init_FS+0x20>)
 8007086:	f7fe fde8 	bl	8005c5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800708a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800708c:	4618      	mov	r0, r3
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001054 	.word	0x20001054
 8007094:	20000584 	.word	0x20000584
 8007098:	20000854 	.word	0x20000854

0800709c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	71fb      	strb	r3, [r7, #7]
 80070b8:	4613      	mov	r3, r2
 80070ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b23      	cmp	r3, #35	; 0x23
 80070c0:	d84a      	bhi.n	8007158 <CDC_Control_FS+0xac>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <CDC_Control_FS+0x1c>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	08007159 	.word	0x08007159
 80070cc:	08007159 	.word	0x08007159
 80070d0:	08007159 	.word	0x08007159
 80070d4:	08007159 	.word	0x08007159
 80070d8:	08007159 	.word	0x08007159
 80070dc:	08007159 	.word	0x08007159
 80070e0:	08007159 	.word	0x08007159
 80070e4:	08007159 	.word	0x08007159
 80070e8:	08007159 	.word	0x08007159
 80070ec:	08007159 	.word	0x08007159
 80070f0:	08007159 	.word	0x08007159
 80070f4:	08007159 	.word	0x08007159
 80070f8:	08007159 	.word	0x08007159
 80070fc:	08007159 	.word	0x08007159
 8007100:	08007159 	.word	0x08007159
 8007104:	08007159 	.word	0x08007159
 8007108:	08007159 	.word	0x08007159
 800710c:	08007159 	.word	0x08007159
 8007110:	08007159 	.word	0x08007159
 8007114:	08007159 	.word	0x08007159
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
 8007124:	08007159 	.word	0x08007159
 8007128:	08007159 	.word	0x08007159
 800712c:	08007159 	.word	0x08007159
 8007130:	08007159 	.word	0x08007159
 8007134:	08007159 	.word	0x08007159
 8007138:	08007159 	.word	0x08007159
 800713c:	08007159 	.word	0x08007159
 8007140:	08007159 	.word	0x08007159
 8007144:	08007159 	.word	0x08007159
 8007148:	08007159 	.word	0x08007159
 800714c:	08007159 	.word	0x08007159
 8007150:	08007159 	.word	0x08007159
 8007154:	08007159 	.word	0x08007159
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007158:	bf00      	nop
  }

  return (USBD_OK);
 800715a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <CDC_Receive_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
//static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4805      	ldr	r0, [pc, #20]	; (800718c <CDC_Receive_FS+0x24>)
 8007176:	f7fe fd70 	bl	8005c5a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800717a:	4804      	ldr	r0, [pc, #16]	; (800718c <CDC_Receive_FS+0x24>)
 800717c:	f7fe fdb6 	bl	8005cec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007180:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000584 	.word	0x20000584

08007190 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80071a0:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <CDC_Transmit_FS+0x48>)
 80071a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e00b      	b.n	80071ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80071b6:	887b      	ldrh	r3, [r7, #2]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4806      	ldr	r0, [pc, #24]	; (80071d8 <CDC_Transmit_FS+0x48>)
 80071be:	f7fe fd2e 	bl	8005c1e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071c2:	4805      	ldr	r0, [pc, #20]	; (80071d8 <CDC_Transmit_FS+0x48>)
 80071c4:	f7fe fd62 	bl	8005c8c <USBD_CDC_TransmitPacket>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000584 	.word	0x20000584

080071dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	4613      	mov	r3, r2
 80071e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	371c      	adds	r7, #28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
	...

08007200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	6039      	str	r1, [r7, #0]
 800720a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2212      	movs	r2, #18
 8007210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007212:	4b03      	ldr	r3, [pc, #12]	; (8007220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000154 	.word	0x20000154

08007224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2204      	movs	r2, #4
 8007234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007236:	4b03      	ldr	r3, [pc, #12]	; (8007244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	20000168 	.word	0x20000168

08007248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4907      	ldr	r1, [pc, #28]	; (800727c <USBD_FS_ProductStrDescriptor+0x34>)
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <USBD_FS_ProductStrDescriptor+0x38>)
 8007260:	f7ff fdf7 	bl	8006e52 <USBD_GetString>
 8007264:	e004      	b.n	8007270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <USBD_FS_ProductStrDescriptor+0x34>)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <USBD_FS_ProductStrDescriptor+0x38>)
 800726c:	f7ff fdf1 	bl	8006e52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20001854 	.word	0x20001854
 8007280:	08007c08 	.word	0x08007c08

08007284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	4904      	ldr	r1, [pc, #16]	; (80072a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007294:	4804      	ldr	r0, [pc, #16]	; (80072a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007296:	f7ff fddc 	bl	8006e52 <USBD_GetString>
  return USBD_StrDesc;
 800729a:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20001854 	.word	0x20001854
 80072a8:	08007c20 	.word	0x08007c20

080072ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	6039      	str	r1, [r7, #0]
 80072b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	221a      	movs	r2, #26
 80072bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072be:	f000 f843 	bl	8007348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072c2:	4b02      	ldr	r3, [pc, #8]	; (80072cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000016c 	.word	0x2000016c

080072d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	6039      	str	r1, [r7, #0]
 80072da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	4907      	ldr	r1, [pc, #28]	; (8007304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072e6:	4808      	ldr	r0, [pc, #32]	; (8007308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072e8:	f7ff fdb3 	bl	8006e52 <USBD_GetString>
 80072ec:	e004      	b.n	80072f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	4904      	ldr	r1, [pc, #16]	; (8007304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072f2:	4805      	ldr	r0, [pc, #20]	; (8007308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072f4:	f7ff fdad 	bl	8006e52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072f8:	4b02      	ldr	r3, [pc, #8]	; (8007304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	20001854 	.word	0x20001854
 8007308:	08007c34 	.word	0x08007c34

0800730c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007322:	4808      	ldr	r0, [pc, #32]	; (8007344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007324:	f7ff fd95 	bl	8006e52 <USBD_GetString>
 8007328:	e004      	b.n	8007334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4904      	ldr	r1, [pc, #16]	; (8007340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800732e:	4805      	ldr	r0, [pc, #20]	; (8007344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007330:	f7ff fd8f 	bl	8006e52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007334:	4b02      	ldr	r3, [pc, #8]	; (8007340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001854 	.word	0x20001854
 8007344:	08007c40 	.word	0x08007c40

08007348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <Get_SerialNum+0x44>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <Get_SerialNum+0x48>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <Get_SerialNum+0x4c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800736e:	2208      	movs	r2, #8
 8007370:	4909      	ldr	r1, [pc, #36]	; (8007398 <Get_SerialNum+0x50>)
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 f814 	bl	80073a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007378:	2204      	movs	r2, #4
 800737a:	4908      	ldr	r1, [pc, #32]	; (800739c <Get_SerialNum+0x54>)
 800737c:	68b8      	ldr	r0, [r7, #8]
 800737e:	f000 f80f 	bl	80073a0 <IntToUnicode>
  }
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	1fff7a10 	.word	0x1fff7a10
 8007390:	1fff7a14 	.word	0x1fff7a14
 8007394:	1fff7a18 	.word	0x1fff7a18
 8007398:	2000016e 	.word	0x2000016e
 800739c:	2000017e 	.word	0x2000017e

080073a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
 80073b6:	e027      	b.n	8007408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	0f1b      	lsrs	r3, r3, #28
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d80b      	bhi.n	80073d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0f1b      	lsrs	r3, r3, #28
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4619      	mov	r1, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	440b      	add	r3, r1
 80073d0:	3230      	adds	r2, #48	; 0x30
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e00a      	b.n	80073ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	0f1b      	lsrs	r3, r3, #28
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	4619      	mov	r1, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	440b      	add	r3, r1
 80073e8:	3237      	adds	r2, #55	; 0x37
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	3301      	adds	r3, #1
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	4413      	add	r3, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	3301      	adds	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]
 8007408:	7dfa      	ldrb	r2, [r7, #23]
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3d3      	bcc.n	80073b8 <IntToUnicode+0x18>
  }
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	605a      	str	r2, [r3, #4]
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	60da      	str	r2, [r3, #12]
 8007436:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007440:	d13a      	bne.n	80074b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800745e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007464:	2302      	movs	r3, #2
 8007466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800746c:	2303      	movs	r3, #3
 800746e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007470:	230a      	movs	r3, #10
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007474:	f107 0314 	add.w	r3, r7, #20
 8007478:	4619      	mov	r1, r3
 800747a:	4812      	ldr	r0, [pc, #72]	; (80074c4 <HAL_PCD_MspInit+0xa4>)
 800747c:	f7fa faf0 	bl	8001a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007480:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	4a0e      	ldr	r2, [pc, #56]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748a:	6353      	str	r3, [r2, #52]	; 0x34
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007494:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 8007496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800749a:	6453      	str	r3, [r2, #68]	; 0x44
 800749c:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <HAL_PCD_MspInit+0xa0>)
 800749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074a8:	2200      	movs	r2, #0
 80074aa:	2100      	movs	r1, #0
 80074ac:	2043      	movs	r0, #67	; 0x43
 80074ae:	f7fa faa0 	bl	80019f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074b2:	2043      	movs	r0, #67	; 0x43
 80074b4:	f7fa fab9 	bl	8001a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074b8:	bf00      	nop
 80074ba:	3728      	adds	r7, #40	; 0x28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40023800 	.word	0x40023800
 80074c4:	40020000 	.word	0x40020000

080074c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe fcd0 	bl	8005e84 <USBD_LL_SetupStage>
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	4619      	mov	r1, r3
 8007516:	f7fe fd0a 	bl	8005f2e <USBD_LL_DataOutStage>
}
 800751a:	bf00      	nop
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	3348      	adds	r3, #72	; 0x48
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	4619      	mov	r1, r3
 800754a:	f7fe fd53 	bl	8005ff4 <USBD_LL_DataInStage>
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe fe67 	bl	8006238 <USBD_LL_SOF>
}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
 800758a:	e008      	b.n	800759e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d102      	bne.n	800759a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e001      	b.n	800759e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800759a:	f7f9 fa6d 	bl	8000a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a4:	7bfa      	ldrb	r2, [r7, #15]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fe07 	bl	80061bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fdb3 	bl	8006120 <USBD_LL_Reset>
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fe02 	bl	80061dc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075f8:	4b04      	ldr	r3, [pc, #16]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	4a03      	ldr	r2, [pc, #12]	; (800760c <HAL_PCD_SuspendCallback+0x48>)
 80075fe:	f043 0306 	orr.w	r3, r3, #6
 8007602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fdf2 	bl	8006208 <USBD_LL_Resume>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fe40 	bl	80062c8 <USBD_LL_IsoOUTIncomplete>
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	460b      	mov	r3, r1
 800765a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	4611      	mov	r1, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fe08 	bl	800627c <USBD_LL_IsoINIncomplete>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fe46 	bl	8006314 <USBD_LL_DevConnected>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe fe43 	bl	800632a <USBD_LL_DevDisconnected>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13c      	bne.n	8007736 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80076bc:	4a20      	ldr	r2, [pc, #128]	; (8007740 <USBD_LL_Init+0x94>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1e      	ldr	r2, [pc, #120]	; (8007740 <USBD_LL_Init+0x94>)
 80076c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076cc:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <USBD_LL_Init+0x94>)
 80076ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <USBD_LL_Init+0x94>)
 80076d6:	2204      	movs	r2, #4
 80076d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <USBD_LL_Init+0x94>)
 80076dc:	2202      	movs	r2, #2
 80076de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076e0:	4b17      	ldr	r3, [pc, #92]	; (8007740 <USBD_LL_Init+0x94>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <USBD_LL_Init+0x94>)
 80076e8:	2202      	movs	r2, #2
 80076ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <USBD_LL_Init+0x94>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <USBD_LL_Init+0x94>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <USBD_LL_Init+0x94>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <USBD_LL_Init+0x94>)
 8007700:	2200      	movs	r2, #0
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <USBD_LL_Init+0x94>)
 8007706:	2200      	movs	r2, #0
 8007708:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800770a:	480d      	ldr	r0, [pc, #52]	; (8007740 <USBD_LL_Init+0x94>)
 800770c:	f7fa fb5d 	bl	8001dca <HAL_PCD_Init>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007716:	f7f9 f9af 	bl	8000a78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	4808      	ldr	r0, [pc, #32]	; (8007740 <USBD_LL_Init+0x94>)
 800771e:	f7fb fcba 	bl	8003096 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007722:	2240      	movs	r2, #64	; 0x40
 8007724:	2100      	movs	r1, #0
 8007726:	4806      	ldr	r0, [pc, #24]	; (8007740 <USBD_LL_Init+0x94>)
 8007728:	f7fb fc6e 	bl	8003008 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800772c:	2280      	movs	r2, #128	; 0x80
 800772e:	2101      	movs	r1, #1
 8007730:	4803      	ldr	r0, [pc, #12]	; (8007740 <USBD_LL_Init+0x94>)
 8007732:	f7fb fc69 	bl	8003008 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20001a54 	.word	0x20001a54

08007744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775a:	4618      	mov	r0, r3
 800775c:	f7fa fc52 	bl	8002004 <HAL_PCD_Start>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f942 	bl	80079f0 <USBD_Get_USB_Status>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007770:	7bbb      	ldrb	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	461a      	mov	r2, r3
 8007788:	4603      	mov	r3, r0
 800778a:	70fb      	strb	r3, [r7, #3]
 800778c:	460b      	mov	r3, r1
 800778e:	70bb      	strb	r3, [r7, #2]
 8007790:	4613      	mov	r3, r2
 8007792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077a2:	78bb      	ldrb	r3, [r7, #2]
 80077a4:	883a      	ldrh	r2, [r7, #0]
 80077a6:	78f9      	ldrb	r1, [r7, #3]
 80077a8:	f7fb f836 	bl	8002818 <HAL_PCD_EP_Open>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f91c 	bl	80079f0 <USBD_Get_USB_Status>
 80077b8:	4603      	mov	r3, r0
 80077ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	4611      	mov	r1, r2
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fb f87f 	bl	80028e8 <HAL_PCD_EP_Close>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 f8fd 	bl	80079f0 <USBD_Get_USB_Status>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007814:	2300      	movs	r3, #0
 8007816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7fb f957 	bl	8002ad6 <HAL_PCD_EP_SetStall>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f8de 	bl	80079f0 <USBD_Get_USB_Status>
 8007834:	4603      	mov	r3, r0
 8007836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	4611      	mov	r1, r2
 8007860:	4618      	mov	r0, r3
 8007862:	f7fb f99c 	bl	8002b9e <HAL_PCD_EP_ClrStall>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	4618      	mov	r0, r3
 800786e:	f000 f8bf 	bl	80079f0 <USBD_Get_USB_Status>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007876:	7bbb      	ldrb	r3, [r7, #14]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da0b      	bge.n	80078b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	4613      	mov	r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	333e      	adds	r3, #62	; 0x3e
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	e00b      	b.n	80078cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ba:	68f9      	ldr	r1, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	1a9b      	subs	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	4611      	mov	r1, r2
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fa ff69 	bl	80027ce <HAL_PCD_SetAddress>
 80078fc:	4603      	mov	r3, r0
 80078fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f874 	bl	80079f0 <USBD_Get_USB_Status>
 8007908:	4603      	mov	r3, r0
 800790a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790c:	7bbb      	ldrb	r3, [r7, #14]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	460b      	mov	r3, r1
 8007924:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007934:	7af9      	ldrb	r1, [r7, #11]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	f7fb f882 	bl	8002a42 <HAL_PCD_EP_Transmit>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	4618      	mov	r0, r3
 8007946:	f000 f853 	bl	80079f0 <USBD_Get_USB_Status>
 800794a:	4603      	mov	r3, r0
 800794c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800794e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	460b      	mov	r3, r1
 8007966:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007976:	7af9      	ldrb	r1, [r7, #11]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f7fa fffe 	bl	800297c <HAL_PCD_EP_Receive>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f832 	bl	80079f0 <USBD_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007990:	7dbb      	ldrb	r3, [r7, #22]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fb f82e 	bl	8002a12 <HAL_PCD_EP_GetRxCount>
 80079b6:	4603      	mov	r3, r0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <USBD_static_malloc+0x18>)
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	2000020c 	.word	0x2000020c

080079dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d817      	bhi.n	8007a34 <USBD_Get_USB_Status+0x44>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBD_Get_USB_Status+0x1c>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a23 	.word	0x08007a23
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a2f 	.word	0x08007a2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a20:	e00b      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a22:	2303      	movs	r3, #3
 8007a24:	73fb      	strb	r3, [r7, #15]
    break;
 8007a26:	e008      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a2c:	e005      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	73fb      	strb	r3, [r7, #15]
    break;
 8007a32:	e002      	b.n	8007a3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a34:	2303      	movs	r3, #3
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	bf00      	nop
  }
  return usb_status;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <atoi>:
 8007a48:	220a      	movs	r2, #10
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	f000 b8b6 	b.w	8007bbc <strtol>

08007a50 <__errno>:
 8007a50:	4b01      	ldr	r3, [pc, #4]	; (8007a58 <__errno+0x8>)
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000188 	.word	0x20000188

08007a5c <__libc_init_array>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4d0d      	ldr	r5, [pc, #52]	; (8007a94 <__libc_init_array+0x38>)
 8007a60:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <__libc_init_array+0x3c>)
 8007a62:	1b64      	subs	r4, r4, r5
 8007a64:	10a4      	asrs	r4, r4, #2
 8007a66:	2600      	movs	r6, #0
 8007a68:	42a6      	cmp	r6, r4
 8007a6a:	d109      	bne.n	8007a80 <__libc_init_array+0x24>
 8007a6c:	4d0b      	ldr	r5, [pc, #44]	; (8007a9c <__libc_init_array+0x40>)
 8007a6e:	4c0c      	ldr	r4, [pc, #48]	; (8007aa0 <__libc_init_array+0x44>)
 8007a70:	f000 f8ae 	bl	8007bd0 <_init>
 8007a74:	1b64      	subs	r4, r4, r5
 8007a76:	10a4      	asrs	r4, r4, #2
 8007a78:	2600      	movs	r6, #0
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	d105      	bne.n	8007a8a <__libc_init_array+0x2e>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a84:	4798      	blx	r3
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7ee      	b.n	8007a68 <__libc_init_array+0xc>
 8007a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8e:	4798      	blx	r3
 8007a90:	3601      	adds	r6, #1
 8007a92:	e7f2      	b.n	8007a7a <__libc_init_array+0x1e>
 8007a94:	08007d74 	.word	0x08007d74
 8007a98:	08007d74 	.word	0x08007d74
 8007a9c:	08007d74 	.word	0x08007d74
 8007aa0:	08007d78 	.word	0x08007d78

08007aa4 <memset>:
 8007aa4:	4402      	add	r2, r0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d100      	bne.n	8007aae <memset+0xa>
 8007aac:	4770      	bx	lr
 8007aae:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab2:	e7f9      	b.n	8007aa8 <memset+0x4>

08007ab4 <_strtol_l.isra.0>:
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aba:	d001      	beq.n	8007ac0 <_strtol_l.isra.0+0xc>
 8007abc:	2b24      	cmp	r3, #36	; 0x24
 8007abe:	d906      	bls.n	8007ace <_strtol_l.isra.0+0x1a>
 8007ac0:	f7ff ffc6 	bl	8007a50 <__errno>
 8007ac4:	2316      	movs	r3, #22
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ace:	4f3a      	ldr	r7, [pc, #232]	; (8007bb8 <_strtol_l.isra.0+0x104>)
 8007ad0:	468e      	mov	lr, r1
 8007ad2:	4676      	mov	r6, lr
 8007ad4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ad8:	5de5      	ldrb	r5, [r4, r7]
 8007ada:	f015 0508 	ands.w	r5, r5, #8
 8007ade:	d1f8      	bne.n	8007ad2 <_strtol_l.isra.0+0x1e>
 8007ae0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ae2:	d134      	bne.n	8007b4e <_strtol_l.isra.0+0x9a>
 8007ae4:	f89e 4000 	ldrb.w	r4, [lr]
 8007ae8:	f04f 0801 	mov.w	r8, #1
 8007aec:	f106 0e02 	add.w	lr, r6, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d05c      	beq.n	8007bae <_strtol_l.isra.0+0xfa>
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d10c      	bne.n	8007b12 <_strtol_l.isra.0+0x5e>
 8007af8:	2c30      	cmp	r4, #48	; 0x30
 8007afa:	d10a      	bne.n	8007b12 <_strtol_l.isra.0+0x5e>
 8007afc:	f89e 4000 	ldrb.w	r4, [lr]
 8007b00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b04:	2c58      	cmp	r4, #88	; 0x58
 8007b06:	d14d      	bne.n	8007ba4 <_strtol_l.isra.0+0xf0>
 8007b08:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	f10e 0e02 	add.w	lr, lr, #2
 8007b12:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007b16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	fbbc f9f3 	udiv	r9, ip, r3
 8007b20:	4635      	mov	r5, r6
 8007b22:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b26:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b2a:	2f09      	cmp	r7, #9
 8007b2c:	d818      	bhi.n	8007b60 <_strtol_l.isra.0+0xac>
 8007b2e:	463c      	mov	r4, r7
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	dd24      	ble.n	8007b7e <_strtol_l.isra.0+0xca>
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	db1f      	blt.n	8007b78 <_strtol_l.isra.0+0xc4>
 8007b38:	45a9      	cmp	r9, r5
 8007b3a:	d31d      	bcc.n	8007b78 <_strtol_l.isra.0+0xc4>
 8007b3c:	d101      	bne.n	8007b42 <_strtol_l.isra.0+0x8e>
 8007b3e:	45a2      	cmp	sl, r4
 8007b40:	db1a      	blt.n	8007b78 <_strtol_l.isra.0+0xc4>
 8007b42:	fb05 4503 	mla	r5, r5, r3, r4
 8007b46:	2601      	movs	r6, #1
 8007b48:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007b4c:	e7eb      	b.n	8007b26 <_strtol_l.isra.0+0x72>
 8007b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8007b50:	bf08      	it	eq
 8007b52:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007b56:	46a8      	mov	r8, r5
 8007b58:	bf08      	it	eq
 8007b5a:	f106 0e02 	addeq.w	lr, r6, #2
 8007b5e:	e7c7      	b.n	8007af0 <_strtol_l.isra.0+0x3c>
 8007b60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007b64:	2f19      	cmp	r7, #25
 8007b66:	d801      	bhi.n	8007b6c <_strtol_l.isra.0+0xb8>
 8007b68:	3c37      	subs	r4, #55	; 0x37
 8007b6a:	e7e1      	b.n	8007b30 <_strtol_l.isra.0+0x7c>
 8007b6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007b70:	2f19      	cmp	r7, #25
 8007b72:	d804      	bhi.n	8007b7e <_strtol_l.isra.0+0xca>
 8007b74:	3c57      	subs	r4, #87	; 0x57
 8007b76:	e7db      	b.n	8007b30 <_strtol_l.isra.0+0x7c>
 8007b78:	f04f 36ff 	mov.w	r6, #4294967295
 8007b7c:	e7e4      	b.n	8007b48 <_strtol_l.isra.0+0x94>
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	da05      	bge.n	8007b8e <_strtol_l.isra.0+0xda>
 8007b82:	2322      	movs	r3, #34	; 0x22
 8007b84:	6003      	str	r3, [r0, #0]
 8007b86:	4665      	mov	r5, ip
 8007b88:	b942      	cbnz	r2, 8007b9c <_strtol_l.isra.0+0xe8>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	e79d      	b.n	8007aca <_strtol_l.isra.0+0x16>
 8007b8e:	f1b8 0f00 	cmp.w	r8, #0
 8007b92:	d000      	beq.n	8007b96 <_strtol_l.isra.0+0xe2>
 8007b94:	426d      	negs	r5, r5
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	d0f7      	beq.n	8007b8a <_strtol_l.isra.0+0xd6>
 8007b9a:	b10e      	cbz	r6, 8007ba0 <_strtol_l.isra.0+0xec>
 8007b9c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007ba0:	6011      	str	r1, [r2, #0]
 8007ba2:	e7f2      	b.n	8007b8a <_strtol_l.isra.0+0xd6>
 8007ba4:	2430      	movs	r4, #48	; 0x30
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1b3      	bne.n	8007b12 <_strtol_l.isra.0+0x5e>
 8007baa:	2308      	movs	r3, #8
 8007bac:	e7b1      	b.n	8007b12 <_strtol_l.isra.0+0x5e>
 8007bae:	2c30      	cmp	r4, #48	; 0x30
 8007bb0:	d0a4      	beq.n	8007afc <_strtol_l.isra.0+0x48>
 8007bb2:	230a      	movs	r3, #10
 8007bb4:	e7ad      	b.n	8007b12 <_strtol_l.isra.0+0x5e>
 8007bb6:	bf00      	nop
 8007bb8:	08007c69 	.word	0x08007c69

08007bbc <strtol>:
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	4802      	ldr	r0, [pc, #8]	; (8007bcc <strtol+0x10>)
 8007bc4:	6800      	ldr	r0, [r0, #0]
 8007bc6:	f7ff bf75 	b.w	8007ab4 <_strtol_l.isra.0>
 8007bca:	bf00      	nop
 8007bcc:	20000188 	.word	0x20000188

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
